using System;
using System.Collections;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Design;
using System.Globalization;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;
using System.Text;
using System.Windows.Forms.Layout;
using System.Windows.Forms.VisualStyles;
using Microsoft.Win32;

namespace System.Windows.Forms
{
	/// <summary>Displays data in a customizable grid.</summary>
	// Token: 0x0200018E RID: 398
	[ComVisible(true)]
	[ClassInterface(ClassInterfaceType.AutoDispatch)]
	[Designer("System.Windows.Forms.Design.DataGridViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	[DefaultEvent("CellContentClick")]
	[ComplexBindingProperties("DataSource", "DataMember")]
	[Docking(DockingBehavior.Ask)]
	[Editor("System.Windows.Forms.Design.DataGridViewComponentEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(ComponentEditor))]
	[SRDescription("DescriptionDataGridView")]
	public class DataGridView : Control, ISupportInitialize
	{
		/// <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataGridView" /> class.</summary>
		// Token: 0x0600186F RID: 6255 RVA: 0x00057EE0 File Offset: 0x000560E0
		public DataGridView()
		{
			base.SetStyle(ControlStyles.UserPaint | ControlStyles.Opaque | ControlStyles.UserMouse, true);
			base.SetStyle(ControlStyles.SupportsTransparentBackColor, false);
			base.SetState2(2048, true);
			this.dataGridViewState1 = new BitVector32(0);
			this.dataGridViewState2 = new BitVector32(0);
			this.dataGridViewOper = new BitVector32(0);
			this.dataGridViewState1[8388635] = true;
			this.dataGridViewState2[100664295] = true;
			this.displayedBandsInfo = new DataGridView.DisplayedBandsData();
			this.lstRows = new ArrayList();
			this.converters = new Hashtable(8);
			this.pens = new Hashtable(8);
			this.brushes = new Hashtable(10);
			this.gridPen = new Pen(DataGridView.DefaultGridColor);
			this.selectedBandIndexes = new DataGridViewIntLinkedList();
			this.individualSelectedCells = new DataGridViewCellLinkedList();
			this.individualReadOnlyCells = new DataGridViewCellLinkedList();
			this.advancedCellBorderStyle = new DataGridViewAdvancedBorderStyle(this, DataGridViewAdvancedCellBorderStyle.OutsetDouble, DataGridViewAdvancedCellBorderStyle.OutsetPartial, DataGridViewAdvancedCellBorderStyle.InsetDouble);
			this.advancedRowHeadersBorderStyle = new DataGridViewAdvancedBorderStyle(this);
			this.advancedColumnHeadersBorderStyle = new DataGridViewAdvancedBorderStyle(this);
			this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.Single;
			this.advancedRowHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.OutsetPartial;
			this.advancedColumnHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.OutsetPartial;
			this.borderStyle = BorderStyle.FixedSingle;
			this.dataGridViewState1[128] = true;
			this.selectionMode = DataGridViewSelectionMode.RowHeaderSelect;
			this.editMode = DataGridViewEditMode.EditOnKeystrokeOrF2;
			this.autoSizeRowsMode = DataGridViewAutoSizeRowsMode.None;
			this.autoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.None;
			this.columnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.EnableResizing;
			this.rowHeadersWidthSizeMode = DataGridViewRowHeadersWidthSizeMode.EnableResizing;
			this.clipboardCopyMode = DataGridViewClipboardCopyMode.EnableWithAutoHeaderText;
			this.layout = new DataGridView.LayoutData();
			this.layout.TopLeftHeader = Rectangle.Empty;
			this.layout.ColumnHeaders = Rectangle.Empty;
			this.layout.RowHeaders = Rectangle.Empty;
			this.layout.ColumnHeadersVisible = true;
			this.layout.RowHeadersVisible = true;
			this.layout.ClientRectangle = base.ClientRectangle;
			this.scrollBars = ScrollBars.Both;
			this.horizScrollBar.RightToLeft = RightToLeft.Inherit;
			this.horizScrollBar.AccessibleName = SR.GetString(AccessibilityImprovements.Level5 ? "DataGridView_AccHorizontalScrollBarAccNameLevel5" : "DataGridView_AccHorizontalScrollBarAccName");
			this.horizScrollBar.Top = base.ClientRectangle.Height - this.horizScrollBar.Height;
			this.horizScrollBar.Left = 0;
			this.horizScrollBar.Visible = false;
			this.horizScrollBar.Scroll += this.DataGridViewHScrolled;
			base.Controls.Add(this.horizScrollBar);
			this.vertScrollBar.Top = 0;
			this.vertScrollBar.AccessibleName = SR.GetString(AccessibilityImprovements.Level5 ? "DataGridView_AccVerticalScrollBarAccNameLevel5" : "DataGridView_AccVerticalScrollBarAccName");
			this.vertScrollBar.Left = base.ClientRectangle.Width - this.vertScrollBar.Width;
			this.vertScrollBar.Visible = false;
			this.vertScrollBar.Scroll += this.DataGridViewVScrolled;
			base.Controls.Add(this.vertScrollBar);
			this.ptCurrentCell = new Point(-1, -1);
			this.ptAnchorCell = new Point(-1, -1);
			this.ptMouseDownCell = new Point(-2, -2);
			this.ptMouseEnteredCell = new Point(-2, -2);
			this.ptToolTipCell = new Point(-1, -1);
			this.ptMouseDownGridCoord = new Point(-1, -1);
			this.sortOrder = SortOrder.None;
			this.lastMouseClickInfo.timeStamp = 0L;
			this.WireScrollBarsEvents();
			base.PerformLayout();
			this.toolTipControl = new DataGridView.DataGridViewToolTip(this);
			this.rowHeadersWidth = this.ScaleToCurrentDpi(41);
			this.columnHeadersHeight = this.ScaleToCurrentDpi(23);
			base.Invalidate();
		}

		// Token: 0x06001870 RID: 6256 RVA: 0x00058311 File Offset: 0x00056511
		private int ScaleToCurrentDpi(int value)
		{
			if (!DpiHelper.EnableDataGridViewControlHighDpiImprovements)
			{
				return value;
			}
			return base.LogicalToDeviceUnits(value);
		}

		/// <summary>Gets the border style for the upper-left cell in the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> that represents the style of the border of the upper-left cell in the <see cref="T:System.Windows.Forms.DataGridView" />.</returns>
		// Token: 0x1700057D RID: 1405
		// (get) Token: 0x06001871 RID: 6257 RVA: 0x00058324 File Offset: 0x00056524
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public virtual DataGridViewAdvancedBorderStyle AdjustedTopLeftHeaderBorderStyle
		{
			get
			{
				DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyle;
				if (this.ApplyVisualStylesToHeaderCells)
				{
					DataGridViewAdvancedCellBorderStyle all = this.AdvancedColumnHeadersBorderStyle.All;
					if (all != DataGridViewAdvancedCellBorderStyle.NotSet)
					{
						if (all != DataGridViewAdvancedCellBorderStyle.InsetDouble)
						{
							if (all - DataGridViewAdvancedCellBorderStyle.OutsetDouble <= 1)
							{
								dataGridViewAdvancedBorderStyle = new DataGridViewAdvancedBorderStyle();
								if (this.RightToLeftInternal)
								{
									dataGridViewAdvancedBorderStyle.LeftInternal = DataGridViewAdvancedCellBorderStyle.Outset;
								}
								else
								{
									dataGridViewAdvancedBorderStyle.LeftInternal = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
								}
								dataGridViewAdvancedBorderStyle.RightInternal = DataGridViewAdvancedCellBorderStyle.Outset;
								dataGridViewAdvancedBorderStyle.TopInternal = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
								dataGridViewAdvancedBorderStyle.BottomInternal = DataGridViewAdvancedCellBorderStyle.Outset;
							}
							else
							{
								dataGridViewAdvancedBorderStyle = this.AdvancedColumnHeadersBorderStyle;
							}
						}
						else
						{
							dataGridViewAdvancedBorderStyle = new DataGridViewAdvancedBorderStyle();
							if (this.RightToLeftInternal)
							{
								dataGridViewAdvancedBorderStyle.LeftInternal = DataGridViewAdvancedCellBorderStyle.Inset;
							}
							else
							{
								dataGridViewAdvancedBorderStyle.LeftInternal = DataGridViewAdvancedCellBorderStyle.InsetDouble;
							}
							dataGridViewAdvancedBorderStyle.RightInternal = DataGridViewAdvancedCellBorderStyle.Inset;
							dataGridViewAdvancedBorderStyle.TopInternal = DataGridViewAdvancedCellBorderStyle.InsetDouble;
							dataGridViewAdvancedBorderStyle.BottomInternal = DataGridViewAdvancedCellBorderStyle.Inset;
						}
					}
					else if ((!this.RightToLeftInternal && this.AdvancedColumnHeadersBorderStyle.Left == DataGridViewAdvancedCellBorderStyle.None) || (this.RightToLeftInternal && this.AdvancedColumnHeadersBorderStyle.Right == DataGridViewAdvancedCellBorderStyle.None))
					{
						dataGridViewAdvancedBorderStyle = new DataGridViewAdvancedBorderStyle();
						if (this.RightToLeftInternal)
						{
							dataGridViewAdvancedBorderStyle.LeftInternal = this.AdvancedColumnHeadersBorderStyle.Left;
							dataGridViewAdvancedBorderStyle.RightInternal = ((this.AdvancedRowHeadersBorderStyle.Right == DataGridViewAdvancedCellBorderStyle.OutsetDouble) ? DataGridViewAdvancedCellBorderStyle.Outset : this.AdvancedRowHeadersBorderStyle.Right);
						}
						else
						{
							dataGridViewAdvancedBorderStyle.LeftInternal = this.AdvancedRowHeadersBorderStyle.Left;
							dataGridViewAdvancedBorderStyle.RightInternal = this.AdvancedColumnHeadersBorderStyle.Right;
						}
						dataGridViewAdvancedBorderStyle.TopInternal = this.AdvancedColumnHeadersBorderStyle.Top;
						dataGridViewAdvancedBorderStyle.BottomInternal = this.AdvancedColumnHeadersBorderStyle.Bottom;
					}
					else
					{
						dataGridViewAdvancedBorderStyle = this.AdvancedColumnHeadersBorderStyle;
					}
				}
				else
				{
					DataGridViewAdvancedCellBorderStyle all2 = this.AdvancedColumnHeadersBorderStyle.All;
					if (all2 != DataGridViewAdvancedCellBorderStyle.NotSet)
					{
						if (all2 != DataGridViewAdvancedCellBorderStyle.InsetDouble)
						{
							if (all2 - DataGridViewAdvancedCellBorderStyle.OutsetDouble <= 1)
							{
								dataGridViewAdvancedBorderStyle = new DataGridViewAdvancedBorderStyle();
								dataGridViewAdvancedBorderStyle.LeftInternal = (this.RightToLeftInternal ? DataGridViewAdvancedCellBorderStyle.Outset : DataGridViewAdvancedCellBorderStyle.OutsetDouble);
								dataGridViewAdvancedBorderStyle.RightInternal = (this.RightToLeftInternal ? DataGridViewAdvancedCellBorderStyle.OutsetDouble : DataGridViewAdvancedCellBorderStyle.Outset);
								dataGridViewAdvancedBorderStyle.TopInternal = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
								dataGridViewAdvancedBorderStyle.BottomInternal = DataGridViewAdvancedCellBorderStyle.Outset;
							}
							else
							{
								dataGridViewAdvancedBorderStyle = this.AdvancedColumnHeadersBorderStyle;
							}
						}
						else
						{
							dataGridViewAdvancedBorderStyle = new DataGridViewAdvancedBorderStyle();
							dataGridViewAdvancedBorderStyle.LeftInternal = (this.RightToLeftInternal ? DataGridViewAdvancedCellBorderStyle.Inset : DataGridViewAdvancedCellBorderStyle.InsetDouble);
							dataGridViewAdvancedBorderStyle.RightInternal = (this.RightToLeftInternal ? DataGridViewAdvancedCellBorderStyle.InsetDouble : DataGridViewAdvancedCellBorderStyle.Inset);
							dataGridViewAdvancedBorderStyle.TopInternal = DataGridViewAdvancedCellBorderStyle.InsetDouble;
							dataGridViewAdvancedBorderStyle.BottomInternal = DataGridViewAdvancedCellBorderStyle.Inset;
						}
					}
					else if ((!this.RightToLeftInternal && this.AdvancedColumnHeadersBorderStyle.Left == DataGridViewAdvancedCellBorderStyle.None) || (this.RightToLeftInternal && this.AdvancedColumnHeadersBorderStyle.Right == DataGridViewAdvancedCellBorderStyle.None))
					{
						dataGridViewAdvancedBorderStyle = new DataGridViewAdvancedBorderStyle();
						if (this.RightToLeftInternal)
						{
							dataGridViewAdvancedBorderStyle.LeftInternal = this.AdvancedColumnHeadersBorderStyle.Left;
							dataGridViewAdvancedBorderStyle.RightInternal = this.AdvancedRowHeadersBorderStyle.Right;
						}
						else
						{
							dataGridViewAdvancedBorderStyle.LeftInternal = this.AdvancedRowHeadersBorderStyle.Left;
							dataGridViewAdvancedBorderStyle.RightInternal = this.AdvancedColumnHeadersBorderStyle.Right;
						}
						dataGridViewAdvancedBorderStyle.TopInternal = this.AdvancedColumnHeadersBorderStyle.Top;
						dataGridViewAdvancedBorderStyle.BottomInternal = this.AdvancedColumnHeadersBorderStyle.Bottom;
					}
					else
					{
						dataGridViewAdvancedBorderStyle = this.AdvancedColumnHeadersBorderStyle;
					}
				}
				return dataGridViewAdvancedBorderStyle;
			}
		}

		/// <summary>Gets the border style of the cells in the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> that represents the border style of the cells in the <see cref="T:System.Windows.Forms.DataGridView" />.</returns>
		// Token: 0x1700057E RID: 1406
		// (get) Token: 0x06001872 RID: 6258 RVA: 0x000585EF File Offset: 0x000567EF
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public DataGridViewAdvancedBorderStyle AdvancedCellBorderStyle
		{
			get
			{
				return this.advancedCellBorderStyle;
			}
		}

		/// <summary>Gets the border style of the column header cells in the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> that represents the border style of the <see cref="T:System.Windows.Forms.DataGridViewColumnHeaderCell" /> objects in the <see cref="T:System.Windows.Forms.DataGridView" />.</returns>
		// Token: 0x1700057F RID: 1407
		// (get) Token: 0x06001873 RID: 6259 RVA: 0x000585F7 File Offset: 0x000567F7
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public DataGridViewAdvancedBorderStyle AdvancedColumnHeadersBorderStyle
		{
			get
			{
				return this.advancedColumnHeadersBorderStyle;
			}
		}

		/// <summary>Gets the border style of the row header cells in the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> that represents the border style of the <see cref="T:System.Windows.Forms.DataGridViewRowHeaderCell" /> objects in the <see cref="T:System.Windows.Forms.DataGridView" />.</returns>
		// Token: 0x17000580 RID: 1408
		// (get) Token: 0x06001874 RID: 6260 RVA: 0x000585FF File Offset: 0x000567FF
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public DataGridViewAdvancedBorderStyle AdvancedRowHeadersBorderStyle
		{
			get
			{
				return this.advancedRowHeadersBorderStyle;
			}
		}

		/// <summary>Gets or sets a value indicating whether the option to add rows is displayed to the user.</summary>
		/// <returns>
		///   <see langword="true" /> if the add-row option is displayed to the user; otherwise <see langword="false" />. The default is <see langword="true" />.</returns>
		// Token: 0x17000581 RID: 1409
		// (get) Token: 0x06001875 RID: 6261 RVA: 0x00058607 File Offset: 0x00056807
		// (set) Token: 0x06001876 RID: 6262 RVA: 0x00058615 File Offset: 0x00056815
		[DefaultValue(true)]
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_AllowUserToAddRowsDescr")]
		public bool AllowUserToAddRows
		{
			get
			{
				return this.dataGridViewState1[1];
			}
			set
			{
				if (this.AllowUserToAddRows != value)
				{
					this.dataGridViewState1[1] = value;
					if (this.DataSource != null)
					{
						this.dataConnection.ResetCachedAllowUserToAddRowsInternal();
					}
					this.OnAllowUserToAddRowsChanged(EventArgs.Empty);
				}
			}
		}

		// Token: 0x17000582 RID: 1410
		// (get) Token: 0x06001877 RID: 6263 RVA: 0x0005864B File Offset: 0x0005684B
		internal bool AllowUserToAddRowsInternal
		{
			get
			{
				if (this.DataSource == null)
				{
					return this.AllowUserToAddRows;
				}
				return this.AllowUserToAddRows && this.dataConnection.AllowAdd;
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.AllowUserToAddRows" /> property changes.</summary>
		// Token: 0x14000105 RID: 261
		// (add) Token: 0x06001878 RID: 6264 RVA: 0x00058671 File Offset: 0x00056871
		// (remove) Token: 0x06001879 RID: 6265 RVA: 0x00058684 File Offset: 0x00056884
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewOnAllowUserToAddRowsChangedDescr")]
		public event EventHandler AllowUserToAddRowsChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTOADDROWSCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTOADDROWSCHANGED, value);
			}
		}

		/// <summary>Gets or sets a value indicating whether the user is allowed to delete rows from the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <returns>
		///   <see langword="true" /> if the user can delete rows; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
		// Token: 0x17000583 RID: 1411
		// (get) Token: 0x0600187A RID: 6266 RVA: 0x00058697 File Offset: 0x00056897
		// (set) Token: 0x0600187B RID: 6267 RVA: 0x000586A5 File Offset: 0x000568A5
		[DefaultValue(true)]
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_AllowUserToDeleteRowsDescr")]
		public bool AllowUserToDeleteRows
		{
			get
			{
				return this.dataGridViewState1[2];
			}
			set
			{
				if (this.AllowUserToDeleteRows != value)
				{
					this.dataGridViewState1[2] = value;
					this.OnAllowUserToDeleteRowsChanged(EventArgs.Empty);
				}
			}
		}

		// Token: 0x17000584 RID: 1412
		// (get) Token: 0x0600187C RID: 6268 RVA: 0x000586C8 File Offset: 0x000568C8
		internal bool AllowUserToDeleteRowsInternal
		{
			get
			{
				if (this.DataSource == null)
				{
					return this.AllowUserToDeleteRows;
				}
				return this.AllowUserToDeleteRows && this.dataConnection.AllowRemove;
			}
		}

		/// <summary>Occurs when the value of the <see cref="E:System.Windows.Forms.DataGridView.AllowUserToDeleteRowsChanged" /> property changes.</summary>
		// Token: 0x14000106 RID: 262
		// (add) Token: 0x0600187D RID: 6269 RVA: 0x000586EE File Offset: 0x000568EE
		// (remove) Token: 0x0600187E RID: 6270 RVA: 0x00058701 File Offset: 0x00056901
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewOnAllowUserToDeleteRowsChangedDescr")]
		public event EventHandler AllowUserToDeleteRowsChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTODELETEROWSCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTODELETEROWSCHANGED, value);
			}
		}

		/// <summary>Gets or sets a value indicating whether manual column repositioning is enabled.</summary>
		/// <returns>
		///   <see langword="true" /> if the user can change the column order; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
		// Token: 0x17000585 RID: 1413
		// (get) Token: 0x0600187F RID: 6271 RVA: 0x00058714 File Offset: 0x00056914
		// (set) Token: 0x06001880 RID: 6272 RVA: 0x00058722 File Offset: 0x00056922
		[DefaultValue(false)]
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_AllowUserToOrderColumnsDescr")]
		public bool AllowUserToOrderColumns
		{
			get
			{
				return this.dataGridViewState1[4];
			}
			set
			{
				if (this.AllowUserToOrderColumns != value)
				{
					this.dataGridViewState1[4] = value;
					this.OnAllowUserToOrderColumnsChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.AllowUserToOrderColumns" /> property changes.</summary>
		// Token: 0x14000107 RID: 263
		// (add) Token: 0x06001881 RID: 6273 RVA: 0x00058745 File Offset: 0x00056945
		// (remove) Token: 0x06001882 RID: 6274 RVA: 0x00058758 File Offset: 0x00056958
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewOnAllowUserToOrderColumnsChangedDescr")]
		public event EventHandler AllowUserToOrderColumnsChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTOORDERCOLUMNSCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTOORDERCOLUMNSCHANGED, value);
			}
		}

		/// <summary>Gets or sets a value indicating whether users can resize columns.</summary>
		/// <returns>
		///   <see langword="true" /> if users can resize columns; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
		// Token: 0x17000586 RID: 1414
		// (get) Token: 0x06001883 RID: 6275 RVA: 0x0005876B File Offset: 0x0005696B
		// (set) Token: 0x06001884 RID: 6276 RVA: 0x00058779 File Offset: 0x00056979
		[DefaultValue(true)]
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_AllowUserToResizeColumnsDescr")]
		public bool AllowUserToResizeColumns
		{
			get
			{
				return this.dataGridViewState2[2];
			}
			set
			{
				if (this.AllowUserToResizeColumns != value)
				{
					this.dataGridViewState2[2] = value;
					this.OnAllowUserToResizeColumnsChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.AllowUserToResizeColumns" /> property changes.</summary>
		// Token: 0x14000108 RID: 264
		// (add) Token: 0x06001885 RID: 6277 RVA: 0x0005879C File Offset: 0x0005699C
		// (remove) Token: 0x06001886 RID: 6278 RVA: 0x000587AF File Offset: 0x000569AF
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewOnAllowUserToResizeColumnsChangedDescr")]
		public event EventHandler AllowUserToResizeColumnsChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTORESIZECOLUMNSCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTORESIZECOLUMNSCHANGED, value);
			}
		}

		/// <summary>Gets or sets a value indicating whether users can resize rows.</summary>
		/// <returns>
		///   <see langword="true" /> if all the rows are resizable; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
		// Token: 0x17000587 RID: 1415
		// (get) Token: 0x06001887 RID: 6279 RVA: 0x000587C2 File Offset: 0x000569C2
		// (set) Token: 0x06001888 RID: 6280 RVA: 0x000587D0 File Offset: 0x000569D0
		[DefaultValue(true)]
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_AllowUserToResizeRowsDescr")]
		public bool AllowUserToResizeRows
		{
			get
			{
				return this.dataGridViewState2[4];
			}
			set
			{
				if (this.AllowUserToResizeRows != value)
				{
					this.dataGridViewState2[4] = value;
					this.OnAllowUserToResizeRowsChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.AllowUserToResizeRows" /> property changes.</summary>
		// Token: 0x14000109 RID: 265
		// (add) Token: 0x06001889 RID: 6281 RVA: 0x000587F3 File Offset: 0x000569F3
		// (remove) Token: 0x0600188A RID: 6282 RVA: 0x00058806 File Offset: 0x00056A06
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewOnAllowUserToResizeRowsChangedDescr")]
		public event EventHandler AllowUserToResizeRowsChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTORESIZEROWSCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTORESIZEROWSCHANGED, value);
			}
		}

		/// <summary>Gets or sets the default cell style applied to odd-numbered rows of the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> to apply to the odd-numbered rows.</returns>
		// Token: 0x17000588 RID: 1416
		// (get) Token: 0x0600188B RID: 6283 RVA: 0x00058819 File Offset: 0x00056A19
		// (set) Token: 0x0600188C RID: 6284 RVA: 0x00058848 File Offset: 0x00056A48
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridView_AlternatingRowsDefaultCellStyleDescr")]
		public DataGridViewCellStyle AlternatingRowsDefaultCellStyle
		{
			get
			{
				if (this.alternatingRowsDefaultCellStyle == null)
				{
					this.alternatingRowsDefaultCellStyle = new DataGridViewCellStyle();
					this.alternatingRowsDefaultCellStyle.AddScope(this, DataGridViewCellStyleScopes.AlternatingRows);
				}
				return this.alternatingRowsDefaultCellStyle;
			}
			set
			{
				DataGridViewCellStyle dataGridViewCellStyle = this.AlternatingRowsDefaultCellStyle;
				dataGridViewCellStyle.RemoveScope(DataGridViewCellStyleScopes.AlternatingRows);
				this.alternatingRowsDefaultCellStyle = value;
				if (value != null)
				{
					this.alternatingRowsDefaultCellStyle.AddScope(this, DataGridViewCellStyleScopes.AlternatingRows);
				}
				DataGridViewCellStyleDifferences differencesFrom = dataGridViewCellStyle.GetDifferencesFrom(this.AlternatingRowsDefaultCellStyle);
				if (differencesFrom != DataGridViewCellStyleDifferences.None)
				{
					this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = differencesFrom == DataGridViewCellStyleDifferences.AffectPreferredSize;
					this.OnAlternatingRowsDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyle" /> property changes.</summary>
		// Token: 0x1400010A RID: 266
		// (add) Token: 0x0600188D RID: 6285 RVA: 0x000588AD File Offset: 0x00056AAD
		// (remove) Token: 0x0600188E RID: 6286 RVA: 0x000588C0 File Offset: 0x00056AC0
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewAlternatingRowsDefaultCellStyleChangedDescr")]
		public event EventHandler AlternatingRowsDefaultCellStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWALTERNATINGROWSDEFAULTCELLSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWALTERNATINGROWSDEFAULTCELLSTYLECHANGED, value);
			}
		}

		// Token: 0x17000589 RID: 1417
		// (get) Token: 0x0600188F RID: 6287 RVA: 0x000588D3 File Offset: 0x00056AD3
		internal bool ApplyVisualStylesToInnerCells
		{
			get
			{
				return Application.RenderWithVisualStyles;
			}
		}

		// Token: 0x1700058A RID: 1418
		// (get) Token: 0x06001890 RID: 6288 RVA: 0x000588DA File Offset: 0x00056ADA
		internal bool ApplyVisualStylesToHeaderCells
		{
			get
			{
				return Application.RenderWithVisualStyles && this.EnableHeadersVisualStyles;
			}
		}

		/// <summary>Gets or sets a value indicating whether columns are created automatically when the <see cref="P:System.Windows.Forms.DataGridView.DataSource" /> or <see cref="P:System.Windows.Forms.DataGridView.DataMember" /> properties are set.</summary>
		/// <returns>
		///   <see langword="true" /> if the columns should be created automatically; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
		// Token: 0x1700058B RID: 1419
		// (get) Token: 0x06001891 RID: 6289 RVA: 0x000588EB File Offset: 0x00056AEB
		// (set) Token: 0x06001892 RID: 6290 RVA: 0x000588FD File Offset: 0x00056AFD
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[DefaultValue(true)]
		public bool AutoGenerateColumns
		{
			get
			{
				return this.dataGridViewState1[8388608];
			}
			set
			{
				if (this.dataGridViewState1[8388608] != value)
				{
					this.dataGridViewState1[8388608] = value;
					this.OnAutoGenerateColumnsChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="E:System.Windows.Forms.DataGridView.AutoGenerateColumnsChanged" /> property changes.</summary>
		// Token: 0x1400010B RID: 267
		// (add) Token: 0x06001893 RID: 6291 RVA: 0x0005892E File Offset: 0x00056B2E
		// (remove) Token: 0x06001894 RID: 6292 RVA: 0x00058941 File Offset: 0x00056B41
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public event EventHandler AutoGenerateColumnsChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWAUTOGENERATECOLUMNSCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWAUTOGENERATECOLUMNSCHANGED, value);
			}
		}

		/// <summary>This property is not relevant for this class.</summary>
		/// <returns>
		///   <see langword="true" /> if enabled; otherwise, <see langword="false" />.</returns>
		// Token: 0x1700058C RID: 1420
		// (get) Token: 0x06001895 RID: 6293 RVA: 0x00058954 File Offset: 0x00056B54
		// (set) Token: 0x06001896 RID: 6294 RVA: 0x00058966 File Offset: 0x00056B66
		public override bool AutoSize
		{
			get
			{
				return this.dataGridViewState1[1073741824];
			}
			set
			{
				base.AutoSize = value;
				this.dataGridViewState1[1073741824] = value;
			}
		}

		/// <summary>Gets or sets a value indicating how column widths are determined.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" /> value. The default is <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.None" />.</returns>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" /> value.</exception>
		/// <exception cref="T:System.InvalidOperationException">The specified value when setting this property is <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.ColumnHeader" />, column headers are hidden, and at least one visible column has an <see cref="P:System.Windows.Forms.DataGridViewColumn.AutoSizeMode" /> property value of <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.NotSet" />.  
		///  -or-  
		///  The specified value when setting this property is <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.Fill" /> and at least one visible column with an <see cref="P:System.Windows.Forms.DataGridViewColumn.AutoSizeMode" /> property value of <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.NotSet" /> is frozen.</exception>
		// Token: 0x1700058D RID: 1421
		// (get) Token: 0x06001897 RID: 6295 RVA: 0x00058980 File Offset: 0x00056B80
		// (set) Token: 0x06001898 RID: 6296 RVA: 0x00058988 File Offset: 0x00056B88
		[DefaultValue(DataGridViewAutoSizeColumnsMode.None)]
		[SRCategory("CatLayout")]
		[SRDescription("DataGridView_AutoSizeColumnsModeDescr")]
		public DataGridViewAutoSizeColumnsMode AutoSizeColumnsMode
		{
			get
			{
				return this.autoSizeColumnsMode;
			}
			set
			{
				switch (value)
				{
				case DataGridViewAutoSizeColumnsMode.None:
				case DataGridViewAutoSizeColumnsMode.ColumnHeader:
				case DataGridViewAutoSizeColumnsMode.AllCellsExceptHeader:
				case DataGridViewAutoSizeColumnsMode.AllCells:
				case DataGridViewAutoSizeColumnsMode.DisplayedCellsExceptHeader:
				case DataGridViewAutoSizeColumnsMode.DisplayedCells:
					goto IL_4B;
				case (DataGridViewAutoSizeColumnsMode)3:
				case (DataGridViewAutoSizeColumnsMode)5:
				case (DataGridViewAutoSizeColumnsMode)7:
				case (DataGridViewAutoSizeColumnsMode)9:
					break;
				default:
					if (value == DataGridViewAutoSizeColumnsMode.Fill)
					{
						goto IL_4B;
					}
					break;
				}
				throw new InvalidEnumArgumentException("value", (int)value, typeof(DataGridViewAutoSizeColumnsMode));
				IL_4B:
				if (this.autoSizeColumnsMode != value)
				{
					foreach (object obj in this.Columns)
					{
						DataGridViewColumn dataGridViewColumn = (DataGridViewColumn)obj;
						if (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.NotSet && dataGridViewColumn.Visible)
						{
							if (value == DataGridViewAutoSizeColumnsMode.ColumnHeader && !this.ColumnHeadersVisible)
							{
								throw new InvalidOperationException(SR.GetString("DataGridView_CannotAutoSizeColumnsInvisibleColumnHeaders"));
							}
							if (value == DataGridViewAutoSizeColumnsMode.Fill && dataGridViewColumn.Frozen)
							{
								throw new InvalidOperationException(SR.GetString("DataGridView_CannotAutoFillFrozenColumns"));
							}
						}
					}
					DataGridViewAutoSizeColumnMode[] array = new DataGridViewAutoSizeColumnMode[this.Columns.Count];
					foreach (object obj2 in this.Columns)
					{
						DataGridViewColumn dataGridViewColumn2 = (DataGridViewColumn)obj2;
						array[dataGridViewColumn2.Index] = dataGridViewColumn2.InheritedAutoSizeMode;
					}
					DataGridViewAutoSizeColumnsModeEventArgs dataGridViewAutoSizeColumnsModeEventArgs = new DataGridViewAutoSizeColumnsModeEventArgs(array);
					this.autoSizeColumnsMode = value;
					this.OnAutoSizeColumnsModeChanged(dataGridViewAutoSizeColumnsModeEventArgs);
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.AutoSizeColumnsMode" /> property changes.</summary>
		// Token: 0x1400010C RID: 268
		// (add) Token: 0x06001899 RID: 6297 RVA: 0x00058AFC File Offset: 0x00056CFC
		// (remove) Token: 0x0600189A RID: 6298 RVA: 0x00058B0F File Offset: 0x00056D0F
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewAutoSizeColumnsModeChangedDescr")]
		public event DataGridViewAutoSizeColumnsModeEventHandler AutoSizeColumnsModeChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWAUTOSIZECOLUMNSMODECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWAUTOSIZECOLUMNSMODECHANGED, value);
			}
		}

		/// <summary>Gets or sets a value indicating how row heights are determined.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> value indicating the sizing mode. The default is <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.None" />.</returns>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> value.</exception>
		/// <exception cref="T:System.InvalidOperationException">The specified value when setting this property is <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.AllHeaders" /> or <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.DisplayedHeaders" /> and row headers are hidden.</exception>
		// Token: 0x1700058E RID: 1422
		// (get) Token: 0x0600189B RID: 6299 RVA: 0x00058B22 File Offset: 0x00056D22
		// (set) Token: 0x0600189C RID: 6300 RVA: 0x00058B2C File Offset: 0x00056D2C
		[DefaultValue(DataGridViewAutoSizeRowsMode.None)]
		[SRCategory("CatLayout")]
		[SRDescription("DataGridView_AutoSizeRowsModeDescr")]
		public DataGridViewAutoSizeRowsMode AutoSizeRowsMode
		{
			get
			{
				return this.autoSizeRowsMode;
			}
			set
			{
				switch (value)
				{
				case DataGridViewAutoSizeRowsMode.None:
				case DataGridViewAutoSizeRowsMode.AllHeaders:
				case DataGridViewAutoSizeRowsMode.AllCellsExceptHeaders:
				case DataGridViewAutoSizeRowsMode.AllCells:
				case DataGridViewAutoSizeRowsMode.DisplayedHeaders:
				case DataGridViewAutoSizeRowsMode.DisplayedCellsExceptHeaders:
				case DataGridViewAutoSizeRowsMode.DisplayedCells:
					if ((value == DataGridViewAutoSizeRowsMode.AllHeaders || value == DataGridViewAutoSizeRowsMode.DisplayedHeaders) && !this.RowHeadersVisible)
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_CannotAutoSizeRowsInvisibleRowHeader"));
					}
					if (this.autoSizeRowsMode != value)
					{
						DataGridViewAutoSizeModeEventArgs dataGridViewAutoSizeModeEventArgs = new DataGridViewAutoSizeModeEventArgs(this.autoSizeRowsMode > DataGridViewAutoSizeRowsMode.None);
						this.autoSizeRowsMode = value;
						this.OnAutoSizeRowsModeChanged(dataGridViewAutoSizeModeEventArgs);
					}
					return;
				default:
					throw new InvalidEnumArgumentException("value", (int)value, typeof(DataGridViewAutoSizeRowsMode));
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> property changes.</summary>
		// Token: 0x1400010D RID: 269
		// (add) Token: 0x0600189D RID: 6301 RVA: 0x00058BCC File Offset: 0x00056DCC
		// (remove) Token: 0x0600189E RID: 6302 RVA: 0x00058BDF File Offset: 0x00056DDF
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewAutoSizeRowsModeChangedDescr")]
		public event DataGridViewAutoSizeModeEventHandler AutoSizeRowsModeChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWAUTOSIZEROWSMODECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWAUTOSIZEROWSMODECHANGED, value);
			}
		}

		/// <summary>Gets or sets the background color for the control.</summary>
		/// <returns>A <see cref="T:System.Drawing.Color" /> that represents the background color of the control. The default is the value of the <see cref="P:System.Windows.Forms.Control.DefaultBackColor" /> property.</returns>
		// Token: 0x1700058F RID: 1423
		// (get) Token: 0x0600189F RID: 6303 RVA: 0x0001A049 File Offset: 0x00018249
		// (set) Token: 0x060018A0 RID: 6304 RVA: 0x00012D84 File Offset: 0x00010F84
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public override Color BackColor
		{
			get
			{
				return base.BackColor;
			}
			set
			{
				base.BackColor = value;
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.BackColor" /> property changes.</summary>
		// Token: 0x1400010E RID: 270
		// (add) Token: 0x060018A1 RID: 6305 RVA: 0x00058BF2 File Offset: 0x00056DF2
		// (remove) Token: 0x060018A2 RID: 6306 RVA: 0x00058BFB File Offset: 0x00056DFB
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new event EventHandler BackColorChanged
		{
			add
			{
				base.BackColorChanged += value;
			}
			remove
			{
				base.BackColorChanged -= value;
			}
		}

		// Token: 0x17000590 RID: 1424
		// (get) Token: 0x060018A3 RID: 6307 RVA: 0x00058C04 File Offset: 0x00056E04
		internal SolidBrush BackgroundBrush
		{
			get
			{
				return this.backgroundBrush;
			}
		}

		/// <summary>Gets or sets the background color of the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <returns>A <see cref="T:System.Drawing.Color" /> that represents the background color of the <see cref="T:System.Windows.Forms.DataGridView" />. The default is <see cref="P:System.Drawing.SystemColors.AppWorkspace" />.</returns>
		/// <exception cref="T:System.ArgumentException">The specified value when setting this property is <see cref="F:System.Drawing.Color.Empty" />.  
		///  -or-  
		///  The specified value when setting this property has a <see cref="P:System.Drawing.Color.A" /> property value that is less that 255.</exception>
		// Token: 0x17000591 RID: 1425
		// (get) Token: 0x060018A4 RID: 6308 RVA: 0x00058C0C File Offset: 0x00056E0C
		// (set) Token: 0x060018A5 RID: 6309 RVA: 0x00058C1C File Offset: 0x00056E1C
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridViewBackgroundColorDescr")]
		public Color BackgroundColor
		{
			get
			{
				return this.backgroundBrush.Color;
			}
			set
			{
				if (value.IsEmpty)
				{
					throw new ArgumentException(SR.GetString("DataGridView_EmptyColor", new object[] { "BackgroundColor" }));
				}
				if (value.A < 255)
				{
					throw new ArgumentException(SR.GetString("DataGridView_TransparentColor", new object[] { "BackgroundColor" }));
				}
				if (!value.Equals(this.backgroundBrush.Color))
				{
					this.backgroundBrush = new SolidBrush(value);
					this.OnBackgroundColorChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.BackgroundColor" /> property changes.</summary>
		// Token: 0x1400010F RID: 271
		// (add) Token: 0x060018A6 RID: 6310 RVA: 0x00058CB2 File Offset: 0x00056EB2
		// (remove) Token: 0x060018A7 RID: 6311 RVA: 0x00058CC5 File Offset: 0x00056EC5
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewBackgroundColorChangedDescr")]
		public event EventHandler BackgroundColorChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWBACKGROUNDCOLORCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWBACKGROUNDCOLORCHANGED, value);
			}
		}

		/// <summary>Gets or sets the background image displayed in the control.</summary>
		/// <returns>An <see cref="T:System.Drawing.Image" /> that represents the image to display in the background of the control.</returns>
		// Token: 0x17000592 RID: 1426
		// (get) Token: 0x060018A8 RID: 6312 RVA: 0x0001187C File Offset: 0x0000FA7C
		// (set) Token: 0x060018A9 RID: 6313 RVA: 0x00011884 File Offset: 0x0000FA84
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public override Image BackgroundImage
		{
			get
			{
				return base.BackgroundImage;
			}
			set
			{
				base.BackgroundImage = value;
			}
		}

		/// <summary>Gets or sets the background image layout as defined in the <see cref="T:System.Windows.Forms.ImageLayout" /> enumeration.</summary>
		/// <returns>An <see cref="T:System.Windows.Forms.ImageLayout" /> value indicating the background image layout. The default is <see cref="F:System.Windows.Forms.ImageLayout.Tile" />.</returns>
		// Token: 0x17000593 RID: 1427
		// (get) Token: 0x060018AA RID: 6314 RVA: 0x0001189F File Offset: 0x0000FA9F
		// (set) Token: 0x060018AB RID: 6315 RVA: 0x000118A7 File Offset: 0x0000FAA7
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public override ImageLayout BackgroundImageLayout
		{
			get
			{
				return base.BackgroundImageLayout;
			}
			set
			{
				base.BackgroundImageLayout = value;
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.BackgroundImage" /> property changes.</summary>
		// Token: 0x14000110 RID: 272
		// (add) Token: 0x060018AC RID: 6316 RVA: 0x0001188D File Offset: 0x0000FA8D
		// (remove) Token: 0x060018AD RID: 6317 RVA: 0x00011896 File Offset: 0x0000FA96
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new event EventHandler BackgroundImageChanged
		{
			add
			{
				base.BackgroundImageChanged += value;
			}
			remove
			{
				base.BackgroundImageChanged -= value;
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridView.BackgroundImageLayout" /> property changes.</summary>
		// Token: 0x14000111 RID: 273
		// (add) Token: 0x060018AE RID: 6318 RVA: 0x000118B0 File Offset: 0x0000FAB0
		// (remove) Token: 0x060018AF RID: 6319 RVA: 0x000118B9 File Offset: 0x0000FAB9
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new event EventHandler BackgroundImageLayoutChanged
		{
			add
			{
				base.BackgroundImageLayoutChanged += value;
			}
			remove
			{
				base.BackgroundImageLayoutChanged -= value;
			}
		}

		// Token: 0x060018B0 RID: 6320 RVA: 0x00058CD8 File Offset: 0x00056ED8
		private bool ShouldSerializeBackgroundColor()
		{
			return !this.BackgroundColor.Equals(DataGridView.DefaultBackgroundBrush.Color);
		}

		/// <summary>Gets or sets the border style for the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <returns>One of the <see cref="T:System.Windows.Forms.BorderStyle" /> values. The default is <see cref="F:System.Windows.Forms.BorderStyle.FixedSingle" />.</returns>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.BorderStyle" /> value.</exception>
		// Token: 0x17000594 RID: 1428
		// (get) Token: 0x060018B1 RID: 6321 RVA: 0x00058D0B File Offset: 0x00056F0B
		// (set) Token: 0x060018B2 RID: 6322 RVA: 0x00058D14 File Offset: 0x00056F14
		[DefaultValue(BorderStyle.FixedSingle)]
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridView_BorderStyleDescr")]
		public BorderStyle BorderStyle
		{
			get
			{
				return this.borderStyle;
			}
			set
			{
				if (!ClientUtils.IsEnumValid(value, (int)value, 0, 2))
				{
					throw new InvalidEnumArgumentException("value", (int)value, typeof(BorderStyle));
				}
				if (this.borderStyle != value)
				{
					using (LayoutTransaction.CreateTransactionIf(this.AutoSize, this.ParentInternal, this, PropertyNames.BorderStyle))
					{
						this.borderStyle = value;
						if (!this.AutoSize)
						{
							this.PerformLayoutPrivate(false, false, true, true);
						}
						base.Invalidate();
						this.OnBorderStyleChanged(EventArgs.Empty);
					}
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.BorderStyle" /> property changes.</summary>
		// Token: 0x14000112 RID: 274
		// (add) Token: 0x060018B3 RID: 6323 RVA: 0x00058DB0 File Offset: 0x00056FB0
		// (remove) Token: 0x060018B4 RID: 6324 RVA: 0x00058DC3 File Offset: 0x00056FC3
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewBorderStyleChangedDescr")]
		public event EventHandler BorderStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWBORDERSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWBORDERSTYLECHANGED, value);
			}
		}

		// Token: 0x17000595 RID: 1429
		// (get) Token: 0x060018B5 RID: 6325 RVA: 0x00058DD8 File Offset: 0x00056FD8
		private int BorderWidth
		{
			get
			{
				if (this.BorderStyle == BorderStyle.Fixed3D)
				{
					if (!Application.RenderWithVisualStyles)
					{
						return SystemInformation.Border3DSize.Width;
					}
					return 1;
				}
				else
				{
					if (this.BorderStyle == BorderStyle.FixedSingle)
					{
						return 1;
					}
					return 0;
				}
			}
		}

		/// <summary>Gets a value indicating whether the <see cref="P:System.Windows.Forms.Control.ImeMode" /> property can be set to an active value, to enable IME support.</summary>
		/// <returns>
		///   <see langword="true" /> if there is an editable cell selected; otherwise, <see langword="false" />.</returns>
		// Token: 0x17000596 RID: 1430
		// (get) Token: 0x060018B6 RID: 6326 RVA: 0x00058E14 File Offset: 0x00057014
		protected override bool CanEnableIme
		{
			get
			{
				bool flag = false;
				if (this.ptCurrentCell.X != -1 && this.ColumnEditable(this.ptCurrentCell.X))
				{
					DataGridViewCell currentCellInternal = this.CurrentCellInternal;
					if (!this.IsSharedCellReadOnly(currentCellInternal, this.ptCurrentCell.Y))
					{
						flag = base.CanEnableIme;
					}
				}
				return flag;
			}
		}

		/// <summary>Gets the cell border style for the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewCellBorderStyle" /> that represents the border style of the cells contained in the <see cref="T:System.Windows.Forms.DataGridView" />.</returns>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.DataGridViewCellBorderStyle" /> value.</exception>
		/// <exception cref="T:System.ArgumentException">The specified value when setting this property is <see cref="F:System.Windows.Forms.DataGridViewCellBorderStyle.Custom" />.</exception>
		// Token: 0x17000597 RID: 1431
		// (get) Token: 0x060018B7 RID: 6327 RVA: 0x00058E68 File Offset: 0x00057068
		// (set) Token: 0x060018B8 RID: 6328 RVA: 0x00058FCC File Offset: 0x000571CC
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridView_CellBorderStyleDescr")]
		[Browsable(true)]
		[DefaultValue(DataGridViewCellBorderStyle.Single)]
		public DataGridViewCellBorderStyle CellBorderStyle
		{
			get
			{
				switch (this.advancedCellBorderStyle.All)
				{
				case DataGridViewAdvancedCellBorderStyle.NotSet:
					if (this.advancedCellBorderStyle.Top == DataGridViewAdvancedCellBorderStyle.None && this.advancedCellBorderStyle.Bottom == DataGridViewAdvancedCellBorderStyle.None)
					{
						if (this.RightToLeftInternal)
						{
							if (this.advancedCellBorderStyle.Right == DataGridViewAdvancedCellBorderStyle.None && this.advancedCellBorderStyle.Left == DataGridViewAdvancedCellBorderStyle.Single)
							{
								return DataGridViewCellBorderStyle.SingleVertical;
							}
						}
						else if (this.advancedCellBorderStyle.Left == DataGridViewAdvancedCellBorderStyle.None && this.advancedCellBorderStyle.Right == DataGridViewAdvancedCellBorderStyle.Single)
						{
							return DataGridViewCellBorderStyle.SingleVertical;
						}
						if (this.advancedCellBorderStyle.Right == DataGridViewAdvancedCellBorderStyle.Outset && this.advancedCellBorderStyle.Left == DataGridViewAdvancedCellBorderStyle.Outset)
						{
							return DataGridViewCellBorderStyle.RaisedVertical;
						}
						if (this.advancedCellBorderStyle.Right == DataGridViewAdvancedCellBorderStyle.Inset && this.advancedCellBorderStyle.Left == DataGridViewAdvancedCellBorderStyle.Inset)
						{
							return DataGridViewCellBorderStyle.SunkenVertical;
						}
					}
					if (this.advancedCellBorderStyle.Left == DataGridViewAdvancedCellBorderStyle.None && this.advancedCellBorderStyle.Right == DataGridViewAdvancedCellBorderStyle.None)
					{
						if (this.advancedCellBorderStyle.Top == DataGridViewAdvancedCellBorderStyle.None && this.advancedCellBorderStyle.Bottom == DataGridViewAdvancedCellBorderStyle.Single)
						{
							return DataGridViewCellBorderStyle.SingleHorizontal;
						}
						if (this.advancedCellBorderStyle.Top == DataGridViewAdvancedCellBorderStyle.Outset && this.advancedCellBorderStyle.Bottom == DataGridViewAdvancedCellBorderStyle.Outset)
						{
							return DataGridViewCellBorderStyle.RaisedHorizontal;
						}
						if (this.advancedCellBorderStyle.Top == DataGridViewAdvancedCellBorderStyle.Inset && this.advancedCellBorderStyle.Bottom == DataGridViewAdvancedCellBorderStyle.Inset)
						{
							return DataGridViewCellBorderStyle.SunkenHorizontal;
						}
					}
					return DataGridViewCellBorderStyle.Custom;
				case DataGridViewAdvancedCellBorderStyle.None:
					return DataGridViewCellBorderStyle.None;
				case DataGridViewAdvancedCellBorderStyle.Single:
					return DataGridViewCellBorderStyle.Single;
				case DataGridViewAdvancedCellBorderStyle.Inset:
					return DataGridViewCellBorderStyle.Sunken;
				case DataGridViewAdvancedCellBorderStyle.Outset:
					return DataGridViewCellBorderStyle.Raised;
				}
				return DataGridViewCellBorderStyle.Custom;
			}
			set
			{
				if (!ClientUtils.IsEnumValid(value, (int)value, 0, 10))
				{
					throw new InvalidEnumArgumentException("value", (int)value, typeof(DataGridViewCellBorderStyle));
				}
				if (value != this.CellBorderStyle)
				{
					if (value == DataGridViewCellBorderStyle.Custom)
					{
						throw new ArgumentException(SR.GetString("DataGridView_CustomCellBorderStyleInvalid", new object[] { "CellBorderStyle" }));
					}
					this.dataGridViewOper[65536] = true;
					try
					{
						switch (value)
						{
						case DataGridViewCellBorderStyle.Single:
							this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.Single;
							break;
						case DataGridViewCellBorderStyle.Raised:
							this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.Outset;
							break;
						case DataGridViewCellBorderStyle.Sunken:
							this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.Inset;
							break;
						case DataGridViewCellBorderStyle.None:
							this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
							break;
						case DataGridViewCellBorderStyle.SingleVertical:
							this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
							if (this.RightToLeftInternal)
							{
								this.advancedCellBorderStyle.LeftInternal = DataGridViewAdvancedCellBorderStyle.Single;
							}
							else
							{
								this.advancedCellBorderStyle.RightInternal = DataGridViewAdvancedCellBorderStyle.Single;
							}
							break;
						case DataGridViewCellBorderStyle.RaisedVertical:
							this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
							this.advancedCellBorderStyle.RightInternal = DataGridViewAdvancedCellBorderStyle.Outset;
							this.advancedCellBorderStyle.LeftInternal = DataGridViewAdvancedCellBorderStyle.Outset;
							break;
						case DataGridViewCellBorderStyle.SunkenVertical:
							this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
							this.advancedCellBorderStyle.RightInternal = DataGridViewAdvancedCellBorderStyle.Inset;
							this.advancedCellBorderStyle.LeftInternal = DataGridViewAdvancedCellBorderStyle.Inset;
							break;
						case DataGridViewCellBorderStyle.SingleHorizontal:
							this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
							this.advancedCellBorderStyle.BottomInternal = DataGridViewAdvancedCellBorderStyle.Single;
							break;
						case DataGridViewCellBorderStyle.RaisedHorizontal:
							this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
							this.advancedCellBorderStyle.TopInternal = DataGridViewAdvancedCellBorderStyle.Outset;
							this.advancedCellBorderStyle.BottomInternal = DataGridViewAdvancedCellBorderStyle.Outset;
							break;
						case DataGridViewCellBorderStyle.SunkenHorizontal:
							this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
							this.advancedCellBorderStyle.TopInternal = DataGridViewAdvancedCellBorderStyle.Inset;
							this.advancedCellBorderStyle.BottomInternal = DataGridViewAdvancedCellBorderStyle.Inset;
							break;
						}
					}
					finally
					{
						this.dataGridViewOper[65536] = false;
					}
					this.OnCellBorderStyleChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Occurs when the border style of a cell changes.</summary>
		// Token: 0x14000113 RID: 275
		// (add) Token: 0x060018B9 RID: 6329 RVA: 0x000591DC File Offset: 0x000573DC
		// (remove) Token: 0x060018BA RID: 6330 RVA: 0x000591EF File Offset: 0x000573EF
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_CellBorderStyleChangedDescr")]
		public event EventHandler CellBorderStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLBORDERSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLBORDERSTYLECHANGED, value);
			}
		}

		// Token: 0x17000598 RID: 1432
		// (get) Token: 0x060018BB RID: 6331 RVA: 0x00059202 File Offset: 0x00057402
		// (set) Token: 0x060018BC RID: 6332 RVA: 0x00059214 File Offset: 0x00057414
		internal bool CellMouseDownInContentBounds
		{
			get
			{
				return this.dataGridViewState2[268435456];
			}
			set
			{
				this.dataGridViewState2[268435456] = value;
			}
		}

		// Token: 0x17000599 RID: 1433
		// (get) Token: 0x060018BD RID: 6333 RVA: 0x00059227 File Offset: 0x00057427
		internal DataGridViewCellPaintingEventArgs CellPaintingEventArgs
		{
			get
			{
				if (this.dgvcpe == null)
				{
					this.dgvcpe = new DataGridViewCellPaintingEventArgs(this);
				}
				return this.dgvcpe;
			}
		}

		// Token: 0x1700059A RID: 1434
		// (get) Token: 0x060018BE RID: 6334 RVA: 0x00059243 File Offset: 0x00057443
		private DataGridViewCellStyleChangedEventArgs CellStyleChangedEventArgs
		{
			get
			{
				if (this.dgvcsce == null)
				{
					this.dgvcsce = new DataGridViewCellStyleChangedEventArgs();
				}
				return this.dgvcsce;
			}
		}

		// Token: 0x1700059B RID: 1435
		// (get) Token: 0x060018BF RID: 6335 RVA: 0x0005925E File Offset: 0x0005745E
		internal DataGridViewCellValueEventArgs CellValueEventArgs
		{
			get
			{
				if (this.dgvcve == null)
				{
					this.dgvcve = new DataGridViewCellValueEventArgs();
				}
				return this.dgvcve;
			}
		}

		/// <summary>Gets or sets a value that indicates whether users can copy cell text values to the <see cref="T:System.Windows.Forms.Clipboard" /> and whether row and column header text is included.</summary>
		/// <returns>One of the <see cref="T:System.Windows.Forms.DataGridViewClipboardCopyMode" /> values. The default is <see cref="F:System.Windows.Forms.DataGridViewClipboardCopyMode.EnableWithAutoHeaderText" />.</returns>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.DataGridViewClipboardCopyMode" /> value.</exception>
		// Token: 0x1700059C RID: 1436
		// (get) Token: 0x060018C0 RID: 6336 RVA: 0x00059279 File Offset: 0x00057479
		// (set) Token: 0x060018C1 RID: 6337 RVA: 0x00059281 File Offset: 0x00057481
		[Browsable(true)]
		[DefaultValue(DataGridViewClipboardCopyMode.EnableWithAutoHeaderText)]
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_ClipboardCopyModeDescr")]
		public DataGridViewClipboardCopyMode ClipboardCopyMode
		{
			get
			{
				return this.clipboardCopyMode;
			}
			set
			{
				if (!ClientUtils.IsEnumValid(value, (int)value, 0, 3))
				{
					throw new InvalidEnumArgumentException("value", (int)value, typeof(DataGridViewClipboardCopyMode));
				}
				this.clipboardCopyMode = value;
			}
		}

		/// <summary>Gets or sets the number of columns displayed in the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <returns>The number of columns displayed in the <see cref="T:System.Windows.Forms.DataGridView" />.</returns>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The specified value when setting this property is less than 0.</exception>
		/// <exception cref="T:System.InvalidOperationException">When setting this property, the <see cref="P:System.Windows.Forms.DataGridView.DataSource" /> property has been set.</exception>
		// Token: 0x1700059D RID: 1437
		// (get) Token: 0x060018C2 RID: 6338 RVA: 0x000592B0 File Offset: 0x000574B0
		// (set) Token: 0x060018C3 RID: 6339 RVA: 0x000592C0 File Offset: 0x000574C0
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[DefaultValue(0)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public int ColumnCount
		{
			get
			{
				return this.Columns.Count;
			}
			set
			{
				if (value < 0)
				{
					throw new ArgumentOutOfRangeException("ColumnCount", SR.GetString("InvalidLowBoundArgumentEx", new object[]
					{
						"ColumnCount",
						value.ToString(CultureInfo.CurrentCulture),
						0.ToString(CultureInfo.CurrentCulture)
					}));
				}
				if (this.DataSource != null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotSetColumnCountOnDataBoundDataGridView"));
				}
				if (value != this.Columns.Count)
				{
					if (value == 0)
					{
						this.Columns.Clear();
						return;
					}
					if (value < this.Columns.Count)
					{
						while (value < this.Columns.Count)
						{
							int count = this.Columns.Count;
							this.Columns.RemoveAt(count - 1);
							if (this.Columns.Count >= count)
							{
								return;
							}
						}
						return;
					}
					while (value > this.Columns.Count)
					{
						int count2 = this.Columns.Count;
						this.Columns.Add(null, null);
						if (this.Columns.Count <= count2)
						{
							break;
						}
					}
				}
			}
		}

		/// <summary>Gets the border style applied to the column headers.</summary>
		/// <returns>One of the <see cref="T:System.Windows.Forms.DataGridViewHeaderBorderStyle" /> values.</returns>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.DataGridViewHeaderBorderStyle" /> value.</exception>
		/// <exception cref="T:System.ArgumentException">The specified value when setting this property is <see cref="F:System.Windows.Forms.DataGridViewHeaderBorderStyle.Custom" />.</exception>
		// Token: 0x1700059E RID: 1438
		// (get) Token: 0x060018C4 RID: 6340 RVA: 0x000593CC File Offset: 0x000575CC
		// (set) Token: 0x060018C5 RID: 6341 RVA: 0x00059418 File Offset: 0x00057618
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridView_ColumnHeadersBorderStyleDescr")]
		[Browsable(true)]
		[DefaultValue(DataGridViewHeaderBorderStyle.Raised)]
		public DataGridViewHeaderBorderStyle ColumnHeadersBorderStyle
		{
			get
			{
				switch (this.advancedColumnHeadersBorderStyle.All)
				{
				case DataGridViewAdvancedCellBorderStyle.NotSet:
					return DataGridViewHeaderBorderStyle.Custom;
				case DataGridViewAdvancedCellBorderStyle.None:
					return DataGridViewHeaderBorderStyle.None;
				case DataGridViewAdvancedCellBorderStyle.Single:
					return DataGridViewHeaderBorderStyle.Single;
				case DataGridViewAdvancedCellBorderStyle.InsetDouble:
					return DataGridViewHeaderBorderStyle.Sunken;
				case DataGridViewAdvancedCellBorderStyle.OutsetPartial:
					return DataGridViewHeaderBorderStyle.Raised;
				}
				return DataGridViewHeaderBorderStyle.Custom;
			}
			set
			{
				if (!ClientUtils.IsEnumValid(value, (int)value, 0, 4))
				{
					throw new InvalidEnumArgumentException("value", (int)value, typeof(DataGridViewHeaderBorderStyle));
				}
				if (value != this.ColumnHeadersBorderStyle)
				{
					if (value == DataGridViewHeaderBorderStyle.Custom)
					{
						throw new ArgumentException(SR.GetString("DataGridView_CustomCellBorderStyleInvalid", new object[] { "ColumnHeadersBorderStyle" }));
					}
					this.dataGridViewOper[65536] = true;
					try
					{
						switch (value)
						{
						case DataGridViewHeaderBorderStyle.Single:
							this.advancedColumnHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.Single;
							break;
						case DataGridViewHeaderBorderStyle.Raised:
							this.advancedColumnHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.OutsetPartial;
							break;
						case DataGridViewHeaderBorderStyle.Sunken:
							this.advancedColumnHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.InsetDouble;
							break;
						case DataGridViewHeaderBorderStyle.None:
							this.advancedColumnHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
							break;
						}
					}
					finally
					{
						this.dataGridViewOper[65536] = false;
					}
					this.OnColumnHeadersBorderStyleChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyle" /> property changes.</summary>
		// Token: 0x14000114 RID: 276
		// (add) Token: 0x060018C6 RID: 6342 RVA: 0x00059508 File Offset: 0x00057708
		// (remove) Token: 0x060018C7 RID: 6343 RVA: 0x0005951B File Offset: 0x0005771B
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_ColumnHeadersBorderStyleChangedDescr")]
		public event EventHandler ColumnHeadersBorderStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSBORDERSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSBORDERSTYLECHANGED, value);
			}
		}

		/// <summary>Gets or sets the default column header style.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> that represents the default column header style.</returns>
		// Token: 0x1700059F RID: 1439
		// (get) Token: 0x060018C8 RID: 6344 RVA: 0x0005952E File Offset: 0x0005772E
		// (set) Token: 0x060018C9 RID: 6345 RVA: 0x0005954C File Offset: 0x0005774C
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridView_ColumnHeadersDefaultCellStyleDescr")]
		[AmbientValue(null)]
		public DataGridViewCellStyle ColumnHeadersDefaultCellStyle
		{
			get
			{
				if (this.columnHeadersDefaultCellStyle == null)
				{
					this.columnHeadersDefaultCellStyle = this.DefaultColumnHeadersDefaultCellStyle;
				}
				return this.columnHeadersDefaultCellStyle;
			}
			set
			{
				DataGridViewCellStyle dataGridViewCellStyle = this.ColumnHeadersDefaultCellStyle;
				dataGridViewCellStyle.RemoveScope(DataGridViewCellStyleScopes.ColumnHeaders);
				this.columnHeadersDefaultCellStyle = value;
				if (value != null)
				{
					this.columnHeadersDefaultCellStyle.AddScope(this, DataGridViewCellStyleScopes.ColumnHeaders);
				}
				DataGridViewCellStyleDifferences differencesFrom = dataGridViewCellStyle.GetDifferencesFrom(this.ColumnHeadersDefaultCellStyle);
				if (differencesFrom != DataGridViewCellStyleDifferences.None)
				{
					this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = differencesFrom == DataGridViewCellStyleDifferences.AffectPreferredSize;
					this.OnColumnHeadersDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
				}
			}
		}

		// Token: 0x170005A0 RID: 1440
		// (get) Token: 0x060018CA RID: 6346 RVA: 0x000595AC File Offset: 0x000577AC
		private DataGridViewCellStyle DefaultColumnHeadersDefaultCellStyle
		{
			get
			{
				DataGridViewCellStyle dataGridViewCellStyle = new DataGridViewCellStyle();
				dataGridViewCellStyle.BackColor = DataGridView.DefaultHeadersBackBrush.Color;
				dataGridViewCellStyle.ForeColor = DataGridView.DefaultForeBrush.Color;
				dataGridViewCellStyle.SelectionBackColor = DataGridView.DefaultSelectionBackBrush.Color;
				dataGridViewCellStyle.SelectionForeColor = DataGridView.DefaultSelectionForeBrush.Color;
				dataGridViewCellStyle.Font = base.Font;
				dataGridViewCellStyle.AlignmentInternal = DataGridViewContentAlignment.MiddleLeft;
				dataGridViewCellStyle.WrapModeInternal = DataGridViewTriState.True;
				dataGridViewCellStyle.AddScope(this, DataGridViewCellStyleScopes.ColumnHeaders);
				this.dataGridViewState1[67108864] = true;
				return dataGridViewCellStyle;
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle" /> property changes.</summary>
		// Token: 0x14000115 RID: 277
		// (add) Token: 0x060018CB RID: 6347 RVA: 0x00059635 File Offset: 0x00057835
		// (remove) Token: 0x060018CC RID: 6348 RVA: 0x00059648 File Offset: 0x00057848
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewColumnHeadersDefaultCellStyleChangedDescr")]
		public event EventHandler ColumnHeadersDefaultCellStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSDEFAULTCELLSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSDEFAULTCELLSTYLECHANGED, value);
			}
		}

		/// <summary>Gets or sets the height, in pixels, of the column headers row</summary>
		/// <returns>The height, in pixels, of the row that contains the column headers. The default is 23.</returns>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The specified value when setting this property is less than the minimum height of 4 pixels or is greater than the maximum height of 32768 pixels.</exception>
		// Token: 0x170005A1 RID: 1441
		// (get) Token: 0x060018CD RID: 6349 RVA: 0x0005965B File Offset: 0x0005785B
		// (set) Token: 0x060018CE RID: 6350 RVA: 0x00059664 File Offset: 0x00057864
		[SRCategory("CatAppearance")]
		[Localizable(true)]
		[SRDescription("DataGridView_ColumnHeadersHeightDescr")]
		public int ColumnHeadersHeight
		{
			get
			{
				return this.columnHeadersHeight;
			}
			set
			{
				if (value < 4)
				{
					throw new ArgumentOutOfRangeException("ColumnHeadersHeight", SR.GetString("InvalidLowBoundArgumentEx", new object[]
					{
						"ColumnHeadersHeight",
						value.ToString(CultureInfo.CurrentCulture),
						4.ToString(CultureInfo.CurrentCulture)
					}));
				}
				if (value > 32768)
				{
					throw new ArgumentOutOfRangeException("ColumnHeadersHeight", SR.GetString("InvalidHighBoundArgumentEx", new object[]
					{
						"ColumnHeadersHeight",
						value.ToString(CultureInfo.CurrentCulture),
						32768.ToString(CultureInfo.CurrentCulture)
					}));
				}
				if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
				{
					this.cachedColumnHeadersHeight = value;
					return;
				}
				if (this.columnHeadersHeight != value)
				{
					this.SetColumnHeadersHeightInternal(value, true);
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.ColumnHeadersHeight" /> property changes.</summary>
		// Token: 0x14000116 RID: 278
		// (add) Token: 0x060018CF RID: 6351 RVA: 0x00059729 File Offset: 0x00057929
		// (remove) Token: 0x060018D0 RID: 6352 RVA: 0x0005973C File Offset: 0x0005793C
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewColumnHeadersHeightChangedDescr")]
		public event EventHandler ColumnHeadersHeightChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSHEIGHTCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSHEIGHTCHANGED, value);
			}
		}

		// Token: 0x060018D1 RID: 6353 RVA: 0x0005974F File Offset: 0x0005794F
		private bool ShouldSerializeColumnHeadersHeight()
		{
			return this.ColumnHeadersHeightSizeMode != DataGridViewColumnHeadersHeightSizeMode.AutoSize && 23 != this.ColumnHeadersHeight;
		}

		/// <summary>Gets or sets a value indicating whether the height of the column headers is adjustable and whether it can be adjusted by the user or is automatically adjusted to fit the contents of the headers.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode" /> value indicating the mode by which the height of the column headers row can be adjusted. The default is <see cref="F:System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.EnableResizing" />.</returns>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode" /> value.</exception>
		// Token: 0x170005A2 RID: 1442
		// (get) Token: 0x060018D2 RID: 6354 RVA: 0x00059769 File Offset: 0x00057969
		// (set) Token: 0x060018D3 RID: 6355 RVA: 0x00059774 File Offset: 0x00057974
		[DefaultValue(DataGridViewColumnHeadersHeightSizeMode.EnableResizing)]
		[RefreshProperties(RefreshProperties.All)]
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_ColumnHeadersHeightSizeModeDescr")]
		public DataGridViewColumnHeadersHeightSizeMode ColumnHeadersHeightSizeMode
		{
			get
			{
				return this.columnHeadersHeightSizeMode;
			}
			set
			{
				if (!ClientUtils.IsEnumValid(value, (int)value, 0, 2))
				{
					throw new InvalidEnumArgumentException("value", (int)value, typeof(DataGridViewColumnHeadersHeightSizeMode));
				}
				if (this.columnHeadersHeightSizeMode != value)
				{
					DataGridViewAutoSizeModeEventArgs dataGridViewAutoSizeModeEventArgs = new DataGridViewAutoSizeModeEventArgs(this.columnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize);
					this.columnHeadersHeightSizeMode = value;
					this.OnColumnHeadersHeightSizeModeChanged(dataGridViewAutoSizeModeEventArgs);
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeMode" /> property changes.</summary>
		// Token: 0x14000117 RID: 279
		// (add) Token: 0x060018D4 RID: 6356 RVA: 0x000597CD File Offset: 0x000579CD
		// (remove) Token: 0x060018D5 RID: 6357 RVA: 0x000597E0 File Offset: 0x000579E0
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_ColumnHeadersHeightSizeModeChangedDescr")]
		public event DataGridViewAutoSizeModeEventHandler ColumnHeadersHeightSizeModeChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSHEIGHTSIZEMODECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSHEIGHTSIZEMODECHANGED, value);
			}
		}

		/// <summary>Gets or sets a value indicating whether the column header row is displayed.</summary>
		/// <returns>
		///   <see langword="true" /> if the column headers are displayed; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
		/// <exception cref="T:System.InvalidOperationException">The specified value when setting this property is <see langword="false" /> and one or more columns have an <see cref="P:System.Windows.Forms.DataGridViewColumn.InheritedAutoSizeMode" /> property value of <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.ColumnHeader" />.</exception>
		// Token: 0x170005A3 RID: 1443
		// (get) Token: 0x060018D6 RID: 6358 RVA: 0x000597F3 File Offset: 0x000579F3
		// (set) Token: 0x060018D7 RID: 6359 RVA: 0x00059804 File Offset: 0x00057A04
		[SRCategory("CatAppearance")]
		[DefaultValue(true)]
		[SRDescription("DataGridViewColumnHeadersVisibleDescr")]
		public bool ColumnHeadersVisible
		{
			get
			{
				return this.dataGridViewState1[8];
			}
			set
			{
				if (this.ColumnHeadersVisible != value)
				{
					if (!value)
					{
						for (DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible); dataGridViewColumn != null; dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
						{
							if (dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.ColumnHeader)
							{
								throw new InvalidOperationException(SR.GetString("DataGridView_ColumnHeadersCannotBeInvisible"));
							}
						}
					}
					using (LayoutTransaction.CreateTransactionIf(this.AutoSize, this.ParentInternal, this, PropertyNames.ColumnHeadersVisible))
					{
						this.dataGridViewState1[8] = value;
						this.layout.ColumnHeadersVisible = value;
						this.displayedBandsInfo.EnsureDirtyState();
						if (!this.AutoSize)
						{
							this.PerformLayoutPrivate(false, false, true, true);
						}
						this.InvalidateInside();
						this.OnColumnHeadersGlobalAutoSize();
					}
				}
			}
		}

		/// <summary>Gets a collection that contains all the columns in the control.</summary>
		/// <returns>The <see cref="T:System.Windows.Forms.DataGridViewColumnCollection" /> that contains all the columns in the <see cref="T:System.Windows.Forms.DataGridView" /> control.</returns>
		// Token: 0x170005A4 RID: 1444
		// (get) Token: 0x060018D8 RID: 6360 RVA: 0x000598D4 File Offset: 0x00057AD4
		[Editor("System.Windows.Forms.Design.DataGridViewColumnCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(UITypeEditor))]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		[MergableProperty(false)]
		public DataGridViewColumnCollection Columns
		{
			get
			{
				if (this.dataGridViewColumns == null)
				{
					this.dataGridViewColumns = this.CreateColumnsInstance();
				}
				return this.dataGridViewColumns;
			}
		}

		/// <summary>Gets or sets the currently active cell.</summary>
		/// <returns>The <see cref="T:System.Windows.Forms.DataGridViewCell" /> that represents the current cell, or <see langword="null" /> if there is no current cell. The default is the first cell in the first column or <see langword="null" /> if there are no cells in the control.</returns>
		/// <exception cref="T:System.InvalidOperationException">The value of this property cannot be set because changes to the current cell cannot be committed or canceled.  
		///  -or-  
		///  The specified cell when setting this property is in a hidden row or column.  
		///  Re-entrant calling is only allowed when the <see cref="T:System.Windows.Forms.DataGridView" /> is bound to a <see cref="P:System.Windows.Forms.DataGridView.DataSource" />. Re-entrant calling results from a change to the underlying data.</exception>
		/// <exception cref="T:System.ArgumentException">The specified cell when setting this property is not in the <see cref="T:System.Windows.Forms.DataGridView" />.</exception>
		// Token: 0x170005A5 RID: 1445
		// (get) Token: 0x060018D9 RID: 6361 RVA: 0x000598F0 File Offset: 0x00057AF0
		// (set) Token: 0x060018DA RID: 6362 RVA: 0x00059948 File Offset: 0x00057B48
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public DataGridViewCell CurrentCell
		{
			get
			{
				if (this.ptCurrentCell.X == -1 && this.ptCurrentCell.Y == -1)
				{
					return null;
				}
				DataGridViewRow dataGridViewRow = this.Rows[this.ptCurrentCell.Y];
				return dataGridViewRow.Cells[this.ptCurrentCell.X];
			}
			set
			{
				if ((value != null && (value.RowIndex != this.ptCurrentCell.Y || value.ColumnIndex != this.ptCurrentCell.X)) || (value == null && this.ptCurrentCell.X != -1))
				{
					if (value == null)
					{
						this.ClearSelection();
						if (!this.SetCurrentCellAddressCore(-1, -1, true, true, false))
						{
							throw new InvalidOperationException(SR.GetString("DataGridView_CellChangeCannotBeCommittedOrAborted"));
						}
					}
					else
					{
						if (value.DataGridView != this)
						{
							throw new ArgumentException(SR.GetString("DataGridView_CellDoesNotBelongToDataGridView"));
						}
						if (!this.Columns[value.ColumnIndex].Visible || (this.Rows.GetRowState(value.RowIndex) & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
						{
							throw new InvalidOperationException(SR.GetString("DataGridView_CurrentCellCannotBeInvisible"));
						}
						if (!this.ScrollIntoView(value.ColumnIndex, value.RowIndex, true))
						{
							throw new InvalidOperationException(SR.GetString("DataGridView_CellChangeCannotBeCommittedOrAborted"));
						}
						if (this.IsInnerCellOutOfBounds(value.ColumnIndex, value.RowIndex))
						{
							return;
						}
						this.ClearSelection(value.ColumnIndex, value.RowIndex, true);
						if (!this.SetCurrentCellAddressCore(value.ColumnIndex, value.RowIndex, true, false, false))
						{
							throw new InvalidOperationException(SR.GetString("DataGridView_CellChangeCannotBeCommittedOrAborted"));
						}
					}
				}
			}
		}

		/// <summary>Gets the row and column indexes of the currently active cell.</summary>
		/// <returns>A <see cref="T:System.Drawing.Point" /> that represents the row and column indexes of the currently active cell.</returns>
		// Token: 0x170005A6 RID: 1446
		// (get) Token: 0x060018DB RID: 6363 RVA: 0x00059A89 File Offset: 0x00057C89
		[Browsable(false)]
		public Point CurrentCellAddress
		{
			get
			{
				return this.ptCurrentCell;
			}
		}

		// Token: 0x170005A7 RID: 1447
		// (get) Token: 0x060018DC RID: 6364 RVA: 0x00059A94 File Offset: 0x00057C94
		private DataGridViewCell CurrentCellInternal
		{
			get
			{
				DataGridViewRow dataGridViewRow = this.Rows.SharedRow(this.ptCurrentCell.Y);
				return dataGridViewRow.Cells[this.ptCurrentCell.X];
			}
		}

		// Token: 0x170005A8 RID: 1448
		// (get) Token: 0x060018DD RID: 6365 RVA: 0x00059AD0 File Offset: 0x00057CD0
		private bool CurrentCellIsFirstVisibleCell
		{
			get
			{
				if (this.ptCurrentCell.X == -1)
				{
					return false;
				}
				bool flag = this.Columns.GetPreviousColumn(this.Columns[this.ptCurrentCell.X], DataGridViewElementStates.Visible, DataGridViewElementStates.None) != null;
				bool flag2 = -1 != this.Rows.GetPreviousRow(this.ptCurrentCell.Y, DataGridViewElementStates.Visible);
				return !flag && !flag2;
			}
		}

		// Token: 0x170005A9 RID: 1449
		// (get) Token: 0x060018DE RID: 6366 RVA: 0x00059B40 File Offset: 0x00057D40
		private bool CurrentCellIsLastVisibleCell
		{
			get
			{
				if (this.ptCurrentCell.X == -1)
				{
					return false;
				}
				bool flag = this.Columns.GetNextColumn(this.Columns[this.ptCurrentCell.X], DataGridViewElementStates.Visible, DataGridViewElementStates.None) != null;
				bool flag2 = -1 != this.Rows.GetNextRow(this.ptCurrentCell.Y, DataGridViewElementStates.Visible);
				return !flag && !flag2;
			}
		}

		// Token: 0x170005AA RID: 1450
		// (get) Token: 0x060018DF RID: 6367 RVA: 0x00059BAD File Offset: 0x00057DAD
		private bool CurrentCellIsEditedAndOnlySelectedCell
		{
			get
			{
				return this.ptCurrentCell.X != -1 && (this.editingControl != null && this.GetCellCount(DataGridViewElementStates.Selected) == 1) && this.CurrentCellInternal.Selected;
			}
		}

		/// <summary>Gets the row containing the current cell.</summary>
		/// <returns>The <see cref="T:System.Windows.Forms.DataGridViewRow" /> that represents the row containing the current cell, or <see langword="null" /> if there is no current cell.</returns>
		// Token: 0x170005AB RID: 1451
		// (get) Token: 0x060018E0 RID: 6368 RVA: 0x00059BDF File Offset: 0x00057DDF
		[Browsable(false)]
		public DataGridViewRow CurrentRow
		{
			get
			{
				if (this.ptCurrentCell.X == -1)
				{
					return null;
				}
				return this.Rows[this.ptCurrentCell.Y];
			}
		}

		// Token: 0x170005AC RID: 1452
		// (set) Token: 0x060018E1 RID: 6369 RVA: 0x00059C08 File Offset: 0x00057E08
		internal Cursor CursorInternal
		{
			set
			{
				this.dataGridViewState2[2097152] = true;
				try
				{
					this.Cursor = value;
				}
				finally
				{
					this.dataGridViewState2[2097152] = false;
				}
			}
		}

		// Token: 0x170005AD RID: 1453
		// (get) Token: 0x060018E2 RID: 6370 RVA: 0x00059C54 File Offset: 0x00057E54
		internal DataGridView.DataGridViewDataConnection DataConnection
		{
			get
			{
				return this.dataConnection;
			}
		}

		/// <summary>Gets or sets the name of the list or table in the data source for which the <see cref="T:System.Windows.Forms.DataGridView" /> is displaying data.</summary>
		/// <returns>The name of the table or list in the <see cref="P:System.Windows.Forms.DataGridView.DataSource" /> for which the <see cref="T:System.Windows.Forms.DataGridView" /> is displaying data. The default is <see cref="F:System.String.Empty" />.</returns>
		/// <exception cref="T:System.Exception">An error occurred in the data source and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. The exception object can typically be cast to type <see cref="T:System.FormatException" />.</exception>
		// Token: 0x170005AE RID: 1454
		// (get) Token: 0x060018E3 RID: 6371 RVA: 0x00059C5C File Offset: 0x00057E5C
		// (set) Token: 0x060018E4 RID: 6372 RVA: 0x00059C78 File Offset: 0x00057E78
		[DefaultValue("")]
		[SRCategory("CatData")]
		[Editor("System.Windows.Forms.Design.DataMemberListEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(UITypeEditor))]
		[SRDescription("DataGridViewDataMemberDescr")]
		public string DataMember
		{
			get
			{
				if (this.dataConnection == null)
				{
					return string.Empty;
				}
				return this.dataConnection.DataMember;
			}
			set
			{
				if (value != this.DataMember)
				{
					this.CurrentCell = null;
					if (this.dataConnection == null)
					{
						this.dataConnection = new DataGridView.DataGridViewDataConnection(this);
					}
					this.dataConnection.SetDataConnection(this.DataSource, value);
					this.OnDataMemberChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Occurs when value of the <see cref="P:System.Windows.Forms.DataGridView.DataMember" /> property changes.</summary>
		// Token: 0x14000118 RID: 280
		// (add) Token: 0x060018E5 RID: 6373 RVA: 0x00059CCB File Offset: 0x00057ECB
		// (remove) Token: 0x060018E6 RID: 6374 RVA: 0x00059CDE File Offset: 0x00057EDE
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewDataMemberChangedDescr")]
		public event EventHandler DataMemberChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWDATAMEMBERCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWDATAMEMBERCHANGED, value);
			}
		}

		/// <summary>Gets or sets the data source that the <see cref="T:System.Windows.Forms.DataGridView" /> is displaying data for.</summary>
		/// <returns>The object that contains data for the <see cref="T:System.Windows.Forms.DataGridView" /> to display.</returns>
		/// <exception cref="T:System.Exception">An error occurred in the data source and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. The exception object can typically be cast to type <see cref="T:System.FormatException" />.</exception>
		// Token: 0x170005AF RID: 1455
		// (get) Token: 0x060018E7 RID: 6375 RVA: 0x00059CF1 File Offset: 0x00057EF1
		// (set) Token: 0x060018E8 RID: 6376 RVA: 0x00059D08 File Offset: 0x00057F08
		[DefaultValue(null)]
		[SRCategory("CatData")]
		[RefreshProperties(RefreshProperties.Repaint)]
		[AttributeProvider(typeof(IListSource))]
		[SRDescription("DataGridViewDataSourceDescr")]
		public object DataSource
		{
			get
			{
				if (this.dataConnection == null)
				{
					return null;
				}
				return this.dataConnection.DataSource;
			}
			set
			{
				if (value != this.DataSource)
				{
					this.CurrentCell = null;
					if (this.dataConnection == null)
					{
						this.dataConnection = new DataGridView.DataGridViewDataConnection(this);
						this.dataConnection.SetDataConnection(value, this.DataMember);
					}
					else
					{
						if (this.dataConnection.ShouldChangeDataMember(value))
						{
							this.DataMember = "";
						}
						this.dataConnection.SetDataConnection(value, this.DataMember);
						if (value == null)
						{
							this.dataConnection = null;
						}
					}
					this.OnDataSourceChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.DataSource" /> property changes.</summary>
		// Token: 0x14000119 RID: 281
		// (add) Token: 0x060018E9 RID: 6377 RVA: 0x00059D8D File Offset: 0x00057F8D
		// (remove) Token: 0x060018EA RID: 6378 RVA: 0x00059DA0 File Offset: 0x00057FA0
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewDataSourceChangedDescr")]
		public event EventHandler DataSourceChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWDATASOURCECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWDATASOURCECHANGED, value);
			}
		}

		// Token: 0x170005B0 RID: 1456
		// (get) Token: 0x060018EB RID: 6379 RVA: 0x000445EA File Offset: 0x000427EA
		private static SolidBrush DefaultBackBrush
		{
			get
			{
				return (SolidBrush)SystemBrushes.Window;
			}
		}

		// Token: 0x170005B1 RID: 1457
		// (get) Token: 0x060018EC RID: 6380 RVA: 0x00044602 File Offset: 0x00042802
		private static SolidBrush DefaultBackgroundBrush
		{
			get
			{
				return (SolidBrush)SystemBrushes.AppWorkspace;
			}
		}

		/// <summary>Gets or sets the default cell style to be applied to the cells in the <see cref="T:System.Windows.Forms.DataGridView" /> if no other cell style properties are set.</summary>
		/// <returns>The <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> to be applied as the default style.</returns>
		// Token: 0x170005B2 RID: 1458
		// (get) Token: 0x060018ED RID: 6381 RVA: 0x00059DB4 File Offset: 0x00057FB4
		// (set) Token: 0x060018EE RID: 6382 RVA: 0x00059F84 File Offset: 0x00058184
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridView_DefaultCellStyleDescr")]
		[AmbientValue(null)]
		public DataGridViewCellStyle DefaultCellStyle
		{
			get
			{
				if (this.defaultCellStyle == null)
				{
					this.defaultCellStyle = this.DefaultDefaultCellStyle;
					return this.defaultCellStyle;
				}
				if (this.defaultCellStyle.BackColor == Color.Empty || this.defaultCellStyle.ForeColor == Color.Empty || this.defaultCellStyle.SelectionBackColor == Color.Empty || this.defaultCellStyle.SelectionForeColor == Color.Empty || this.defaultCellStyle.Font == null || this.defaultCellStyle.Alignment == DataGridViewContentAlignment.NotSet || this.defaultCellStyle.WrapMode == DataGridViewTriState.NotSet)
				{
					DataGridViewCellStyle dataGridViewCellStyle = new DataGridViewCellStyle(this.defaultCellStyle);
					dataGridViewCellStyle.Scope = DataGridViewCellStyleScopes.None;
					if (this.defaultCellStyle.BackColor == Color.Empty)
					{
						dataGridViewCellStyle.BackColor = DataGridView.DefaultBackBrush.Color;
					}
					if (this.defaultCellStyle.ForeColor == Color.Empty)
					{
						dataGridViewCellStyle.ForeColor = base.ForeColor;
						this.dataGridViewState1[1024] = true;
					}
					if (this.defaultCellStyle.SelectionBackColor == Color.Empty)
					{
						dataGridViewCellStyle.SelectionBackColor = DataGridView.DefaultSelectionBackBrush.Color;
					}
					if (this.defaultCellStyle.SelectionForeColor == Color.Empty)
					{
						dataGridViewCellStyle.SelectionForeColor = DataGridView.DefaultSelectionForeBrush.Color;
					}
					if (this.defaultCellStyle.Font == null)
					{
						dataGridViewCellStyle.Font = base.Font;
						this.dataGridViewState1[33554432] = true;
					}
					if (this.defaultCellStyle.Alignment == DataGridViewContentAlignment.NotSet)
					{
						dataGridViewCellStyle.AlignmentInternal = DataGridViewContentAlignment.MiddleLeft;
					}
					if (this.defaultCellStyle.WrapMode == DataGridViewTriState.NotSet)
					{
						dataGridViewCellStyle.WrapModeInternal = DataGridViewTriState.False;
					}
					dataGridViewCellStyle.AddScope(this, DataGridViewCellStyleScopes.DataGridView);
					return dataGridViewCellStyle;
				}
				return this.defaultCellStyle;
			}
			set
			{
				DataGridViewCellStyle dataGridViewCellStyle = this.DefaultCellStyle;
				dataGridViewCellStyle.RemoveScope(DataGridViewCellStyleScopes.DataGridView);
				this.defaultCellStyle = value;
				if (value != null)
				{
					this.defaultCellStyle.AddScope(this, DataGridViewCellStyleScopes.DataGridView);
				}
				DataGridViewCellStyleDifferences differencesFrom = dataGridViewCellStyle.GetDifferencesFrom(this.DefaultCellStyle);
				if (differencesFrom != DataGridViewCellStyleDifferences.None)
				{
					this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = differencesFrom == DataGridViewCellStyleDifferences.AffectPreferredSize;
					this.OnDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
				}
			}
		}

		// Token: 0x170005B3 RID: 1459
		// (get) Token: 0x060018EF RID: 6383 RVA: 0x00059FE4 File Offset: 0x000581E4
		private DataGridViewCellStyle DefaultDefaultCellStyle
		{
			get
			{
				DataGridViewCellStyle dataGridViewCellStyle = new DataGridViewCellStyle();
				dataGridViewCellStyle.BackColor = DataGridView.DefaultBackBrush.Color;
				dataGridViewCellStyle.ForeColor = base.ForeColor;
				dataGridViewCellStyle.SelectionBackColor = DataGridView.DefaultSelectionBackBrush.Color;
				dataGridViewCellStyle.SelectionForeColor = DataGridView.DefaultSelectionForeBrush.Color;
				dataGridViewCellStyle.Font = base.Font;
				dataGridViewCellStyle.AlignmentInternal = DataGridViewContentAlignment.MiddleLeft;
				dataGridViewCellStyle.WrapModeInternal = DataGridViewTriState.False;
				dataGridViewCellStyle.AddScope(this, DataGridViewCellStyleScopes.DataGridView);
				this.dataGridViewState1[33554432] = true;
				this.dataGridViewState1[1024] = true;
				return dataGridViewCellStyle;
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.DefaultCellStyle" /> property changes.</summary>
		// Token: 0x1400011A RID: 282
		// (add) Token: 0x060018F0 RID: 6384 RVA: 0x0005A079 File Offset: 0x00058279
		// (remove) Token: 0x060018F1 RID: 6385 RVA: 0x0005A08C File Offset: 0x0005828C
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewDefaultCellStyleChangedDescr")]
		public event EventHandler DefaultCellStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWDEFAULTCELLSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWDEFAULTCELLSTYLECHANGED, value);
			}
		}

		// Token: 0x170005B4 RID: 1460
		// (get) Token: 0x060018F2 RID: 6386 RVA: 0x000445F6 File Offset: 0x000427F6
		private static SolidBrush DefaultForeBrush
		{
			get
			{
				return (SolidBrush)SystemBrushes.WindowText;
			}
		}

		// Token: 0x170005B5 RID: 1461
		// (get) Token: 0x060018F3 RID: 6387 RVA: 0x0005A09F File Offset: 0x0005829F
		private static Color DefaultGridColor
		{
			get
			{
				return SystemColors.ControlDark;
			}
		}

		// Token: 0x170005B6 RID: 1462
		// (get) Token: 0x060018F4 RID: 6388 RVA: 0x0004460E File Offset: 0x0004280E
		private static SolidBrush DefaultHeadersBackBrush
		{
			get
			{
				return (SolidBrush)SystemBrushes.Control;
			}
		}

		// Token: 0x170005B7 RID: 1463
		// (get) Token: 0x060018F5 RID: 6389 RVA: 0x0005A0A8 File Offset: 0x000582A8
		private DataGridViewCellStyle DefaultRowHeadersDefaultCellStyle
		{
			get
			{
				DataGridViewCellStyle dataGridViewCellStyle = new DataGridViewCellStyle();
				dataGridViewCellStyle.BackColor = DataGridView.DefaultHeadersBackBrush.Color;
				dataGridViewCellStyle.ForeColor = DataGridView.DefaultForeBrush.Color;
				dataGridViewCellStyle.SelectionBackColor = DataGridView.DefaultSelectionBackBrush.Color;
				dataGridViewCellStyle.SelectionForeColor = DataGridView.DefaultSelectionForeBrush.Color;
				dataGridViewCellStyle.Font = base.Font;
				dataGridViewCellStyle.AlignmentInternal = DataGridViewContentAlignment.MiddleLeft;
				dataGridViewCellStyle.WrapModeInternal = DataGridViewTriState.True;
				dataGridViewCellStyle.AddScope(this, DataGridViewCellStyleScopes.RowHeaders);
				this.dataGridViewState1[134217728] = true;
				return dataGridViewCellStyle;
			}
		}

		// Token: 0x170005B8 RID: 1464
		// (get) Token: 0x060018F6 RID: 6390 RVA: 0x0005A131 File Offset: 0x00058331
		private static SolidBrush DefaultSelectionBackBrush
		{
			get
			{
				return (SolidBrush)SystemBrushes.Highlight;
			}
		}

		// Token: 0x170005B9 RID: 1465
		// (get) Token: 0x060018F7 RID: 6391 RVA: 0x0005A13D File Offset: 0x0005833D
		private static SolidBrush DefaultSelectionForeBrush
		{
			get
			{
				return (SolidBrush)SystemBrushes.HighlightText;
			}
		}

		/// <summary>Gets the default initial size of the control.</summary>
		/// <returns>A <see cref="T:System.Drawing.Size" /> representing the initial size of the control, which is 240 pixels wide by 150 pixels high.</returns>
		// Token: 0x170005BA RID: 1466
		// (get) Token: 0x060018F8 RID: 6392 RVA: 0x0005A149 File Offset: 0x00058349
		protected override Size DefaultSize
		{
			get
			{
				return new Size(240, 150);
			}
		}

		// Token: 0x170005BB RID: 1467
		// (get) Token: 0x060018F9 RID: 6393 RVA: 0x0005A15A File Offset: 0x0005835A
		internal DataGridView.DisplayedBandsData DisplayedBandsInfo
		{
			get
			{
				return this.displayedBandsInfo;
			}
		}

		/// <summary>Gets the rectangle that represents the display area of the control.</summary>
		/// <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the display area of the control.</returns>
		// Token: 0x170005BC RID: 1468
		// (get) Token: 0x060018FA RID: 6394 RVA: 0x0005A164 File Offset: 0x00058364
		public override Rectangle DisplayRectangle
		{
			get
			{
				Rectangle clientRectangle = base.ClientRectangle;
				if (this.horizScrollBar != null && this.horizScrollBar.Visible)
				{
					clientRectangle.Height -= this.horizScrollBar.Height;
				}
				if (this.vertScrollBar != null && this.vertScrollBar.Visible)
				{
					clientRectangle.Width -= this.vertScrollBar.Width;
					if (this.RightToLeftInternal)
					{
						clientRectangle.X = this.vertScrollBar.Width;
					}
				}
				return clientRectangle;
			}
		}

		/// <summary>Gets or sets a value indicating how to begin editing a cell.</summary>
		/// <returns>One of the <see cref="T:System.Windows.Forms.DataGridViewEditMode" /> values. The default is <see cref="F:System.Windows.Forms.DataGridViewEditMode.EditOnKeystrokeOrF2" />.</returns>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.DataGridViewEditMode" /> value.</exception>
		/// <exception cref="T:System.Exception">The specified value when setting this property would cause the control to enter edit mode, but initialization of the editing cell value failed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. The exception object can typically be cast to type <see cref="T:System.FormatException" />.</exception>
		// Token: 0x170005BD RID: 1469
		// (get) Token: 0x060018FB RID: 6395 RVA: 0x0005A1EF File Offset: 0x000583EF
		// (set) Token: 0x060018FC RID: 6396 RVA: 0x0005A1F8 File Offset: 0x000583F8
		[SRCategory("CatBehavior")]
		[DefaultValue(DataGridViewEditMode.EditOnKeystrokeOrF2)]
		[SRDescription("DataGridView_EditModeDescr")]
		public DataGridViewEditMode EditMode
		{
			get
			{
				return this.editMode;
			}
			set
			{
				if (!ClientUtils.IsEnumValid(value, (int)value, 0, 4))
				{
					throw new InvalidEnumArgumentException("value", (int)value, typeof(DataGridViewEditMode));
				}
				if (this.editMode != value)
				{
					this.editMode = value;
					this.OnEditModeChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.EditMode" /> property changes.</summary>
		// Token: 0x1400011B RID: 283
		// (add) Token: 0x060018FD RID: 6397 RVA: 0x0005A246 File Offset: 0x00058446
		// (remove) Token: 0x060018FE RID: 6398 RVA: 0x0005A259 File Offset: 0x00058459
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_EditModeChangedDescr")]
		public event EventHandler EditModeChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWEDITMODECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWEDITMODECHANGED, value);
			}
		}

		// Token: 0x170005BE RID: 1470
		// (get) Token: 0x060018FF RID: 6399 RVA: 0x0005A26C File Offset: 0x0005846C
		internal Point MouseEnteredCellAddress
		{
			get
			{
				return this.ptMouseEnteredCell;
			}
		}

		// Token: 0x170005BF RID: 1471
		// (get) Token: 0x06001900 RID: 6400 RVA: 0x0005A274 File Offset: 0x00058474
		private bool MouseOverEditingControl
		{
			get
			{
				if (this.editingControl != null)
				{
					Point point = base.PointToClient(Control.MousePosition);
					return this.editingControl.Bounds.Contains(point);
				}
				return false;
			}
		}

		// Token: 0x170005C0 RID: 1472
		// (get) Token: 0x06001901 RID: 6401 RVA: 0x0005A2AC File Offset: 0x000584AC
		private bool MouseOverEditingPanel
		{
			get
			{
				if (this.editingPanel != null)
				{
					Point point = base.PointToClient(Control.MousePosition);
					return this.editingPanel.Bounds.Contains(point);
				}
				return false;
			}
		}

		// Token: 0x170005C1 RID: 1473
		// (get) Token: 0x06001902 RID: 6402 RVA: 0x0005A2E4 File Offset: 0x000584E4
		private bool MouseOverScrollBar
		{
			get
			{
				Point point = base.PointToClient(Control.MousePosition);
				return (this.vertScrollBar != null && this.vertScrollBar.Visible && this.vertScrollBar.Bounds.Contains(point)) || (this.horizScrollBar != null && this.horizScrollBar.Visible && this.horizScrollBar.Bounds.Contains(point));
			}
		}

		/// <summary>Gets the control hosted by the current cell, if a cell with an editing control is in edit mode.</summary>
		/// <returns>The <see cref="T:System.Windows.Forms.Control" /> hosted by the current cell.</returns>
		// Token: 0x170005C2 RID: 1474
		// (get) Token: 0x06001903 RID: 6403 RVA: 0x0005A355 File Offset: 0x00058555
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public Control EditingControl
		{
			get
			{
				return this.editingControl;
			}
		}

		// Token: 0x170005C3 RID: 1475
		// (get) Token: 0x06001904 RID: 6404 RVA: 0x0005A35D File Offset: 0x0005855D
		internal AccessibleObject EditingControlAccessibleObject
		{
			get
			{
				if (LocalAppContextSwitches.FreeControlsForRefCountedAccessibleObjectsInLevel5 && this.editingControl == null)
				{
					return null;
				}
				return this.EditingControl.AccessibilityObject;
			}
		}

		/// <summary>Gets the panel that contains the <see cref="P:System.Windows.Forms.DataGridView.EditingControl" />.</summary>
		/// <returns>The <see cref="T:System.Windows.Forms.Panel" /> that contains the <see cref="P:System.Windows.Forms.DataGridView.EditingControl" />.</returns>
		// Token: 0x170005C4 RID: 1476
		// (get) Token: 0x06001905 RID: 6405 RVA: 0x0005A37B File Offset: 0x0005857B
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public Panel EditingPanel
		{
			get
			{
				if (this.editingPanel == null)
				{
					this.editingPanel = (AccessibilityImprovements.Level3 ? new DataGridView.DataGridViewEditingPanel(this) : new Panel());
					this.editingPanel.AccessibleName = SR.GetString("DataGridView_AccEditingPanelAccName");
				}
				return this.editingPanel;
			}
		}

		// Token: 0x170005C5 RID: 1477
		// (get) Token: 0x06001906 RID: 6406 RVA: 0x0005A3BC File Offset: 0x000585BC
		internal DataGridView.DataGridViewEditingPanelAccessibleObject EditingPanelAccessibleObject
		{
			get
			{
				if (this.editingPanelAccessibleObject == null)
				{
					IntSecurity.UnmanagedCode.Assert();
					try
					{
						this.editingPanelAccessibleObject = new DataGridView.DataGridViewEditingPanelAccessibleObject(this, this.EditingPanel);
					}
					finally
					{
						CodeAccessPermission.RevertAssert();
					}
				}
				return this.editingPanelAccessibleObject;
			}
		}

		/// <summary>Gets or sets a value indicating whether row and column headers use the visual styles of the user's current theme if visual styles are enabled for the application.</summary>
		/// <returns>
		///   <see langword="true" /> if visual styles are enabled for the headers; otherwise, <see langword="false" />. The default value is <see langword="true" />.</returns>
		// Token: 0x170005C6 RID: 1478
		// (get) Token: 0x06001907 RID: 6407 RVA: 0x0005A40C File Offset: 0x0005860C
		// (set) Token: 0x06001908 RID: 6408 RVA: 0x0005A41B File Offset: 0x0005861B
		[SRCategory("CatAppearance")]
		[DefaultValue(true)]
		[SRDescription("DataGridView_EnableHeadersVisualStylesDescr")]
		public bool EnableHeadersVisualStyles
		{
			get
			{
				return this.dataGridViewState2[64];
			}
			set
			{
				if (this.dataGridViewState2[64] != value)
				{
					this.dataGridViewState2[64] = value;
					this.OnGlobalAutoSize();
				}
			}
		}

		/// <summary>Gets or sets the first cell currently displayed in the <see cref="T:System.Windows.Forms.DataGridView" />; typically, this cell is in the upper left corner.</summary>
		/// <returns>The first <see cref="T:System.Windows.Forms.DataGridViewCell" /> currently displayed in the control.</returns>
		/// <exception cref="T:System.ArgumentException">The specified cell when setting this property is not in the <see cref="T:System.Windows.Forms.DataGridView" />.</exception>
		/// <exception cref="T:System.InvalidOperationException">The specified cell when setting this property has a <see cref="P:System.Windows.Forms.DataGridViewCell.RowIndex" /> or <see cref="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" /> property value of -1, indicating that it is a header cell or a shared cell.  
		///  -or-  
		///  The specified cell when setting this property has a <see cref="P:System.Windows.Forms.DataGridViewCell.Visible" /> property value of <see langword="false" />.</exception>
		// Token: 0x170005C7 RID: 1479
		// (get) Token: 0x06001909 RID: 6409 RVA: 0x0005A444 File Offset: 0x00058644
		// (set) Token: 0x0600190A RID: 6410 RVA: 0x0005A488 File Offset: 0x00058688
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public DataGridViewCell FirstDisplayedCell
		{
			get
			{
				Point firstDisplayedCellAddress = this.FirstDisplayedCellAddress;
				if (firstDisplayedCellAddress.X >= 0)
				{
					return this.Rows[firstDisplayedCellAddress.Y].Cells[firstDisplayedCellAddress.X];
				}
				return null;
			}
			set
			{
				if (value != null)
				{
					if (value.DataGridView != this)
					{
						throw new ArgumentException(SR.GetString("DataGridView_CellDoesNotBelongToDataGridView"));
					}
					if (value.RowIndex == -1 || value.ColumnIndex == -1)
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_FirstDisplayedCellCannotBeAHeaderOrSharedCell"));
					}
					if (!value.Visible)
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_FirstDisplayedCellCannotBeInvisible"));
					}
					if (!value.Frozen)
					{
						if (!this.Rows[value.RowIndex].Frozen)
						{
							this.FirstDisplayedScrollingRowIndex = value.RowIndex;
						}
						if (!this.Columns[value.ColumnIndex].Frozen)
						{
							this.FirstDisplayedScrollingColumnIndex = value.ColumnIndex;
						}
					}
				}
			}
		}

		// Token: 0x170005C8 RID: 1480
		// (get) Token: 0x0600190B RID: 6411 RVA: 0x0005A540 File Offset: 0x00058740
		private Point FirstDisplayedCellAddress
		{
			get
			{
				Point point = new Point(-1, -1);
				point.Y = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				if (point.Y == -1 && this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0)
				{
					point.Y = this.displayedBandsInfo.FirstDisplayedScrollingRow;
				}
				if (point.Y >= 0)
				{
					point.X = this.FirstDisplayedColumnIndex;
				}
				return point;
			}
		}

		// Token: 0x170005C9 RID: 1481
		// (get) Token: 0x0600190C RID: 6412 RVA: 0x0005A5AC File Offset: 0x000587AC
		internal int FirstDisplayedColumnIndex
		{
			get
			{
				if (!base.IsHandleCreated)
				{
					return -1;
				}
				int num = -1;
				DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
				if (firstColumn != null)
				{
					if (firstColumn.Frozen)
					{
						num = firstColumn.Index;
					}
					else if (this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0)
					{
						num = this.displayedBandsInfo.FirstDisplayedScrollingCol;
					}
				}
				return num;
			}
		}

		// Token: 0x170005CA RID: 1482
		// (get) Token: 0x0600190D RID: 6413 RVA: 0x0005A604 File Offset: 0x00058804
		internal int FirstDisplayedRowIndex
		{
			get
			{
				if (!base.IsHandleCreated)
				{
					return -1;
				}
				int num = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
				if (num != -1 && (this.Rows.GetRowState(num) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None && this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0)
				{
					num = this.displayedBandsInfo.FirstDisplayedScrollingRow;
				}
				return num;
			}
		}

		/// <summary>Gets the width of the portion of the column that is currently scrolled out of view.</summary>
		/// <returns>The width of the portion of the column that is scrolled out of view.</returns>
		// Token: 0x170005CB RID: 1483
		// (get) Token: 0x0600190E RID: 6414 RVA: 0x0005A658 File Offset: 0x00058858
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public int FirstDisplayedScrollingColumnHiddenWidth
		{
			get
			{
				return this.negOffset;
			}
		}

		/// <summary>Gets or sets the index of the column that is the first column displayed on the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <returns>The index of the column that is the first column displayed on the <see cref="T:System.Windows.Forms.DataGridView" />.</returns>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The specified value when setting this property is less than 0 or greater than the number of columns in the control minus 1.</exception>
		/// <exception cref="T:System.InvalidOperationException">The specified value when setting this property indicates a column with a <see cref="P:System.Windows.Forms.DataGridViewColumn.Visible" /> property value of <see langword="false" />.  
		///  -or-  
		///  The specified value when setting this property indicates a column with a <see cref="P:System.Windows.Forms.DataGridViewColumn.Frozen" /> property value of <see langword="true" />.</exception>
		// Token: 0x170005CC RID: 1484
		// (get) Token: 0x0600190F RID: 6415 RVA: 0x0005A660 File Offset: 0x00058860
		// (set) Token: 0x06001910 RID: 6416 RVA: 0x0005A670 File Offset: 0x00058870
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public int FirstDisplayedScrollingColumnIndex
		{
			get
			{
				return this.displayedBandsInfo.FirstDisplayedScrollingCol;
			}
			set
			{
				if (value < 0 || value >= this.Columns.Count)
				{
					throw new ArgumentOutOfRangeException("value");
				}
				if (!this.Columns[value].Visible)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_FirstDisplayedScrollingColumnCannotBeInvisible"));
				}
				if (this.Columns[value].Frozen)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_FirstDisplayedScrollingColumnCannotBeFrozen"));
				}
				if (!base.IsHandleCreated)
				{
					this.CreateHandle();
				}
				int width = this.layout.Data.Width;
				if (width <= 0)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_NoRoomForDisplayedColumns"));
				}
				int columnsWidth = this.Columns.GetColumnsWidth(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				if (columnsWidth >= width)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_FrozenColumnsPreventFirstDisplayedScrollingColumn"));
				}
				if (value == this.displayedBandsInfo.FirstDisplayedScrollingCol)
				{
					return;
				}
				if (this.ptCurrentCell.X >= 0 && !this.CommitEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Scroll, false, false))
				{
					return;
				}
				if (this.IsColumnOutOfBounds(value))
				{
					return;
				}
				bool flag = this.ScrollColumnIntoView(value, -1, true, false);
				int num = this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible) - width;
				while (this.displayedBandsInfo.FirstDisplayedScrollingCol != value && this.HorizontalOffset < num)
				{
					this.ScrollColumns(1);
				}
			}
		}

		/// <summary>Gets or sets the index of the row that is the first row displayed on the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <returns>The index of the row that is the first row displayed on the <see cref="T:System.Windows.Forms.DataGridView" />.</returns>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The specified value when setting this property is less than 0 or greater than the number of rows in the control minus 1.</exception>
		/// <exception cref="T:System.InvalidOperationException">The specified value when setting this property indicates a row with a <see cref="P:System.Windows.Forms.DataGridViewRow.Visible" /> property value of <see langword="false" />.  
		///  -or-  
		///  The specified value when setting this property indicates a column with a <see cref="P:System.Windows.Forms.DataGridViewRow.Frozen" /> property value of <see langword="true" />.</exception>
		// Token: 0x170005CD RID: 1485
		// (get) Token: 0x06001911 RID: 6417 RVA: 0x0005A7A7 File Offset: 0x000589A7
		// (set) Token: 0x06001912 RID: 6418 RVA: 0x0005A7B4 File Offset: 0x000589B4
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public int FirstDisplayedScrollingRowIndex
		{
			get
			{
				return this.displayedBandsInfo.FirstDisplayedScrollingRow;
			}
			set
			{
				if (value < 0 || value >= this.Rows.Count)
				{
					throw new ArgumentOutOfRangeException("value");
				}
				if ((this.Rows.GetRowState(value) & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_FirstDisplayedScrollingRowCannotBeInvisible"));
				}
				if ((this.Rows.GetRowState(value) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_FirstDisplayedScrollingRowCannotBeFrozen"));
				}
				if (!base.IsHandleCreated)
				{
					this.CreateHandle();
				}
				int height = this.layout.Data.Height;
				if (height <= 0)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_NoRoomForDisplayedRows"));
				}
				int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				if (rowsHeight >= height)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_FrozenRowsPreventFirstDisplayedScrollingRow"));
				}
				if (value == this.displayedBandsInfo.FirstDisplayedScrollingRow)
				{
					return;
				}
				if (this.ptCurrentCell.X >= 0 && !this.CommitEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Scroll, false, false))
				{
					return;
				}
				if (this.IsRowOutOfBounds(value))
				{
					return;
				}
				if (value > this.displayedBandsInfo.FirstDisplayedScrollingRow)
				{
					int rowCount = this.Rows.GetRowCount(DataGridViewElementStates.Visible, this.displayedBandsInfo.FirstDisplayedScrollingRow, value);
					this.ScrollRowsByCount(rowCount, (rowCount > 1) ? ScrollEventType.LargeIncrement : ScrollEventType.SmallIncrement);
					return;
				}
				bool flag = this.ScrollRowIntoView(-1, value, true, false);
			}
		}

		/// <summary>Gets or sets the foreground color of the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <returns>A <see cref="T:System.Drawing.Color" /> that represents the foreground color of the <see cref="T:System.Windows.Forms.DataGridView" />. The default is the value of the <see cref="P:System.Windows.Forms.Control.DefaultForeColor" /> property.</returns>
		// Token: 0x170005CE RID: 1486
		// (get) Token: 0x06001913 RID: 6419 RVA: 0x0001A0E7 File Offset: 0x000182E7
		// (set) Token: 0x06001914 RID: 6420 RVA: 0x00013024 File Offset: 0x00011224
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public override Color ForeColor
		{
			get
			{
				return base.ForeColor;
			}
			set
			{
				base.ForeColor = value;
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridView.ForeColor" /> property value changes.</summary>
		// Token: 0x1400011C RID: 284
		// (add) Token: 0x06001915 RID: 6421 RVA: 0x0005A8EE File Offset: 0x00058AEE
		// (remove) Token: 0x06001916 RID: 6422 RVA: 0x0005A8F7 File Offset: 0x00058AF7
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public new event EventHandler ForeColorChanged
		{
			add
			{
				base.ForeColorChanged += value;
			}
			remove
			{
				base.ForeColorChanged -= value;
			}
		}

		/// <summary>Gets or sets the font of the text displayed by the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <returns>The <see cref="T:System.Drawing.Font" /> to apply to the text displayed by the control. The default is the value of the <see cref="P:System.Windows.Forms.Control.DefaultFont" /> property.</returns>
		// Token: 0x170005CF RID: 1487
		// (get) Token: 0x06001917 RID: 6423 RVA: 0x0001A0D6 File Offset: 0x000182D6
		// (set) Token: 0x06001918 RID: 6424 RVA: 0x0001A0DE File Offset: 0x000182DE
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public override Font Font
		{
			get
			{
				return base.Font;
			}
			set
			{
				base.Font = value;
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridView.Font" /> property value changes.</summary>
		// Token: 0x1400011D RID: 285
		// (add) Token: 0x06001919 RID: 6425 RVA: 0x0005A900 File Offset: 0x00058B00
		// (remove) Token: 0x0600191A RID: 6426 RVA: 0x0005A909 File Offset: 0x00058B09
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public new event EventHandler FontChanged
		{
			add
			{
				base.FontChanged += value;
			}
			remove
			{
				base.FontChanged -= value;
			}
		}

		/// <summary>Gets or sets the color of the grid lines separating the cells of the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <returns>A <see cref="T:System.Drawing.Color" /> or <see cref="T:System.Drawing.SystemColors" /> that represents the color of the grid lines. The default is <see cref="F:System.Drawing.KnownColor.ControlDarkDark" />.</returns>
		/// <exception cref="T:System.ArgumentException">The specified value when setting this property is <see cref="F:System.Drawing.Color.Empty" />.  
		///  -or-  
		///  The specified value when setting this property has a <see cref="P:System.Drawing.Color.A" /> property value that is less that 255.</exception>
		// Token: 0x170005D0 RID: 1488
		// (get) Token: 0x0600191B RID: 6427 RVA: 0x0005A912 File Offset: 0x00058B12
		// (set) Token: 0x0600191C RID: 6428 RVA: 0x0005A920 File Offset: 0x00058B20
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridViewGridColorDescr")]
		public Color GridColor
		{
			get
			{
				return this.gridPen.Color;
			}
			set
			{
				if (value.IsEmpty)
				{
					throw new ArgumentException(SR.GetString("DataGridView_EmptyColor", new object[] { "GridColor" }));
				}
				if (value.A < 255)
				{
					throw new ArgumentException(SR.GetString("DataGridView_TransparentColor", new object[] { "GridColor" }));
				}
				if (!value.Equals(this.gridPen.Color))
				{
					if (this.gridPen != null)
					{
						this.gridPen.Dispose();
					}
					this.gridPen = new Pen(value);
					this.OnGridColorChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.GridColor" /> property changes.</summary>
		// Token: 0x1400011E RID: 286
		// (add) Token: 0x0600191D RID: 6429 RVA: 0x0005A9C9 File Offset: 0x00058BC9
		// (remove) Token: 0x0600191E RID: 6430 RVA: 0x0005A9DC File Offset: 0x00058BDC
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewOnGridColorChangedDescr")]
		public event EventHandler GridColorChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWGRIDCOLORCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWGRIDCOLORCHANGED, value);
			}
		}

		// Token: 0x0600191F RID: 6431 RVA: 0x0005A9F0 File Offset: 0x00058BF0
		private bool ShouldSerializeGridColor()
		{
			return !this.GridPen.Color.Equals(DataGridView.DefaultGridColor);
		}

		// Token: 0x170005D1 RID: 1489
		// (get) Token: 0x06001920 RID: 6432 RVA: 0x0005AA23 File Offset: 0x00058C23
		internal Pen GridPen
		{
			get
			{
				return this.gridPen;
			}
		}

		// Token: 0x170005D2 RID: 1490
		// (get) Token: 0x06001921 RID: 6433 RVA: 0x0005AA2B File Offset: 0x00058C2B
		// (set) Token: 0x06001922 RID: 6434 RVA: 0x0005AA34 File Offset: 0x00058C34
		internal int HorizontalOffset
		{
			get
			{
				return this.horizontalOffset;
			}
			set
			{
				if (value < 0)
				{
					value = 0;
				}
				int num = this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible) - this.layout.Data.Width;
				if (value > num && num > 0)
				{
					value = num;
				}
				if (value == this.horizontalOffset)
				{
					return;
				}
				int firstDisplayedScrollingCol = this.displayedBandsInfo.FirstDisplayedScrollingCol;
				int num2 = this.horizontalOffset - value;
				if (this.horizScrollBar.Enabled)
				{
					this.horizScrollBar.Value = value;
				}
				this.horizontalOffset = value;
				int columnsWidth = this.Columns.GetColumnsWidth(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				Rectangle rectangle = this.layout.Data;
				if (this.layout.ColumnHeadersVisible)
				{
					rectangle = Rectangle.Union(rectangle, this.layout.ColumnHeaders);
				}
				else if (this.SingleVerticalBorderAdded)
				{
					int num3;
					if (!this.RightToLeftInternal)
					{
						num3 = rectangle.X;
						rectangle.X = num3 - 1;
					}
					num3 = rectangle.Width;
					rectangle.Width = num3 + 1;
				}
				if (this.SingleVerticalBorderAdded && columnsWidth > 0)
				{
					int num3;
					if (!this.RightToLeftInternal)
					{
						num3 = rectangle.X;
						rectangle.X = num3 + 1;
					}
					num3 = rectangle.Width;
					rectangle.Width = num3 - 1;
				}
				if (!this.RightToLeftInternal)
				{
					rectangle.X += columnsWidth;
				}
				rectangle.Width -= columnsWidth;
				this.displayedBandsInfo.FirstDisplayedScrollingCol = this.ComputeFirstVisibleScrollingColumn();
				this.ComputeVisibleColumns();
				if (this.editingControl != null && !this.Columns[this.ptCurrentCell.X].Frozen && this.displayedBandsInfo.FirstDisplayedScrollingCol > -1)
				{
					this.PositionEditingControl(true, false, false);
				}
				this.UpdateMouseEnteredCell(null, null);
				ScrollEventType scrollEventType;
				if (firstDisplayedScrollingCol == this.displayedBandsInfo.FirstDisplayedScrollingCol)
				{
					scrollEventType = ((num2 > 0) ? ScrollEventType.SmallIncrement : ScrollEventType.SmallDecrement);
				}
				else if (this.Columns.DisplayInOrder(firstDisplayedScrollingCol, this.displayedBandsInfo.FirstDisplayedScrollingCol))
				{
					scrollEventType = ((this.Columns.GetColumnCount(DataGridViewElementStates.Visible, firstDisplayedScrollingCol, this.displayedBandsInfo.FirstDisplayedScrollingCol) > 1) ? ScrollEventType.LargeIncrement : ScrollEventType.SmallIncrement);
				}
				else
				{
					scrollEventType = ((this.Columns.GetColumnCount(DataGridViewElementStates.Visible, this.displayedBandsInfo.FirstDisplayedScrollingCol, firstDisplayedScrollingCol) > 1) ? ScrollEventType.LargeDecrement : ScrollEventType.SmallDecrement);
				}
				NativeMethods.RECT[] array = this.CreateScrollableRegion(rectangle);
				if (this.RightToLeftInternal)
				{
					num2 = -num2;
				}
				this.ScrollRectangles(array, num2);
				if (!this.dataGridViewState2[32768])
				{
					this.OnScroll(scrollEventType, this.horizontalOffset + num2, this.horizontalOffset, ScrollOrientation.HorizontalScroll);
				}
				this.FlushDisplayedChanged();
			}
		}

		/// <summary>Gets the horizontal scroll bar of the control.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.ScrollBar" /> representing the horizontal scroll bar.</returns>
		// Token: 0x170005D3 RID: 1491
		// (get) Token: 0x06001923 RID: 6435 RVA: 0x0005ACA6 File Offset: 0x00058EA6
		protected ScrollBar HorizontalScrollBar
		{
			get
			{
				return this.horizScrollBar;
			}
		}

		/// <summary>Gets or sets the number of pixels by which the control is scrolled horizontally.</summary>
		/// <returns>The number of pixels by which the control is scrolled horizontally.</returns>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The specified value when setting this property is less than 0.</exception>
		// Token: 0x170005D4 RID: 1492
		// (get) Token: 0x06001924 RID: 6436 RVA: 0x0005AA2B File Offset: 0x00058C2B
		// (set) Token: 0x06001925 RID: 6437 RVA: 0x0005ACB0 File Offset: 0x00058EB0
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public int HorizontalScrollingOffset
		{
			get
			{
				return this.horizontalOffset;
			}
			set
			{
				if (value < 0)
				{
					throw new ArgumentOutOfRangeException("HorizontalScrollingOffset", SR.GetString("InvalidLowBoundArgumentEx", new object[]
					{
						"HorizontalScrollingOffset",
						value.ToString(CultureInfo.CurrentCulture),
						0.ToString(CultureInfo.CurrentCulture)
					}));
				}
				if (value > 0 && this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible) - this.layout.Data.Width <= 0)
				{
					return;
				}
				if (value == this.horizontalOffset)
				{
					return;
				}
				this.HorizontalOffset = value;
			}
		}

		// Token: 0x170005D5 RID: 1493
		// (get) Token: 0x06001926 RID: 6438 RVA: 0x0005AD3B File Offset: 0x00058F3B
		private Timer HorizScrollTimer
		{
			get
			{
				if (this.horizScrollTimer == null)
				{
					this.horizScrollTimer = new Timer();
					this.horizScrollTimer.Tick += this.HorizScrollTimer_Tick;
				}
				return this.horizScrollTimer;
			}
		}

		// Token: 0x170005D6 RID: 1494
		// (get) Token: 0x06001927 RID: 6439 RVA: 0x0005AD6D File Offset: 0x00058F6D
		private bool InAdjustFillingColumns
		{
			get
			{
				return this.dataGridViewOper[524288] || this.dataGridViewOper[262144];
			}
		}

		// Token: 0x170005D7 RID: 1495
		// (get) Token: 0x06001928 RID: 6440 RVA: 0x0005AD93 File Offset: 0x00058F93
		internal bool InBeginEdit
		{
			get
			{
				return this.dataGridViewOper[2097152];
			}
		}

		// Token: 0x170005D8 RID: 1496
		// (get) Token: 0x06001929 RID: 6441 RVA: 0x0005ADA5 File Offset: 0x00058FA5
		// (set) Token: 0x0600192A RID: 6442 RVA: 0x0005ADB7 File Offset: 0x00058FB7
		internal bool InDisplayIndexAdjustments
		{
			get
			{
				return this.dataGridViewOper[2048];
			}
			set
			{
				this.dataGridViewOper[2048] = value;
			}
		}

		// Token: 0x170005D9 RID: 1497
		// (get) Token: 0x0600192B RID: 6443 RVA: 0x0005ADCA File Offset: 0x00058FCA
		internal bool InEndEdit
		{
			get
			{
				return this.dataGridViewOper[4194304];
			}
		}

		// Token: 0x170005DA RID: 1498
		// (get) Token: 0x0600192C RID: 6444 RVA: 0x0005ADDC File Offset: 0x00058FDC
		private DataGridViewCellStyle InheritedEditingCellStyle
		{
			get
			{
				if (this.ptCurrentCell.X == -1)
				{
					return null;
				}
				return this.CurrentCellInternal.GetInheritedStyleInternal(this.ptCurrentCell.Y);
			}
		}

		// Token: 0x170005DB RID: 1499
		// (get) Token: 0x0600192D RID: 6445 RVA: 0x0005AE04 File Offset: 0x00059004
		internal bool InInitialization
		{
			get
			{
				return this.dataGridViewState2[524288];
			}
		}

		// Token: 0x170005DC RID: 1500
		// (get) Token: 0x0600192E RID: 6446 RVA: 0x0005AE16 File Offset: 0x00059016
		internal bool InSortOperation
		{
			get
			{
				return this.dataGridViewOper[64];
			}
		}

		/// <summary>Gets a value indicating whether the current cell has uncommitted changes.</summary>
		/// <returns>
		///   <see langword="true" /> if the current cell has uncommitted changes; otherwise, <see langword="false" />.</returns>
		// Token: 0x170005DD RID: 1501
		// (get) Token: 0x0600192F RID: 6447 RVA: 0x0005AE25 File Offset: 0x00059025
		[Browsable(false)]
		public bool IsCurrentCellDirty
		{
			get
			{
				return this.dataGridViewState1[131072];
			}
		}

		// Token: 0x170005DE RID: 1502
		// (set) Token: 0x06001930 RID: 6448 RVA: 0x0005AE37 File Offset: 0x00059037
		private bool IsCurrentCellDirtyInternal
		{
			set
			{
				if (value != this.dataGridViewState1[131072])
				{
					this.dataGridViewState1[131072] = value;
					this.OnCurrentCellDirtyStateChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Gets a value indicating whether the currently active cell is being edited.</summary>
		/// <returns>
		///   <see langword="true" /> if the current cell is being edited; otherwise, <see langword="false" />.</returns>
		// Token: 0x170005DF RID: 1503
		// (get) Token: 0x06001931 RID: 6449 RVA: 0x0005AE68 File Offset: 0x00059068
		[Browsable(false)]
		public bool IsCurrentCellInEditMode
		{
			get
			{
				return this.editingControl != null || this.dataGridViewState1[32768];
			}
		}

		/// <summary>Gets a value indicating whether the current row has uncommitted changes.</summary>
		/// <returns>
		///   <see langword="true" /> if the current row has uncommitted changes; otherwise, <see langword="false" />.</returns>
		// Token: 0x170005E0 RID: 1504
		// (get) Token: 0x06001932 RID: 6450 RVA: 0x0005AE84 File Offset: 0x00059084
		[Browsable(false)]
		public bool IsCurrentRowDirty
		{
			get
			{
				if (!this.VirtualMode)
				{
					return this.dataGridViewState1[262144] || this.IsCurrentCellDirty;
				}
				QuestionEventArgs questionEventArgs = new QuestionEventArgs(this.dataGridViewState1[262144] || this.IsCurrentCellDirty);
				this.OnRowDirtyStateNeeded(questionEventArgs);
				return questionEventArgs.Response;
			}
		}

		// Token: 0x170005E1 RID: 1505
		// (set) Token: 0x06001933 RID: 6451 RVA: 0x0005AEE4 File Offset: 0x000590E4
		internal bool IsCurrentRowDirtyInternal
		{
			set
			{
				if (value != this.dataGridViewState1[262144])
				{
					this.dataGridViewState1[262144] = value;
					if (this.RowHeadersVisible && this.ShowEditingIcon && this.ptCurrentCell.Y >= 0)
					{
						this.InvalidateCellPrivate(-1, this.ptCurrentCell.Y);
					}
				}
			}
		}

		// Token: 0x170005E2 RID: 1506
		// (get) Token: 0x06001934 RID: 6452 RVA: 0x0005AF48 File Offset: 0x00059148
		private bool IsEscapeKeyEffective
		{
			get
			{
				return this.dataGridViewOper[1] || this.dataGridViewOper[2] || this.dataGridViewOper[128] || this.dataGridViewOper[256] || this.dataGridViewOper[32] || this.IsCurrentCellDirty || ((this.VirtualMode || this.DataSource != null) && this.IsCurrentRowDirty) || (this.EditMode != DataGridViewEditMode.EditOnEnter && this.editingControl != null) || this.dataGridViewState1[524288];
			}
		}

		// Token: 0x170005E3 RID: 1507
		// (get) Token: 0x06001935 RID: 6453 RVA: 0x0005AFEC File Offset: 0x000591EC
		private bool IsMinimized
		{
			get
			{
				Form form = base.TopLevelControlInternal as Form;
				return form != null && form.WindowState == FormWindowState.Minimized;
			}
		}

		// Token: 0x170005E4 RID: 1508
		// (get) Token: 0x06001936 RID: 6454 RVA: 0x0005B014 File Offset: 0x00059214
		internal bool IsRestricted
		{
			get
			{
				if (!this.dataGridViewState1[268435456])
				{
					this.dataGridViewState1[536870912] = false;
					try
					{
						IntSecurity.AllWindows.Demand();
					}
					catch (SecurityException)
					{
						this.dataGridViewState1[536870912] = true;
					}
					catch
					{
						this.dataGridViewState1[536870912] = true;
						this.dataGridViewState1[268435456] = true;
						throw;
					}
					this.dataGridViewState1[268435456] = true;
				}
				return this.dataGridViewState1[536870912];
			}
		}

		// Token: 0x06001937 RID: 6455 RVA: 0x0005B0C8 File Offset: 0x000592C8
		private bool IsSharedCellReadOnly(DataGridViewCell dataGridViewCell, int rowIndex)
		{
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			return this.ReadOnly || (rowState & DataGridViewElementStates.ReadOnly) != DataGridViewElementStates.None || (dataGridViewCell.OwningColumn != null && dataGridViewCell.OwningColumn.ReadOnly) || dataGridViewCell.StateIncludes(DataGridViewElementStates.ReadOnly);
		}

		// Token: 0x06001938 RID: 6456 RVA: 0x0005B110 File Offset: 0x00059310
		internal bool IsSharedCellSelected(DataGridViewCell dataGridViewCell, int rowIndex)
		{
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			return (rowState & DataGridViewElementStates.Selected) != DataGridViewElementStates.None || (dataGridViewCell.OwningColumn != null && dataGridViewCell.OwningColumn.Selected) || dataGridViewCell.StateIncludes(DataGridViewElementStates.Selected);
		}

		// Token: 0x06001939 RID: 6457 RVA: 0x0005B150 File Offset: 0x00059350
		internal bool IsSharedCellVisible(DataGridViewCell dataGridViewCell, int rowIndex)
		{
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			return (rowState & DataGridViewElementStates.Visible) != DataGridViewElementStates.None && dataGridViewCell.OwningColumn != null && dataGridViewCell.OwningColumn.Visible;
		}

		// Token: 0x170005E5 RID: 1509
		// (get) Token: 0x0600193A RID: 6458 RVA: 0x0005B187 File Offset: 0x00059387
		internal DataGridView.LayoutData LayoutInfo
		{
			get
			{
				if (this.layout.dirty && base.IsHandleCreated)
				{
					this.PerformLayoutPrivate(false, true, false, false);
				}
				return this.layout;
			}
		}

		// Token: 0x170005E6 RID: 1510
		// (get) Token: 0x0600193B RID: 6459 RVA: 0x0005B1AE File Offset: 0x000593AE
		internal Point MouseDownCellAddress
		{
			get
			{
				return this.ptMouseDownCell;
			}
		}

		/// <summary>Gets or sets a value indicating whether the user is allowed to select more than one cell, row, or column of the <see cref="T:System.Windows.Forms.DataGridView" /> at a time.</summary>
		/// <returns>
		///   <see langword="true" /> if the user can select more than one cell, row, or column at a time; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
		// Token: 0x170005E7 RID: 1511
		// (get) Token: 0x0600193C RID: 6460 RVA: 0x0005B1B6 File Offset: 0x000593B6
		// (set) Token: 0x0600193D RID: 6461 RVA: 0x0005B1C8 File Offset: 0x000593C8
		[SRCategory("CatBehavior")]
		[DefaultValue(true)]
		[SRDescription("DataGridView_MultiSelectDescr")]
		public bool MultiSelect
		{
			get
			{
				return this.dataGridViewState1[128];
			}
			set
			{
				if (this.MultiSelect != value)
				{
					this.ClearSelection();
					this.dataGridViewState1[128] = value;
					this.OnMultiSelectChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.MultiSelect" /> property changes.</summary>
		// Token: 0x1400011F RID: 287
		// (add) Token: 0x0600193E RID: 6462 RVA: 0x0005B1F5 File Offset: 0x000593F5
		// (remove) Token: 0x0600193F RID: 6463 RVA: 0x0005B208 File Offset: 0x00059408
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewOnMultiSelectChangedDescr")]
		public event EventHandler MultiSelectChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWMULTISELECTCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWMULTISELECTCHANGED, value);
			}
		}

		/// <summary>Gets the index of the row for new records.</summary>
		/// <returns>The index of the row for new records, or -1 if <see cref="P:System.Windows.Forms.DataGridView.AllowUserToAddRows" /> is <see langword="false" />.</returns>
		// Token: 0x170005E8 RID: 1512
		// (get) Token: 0x06001940 RID: 6464 RVA: 0x0005B21B File Offset: 0x0005941B
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public int NewRowIndex
		{
			get
			{
				return this.newRowIndex;
			}
		}

		// Token: 0x170005E9 RID: 1513
		// (get) Token: 0x06001941 RID: 6465 RVA: 0x0005B223 File Offset: 0x00059423
		internal bool NoDimensionChangeAllowed
		{
			get
			{
				return this.noDimensionChangeCount > 0;
			}
		}

		// Token: 0x170005EA RID: 1514
		// (get) Token: 0x06001942 RID: 6466 RVA: 0x0005B22E File Offset: 0x0005942E
		// (set) Token: 0x06001943 RID: 6467 RVA: 0x0005B236 File Offset: 0x00059436
		private int NoSelectionChangeCount
		{
			get
			{
				return this.noSelectionChangeCount;
			}
			set
			{
				this.noSelectionChangeCount = value;
				if (value == 0)
				{
					this.FlushSelectionChanged();
				}
			}
		}

		/// <summary>This property is not relevant for this control.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.Padding" /> instance.</returns>
		// Token: 0x170005EB RID: 1515
		// (get) Token: 0x06001944 RID: 6468 RVA: 0x00013442 File Offset: 0x00011642
		// (set) Token: 0x06001945 RID: 6469 RVA: 0x0001344A File Offset: 0x0001164A
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public new Padding Padding
		{
			get
			{
				return base.Padding;
			}
			set
			{
				base.Padding = value;
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.Padding" /> property changes.</summary>
		// Token: 0x14000120 RID: 288
		// (add) Token: 0x06001946 RID: 6470 RVA: 0x00013453 File Offset: 0x00011653
		// (remove) Token: 0x06001947 RID: 6471 RVA: 0x0001345C File Offset: 0x0001165C
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public new event EventHandler PaddingChanged
		{
			add
			{
				base.PaddingChanged += value;
			}
			remove
			{
				base.PaddingChanged -= value;
			}
		}

		// Token: 0x170005EC RID: 1516
		// (get) Token: 0x06001948 RID: 6472 RVA: 0x0005B248 File Offset: 0x00059448
		internal DataGridViewCellStyle PlaceholderCellStyle
		{
			get
			{
				if (this.placeholderCellStyle == null)
				{
					this.placeholderCellStyle = new DataGridViewCellStyle();
				}
				return this.placeholderCellStyle;
			}
		}

		/// <summary>Gets or sets a value indicating whether the user can edit the cells of the <see cref="T:System.Windows.Forms.DataGridView" /> control.</summary>
		/// <returns>
		///   <see langword="true" /> if the user cannot edit the cells of the <see cref="T:System.Windows.Forms.DataGridView" /> control; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
		/// <exception cref="T:System.InvalidOperationException">The specified value when setting this property is <see langword="true" />, the current cell is in edit mode, and the current cell contains changes that cannot be committed.</exception>
		/// <exception cref="T:System.Exception">The specified value when setting this property would cause the control to enter edit mode, but initialization of the editing cell value failed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. The exception object can typically be cast to type <see cref="T:System.FormatException" />.</exception>
		// Token: 0x170005ED RID: 1517
		// (get) Token: 0x06001949 RID: 6473 RVA: 0x0005B263 File Offset: 0x00059463
		// (set) Token: 0x0600194A RID: 6474 RVA: 0x0005B278 File Offset: 0x00059478
		[Browsable(true)]
		[DefaultValue(false)]
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_ReadOnlyDescr")]
		public bool ReadOnly
		{
			get
			{
				return this.dataGridViewState1[1048576];
			}
			set
			{
				if (value != this.dataGridViewState1[1048576])
				{
					if (value && this.ptCurrentCell.X != -1 && this.IsCurrentCellInEditMode && !this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit, DataGridView.DataGridViewValidateCellInternal.Always, false, false, false, false, false, true, false, false))
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_CommitFailedCannotCompleteOperation"));
					}
					this.dataGridViewState1[1048576] = value;
					if (value)
					{
						try
						{
							this.dataGridViewOper[16384] = true;
							for (int i = 0; i < this.Columns.Count; i++)
							{
								this.SetReadOnlyColumnCore(i, false);
							}
							int count = this.Rows.Count;
							for (int j = 0; j < count; j++)
							{
								this.SetReadOnlyRowCore(j, false);
							}
						}
						finally
						{
							this.dataGridViewOper[16384] = false;
						}
					}
					this.OnReadOnlyChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridView.ReadOnly" /> property changes.</summary>
		// Token: 0x14000121 RID: 289
		// (add) Token: 0x0600194B RID: 6475 RVA: 0x0005B36C File Offset: 0x0005956C
		// (remove) Token: 0x0600194C RID: 6476 RVA: 0x0005B37F File Offset: 0x0005957F
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewOnReadOnlyChangedDescr")]
		public event EventHandler ReadOnlyChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWREADONLYCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWREADONLYCHANGED, value);
			}
		}

		// Token: 0x0600194D RID: 6477 RVA: 0x0005B392 File Offset: 0x00059592
		private void ResetCurrentCell()
		{
			if (this.ptCurrentCell.X != -1 && !this.SetCurrentCellAddressCore(-1, -1, true, true, false))
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CellChangeCannotBeCommittedOrAborted"));
			}
		}

		// Token: 0x170005EE RID: 1518
		// (get) Token: 0x0600194E RID: 6478 RVA: 0x0005B3BF File Offset: 0x000595BF
		internal bool ResizingOperationAboutToStart
		{
			get
			{
				return this.dataGridViewOper[8388608];
			}
		}

		// Token: 0x170005EF RID: 1519
		// (get) Token: 0x0600194F RID: 6479 RVA: 0x0005B3D4 File Offset: 0x000595D4
		internal bool RightToLeftInternal
		{
			get
			{
				if (this.dataGridViewState2[4096])
				{
					return this.dataGridViewState2[2048];
				}
				this.dataGridViewState2[2048] = this.RightToLeft == RightToLeft.Yes;
				this.dataGridViewState2[4096] = true;
				return this.dataGridViewState2[2048];
			}
		}

		/// <summary>Gets or sets the number of rows displayed in the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <returns>The number of rows to display in the <see cref="T:System.Windows.Forms.DataGridView" />.</returns>
		/// <exception cref="T:System.ArgumentException">The specified value when setting this property is less than 0.  
		///  -or-  
		///  The specified value is less than 1 and <see cref="P:System.Windows.Forms.DataGridView.AllowUserToAddRows" /> is set to <see langword="true" />.</exception>
		/// <exception cref="T:System.InvalidOperationException">When setting this property, the <see cref="P:System.Windows.Forms.DataGridView.DataSource" /> property is set.</exception>
		// Token: 0x170005F0 RID: 1520
		// (get) Token: 0x06001950 RID: 6480 RVA: 0x0005B43E File Offset: 0x0005963E
		// (set) Token: 0x06001951 RID: 6481 RVA: 0x0005B44C File Offset: 0x0005964C
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[DefaultValue(0)]
		public int RowCount
		{
			get
			{
				return this.Rows.Count;
			}
			set
			{
				if (this.AllowUserToAddRowsInternal)
				{
					if (value < 1)
					{
						throw new ArgumentOutOfRangeException("RowCount", SR.GetString("InvalidLowBoundArgumentEx", new object[]
						{
							"RowCount",
							value.ToString(CultureInfo.CurrentCulture),
							1.ToString(CultureInfo.CurrentCulture)
						}));
					}
				}
				else if (value < 0)
				{
					throw new ArgumentOutOfRangeException("RowCount", SR.GetString("InvalidLowBoundArgumentEx", new object[]
					{
						"RowCount",
						value.ToString(CultureInfo.CurrentCulture),
						0.ToString(CultureInfo.CurrentCulture)
					}));
				}
				if (this.DataSource != null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotSetRowCountOnDataBoundDataGridView"));
				}
				if (value != this.Rows.Count)
				{
					if (value == 0)
					{
						this.Rows.Clear();
						return;
					}
					if (value < this.Rows.Count)
					{
						while (value < this.Rows.Count)
						{
							int count = this.Rows.Count;
							this.Rows.RemoveAt(count - (this.AllowUserToAddRowsInternal ? 2 : 1));
							if (this.Rows.Count >= count)
							{
								return;
							}
						}
						return;
					}
					if (this.Columns.Count == 0)
					{
						DataGridViewTextBoxColumn dataGridViewTextBoxColumn = new DataGridViewTextBoxColumn();
						this.Columns.Add(dataGridViewTextBoxColumn);
					}
					int num = value - this.Rows.Count;
					if (num > 0)
					{
						this.Rows.Add(num);
					}
				}
			}
		}

		/// <summary>Gets or sets the border style of the row header cells.</summary>
		/// <returns>One of the <see cref="T:System.Windows.Forms.DataGridViewHeaderBorderStyle" /> values.</returns>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.DataGridViewHeaderBorderStyle" /> value.</exception>
		/// <exception cref="T:System.ArgumentException">The specified value when setting this property is <see cref="F:System.Windows.Forms.DataGridViewHeaderBorderStyle.Custom" />.</exception>
		// Token: 0x170005F1 RID: 1521
		// (get) Token: 0x06001952 RID: 6482 RVA: 0x0005B5BC File Offset: 0x000597BC
		// (set) Token: 0x06001953 RID: 6483 RVA: 0x0005B608 File Offset: 0x00059808
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridView_RowHeadersBorderStyleDescr")]
		[Browsable(true)]
		[DefaultValue(DataGridViewHeaderBorderStyle.Raised)]
		public DataGridViewHeaderBorderStyle RowHeadersBorderStyle
		{
			get
			{
				switch (this.advancedRowHeadersBorderStyle.All)
				{
				case DataGridViewAdvancedCellBorderStyle.NotSet:
					return DataGridViewHeaderBorderStyle.Custom;
				case DataGridViewAdvancedCellBorderStyle.None:
					return DataGridViewHeaderBorderStyle.None;
				case DataGridViewAdvancedCellBorderStyle.Single:
					return DataGridViewHeaderBorderStyle.Single;
				case DataGridViewAdvancedCellBorderStyle.InsetDouble:
					return DataGridViewHeaderBorderStyle.Sunken;
				case DataGridViewAdvancedCellBorderStyle.OutsetPartial:
					return DataGridViewHeaderBorderStyle.Raised;
				}
				return DataGridViewHeaderBorderStyle.Custom;
			}
			set
			{
				if (!ClientUtils.IsEnumValid(value, (int)value, 0, 4))
				{
					throw new InvalidEnumArgumentException("value", (int)value, typeof(DataGridViewHeaderBorderStyle));
				}
				if (value != this.RowHeadersBorderStyle)
				{
					if (value == DataGridViewHeaderBorderStyle.Custom)
					{
						throw new ArgumentException(SR.GetString("DataGridView_CustomCellBorderStyleInvalid", new object[] { "RowHeadersBorderStyle" }));
					}
					this.dataGridViewOper[65536] = true;
					try
					{
						switch (value)
						{
						case DataGridViewHeaderBorderStyle.Single:
							this.advancedRowHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.Single;
							break;
						case DataGridViewHeaderBorderStyle.Raised:
							this.advancedRowHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.OutsetPartial;
							break;
						case DataGridViewHeaderBorderStyle.Sunken:
							this.advancedRowHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.InsetDouble;
							break;
						case DataGridViewHeaderBorderStyle.None:
							this.advancedRowHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
							break;
						}
					}
					finally
					{
						this.dataGridViewOper[65536] = false;
					}
					this.OnRowHeadersBorderStyleChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridView.RowHeadersBorderStyle" /> property changes.</summary>
		// Token: 0x14000122 RID: 290
		// (add) Token: 0x06001954 RID: 6484 RVA: 0x0005B6F8 File Offset: 0x000598F8
		// (remove) Token: 0x06001955 RID: 6485 RVA: 0x0005B70B File Offset: 0x0005990B
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_RowHeadersBorderStyleChangedDescr")]
		public event EventHandler RowHeadersBorderStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERSBORDERSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERSBORDERSTYLECHANGED, value);
			}
		}

		/// <summary>Gets or sets the default style applied to the row header cells.</summary>
		/// <returns>The <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> that represents the default style applied to the row header cells.</returns>
		// Token: 0x170005F2 RID: 1522
		// (get) Token: 0x06001956 RID: 6486 RVA: 0x0005B71E File Offset: 0x0005991E
		// (set) Token: 0x06001957 RID: 6487 RVA: 0x0005B73C File Offset: 0x0005993C
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridView_RowHeadersDefaultCellStyleDescr")]
		[AmbientValue(null)]
		public DataGridViewCellStyle RowHeadersDefaultCellStyle
		{
			get
			{
				if (this.rowHeadersDefaultCellStyle == null)
				{
					this.rowHeadersDefaultCellStyle = this.DefaultRowHeadersDefaultCellStyle;
				}
				return this.rowHeadersDefaultCellStyle;
			}
			set
			{
				DataGridViewCellStyle dataGridViewCellStyle = this.RowHeadersDefaultCellStyle;
				dataGridViewCellStyle.RemoveScope(DataGridViewCellStyleScopes.RowHeaders);
				this.rowHeadersDefaultCellStyle = value;
				if (value != null)
				{
					this.rowHeadersDefaultCellStyle.AddScope(this, DataGridViewCellStyleScopes.RowHeaders);
				}
				DataGridViewCellStyleDifferences differencesFrom = dataGridViewCellStyle.GetDifferencesFrom(this.RowHeadersDefaultCellStyle);
				if (differencesFrom != DataGridViewCellStyleDifferences.None)
				{
					this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = differencesFrom == DataGridViewCellStyleDifferences.AffectPreferredSize;
					this.OnRowHeadersDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyle" /> property changes.</summary>
		// Token: 0x14000123 RID: 291
		// (add) Token: 0x06001958 RID: 6488 RVA: 0x0005B79B File Offset: 0x0005999B
		// (remove) Token: 0x06001959 RID: 6489 RVA: 0x0005B7AE File Offset: 0x000599AE
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewRowHeadersDefaultCellStyleChangedDescr")]
		public event EventHandler RowHeadersDefaultCellStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERSDEFAULTCELLSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERSDEFAULTCELLSTYLECHANGED, value);
			}
		}

		/// <summary>Gets or sets a value indicating whether the column that contains row headers is displayed.</summary>
		/// <returns>
		///   <see langword="true" /> if the column that contains row headers is displayed; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
		/// <exception cref="T:System.InvalidOperationException">The specified value when setting this property is <see langword="false" /> and the <see cref="P:System.Windows.Forms.DataGridView.AutoSizeRowsMode" /> property is set to <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.AllHeaders" /> or <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.DisplayedHeaders" />.</exception>
		// Token: 0x170005F3 RID: 1523
		// (get) Token: 0x0600195A RID: 6490 RVA: 0x0005B7C1 File Offset: 0x000599C1
		// (set) Token: 0x0600195B RID: 6491 RVA: 0x0005B7D0 File Offset: 0x000599D0
		[SRCategory("CatAppearance")]
		[DefaultValue(true)]
		[SRDescription("DataGridViewRowHeadersVisibleDescr")]
		public bool RowHeadersVisible
		{
			get
			{
				return this.dataGridViewState1[16];
			}
			set
			{
				if (this.RowHeadersVisible != value)
				{
					if (!value && (this.autoSizeRowsMode == DataGridViewAutoSizeRowsMode.AllHeaders || this.autoSizeRowsMode == DataGridViewAutoSizeRowsMode.DisplayedHeaders))
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_RowHeadersCannotBeInvisible"));
					}
					using (LayoutTransaction.CreateTransactionIf(this.AutoSize, this.ParentInternal, this, PropertyNames.RowHeadersVisible))
					{
						this.dataGridViewState1[16] = value;
						this.layout.RowHeadersVisible = value;
						this.displayedBandsInfo.EnsureDirtyState();
						if (!this.AutoSize)
						{
							this.PerformLayoutPrivate(false, false, true, true);
						}
						this.InvalidateInside();
						this.OnRowHeadersGlobalAutoSize(value);
					}
				}
			}
		}

		/// <summary>Gets or sets the width, in pixels, of the column that contains the row headers.</summary>
		/// <returns>The width, in pixels, of the column that contains row headers. The default is 43.</returns>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The specified value when setting this property is less than the minimum width of 4 pixels or is greater than the maximum width of 32768 pixels.</exception>
		// Token: 0x170005F4 RID: 1524
		// (get) Token: 0x0600195C RID: 6492 RVA: 0x0005B888 File Offset: 0x00059A88
		// (set) Token: 0x0600195D RID: 6493 RVA: 0x0005B890 File Offset: 0x00059A90
		[SRCategory("CatLayout")]
		[Localizable(true)]
		[SRDescription("DataGridView_RowHeadersWidthDescr")]
		public int RowHeadersWidth
		{
			get
			{
				return this.rowHeadersWidth;
			}
			set
			{
				if (value < 4)
				{
					throw new ArgumentOutOfRangeException("RowHeadersWidth", SR.GetString("InvalidLowBoundArgumentEx", new object[]
					{
						"RowHeadersWidth",
						value.ToString(CultureInfo.CurrentCulture),
						4.ToString(CultureInfo.CurrentCulture)
					}));
				}
				if (value > 32768)
				{
					throw new ArgumentOutOfRangeException("RowHeadersWidth", SR.GetString("InvalidHighBoundArgumentEx", new object[]
					{
						"RowHeadersWidth",
						value.ToString(CultureInfo.CurrentCulture),
						32768.ToString(CultureInfo.CurrentCulture)
					}));
				}
				if (this.RowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.EnableResizing && this.RowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.DisableResizing)
				{
					this.cachedRowHeadersWidth = value;
					return;
				}
				if (this.rowHeadersWidth != value)
				{
					this.RowHeadersWidthInternal = value;
				}
			}
		}

		// Token: 0x170005F5 RID: 1525
		// (set) Token: 0x0600195E RID: 6494 RVA: 0x0005B95C File Offset: 0x00059B5C
		private int RowHeadersWidthInternal
		{
			set
			{
				using (LayoutTransaction.CreateTransactionIf(this.AutoSize, this.ParentInternal, this, PropertyNames.RowHeadersWidth))
				{
					this.rowHeadersWidth = value;
					if (this.AutoSize)
					{
						this.InvalidateInside();
					}
					else if (this.layout.RowHeadersVisible)
					{
						this.PerformLayoutPrivate(false, false, true, true);
						this.InvalidateInside();
					}
					this.OnRowHeadersWidthChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Occurs when value of the <see cref="P:System.Windows.Forms.DataGridView.RowHeadersWidth" /> property changes.</summary>
		// Token: 0x14000124 RID: 292
		// (add) Token: 0x0600195F RID: 6495 RVA: 0x0005B9DC File Offset: 0x00059BDC
		// (remove) Token: 0x06001960 RID: 6496 RVA: 0x0005B9EF File Offset: 0x00059BEF
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewRowHeadersWidthChangedDescr")]
		public event EventHandler RowHeadersWidthChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERSWIDTHCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERSWIDTHCHANGED, value);
			}
		}

		// Token: 0x06001961 RID: 6497 RVA: 0x0005BA02 File Offset: 0x00059C02
		private bool ShouldSerializeRowHeadersWidth()
		{
			return (this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing || this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.DisableResizing) && 41 != this.RowHeadersWidth;
		}

		/// <summary>Gets or sets a value indicating whether the width of the row headers is adjustable and whether it can be adjusted by the user or is automatically adjusted to fit the contents of the headers.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> value indicating the mode by which the width of the row headers can be adjusted. The default is <see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.EnableResizing" />.</returns>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> value.</exception>
		// Token: 0x170005F6 RID: 1526
		// (get) Token: 0x06001962 RID: 6498 RVA: 0x0005BA24 File Offset: 0x00059C24
		// (set) Token: 0x06001963 RID: 6499 RVA: 0x0005BA2C File Offset: 0x00059C2C
		[DefaultValue(DataGridViewRowHeadersWidthSizeMode.EnableResizing)]
		[RefreshProperties(RefreshProperties.All)]
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_RowHeadersWidthSizeModeDescr")]
		public DataGridViewRowHeadersWidthSizeMode RowHeadersWidthSizeMode
		{
			get
			{
				return this.rowHeadersWidthSizeMode;
			}
			set
			{
				if (!ClientUtils.IsEnumValid(value, (int)value, 0, 4))
				{
					throw new InvalidEnumArgumentException("value", (int)value, typeof(DataGridViewRowHeadersWidthSizeMode));
				}
				if (this.rowHeadersWidthSizeMode != value)
				{
					DataGridViewAutoSizeModeEventArgs dataGridViewAutoSizeModeEventArgs = new DataGridViewAutoSizeModeEventArgs(this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.EnableResizing && this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.DisableResizing);
					this.rowHeadersWidthSizeMode = value;
					this.OnRowHeadersWidthSizeModeChanged(dataGridViewAutoSizeModeEventArgs);
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.RowHeadersWidthSizeMode" /> property changes.</summary>
		// Token: 0x14000125 RID: 293
		// (add) Token: 0x06001964 RID: 6500 RVA: 0x0005BA93 File Offset: 0x00059C93
		// (remove) Token: 0x06001965 RID: 6501 RVA: 0x0005BAA6 File Offset: 0x00059CA6
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_RowHeadersWidthSizeModeChangedDescr")]
		public event DataGridViewAutoSizeModeEventHandler RowHeadersWidthSizeModeChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERSWIDTHSIZEMODECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERSWIDTHSIZEMODECHANGED, value);
			}
		}

		/// <summary>Gets a collection that contains all the rows in the <see cref="T:System.Windows.Forms.DataGridView" /> control.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewRowCollection" /> that contains all the rows in the <see cref="T:System.Windows.Forms.DataGridView" />.</returns>
		// Token: 0x170005F7 RID: 1527
		// (get) Token: 0x06001966 RID: 6502 RVA: 0x0005BAB9 File Offset: 0x00059CB9
		[Browsable(false)]
		public DataGridViewRowCollection Rows
		{
			get
			{
				if (this.dataGridViewRows == null)
				{
					this.dataGridViewRows = this.CreateRowsInstance();
				}
				return this.dataGridViewRows;
			}
		}

		/// <summary>Gets or sets the default style applied to the row cells of the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <returns>The <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> to apply to the row cells of the <see cref="T:System.Windows.Forms.DataGridView" />.</returns>
		// Token: 0x170005F8 RID: 1528
		// (get) Token: 0x06001967 RID: 6503 RVA: 0x0005BAD5 File Offset: 0x00059CD5
		// (set) Token: 0x06001968 RID: 6504 RVA: 0x0005BB00 File Offset: 0x00059D00
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridView_RowsDefaultCellStyleDescr")]
		public DataGridViewCellStyle RowsDefaultCellStyle
		{
			get
			{
				if (this.rowsDefaultCellStyle == null)
				{
					this.rowsDefaultCellStyle = new DataGridViewCellStyle();
					this.rowsDefaultCellStyle.AddScope(this, DataGridViewCellStyleScopes.Rows);
				}
				return this.rowsDefaultCellStyle;
			}
			set
			{
				DataGridViewCellStyle dataGridViewCellStyle = this.RowsDefaultCellStyle;
				dataGridViewCellStyle.RemoveScope(DataGridViewCellStyleScopes.Rows);
				this.rowsDefaultCellStyle = value;
				if (value != null)
				{
					this.rowsDefaultCellStyle.AddScope(this, DataGridViewCellStyleScopes.Rows);
				}
				DataGridViewCellStyleDifferences differencesFrom = dataGridViewCellStyle.GetDifferencesFrom(this.RowsDefaultCellStyle);
				if (differencesFrom != DataGridViewCellStyleDifferences.None)
				{
					this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = differencesFrom == DataGridViewCellStyleDifferences.AffectPreferredSize;
					this.OnRowsDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.RowsDefaultCellStyle" /> property changes.</summary>
		// Token: 0x14000126 RID: 294
		// (add) Token: 0x06001969 RID: 6505 RVA: 0x0005BB5F File Offset: 0x00059D5F
		// (remove) Token: 0x0600196A RID: 6506 RVA: 0x0005BB72 File Offset: 0x00059D72
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewRowsDefaultCellStyleChangedDescr")]
		public event EventHandler RowsDefaultCellStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWSDEFAULTCELLSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWSDEFAULTCELLSTYLECHANGED, value);
			}
		}

		/// <summary>Gets or sets the row that represents the template for all the rows in the control.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewRow" /> representing the row template.</returns>
		/// <exception cref="T:System.InvalidOperationException">The specified row when setting this property has its <see cref="P:System.Windows.Forms.DataGridViewElement.DataGridView" /> property set.</exception>
		// Token: 0x170005F9 RID: 1529
		// (get) Token: 0x0600196B RID: 6507 RVA: 0x0005BB85 File Offset: 0x00059D85
		// (set) Token: 0x0600196C RID: 6508 RVA: 0x0005BBA0 File Offset: 0x00059DA0
		[SRCategory("CatAppearance")]
		[Browsable(true)]
		[SRDescription("DataGridView_RowTemplateDescr")]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public DataGridViewRow RowTemplate
		{
			get
			{
				if (this.rowTemplate == null)
				{
					this.rowTemplate = new DataGridViewRow();
				}
				return this.rowTemplate;
			}
			set
			{
				if (value != null && value.DataGridView != null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_RowAlreadyBelongsToDataGridView"));
				}
				this.rowTemplate = value;
			}
		}

		// Token: 0x0600196D RID: 6509 RVA: 0x0005BBD1 File Offset: 0x00059DD1
		private bool ShouldSerializeRowTemplate()
		{
			return this.rowTemplate != null;
		}

		// Token: 0x170005FA RID: 1530
		// (get) Token: 0x0600196E RID: 6510 RVA: 0x0005BBDC File Offset: 0x00059DDC
		internal DataGridViewRow RowTemplateClone
		{
			get
			{
				DataGridViewRow dataGridViewRow = (DataGridViewRow)this.RowTemplate.Clone();
				this.CompleteCellsCollection(dataGridViewRow);
				return dataGridViewRow;
			}
		}

		/// <summary>Gets or sets the type of scroll bars to display for the <see cref="T:System.Windows.Forms.DataGridView" /> control.</summary>
		/// <returns>One of the <see cref="T:System.Windows.Forms.ScrollBars" /> values. The default is <see cref="F:System.Windows.Forms.ScrollBars.Both" />.</returns>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.ScrollBars" /> value.</exception>
		/// <exception cref="T:System.InvalidOperationException">The value of this property cannot be set because the <see cref="T:System.Windows.Forms.DataGridView" /> is unable to scroll due to a cell change that cannot be committed or canceled.</exception>
		// Token: 0x170005FB RID: 1531
		// (get) Token: 0x0600196F RID: 6511 RVA: 0x0005BC02 File Offset: 0x00059E02
		// (set) Token: 0x06001970 RID: 6512 RVA: 0x0005BC0C File Offset: 0x00059E0C
		[DefaultValue(ScrollBars.Both)]
		[Localizable(true)]
		[SRCategory("CatLayout")]
		[SRDescription("DataGridView_ScrollBarsDescr")]
		public ScrollBars ScrollBars
		{
			get
			{
				return this.scrollBars;
			}
			set
			{
				if (!ClientUtils.IsEnumValid(value, (int)value, 0, 3))
				{
					throw new InvalidEnumArgumentException("value", (int)value, typeof(ScrollBars));
				}
				if (this.scrollBars != value)
				{
					using (LayoutTransaction.CreateTransactionIf(this.AutoSize, this.ParentInternal, this, PropertyNames.ScrollBars))
					{
						DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
						int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
						if (firstColumn != null && firstRow != -1 && !this.ScrollIntoView(firstColumn.Index, firstRow, false))
						{
							throw new InvalidOperationException(SR.GetString("DataGridView_CellChangeCannotBeCommittedOrAborted"));
						}
						this.scrollBars = value;
						if (!this.AutoSize)
						{
							this.PerformLayoutPrivate(false, false, true, true);
						}
						base.Invalidate();
					}
				}
			}
		}

		/// <summary>Gets the collection of cells selected by the user.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewSelectedCellCollection" /> that represents the cells selected by the user.</returns>
		// Token: 0x170005FC RID: 1532
		// (get) Token: 0x06001971 RID: 6513 RVA: 0x0005BCE4 File Offset: 0x00059EE4
		[Browsable(false)]
		public DataGridViewSelectedCellCollection SelectedCells
		{
			get
			{
				DataGridViewSelectedCellCollection dataGridViewSelectedCellCollection = new DataGridViewSelectedCellCollection();
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
					dataGridViewSelectedCellCollection.AddCellLinkedList(this.individualSelectedCells);
					break;
				case DataGridViewSelectionMode.FullRowSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
					foreach (object obj in ((IEnumerable)this.selectedBandIndexes))
					{
						int num = (int)obj;
						DataGridViewRow dataGridViewRow = this.Rows[num];
						foreach (object obj2 in dataGridViewRow.Cells)
						{
							DataGridViewCell dataGridViewCell = (DataGridViewCell)obj2;
							dataGridViewSelectedCellCollection.Add(dataGridViewCell);
						}
					}
					if (this.SelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
					{
						dataGridViewSelectedCellCollection.AddCellLinkedList(this.individualSelectedCells);
					}
					break;
				case DataGridViewSelectionMode.FullColumnSelect:
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					foreach (object obj3 in ((IEnumerable)this.selectedBandIndexes))
					{
						int num2 = (int)obj3;
						foreach (object obj4 in ((IEnumerable)this.Rows))
						{
							DataGridViewRow dataGridViewRow2 = (DataGridViewRow)obj4;
							dataGridViewSelectedCellCollection.Add(dataGridViewRow2.Cells[num2]);
						}
					}
					if (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)
					{
						dataGridViewSelectedCellCollection.AddCellLinkedList(this.individualSelectedCells);
					}
					break;
				}
				return dataGridViewSelectedCellCollection;
			}
		}

		/// <summary>Gets the collection of columns selected by the user.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewSelectedColumnCollection" /> that represents the columns selected by the user.</returns>
		// Token: 0x170005FD RID: 1533
		// (get) Token: 0x06001972 RID: 6514 RVA: 0x0005BEB4 File Offset: 0x0005A0B4
		[Browsable(false)]
		public DataGridViewSelectedColumnCollection SelectedColumns
		{
			get
			{
				DataGridViewSelectedColumnCollection dataGridViewSelectedColumnCollection = new DataGridViewSelectedColumnCollection();
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.FullColumnSelect:
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					foreach (object obj in ((IEnumerable)this.selectedBandIndexes))
					{
						int num = (int)obj;
						dataGridViewSelectedColumnCollection.Add(this.Columns[num]);
					}
					break;
				}
				return dataGridViewSelectedColumnCollection;
			}
		}

		/// <summary>Gets the collection of rows selected by the user.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewSelectedRowCollection" /> that contains the rows selected by the user.</returns>
		// Token: 0x170005FE RID: 1534
		// (get) Token: 0x06001973 RID: 6515 RVA: 0x0005BF48 File Offset: 0x0005A148
		[Browsable(false)]
		public DataGridViewSelectedRowCollection SelectedRows
		{
			get
			{
				DataGridViewSelectedRowCollection dataGridViewSelectedRowCollection = new DataGridViewSelectedRowCollection();
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.FullRowSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
					foreach (object obj in ((IEnumerable)this.selectedBandIndexes))
					{
						int num = (int)obj;
						dataGridViewSelectedRowCollection.Add(this.Rows[num]);
					}
					break;
				}
				return dataGridViewSelectedRowCollection;
			}
		}

		/// <summary>Gets or sets a value indicating how the cells of the <see cref="T:System.Windows.Forms.DataGridView" /> can be selected.</summary>
		/// <returns>One of the <see cref="T:System.Windows.Forms.DataGridViewSelectionMode" /> values. The default is <see cref="F:System.Windows.Forms.DataGridViewSelectionMode.RowHeaderSelect" />.</returns>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.DataGridViewSelectionMode" /> value.</exception>
		/// <exception cref="T:System.InvalidOperationException">The specified value when setting this property is <see cref="F:System.Windows.Forms.DataGridViewSelectionMode.FullColumnSelect" /> or <see cref="F:System.Windows.Forms.DataGridViewSelectionMode.ColumnHeaderSelect" /> and the <see cref="P:System.Windows.Forms.DataGridViewColumn.SortMode" /> property of one or more columns is set to <see cref="F:System.Windows.Forms.DataGridViewColumnSortMode.Automatic" />.</exception>
		// Token: 0x170005FF RID: 1535
		// (get) Token: 0x06001974 RID: 6516 RVA: 0x0005BFDC File Offset: 0x0005A1DC
		// (set) Token: 0x06001975 RID: 6517 RVA: 0x0005BFE4 File Offset: 0x0005A1E4
		[Browsable(true)]
		[SRCategory("CatBehavior")]
		[DefaultValue(DataGridViewSelectionMode.RowHeaderSelect)]
		[SRDescription("DataGridView_SelectionModeDescr")]
		public DataGridViewSelectionMode SelectionMode
		{
			get
			{
				return this.selectionMode;
			}
			set
			{
				if (!ClientUtils.IsEnumValid(value, (int)value, 0, 4))
				{
					throw new InvalidEnumArgumentException("value", (int)value, typeof(DataGridViewSelectionMode));
				}
				if (this.SelectionMode != value)
				{
					if (!this.dataGridViewState2[524288] && (value == DataGridViewSelectionMode.FullColumnSelect || value == DataGridViewSelectionMode.ColumnHeaderSelect))
					{
						foreach (object obj in this.Columns)
						{
							DataGridViewColumn dataGridViewColumn = (DataGridViewColumn)obj;
							if (dataGridViewColumn.SortMode == DataGridViewColumnSortMode.Automatic)
							{
								throw new InvalidOperationException(SR.GetString("DataGridView_SelectionModeAndSortModeClash", new object[] { value.ToString() }));
							}
						}
					}
					this.ClearSelection();
					this.selectionMode = value;
				}
			}
		}

		/// <summary>Gets or sets a value indicating whether to show cell errors.</summary>
		/// <returns>
		///   <see langword="true" /> if a red glyph will appear in a cell that fails validation; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
		// Token: 0x17000600 RID: 1536
		// (get) Token: 0x06001976 RID: 6518 RVA: 0x0005C0C0 File Offset: 0x0005A2C0
		// (set) Token: 0x06001977 RID: 6519 RVA: 0x0005C0D4 File Offset: 0x0005A2D4
		[DefaultValue(true)]
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridView_ShowCellErrorsDescr")]
		public bool ShowCellErrors
		{
			get
			{
				return this.dataGridViewState2[128];
			}
			set
			{
				if (this.ShowCellErrors != value)
				{
					this.dataGridViewState2[128] = value;
					if (base.IsHandleCreated && !base.DesignMode)
					{
						if (value && !this.ShowRowErrors && !this.ShowCellToolTips)
						{
							this.toolTipControl.Activate(!string.IsNullOrEmpty(this.toolTipCaption));
						}
						if (!value && !this.ShowRowErrors && !this.ShowCellToolTips)
						{
							this.toolTipCaption = string.Empty;
							this.toolTipControl.Activate(false);
						}
						if (!value && (this.ShowRowErrors || this.ShowCellToolTips))
						{
							this.toolTipControl.Activate(!string.IsNullOrEmpty(this.toolTipCaption));
						}
						this.OnGlobalAutoSize();
					}
					if (!this.layout.dirty && !base.DesignMode)
					{
						base.Invalidate(Rectangle.Union(this.layout.Data, this.layout.ColumnHeaders));
						base.Invalidate(this.layout.TopLeftHeader);
					}
				}
			}
		}

		/// <summary>Gets or sets a value indicating whether or not ToolTips will show when the mouse pointer pauses on a cell.</summary>
		/// <returns>
		///   <see langword="true" /> if cell ToolTips are enabled; otherwise, <see langword="false" />.</returns>
		// Token: 0x17000601 RID: 1537
		// (get) Token: 0x06001978 RID: 6520 RVA: 0x0005C1E3 File Offset: 0x0005A3E3
		// (set) Token: 0x06001979 RID: 6521 RVA: 0x0005C1F8 File Offset: 0x0005A3F8
		[DefaultValue(true)]
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridView_ShowCellToolTipsDescr")]
		public bool ShowCellToolTips
		{
			get
			{
				return this.dataGridViewState2[256];
			}
			set
			{
				if (this.ShowCellToolTips != value)
				{
					this.dataGridViewState2[256] = value;
					if (base.IsHandleCreated && !base.DesignMode)
					{
						if (value && !this.ShowRowErrors && !this.ShowCellErrors)
						{
							this.toolTipControl.Activate(!string.IsNullOrEmpty(this.toolTipCaption));
						}
						if (!value && !this.ShowRowErrors && !this.ShowCellErrors)
						{
							this.toolTipCaption = string.Empty;
							this.toolTipControl.Activate(false);
						}
						if (!value && (this.ShowRowErrors || this.ShowCellErrors))
						{
							bool flag = !string.IsNullOrEmpty(this.toolTipCaption);
							Point mousePosition = Control.MousePosition;
							flag &= base.ClientRectangle.Contains(base.PointToClient(mousePosition));
							this.toolTipControl.Activate(flag);
						}
					}
					if (!this.layout.dirty && !base.DesignMode)
					{
						base.Invalidate(this.layout.Data);
					}
				}
			}
		}

		/// <summary>Gets or sets a value indicating whether or not the editing glyph is visible in the row header of the cell being edited.</summary>
		/// <returns>
		///   <see langword="true" /> if the editing glyph is visible; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
		// Token: 0x17000602 RID: 1538
		// (get) Token: 0x0600197A RID: 6522 RVA: 0x0005C300 File Offset: 0x0005A500
		// (set) Token: 0x0600197B RID: 6523 RVA: 0x0005C310 File Offset: 0x0005A510
		[DefaultValue(true)]
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridView_ShowEditingIconDescr")]
		public bool ShowEditingIcon
		{
			get
			{
				return this.dataGridViewState2[1];
			}
			set
			{
				if (this.ShowEditingIcon != value)
				{
					this.dataGridViewState2[1] = value;
					if (this.RowHeadersVisible)
					{
						if (this.VirtualMode || this.DataSource != null)
						{
							if (this.IsCurrentRowDirty)
							{
								this.InvalidateCellPrivate(-1, this.ptCurrentCell.Y);
								return;
							}
						}
						else if (this.IsCurrentCellDirty)
						{
							this.InvalidateCellPrivate(-1, this.ptCurrentCell.Y);
						}
					}
				}
			}
		}

		/// <summary>Gets or sets a value indicating whether row headers will display error glyphs for each row that contains a data entry error.</summary>
		/// <returns>
		///   <see langword="true" /> if the <see cref="T:System.Windows.Forms.DataGridViewRow" /> indicates there is an error; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
		// Token: 0x17000603 RID: 1539
		// (get) Token: 0x0600197C RID: 6524 RVA: 0x0005C380 File Offset: 0x0005A580
		// (set) Token: 0x0600197D RID: 6525 RVA: 0x0005C394 File Offset: 0x0005A594
		[DefaultValue(true)]
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridView_ShowRowErrorsDescr")]
		public bool ShowRowErrors
		{
			get
			{
				return this.dataGridViewState2[512];
			}
			set
			{
				if (this.ShowRowErrors != value)
				{
					this.dataGridViewState2[512] = value;
					if (base.IsHandleCreated && !base.DesignMode)
					{
						if (value && !this.ShowCellErrors && !this.ShowCellToolTips)
						{
							this.toolTipControl.Activate(!string.IsNullOrEmpty(this.toolTipCaption));
						}
						if (!value && !this.ShowCellErrors && !this.ShowCellToolTips)
						{
							this.toolTipCaption = string.Empty;
							this.toolTipControl.Activate(false);
						}
						if (!value && (this.ShowCellErrors || this.ShowCellToolTips))
						{
							this.toolTipControl.Activate(!string.IsNullOrEmpty(this.toolTipCaption));
						}
					}
					if (!this.layout.dirty && !base.DesignMode)
					{
						base.Invalidate(this.layout.RowHeaders);
					}
				}
			}
		}

		// Token: 0x17000604 RID: 1540
		// (get) Token: 0x0600197E RID: 6526 RVA: 0x0005C47C File Offset: 0x0005A67C
		internal bool SingleHorizontalBorderAdded
		{
			get
			{
				return !this.layout.ColumnHeadersVisible && (this.AdvancedCellBorderStyle.All == DataGridViewAdvancedCellBorderStyle.Single || this.CellBorderStyle == DataGridViewCellBorderStyle.SingleHorizontal);
			}
		}

		// Token: 0x17000605 RID: 1541
		// (get) Token: 0x0600197F RID: 6527 RVA: 0x0005C4A6 File Offset: 0x0005A6A6
		internal bool SingleVerticalBorderAdded
		{
			get
			{
				return !this.layout.RowHeadersVisible && (this.AdvancedCellBorderStyle.All == DataGridViewAdvancedCellBorderStyle.Single || this.CellBorderStyle == DataGridViewCellBorderStyle.SingleVertical);
			}
		}

		/// <summary>Gets the column by which the <see cref="T:System.Windows.Forms.DataGridView" /> contents are currently sorted.</summary>
		/// <returns>The <see cref="T:System.Windows.Forms.DataGridViewColumn" /> by which the <see cref="T:System.Windows.Forms.DataGridView" /> contents are currently sorted.</returns>
		// Token: 0x17000606 RID: 1542
		// (get) Token: 0x06001980 RID: 6528 RVA: 0x0005C4D0 File Offset: 0x0005A6D0
		[Browsable(false)]
		public DataGridViewColumn SortedColumn
		{
			get
			{
				return this.sortedColumn;
			}
		}

		/// <summary>Gets a value indicating whether the items in the <see cref="T:System.Windows.Forms.DataGridView" /> control are sorted in ascending or descending order, or are not sorted.</summary>
		/// <returns>One of the <see cref="T:System.Windows.Forms.SortOrder" /> values.</returns>
		// Token: 0x17000607 RID: 1543
		// (get) Token: 0x06001981 RID: 6529 RVA: 0x0005C4D8 File Offset: 0x0005A6D8
		[Browsable(false)]
		public SortOrder SortOrder
		{
			get
			{
				return this.sortOrder;
			}
		}

		/// <summary>Gets or sets a value indicating whether the TAB key moves the focus to the next control in the tab order rather than moving focus to the next cell in the control.</summary>
		/// <returns>
		///   <see langword="true" /> if the TAB key moves the focus to the next control in the tab order; otherwise, <see langword="false" />.</returns>
		// Token: 0x17000608 RID: 1544
		// (get) Token: 0x06001982 RID: 6530 RVA: 0x0005C4E0 File Offset: 0x0005A6E0
		// (set) Token: 0x06001983 RID: 6531 RVA: 0x0005C4F2 File Offset: 0x0005A6F2
		[SRCategory("CatBehavior")]
		[DefaultValue(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRDescription("DataGridView_StandardTabDescr")]
		public bool StandardTab
		{
			get
			{
				return this.dataGridViewState1[8192];
			}
			set
			{
				if (this.dataGridViewState1[8192] != value)
				{
					this.dataGridViewState1[8192] = value;
				}
			}
		}

		// Token: 0x17000609 RID: 1545
		// (get) Token: 0x06001984 RID: 6532 RVA: 0x00028BBB File Offset: 0x00026DBB
		internal override bool SupportsUiaProviders
		{
			get
			{
				return AccessibilityImprovements.Level3 && !base.DesignMode;
			}
		}

		/// <summary>Gets or sets the text associated with the control.</summary>
		/// <returns>The text associated with the control.</returns>
		// Token: 0x1700060A RID: 1546
		// (get) Token: 0x06001985 RID: 6533 RVA: 0x00013814 File Offset: 0x00011A14
		// (set) Token: 0x06001986 RID: 6534 RVA: 0x00023FE9 File Offset: 0x000221E9
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		[Bindable(false)]
		public override string Text
		{
			get
			{
				return base.Text;
			}
			set
			{
				base.Text = value;
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridView.Text" /> property changes.</summary>
		// Token: 0x14000127 RID: 295
		// (add) Token: 0x06001987 RID: 6535 RVA: 0x00046591 File Offset: 0x00044791
		// (remove) Token: 0x06001988 RID: 6536 RVA: 0x0004659A File Offset: 0x0004479A
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new event EventHandler TextChanged
		{
			add
			{
				base.TextChanged += value;
			}
			remove
			{
				base.TextChanged -= value;
			}
		}

		/// <summary>Provides an indexer to get or set the cell located at the intersection of the column and row with the specified indexes.</summary>
		/// <param name="columnIndex">The index of the column containing the cell.</param>
		/// <param name="rowIndex">The index of the row containing the cell.</param>
		/// <returns>The <see cref="T:System.Windows.Forms.DataGridViewCell" /> at the specified location.</returns>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///   <paramref name="columnIndex" /> is less than 0 or greater than the number of columns in the control minus 1.  
		/// -or-  
		/// <paramref name="rowIndex" /> is less than 0 or greater than the number of rows in the control minus 1.</exception>
		// Token: 0x1700060B RID: 1547
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public DataGridViewCell this[int columnIndex, int rowIndex]
		{
			get
			{
				DataGridViewRow dataGridViewRow = this.Rows[rowIndex];
				return dataGridViewRow.Cells[columnIndex];
			}
			set
			{
				DataGridViewRow dataGridViewRow = this.Rows[rowIndex];
				dataGridViewRow.Cells[columnIndex] = value;
			}
		}

		/// <summary>Provides an indexer to get or set the cell located at the intersection of the row with the specified index and the column with the specified name.</summary>
		/// <param name="columnName">The name of the column containing the cell.</param>
		/// <param name="rowIndex">The index of the row containing the cell.</param>
		/// <returns>The <see cref="T:System.Windows.Forms.DataGridViewCell" /> at the specified location.</returns>
		// Token: 0x1700060C RID: 1548
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public DataGridViewCell this[string columnName, int rowIndex]
		{
			get
			{
				DataGridViewRow dataGridViewRow = this.Rows[rowIndex];
				return dataGridViewRow.Cells[columnName];
			}
			set
			{
				DataGridViewRow dataGridViewRow = this.Rows[rowIndex];
				dataGridViewRow.Cells[columnName] = value;
			}
		}

		// Token: 0x1700060D RID: 1549
		// (get) Token: 0x0600198D RID: 6541 RVA: 0x0005C5B7 File Offset: 0x0005A7B7
		private string ToolTipPrivate
		{
			get
			{
				return this.toolTipCaption;
			}
		}

		/// <summary>Gets or sets the header cell located in the upper left corner of the <see cref="T:System.Windows.Forms.DataGridView" /> control.</summary>
		/// <returns>The <see cref="T:System.Windows.Forms.DataGridViewHeaderCell" /> located at the upper left corner of the <see cref="T:System.Windows.Forms.DataGridView" />.</returns>
		// Token: 0x1700060E RID: 1550
		// (get) Token: 0x0600198E RID: 6542 RVA: 0x0005C5BF File Offset: 0x0005A7BF
		// (set) Token: 0x0600198F RID: 6543 RVA: 0x0005C5DC File Offset: 0x0005A7DC
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public DataGridViewHeaderCell TopLeftHeaderCell
		{
			get
			{
				if (this.topLeftHeaderCell == null)
				{
					this.TopLeftHeaderCell = new DataGridViewTopLeftHeaderCell();
				}
				return this.topLeftHeaderCell;
			}
			set
			{
				if (this.topLeftHeaderCell != value)
				{
					if (this.topLeftHeaderCell != null)
					{
						this.topLeftHeaderCell.DataGridViewInternal = null;
					}
					this.topLeftHeaderCell = value;
					if (value != null)
					{
						this.topLeftHeaderCell.DataGridViewInternal = this;
					}
					if (this.ColumnHeadersVisible && this.RowHeadersVisible)
					{
						this.OnColumnHeadersGlobalAutoSize();
						base.Invalidate(new Rectangle(this.layout.Inside.X, this.layout.Inside.Y, this.RowHeadersWidth, this.ColumnHeadersHeight));
					}
				}
			}
		}

		/// <summary>Gets the default or user-specified value of the <see cref="P:System.Windows.Forms.Control.Cursor" /> property.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.Cursor" /> representing the normal value of the <see cref="P:System.Windows.Forms.Control.Cursor" /> property.</returns>
		// Token: 0x1700060F RID: 1551
		// (get) Token: 0x06001990 RID: 6544 RVA: 0x0005C669 File Offset: 0x0005A869
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public Cursor UserSetCursor
		{
			get
			{
				if (this.dataGridViewState1[16777216])
				{
					return this.oldCursor;
				}
				return this.Cursor;
			}
		}

		// Token: 0x17000610 RID: 1552
		// (get) Token: 0x06001991 RID: 6545 RVA: 0x0005C68A File Offset: 0x0005A88A
		// (set) Token: 0x06001992 RID: 6546 RVA: 0x0005C694 File Offset: 0x0005A894
		internal int VerticalOffset
		{
			get
			{
				return this.verticalOffset;
			}
			set
			{
				if (value < 0)
				{
					value = 0;
				}
				int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				int num = this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight);
				if (value > this.vertScrollBar.Maximum - num)
				{
					value = this.vertScrollBar.Maximum - num;
				}
				if (value == this.verticalOffset)
				{
					return;
				}
				int num2 = value - this.verticalOffset;
				if (this.vertScrollBar.Enabled)
				{
					this.vertScrollBar.Value = value;
				}
				this.ScrollRowsByHeight(num2);
			}
		}

		/// <summary>Gets the vertical scroll bar of the control.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.ScrollBar" /> representing the vertical scroll bar.</returns>
		// Token: 0x17000611 RID: 1553
		// (get) Token: 0x06001993 RID: 6547 RVA: 0x0005C710 File Offset: 0x0005A910
		protected ScrollBar VerticalScrollBar
		{
			get
			{
				return this.vertScrollBar;
			}
		}

		/// <summary>Gets the number of pixels by which the control is scrolled vertically.</summary>
		/// <returns>The number of pixels by which the control is scrolled vertically.</returns>
		// Token: 0x17000612 RID: 1554
		// (get) Token: 0x06001994 RID: 6548 RVA: 0x0005C68A File Offset: 0x0005A88A
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public int VerticalScrollingOffset
		{
			get
			{
				return this.verticalOffset;
			}
		}

		// Token: 0x17000613 RID: 1555
		// (get) Token: 0x06001995 RID: 6549 RVA: 0x0005C718 File Offset: 0x0005A918
		private Timer VertScrollTimer
		{
			get
			{
				if (this.vertScrollTimer == null)
				{
					this.vertScrollTimer = new Timer();
					this.vertScrollTimer.Tick += this.VertScrollTimer_Tick;
				}
				return this.vertScrollTimer;
			}
		}

		/// <summary>Gets or sets a value indicating whether you have provided your own data-management operations for the <see cref="T:System.Windows.Forms.DataGridView" /> control.</summary>
		/// <returns>
		///   <see langword="true" /> if the <see cref="T:System.Windows.Forms.DataGridView" /> uses data-management operations that you provide; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
		// Token: 0x17000614 RID: 1556
		// (get) Token: 0x06001996 RID: 6550 RVA: 0x0005C74A File Offset: 0x0005A94A
		// (set) Token: 0x06001997 RID: 6551 RVA: 0x0005C75C File Offset: 0x0005A95C
		[SRCategory("CatBehavior")]
		[DefaultValue(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRDescription("DataGridViewVirtualModeDescr")]
		public bool VirtualMode
		{
			get
			{
				return this.dataGridViewState1[65536];
			}
			set
			{
				if (this.dataGridViewState1[65536] != value)
				{
					this.dataGridViewState1[65536] = value;
					this.InvalidateRowHeights();
				}
			}
		}

		// Token: 0x17000615 RID: 1557
		// (get) Token: 0x06001998 RID: 6552 RVA: 0x0005C788 File Offset: 0x0005A988
		private bool VisibleCellExists
		{
			get
			{
				return this.Columns.GetFirstColumn(DataGridViewElementStates.Visible) != null && -1 != this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridViewColumn.AutoSizeMode" /> property of a column changes.</summary>
		// Token: 0x14000128 RID: 296
		// (add) Token: 0x06001999 RID: 6553 RVA: 0x0005C7AE File Offset: 0x0005A9AE
		// (remove) Token: 0x0600199A RID: 6554 RVA: 0x0005C7C1 File Offset: 0x0005A9C1
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewAutoSizeColumnModeChangedDescr")]
		public event DataGridViewAutoSizeColumnModeEventHandler AutoSizeColumnModeChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWAUTOSIZECOLUMNMODECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWAUTOSIZECOLUMNMODECHANGED, value);
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridView.VirtualMode" /> property of a <see cref="T:System.Windows.Forms.DataGridView" /> control is <see langword="true" /> and the cancels edits in a row.</summary>
		// Token: 0x14000129 RID: 297
		// (add) Token: 0x0600199B RID: 6555 RVA: 0x0005C7D4 File Offset: 0x0005A9D4
		// (remove) Token: 0x0600199C RID: 6556 RVA: 0x0005C7E7 File Offset: 0x0005A9E7
		[SRCategory("CatAction")]
		[SRDescription("DataGridView_CancelRowEditDescr")]
		public event QuestionEventHandler CancelRowEdit
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCANCELROWEDIT, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCANCELROWEDIT, value);
			}
		}

		/// <summary>Occurs when edit mode starts for the selected cell.</summary>
		// Token: 0x1400012A RID: 298
		// (add) Token: 0x0600199D RID: 6557 RVA: 0x0005C7FA File Offset: 0x0005A9FA
		// (remove) Token: 0x0600199E RID: 6558 RVA: 0x0005C80D File Offset: 0x0005AA0D
		[SRCategory("CatData")]
		[SRDescription("DataGridView_CellBeginEditDescr")]
		public event DataGridViewCellCancelEventHandler CellBeginEdit
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLBEGINEDIT, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLBEGINEDIT, value);
			}
		}

		/// <summary>Occurs when any part of a cell is clicked.</summary>
		// Token: 0x1400012B RID: 299
		// (add) Token: 0x0600199F RID: 6559 RVA: 0x0005C820 File Offset: 0x0005AA20
		// (remove) Token: 0x060019A0 RID: 6560 RVA: 0x0005C833 File Offset: 0x0005AA33
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_CellClickDescr")]
		public event DataGridViewCellEventHandler CellClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLCLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLCLICK, value);
			}
		}

		/// <summary>Occurs when the content within a cell is clicked.</summary>
		// Token: 0x1400012C RID: 300
		// (add) Token: 0x060019A1 RID: 6561 RVA: 0x0005C846 File Offset: 0x0005AA46
		// (remove) Token: 0x060019A2 RID: 6562 RVA: 0x0005C859 File Offset: 0x0005AA59
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_CellContentClick")]
		public event DataGridViewCellEventHandler CellContentClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLCONTENTCLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLCONTENTCLICK, value);
			}
		}

		/// <summary>Occurs when the user double-clicks a cell's contents.</summary>
		// Token: 0x1400012D RID: 301
		// (add) Token: 0x060019A3 RID: 6563 RVA: 0x0005C86C File Offset: 0x0005AA6C
		// (remove) Token: 0x060019A4 RID: 6564 RVA: 0x0005C87F File Offset: 0x0005AA7F
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_CellContentDoubleClick")]
		public event DataGridViewCellEventHandler CellContentDoubleClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLCONTENTDOUBLECLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLCONTENTDOUBLECLICK, value);
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridViewCell.ContextMenuStrip" /> property changes.</summary>
		// Token: 0x1400012E RID: 302
		// (add) Token: 0x060019A5 RID: 6565 RVA: 0x0005C892 File Offset: 0x0005AA92
		// (remove) Token: 0x060019A6 RID: 6566 RVA: 0x0005C8A5 File Offset: 0x0005AAA5
		[SRCategory("CatAction")]
		[SRDescription("DataGridView_CellContextMenuStripChanged")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public event DataGridViewCellEventHandler CellContextMenuStripChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLCONTEXTMENUSTRIPCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLCONTEXTMENUSTRIPCHANGED, value);
			}
		}

		/// <summary>Occurs when a cell's shortcut menu is needed.</summary>
		// Token: 0x1400012F RID: 303
		// (add) Token: 0x060019A7 RID: 6567 RVA: 0x0005C8B8 File Offset: 0x0005AAB8
		// (remove) Token: 0x060019A8 RID: 6568 RVA: 0x0005C8CB File Offset: 0x0005AACB
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_CellContextMenuStripNeeded")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public event DataGridViewCellContextMenuStripNeededEventHandler CellContextMenuStripNeeded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLCONTEXTMENUSTRIPNEEDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLCONTEXTMENUSTRIPNEEDED, value);
			}
		}

		/// <summary>Occurs when the user double-clicks anywhere in a cell.</summary>
		// Token: 0x14000130 RID: 304
		// (add) Token: 0x060019A9 RID: 6569 RVA: 0x0005C8DE File Offset: 0x0005AADE
		// (remove) Token: 0x060019AA RID: 6570 RVA: 0x0005C8F1 File Offset: 0x0005AAF1
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_CellDoubleClickDescr")]
		public event DataGridViewCellEventHandler CellDoubleClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLDOUBLECLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLDOUBLECLICK, value);
			}
		}

		/// <summary>Occurs when edit mode stops for the currently selected cell.</summary>
		// Token: 0x14000131 RID: 305
		// (add) Token: 0x060019AB RID: 6571 RVA: 0x0005C904 File Offset: 0x0005AB04
		// (remove) Token: 0x060019AC RID: 6572 RVA: 0x0005C917 File Offset: 0x0005AB17
		[SRCategory("CatData")]
		[SRDescription("DataGridView_CellEndEditDescr")]
		public event DataGridViewCellEventHandler CellEndEdit
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLENDEDIT, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLENDEDIT, value);
			}
		}

		/// <summary>Occurs when the current cell changes in the <see cref="T:System.Windows.Forms.DataGridView" /> control or when the control receives input focus.</summary>
		// Token: 0x14000132 RID: 306
		// (add) Token: 0x060019AD RID: 6573 RVA: 0x0005C92A File Offset: 0x0005AB2A
		// (remove) Token: 0x060019AE RID: 6574 RVA: 0x0005C93D File Offset: 0x0005AB3D
		[SRCategory("CatFocus")]
		[SRDescription("DataGridView_CellEnterDescr")]
		public event DataGridViewCellEventHandler CellEnter
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLENTER, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLENTER, value);
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridViewCell.ErrorText" /> property of a cell changes.</summary>
		// Token: 0x14000133 RID: 307
		// (add) Token: 0x060019AF RID: 6575 RVA: 0x0005C950 File Offset: 0x0005AB50
		// (remove) Token: 0x060019B0 RID: 6576 RVA: 0x0005C963 File Offset: 0x0005AB63
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_CellErrorTextChangedDescr")]
		public event DataGridViewCellEventHandler CellErrorTextChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLERRORTEXTCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLERRORTEXTCHANGED, value);
			}
		}

		/// <summary>Occurs when a cell's error text is needed.</summary>
		// Token: 0x14000134 RID: 308
		// (add) Token: 0x060019B1 RID: 6577 RVA: 0x0005C976 File Offset: 0x0005AB76
		// (remove) Token: 0x060019B2 RID: 6578 RVA: 0x0005C989 File Offset: 0x0005AB89
		[SRCategory("CatData")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRDescription("DataGridView_CellErrorTextNeededDescr")]
		public event DataGridViewCellErrorTextNeededEventHandler CellErrorTextNeeded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLERRORTEXTNEEDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLERRORTEXTNEEDED, value);
			}
		}

		/// <summary>Occurs when the contents of a cell need to be formatted for display.</summary>
		// Token: 0x14000135 RID: 309
		// (add) Token: 0x060019B3 RID: 6579 RVA: 0x0005C99C File Offset: 0x0005AB9C
		// (remove) Token: 0x060019B4 RID: 6580 RVA: 0x0005C9AF File Offset: 0x0005ABAF
		[SRCategory("CatDisplay")]
		[SRDescription("DataGridView_CellFormattingDescr")]
		public event DataGridViewCellFormattingEventHandler CellFormatting
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLFORMATTING, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLFORMATTING, value);
			}
		}

		/// <summary>Occurs when a cell loses input focus and is no longer the current cell.</summary>
		// Token: 0x14000136 RID: 310
		// (add) Token: 0x060019B5 RID: 6581 RVA: 0x0005C9C2 File Offset: 0x0005ABC2
		// (remove) Token: 0x060019B6 RID: 6582 RVA: 0x0005C9D5 File Offset: 0x0005ABD5
		[SRCategory("CatFocus")]
		[SRDescription("DataGridView_CellLeaveDescr")]
		public event DataGridViewCellEventHandler CellLeave
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLLEAVE, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLLEAVE, value);
			}
		}

		/// <summary>Occurs whenever the user clicks anywhere on a cell with the mouse.</summary>
		// Token: 0x14000137 RID: 311
		// (add) Token: 0x060019B7 RID: 6583 RVA: 0x0005C9E8 File Offset: 0x0005ABE8
		// (remove) Token: 0x060019B8 RID: 6584 RVA: 0x0005C9FB File Offset: 0x0005ABFB
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_CellMouseClickDescr")]
		public event DataGridViewCellMouseEventHandler CellMouseClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSECLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSECLICK, value);
			}
		}

		/// <summary>Occurs when a cell within the <see cref="T:System.Windows.Forms.DataGridView" /> is double-clicked.</summary>
		// Token: 0x14000138 RID: 312
		// (add) Token: 0x060019B9 RID: 6585 RVA: 0x0005CA0E File Offset: 0x0005AC0E
		// (remove) Token: 0x060019BA RID: 6586 RVA: 0x0005CA21 File Offset: 0x0005AC21
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_CellMouseDoubleClickDescr")]
		public event DataGridViewCellMouseEventHandler CellMouseDoubleClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEDOUBLECLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEDOUBLECLICK, value);
			}
		}

		/// <summary>Occurs when the user presses a mouse button while the mouse pointer is within the boundaries of a cell.</summary>
		// Token: 0x14000139 RID: 313
		// (add) Token: 0x060019BB RID: 6587 RVA: 0x0005CA34 File Offset: 0x0005AC34
		// (remove) Token: 0x060019BC RID: 6588 RVA: 0x0005CA47 File Offset: 0x0005AC47
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_CellMouseDownDescr")]
		public event DataGridViewCellMouseEventHandler CellMouseDown
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEDOWN, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEDOWN, value);
			}
		}

		/// <summary>Occurs when the mouse pointer enters a cell.</summary>
		// Token: 0x1400013A RID: 314
		// (add) Token: 0x060019BD RID: 6589 RVA: 0x0005CA5A File Offset: 0x0005AC5A
		// (remove) Token: 0x060019BE RID: 6590 RVA: 0x0005CA6D File Offset: 0x0005AC6D
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_CellMouseEnterDescr")]
		public event DataGridViewCellEventHandler CellMouseEnter
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEENTER, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEENTER, value);
			}
		}

		/// <summary>Occurs when the mouse pointer leaves a cell.</summary>
		// Token: 0x1400013B RID: 315
		// (add) Token: 0x060019BF RID: 6591 RVA: 0x0005CA80 File Offset: 0x0005AC80
		// (remove) Token: 0x060019C0 RID: 6592 RVA: 0x0005CA93 File Offset: 0x0005AC93
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_CellMouseLeaveDescr")]
		public event DataGridViewCellEventHandler CellMouseLeave
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSELEAVE, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSELEAVE, value);
			}
		}

		/// <summary>Occurs when the mouse pointer moves over the <see cref="T:System.Windows.Forms.DataGridView" /> control.</summary>
		// Token: 0x1400013C RID: 316
		// (add) Token: 0x060019C1 RID: 6593 RVA: 0x0005CAA6 File Offset: 0x0005ACA6
		// (remove) Token: 0x060019C2 RID: 6594 RVA: 0x0005CAB9 File Offset: 0x0005ACB9
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_CellMouseMoveDescr")]
		public event DataGridViewCellMouseEventHandler CellMouseMove
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEMOVE, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEMOVE, value);
			}
		}

		/// <summary>Occurs when the user releases a mouse button while over a cell.</summary>
		// Token: 0x1400013D RID: 317
		// (add) Token: 0x060019C3 RID: 6595 RVA: 0x0005CACC File Offset: 0x0005ACCC
		// (remove) Token: 0x060019C4 RID: 6596 RVA: 0x0005CADF File Offset: 0x0005ACDF
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_CellMouseUpDescr")]
		public event DataGridViewCellMouseEventHandler CellMouseUp
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEUP, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEUP, value);
			}
		}

		/// <summary>Occurs when a cell needs to be drawn.</summary>
		// Token: 0x1400013E RID: 318
		// (add) Token: 0x060019C5 RID: 6597 RVA: 0x0005CAF2 File Offset: 0x0005ACF2
		// (remove) Token: 0x060019C6 RID: 6598 RVA: 0x0005CB05 File Offset: 0x0005AD05
		[SRCategory("CatDisplay")]
		[SRDescription("DataGridView_CellPaintingDescr")]
		public event DataGridViewCellPaintingEventHandler CellPainting
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLPAINTING, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLPAINTING, value);
			}
		}

		/// <summary>Occurs when a cell leaves edit mode if the cell value has been modified.</summary>
		// Token: 0x1400013F RID: 319
		// (add) Token: 0x060019C7 RID: 6599 RVA: 0x0005CB18 File Offset: 0x0005AD18
		// (remove) Token: 0x060019C8 RID: 6600 RVA: 0x0005CB2B File Offset: 0x0005AD2B
		[SRCategory("CatDisplay")]
		[SRDescription("DataGridView_CellParsingDescr")]
		public event DataGridViewCellParsingEventHandler CellParsing
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLPARSING, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLPARSING, value);
			}
		}

		/// <summary>Occurs when a cell state changes, such as when the cell loses or gains focus.</summary>
		// Token: 0x14000140 RID: 320
		// (add) Token: 0x060019C9 RID: 6601 RVA: 0x0005CB3E File Offset: 0x0005AD3E
		// (remove) Token: 0x060019CA RID: 6602 RVA: 0x0005CB51 File Offset: 0x0005AD51
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_CellStateChangedDescr")]
		public event DataGridViewCellStateChangedEventHandler CellStateChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLSTATECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLSTATECHANGED, value);
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridViewCell.Style" /> property of a <see cref="T:System.Windows.Forms.DataGridViewCell" /> changes.</summary>
		// Token: 0x14000141 RID: 321
		// (add) Token: 0x060019CB RID: 6603 RVA: 0x0005CB64 File Offset: 0x0005AD64
		// (remove) Token: 0x060019CC RID: 6604 RVA: 0x0005CB77 File Offset: 0x0005AD77
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_CellStyleChangedDescr")]
		public event DataGridViewCellEventHandler CellStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLSTYLECHANGED, value);
			}
		}

		/// <summary>Occurs when one of the values of a cell style changes.</summary>
		// Token: 0x14000142 RID: 322
		// (add) Token: 0x060019CD RID: 6605 RVA: 0x0005CB8A File Offset: 0x0005AD8A
		// (remove) Token: 0x060019CE RID: 6606 RVA: 0x0005CB9D File Offset: 0x0005AD9D
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_CellStyleContentChangedDescr")]
		public event DataGridViewCellStyleContentChangedEventHandler CellStyleContentChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLSTYLECONTENTCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLSTYLECONTENTCHANGED, value);
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridViewCell.ToolTipText" /> property value changes for a cell in the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		// Token: 0x14000143 RID: 323
		// (add) Token: 0x060019CF RID: 6607 RVA: 0x0005CBB0 File Offset: 0x0005ADB0
		// (remove) Token: 0x060019D0 RID: 6608 RVA: 0x0005CBC3 File Offset: 0x0005ADC3
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_CellToolTipTextChangedDescr")]
		public event DataGridViewCellEventHandler CellToolTipTextChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLTOOLTIPTEXTCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLTOOLTIPTEXTCHANGED, value);
			}
		}

		/// <summary>Occurs when a cell's ToolTip text is needed.</summary>
		// Token: 0x14000144 RID: 324
		// (add) Token: 0x060019D1 RID: 6609 RVA: 0x0005CBD6 File Offset: 0x0005ADD6
		// (remove) Token: 0x060019D2 RID: 6610 RVA: 0x0005CBE9 File Offset: 0x0005ADE9
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_CellToolTipTextNeededDescr")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public event DataGridViewCellToolTipTextNeededEventHandler CellToolTipTextNeeded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLTOOLTIPTEXTNEEDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLTOOLTIPTEXTNEEDED, value);
			}
		}

		/// <summary>Occurs after the cell has finished validating.</summary>
		// Token: 0x14000145 RID: 325
		// (add) Token: 0x060019D3 RID: 6611 RVA: 0x0005CBFC File Offset: 0x0005ADFC
		// (remove) Token: 0x060019D4 RID: 6612 RVA: 0x0005CC0F File Offset: 0x0005AE0F
		[SRCategory("CatFocus")]
		[SRDescription("DataGridView_CellValidatedDescr")]
		public event DataGridViewCellEventHandler CellValidated
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLVALIDATED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLVALIDATED, value);
			}
		}

		/// <summary>Occurs when a cell loses input focus, enabling content validation.</summary>
		// Token: 0x14000146 RID: 326
		// (add) Token: 0x060019D5 RID: 6613 RVA: 0x0005CC22 File Offset: 0x0005AE22
		// (remove) Token: 0x060019D6 RID: 6614 RVA: 0x0005CC35 File Offset: 0x0005AE35
		[SRCategory("CatFocus")]
		[SRDescription("DataGridView_CellValidatingDescr")]
		public event DataGridViewCellValidatingEventHandler CellValidating
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLVALIDATING, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLVALIDATING, value);
			}
		}

		/// <summary>Occurs when the value of a cell changes.</summary>
		// Token: 0x14000147 RID: 327
		// (add) Token: 0x060019D7 RID: 6615 RVA: 0x0005CC48 File Offset: 0x0005AE48
		// (remove) Token: 0x060019D8 RID: 6616 RVA: 0x0005CC5B File Offset: 0x0005AE5B
		[SRCategory("CatAction")]
		[SRDescription("DataGridView_CellValueChangedDescr")]
		public event DataGridViewCellEventHandler CellValueChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLVALUECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLVALUECHANGED, value);
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridView.VirtualMode" /> property of the <see cref="T:System.Windows.Forms.DataGridView" /> control is <see langword="true" /> and the <see cref="T:System.Windows.Forms.DataGridView" /> requires a value for a cell in order to format and display the cell.</summary>
		// Token: 0x14000148 RID: 328
		// (add) Token: 0x060019D9 RID: 6617 RVA: 0x0005CC6E File Offset: 0x0005AE6E
		// (remove) Token: 0x060019DA RID: 6618 RVA: 0x0005CC81 File Offset: 0x0005AE81
		[SRCategory("CatData")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRDescription("DataGridView_CellValueNeededDescr")]
		public event DataGridViewCellValueEventHandler CellValueNeeded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLVALUENEEDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLVALUENEEDED, value);
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridView.VirtualMode" /> property of the <see cref="T:System.Windows.Forms.DataGridView" /> control is <see langword="true" /> and a cell value has changed and requires storage in the underlying data source.</summary>
		// Token: 0x14000149 RID: 329
		// (add) Token: 0x060019DB RID: 6619 RVA: 0x0005CC94 File Offset: 0x0005AE94
		// (remove) Token: 0x060019DC RID: 6620 RVA: 0x0005CCA7 File Offset: 0x0005AEA7
		[SRCategory("CatData")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRDescription("DataGridView_CellValuePushedDescr")]
		public event DataGridViewCellValueEventHandler CellValuePushed
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLVALUEPUSHED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLVALUEPUSHED, value);
			}
		}

		/// <summary>Occurs when a column is added to the control.</summary>
		// Token: 0x1400014A RID: 330
		// (add) Token: 0x060019DD RID: 6621 RVA: 0x0005CCBA File Offset: 0x0005AEBA
		// (remove) Token: 0x060019DE RID: 6622 RVA: 0x0005CCCD File Offset: 0x0005AECD
		[SRCategory("CatAction")]
		[SRDescription("DataGridView_ColumnAddedDescr")]
		public event DataGridViewColumnEventHandler ColumnAdded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNADDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNADDED, value);
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridViewColumn.ContextMenuStrip" /> property of a column changes.</summary>
		// Token: 0x1400014B RID: 331
		// (add) Token: 0x060019DF RID: 6623 RVA: 0x0005CCE0 File Offset: 0x0005AEE0
		// (remove) Token: 0x060019E0 RID: 6624 RVA: 0x0005CCF3 File Offset: 0x0005AEF3
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_ColumnContextMenuStripChangedDescr")]
		public event DataGridViewColumnEventHandler ColumnContextMenuStripChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNCONTEXTMENUSTRIPCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNCONTEXTMENUSTRIPCHANGED, value);
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridViewColumn.DataPropertyName" /> property for a column changes.</summary>
		// Token: 0x1400014C RID: 332
		// (add) Token: 0x060019E1 RID: 6625 RVA: 0x0005CD06 File Offset: 0x0005AF06
		// (remove) Token: 0x060019E2 RID: 6626 RVA: 0x0005CD19 File Offset: 0x0005AF19
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_ColumnDataPropertyNameChangedDescr")]
		public event DataGridViewColumnEventHandler ColumnDataPropertyNameChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNDATAPROPERTYNAMECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNDATAPROPERTYNAMECHANGED, value);
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridViewBand.DefaultCellStyle" /> property for a column changes.</summary>
		// Token: 0x1400014D RID: 333
		// (add) Token: 0x060019E3 RID: 6627 RVA: 0x0005CD2C File Offset: 0x0005AF2C
		// (remove) Token: 0x060019E4 RID: 6628 RVA: 0x0005CD3F File Offset: 0x0005AF3F
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_ColumnDefaultCellStyleChangedDescr")]
		public event DataGridViewColumnEventHandler ColumnDefaultCellStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNDEFAULTCELLSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNDEFAULTCELLSTYLECHANGED, value);
			}
		}

		/// <summary>Occurs when the value the <see cref="P:System.Windows.Forms.DataGridViewColumn.DisplayIndex" /> property for a column changes.</summary>
		// Token: 0x1400014E RID: 334
		// (add) Token: 0x060019E5 RID: 6629 RVA: 0x0005CD52 File Offset: 0x0005AF52
		// (remove) Token: 0x060019E6 RID: 6630 RVA: 0x0005CD65 File Offset: 0x0005AF65
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_ColumnDisplayIndexChangedDescr")]
		public event DataGridViewColumnEventHandler ColumnDisplayIndexChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNDISPLAYINDEXCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNDISPLAYINDEXCHANGED, value);
			}
		}

		/// <summary>Occurs when the user double-clicks a divider between two columns.</summary>
		// Token: 0x1400014F RID: 335
		// (add) Token: 0x060019E7 RID: 6631 RVA: 0x0005CD78 File Offset: 0x0005AF78
		// (remove) Token: 0x060019E8 RID: 6632 RVA: 0x0005CD8B File Offset: 0x0005AF8B
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_ColumnDividerDoubleClickDescr")]
		public event DataGridViewColumnDividerDoubleClickEventHandler ColumnDividerDoubleClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNDIVIDERDOUBLECLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNDIVIDERDOUBLECLICK, value);
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridViewColumn.DividerWidth" /> property changes.</summary>
		// Token: 0x14000150 RID: 336
		// (add) Token: 0x060019E9 RID: 6633 RVA: 0x0005CD9E File Offset: 0x0005AF9E
		// (remove) Token: 0x060019EA RID: 6634 RVA: 0x0005CDB1 File Offset: 0x0005AFB1
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_ColumnDividerWidthChangedDescr")]
		public event DataGridViewColumnEventHandler ColumnDividerWidthChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNDIVIDERWIDTHCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNDIVIDERWIDTHCHANGED, value);
			}
		}

		/// <summary>Occurs when the user clicks a column header.</summary>
		// Token: 0x14000151 RID: 337
		// (add) Token: 0x060019EB RID: 6635 RVA: 0x0005CDC4 File Offset: 0x0005AFC4
		// (remove) Token: 0x060019EC RID: 6636 RVA: 0x0005CDD7 File Offset: 0x0005AFD7
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_ColumnHeaderMouseClickDescr")]
		public event DataGridViewCellMouseEventHandler ColumnHeaderMouseClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERMOUSECLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERMOUSECLICK, value);
			}
		}

		/// <summary>Occurs when a column header is double-clicked.</summary>
		// Token: 0x14000152 RID: 338
		// (add) Token: 0x060019ED RID: 6637 RVA: 0x0005CDEA File Offset: 0x0005AFEA
		// (remove) Token: 0x060019EE RID: 6638 RVA: 0x0005CDFD File Offset: 0x0005AFFD
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_ColumnHeaderMouseDoubleClickDescr")]
		public event DataGridViewCellMouseEventHandler ColumnHeaderMouseDoubleClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERMOUSEDOUBLECLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERMOUSEDOUBLECLICK, value);
			}
		}

		/// <summary>Occurs when the contents of a column header cell change.</summary>
		// Token: 0x14000153 RID: 339
		// (add) Token: 0x060019EF RID: 6639 RVA: 0x0005CE10 File Offset: 0x0005B010
		// (remove) Token: 0x060019F0 RID: 6640 RVA: 0x0005CE23 File Offset: 0x0005B023
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_ColumnHeaderCellChangedDescr")]
		public event DataGridViewColumnEventHandler ColumnHeaderCellChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERCELLCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERCELLCHANGED, value);
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridViewColumn.MinimumWidth" /> property for a column changes.</summary>
		// Token: 0x14000154 RID: 340
		// (add) Token: 0x060019F1 RID: 6641 RVA: 0x0005CE36 File Offset: 0x0005B036
		// (remove) Token: 0x060019F2 RID: 6642 RVA: 0x0005CE49 File Offset: 0x0005B049
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_ColumnMinimumWidthChangedDescr")]
		public event DataGridViewColumnEventHandler ColumnMinimumWidthChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNMINIMUMWIDTHCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNMINIMUMWIDTHCHANGED, value);
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridViewColumn.Name" /> property for a column changes.</summary>
		// Token: 0x14000155 RID: 341
		// (add) Token: 0x060019F3 RID: 6643 RVA: 0x0005CE5C File Offset: 0x0005B05C
		// (remove) Token: 0x060019F4 RID: 6644 RVA: 0x0005CE6F File Offset: 0x0005B06F
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_ColumnNameChangedDescr")]
		public event DataGridViewColumnEventHandler ColumnNameChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNNAMECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNNAMECHANGED, value);
			}
		}

		/// <summary>Occurs when a column is removed from the control.</summary>
		// Token: 0x14000156 RID: 342
		// (add) Token: 0x060019F5 RID: 6645 RVA: 0x0005CE82 File Offset: 0x0005B082
		// (remove) Token: 0x060019F6 RID: 6646 RVA: 0x0005CE95 File Offset: 0x0005B095
		[SRCategory("CatAction")]
		[SRDescription("DataGridView_ColumnRemovedDescr")]
		public event DataGridViewColumnEventHandler ColumnRemoved
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNREMOVED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNREMOVED, value);
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridViewColumn.SortMode" /> property for a column changes.</summary>
		// Token: 0x14000157 RID: 343
		// (add) Token: 0x060019F7 RID: 6647 RVA: 0x0005CEA8 File Offset: 0x0005B0A8
		// (remove) Token: 0x060019F8 RID: 6648 RVA: 0x0005CEBB File Offset: 0x0005B0BB
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridViewColumnSortModeChangedDescr")]
		public event DataGridViewColumnEventHandler ColumnSortModeChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNSORTMODECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNSORTMODECHANGED, value);
			}
		}

		/// <summary>Occurs when a column changes state, such as gaining or losing focus.</summary>
		// Token: 0x14000158 RID: 344
		// (add) Token: 0x060019F9 RID: 6649 RVA: 0x0005CECE File Offset: 0x0005B0CE
		// (remove) Token: 0x060019FA RID: 6650 RVA: 0x0005CEE1 File Offset: 0x0005B0E1
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_ColumnStateChangedDescr")]
		public event DataGridViewColumnStateChangedEventHandler ColumnStateChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNSTATECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNSTATECHANGED, value);
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridViewColumn.ToolTipText" /> property value changes for a column in the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		// Token: 0x14000159 RID: 345
		// (add) Token: 0x060019FB RID: 6651 RVA: 0x0005CEF4 File Offset: 0x0005B0F4
		// (remove) Token: 0x060019FC RID: 6652 RVA: 0x0005CF07 File Offset: 0x0005B107
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_ColumnToolTipTextChangedDescr")]
		public event DataGridViewColumnEventHandler ColumnToolTipTextChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNTOOLTIPTEXTCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNTOOLTIPTEXTCHANGED, value);
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridViewColumn.Width" /> property for a column changes.</summary>
		// Token: 0x1400015A RID: 346
		// (add) Token: 0x060019FD RID: 6653 RVA: 0x0005CF1A File Offset: 0x0005B11A
		// (remove) Token: 0x060019FE RID: 6654 RVA: 0x0005CF2D File Offset: 0x0005B12D
		[SRCategory("CatAction")]
		[SRDescription("DataGridView_ColumnWidthChangedDescr")]
		public event DataGridViewColumnEventHandler ColumnWidthChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNWIDTHCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNWIDTHCHANGED, value);
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridView.CurrentCell" /> property changes.</summary>
		// Token: 0x1400015B RID: 347
		// (add) Token: 0x060019FF RID: 6655 RVA: 0x0005CF40 File Offset: 0x0005B140
		// (remove) Token: 0x06001A00 RID: 6656 RVA: 0x0005CF53 File Offset: 0x0005B153
		[SRCategory("CatAction")]
		[SRDescription("DataGridView_CurrentCellChangedDescr")]
		public event EventHandler CurrentCellChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCURRENTCELLCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCURRENTCELLCHANGED, value);
			}
		}

		/// <summary>Occurs when the state of a cell changes in relation to a change in its contents.</summary>
		// Token: 0x1400015C RID: 348
		// (add) Token: 0x06001A01 RID: 6657 RVA: 0x0005CF66 File Offset: 0x0005B166
		// (remove) Token: 0x06001A02 RID: 6658 RVA: 0x0005CF79 File Offset: 0x0005B179
		[SRCategory("CatBehavior")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRDescription("DataGridView_CurrentCellDirtyStateChangedDescr")]
		public event EventHandler CurrentCellDirtyStateChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCURRENTCELLDIRTYSTATECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCURRENTCELLDIRTYSTATECHANGED, value);
			}
		}

		/// <summary>Occurs after a data-binding operation has finished.</summary>
		// Token: 0x1400015D RID: 349
		// (add) Token: 0x06001A03 RID: 6659 RVA: 0x0005CF8C File Offset: 0x0005B18C
		// (remove) Token: 0x06001A04 RID: 6660 RVA: 0x0005CF9F File Offset: 0x0005B19F
		[SRCategory("CatData")]
		[SRDescription("DataGridView_DataBindingCompleteDescr")]
		public event DataGridViewBindingCompleteEventHandler DataBindingComplete
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWDATABINDINGCOMPLETE, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWDATABINDINGCOMPLETE, value);
			}
		}

		/// <summary>Occurs when an external data-parsing or validation operation throws an exception, or when an attempt to commit data to a data source fails.</summary>
		// Token: 0x1400015E RID: 350
		// (add) Token: 0x06001A05 RID: 6661 RVA: 0x0005CFB2 File Offset: 0x0005B1B2
		// (remove) Token: 0x06001A06 RID: 6662 RVA: 0x0005CFC5 File Offset: 0x0005B1C5
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_DataErrorDescr")]
		public event DataGridViewDataErrorEventHandler DataError
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWDATAERROR, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWDATAERROR, value);
			}
		}

		/// <summary>Occurs when the user enters the row for new records so that it can be populated with default values.</summary>
		// Token: 0x1400015F RID: 351
		// (add) Token: 0x06001A07 RID: 6663 RVA: 0x0005CFD8 File Offset: 0x0005B1D8
		// (remove) Token: 0x06001A08 RID: 6664 RVA: 0x0005CFEB File Offset: 0x0005B1EB
		[SRCategory("CatData")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRDescription("DataGridView_DefaultValuesNeededDescr")]
		public event DataGridViewRowEventHandler DefaultValuesNeeded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWDEFAULTVALUESNEEDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWDEFAULTVALUESNEEDED, value);
			}
		}

		/// <summary>Occurs when a control for editing a cell is showing.</summary>
		// Token: 0x14000160 RID: 352
		// (add) Token: 0x06001A09 RID: 6665 RVA: 0x0005CFFE File Offset: 0x0005B1FE
		// (remove) Token: 0x06001A0A RID: 6666 RVA: 0x0005D011 File Offset: 0x0005B211
		[SRCategory("CatAction")]
		[SRDescription("DataGridView_EditingControlShowingDescr")]
		public event DataGridViewEditingControlShowingEventHandler EditingControlShowing
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWEDITINGCONTROLSHOWING, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWEDITINGCONTROLSHOWING, value);
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridView.VirtualMode" /> property of the <see cref="T:System.Windows.Forms.DataGridView" /> is <see langword="true" /> and the user navigates to the new row at the bottom of the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		// Token: 0x14000161 RID: 353
		// (add) Token: 0x06001A0B RID: 6667 RVA: 0x0005D024 File Offset: 0x0005B224
		// (remove) Token: 0x06001A0C RID: 6668 RVA: 0x0005D037 File Offset: 0x0005B237
		[SRCategory("CatData")]
		[SRDescription("DataGridView_NewRowNeededDescr")]
		public event DataGridViewRowEventHandler NewRowNeeded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWNEWROWNEEDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWNEWROWNEEDED, value);
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridViewRow.ContextMenuStrip" /> property changes.</summary>
		// Token: 0x14000162 RID: 354
		// (add) Token: 0x06001A0D RID: 6669 RVA: 0x0005D04A File Offset: 0x0005B24A
		// (remove) Token: 0x06001A0E RID: 6670 RVA: 0x0005D05D File Offset: 0x0005B25D
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_RowContextMenuStripChangedDescr")]
		public event DataGridViewRowEventHandler RowContextMenuStripChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWCONTEXTMENUSTRIPCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWCONTEXTMENUSTRIPCHANGED, value);
			}
		}

		/// <summary>Occurs when a row's shortcut menu is needed.</summary>
		// Token: 0x14000163 RID: 355
		// (add) Token: 0x06001A0F RID: 6671 RVA: 0x0005D070 File Offset: 0x0005B270
		// (remove) Token: 0x06001A10 RID: 6672 RVA: 0x0005D083 File Offset: 0x0005B283
		[SRCategory("CatData")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRDescription("DataGridView_RowContextMenuStripNeededDescr")]
		public event DataGridViewRowContextMenuStripNeededEventHandler RowContextMenuStripNeeded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWCONTEXTMENUSTRIPNEEDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWCONTEXTMENUSTRIPNEEDED, value);
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridViewBand.DefaultCellStyle" /> property for a row changes.</summary>
		// Token: 0x14000164 RID: 356
		// (add) Token: 0x06001A11 RID: 6673 RVA: 0x0005D096 File Offset: 0x0005B296
		// (remove) Token: 0x06001A12 RID: 6674 RVA: 0x0005D0A9 File Offset: 0x0005B2A9
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_RowDefaultCellStyleChangedDescr")]
		public event DataGridViewRowEventHandler RowDefaultCellStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWDEFAULTCELLSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWDEFAULTCELLSTYLECHANGED, value);
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridView.VirtualMode" /> property of the <see cref="T:System.Windows.Forms.DataGridView" /> control is <see langword="true" /> and the <see cref="T:System.Windows.Forms.DataGridView" /> needs to determine whether the current row has uncommitted changes.</summary>
		// Token: 0x14000165 RID: 357
		// (add) Token: 0x06001A13 RID: 6675 RVA: 0x0005D0BC File Offset: 0x0005B2BC
		// (remove) Token: 0x06001A14 RID: 6676 RVA: 0x0005D0CF File Offset: 0x0005B2CF
		[SRCategory("CatData")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRDescription("DataGridView_RowDirtyStateNeededDescr")]
		public event QuestionEventHandler RowDirtyStateNeeded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWDIRTYSTATENEEDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWDIRTYSTATENEEDED, value);
			}
		}

		/// <summary>Occurs when the user double-clicks the divider between two rows.</summary>
		// Token: 0x14000166 RID: 358
		// (add) Token: 0x06001A15 RID: 6677 RVA: 0x0005D0E2 File Offset: 0x0005B2E2
		// (remove) Token: 0x06001A16 RID: 6678 RVA: 0x0005D0F5 File Offset: 0x0005B2F5
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_RowDividerDoubleClickDescr")]
		public event DataGridViewRowDividerDoubleClickEventHandler RowDividerDoubleClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWDIVIDERDOUBLECLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWDIVIDERDOUBLECLICK, value);
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridViewRow.DividerHeight" /> property changes.</summary>
		// Token: 0x14000167 RID: 359
		// (add) Token: 0x06001A17 RID: 6679 RVA: 0x0005D108 File Offset: 0x0005B308
		// (remove) Token: 0x06001A18 RID: 6680 RVA: 0x0005D11B File Offset: 0x0005B31B
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridView_RowDividerHeightChangedDescr")]
		public event DataGridViewRowEventHandler RowDividerHeightChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWDIVIDERHEIGHTCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWDIVIDERHEIGHTCHANGED, value);
			}
		}

		/// <summary>Occurs when a row receives input focus but before it becomes the current row.</summary>
		// Token: 0x14000168 RID: 360
		// (add) Token: 0x06001A19 RID: 6681 RVA: 0x0005D12E File Offset: 0x0005B32E
		// (remove) Token: 0x06001A1A RID: 6682 RVA: 0x0005D141 File Offset: 0x0005B341
		[SRCategory("CatFocus")]
		[SRDescription("DataGridView_RowEnterDescr")]
		public event DataGridViewCellEventHandler RowEnter
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWENTER, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWENTER, value);
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Forms.DataGridViewRow.ErrorText" /> property of a row changes.</summary>
		// Token: 0x14000169 RID: 361
		// (add) Token: 0x06001A1B RID: 6683 RVA: 0x0005D154 File Offset: 0x0005B354
		// (remove) Token: 0x06001A1C RID: 6684 RVA: 0x0005D167 File Offset: 0x0005B367
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_RowErrorTextChangedDescr")]
		public event DataGridViewRowEventHandler RowErrorTextChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWERRORTEXTCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWERRORTEXTCHANGED, value);
			}
		}

		/// <summary>Occurs when a row's error text is needed.</summary>
		// Token: 0x1400016A RID: 362
		// (add) Token: 0x06001A1D RID: 6685 RVA: 0x0005D17A File Offset: 0x0005B37A
		// (remove) Token: 0x06001A1E RID: 6686 RVA: 0x0005D18D File Offset: 0x0005B38D
		[SRCategory("CatData")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRDescription("DataGridView_RowErrorTextNeededDescr")]
		public event DataGridViewRowErrorTextNeededEventHandler RowErrorTextNeeded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWERRORTEXTNEEDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWERRORTEXTNEEDED, value);
			}
		}

		/// <summary>Occurs when the user clicks within the boundaries of a row header.</summary>
		// Token: 0x1400016B RID: 363
		// (add) Token: 0x06001A1F RID: 6687 RVA: 0x0005D1A0 File Offset: 0x0005B3A0
		// (remove) Token: 0x06001A20 RID: 6688 RVA: 0x0005D1B3 File Offset: 0x0005B3B3
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_RowHeaderMouseClickDescr")]
		public event DataGridViewCellMouseEventHandler RowHeaderMouseClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERMOUSECLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERMOUSECLICK, value);
			}
		}

		/// <summary>Occurs when a row header is double-clicked.</summary>
		// Token: 0x1400016C RID: 364
		// (add) Token: 0x06001A21 RID: 6689 RVA: 0x0005D1C6 File Offset: 0x0005B3C6
		// (remove) Token: 0x06001A22 RID: 6690 RVA: 0x0005D1D9 File Offset: 0x0005B3D9
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_RowHeaderMouseDoubleClickDescr")]
		public event DataGridViewCellMouseEventHandler RowHeaderMouseDoubleClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERMOUSEDOUBLECLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERMOUSEDOUBLECLICK, value);
			}
		}

		/// <summary>Occurs when the user changes the contents of a row header cell.</summary>
		// Token: 0x1400016D RID: 365
		// (add) Token: 0x06001A23 RID: 6691 RVA: 0x0005D1EC File Offset: 0x0005B3EC
		// (remove) Token: 0x06001A24 RID: 6692 RVA: 0x0005D1FF File Offset: 0x0005B3FF
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_RowHeaderCellChangedDescr")]
		public event DataGridViewRowEventHandler RowHeaderCellChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERCELLCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERCELLCHANGED, value);
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridViewRow.Height" /> property for a row changes.</summary>
		// Token: 0x1400016E RID: 366
		// (add) Token: 0x06001A25 RID: 6693 RVA: 0x0005D212 File Offset: 0x0005B412
		// (remove) Token: 0x06001A26 RID: 6694 RVA: 0x0005D225 File Offset: 0x0005B425
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_RowHeightChangedDescr")]
		public event DataGridViewRowEventHandler RowHeightChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEIGHTCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEIGHTCHANGED, value);
			}
		}

		/// <summary>Occurs when information about row height is requested.</summary>
		// Token: 0x1400016F RID: 367
		// (add) Token: 0x06001A27 RID: 6695 RVA: 0x0005D238 File Offset: 0x0005B438
		// (remove) Token: 0x06001A28 RID: 6696 RVA: 0x0005D24B File Offset: 0x0005B44B
		[SRCategory("CatData")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRDescription("DataGridView_RowHeightInfoNeededDescr")]
		public event DataGridViewRowHeightInfoNeededEventHandler RowHeightInfoNeeded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEIGHTINFONEEDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEIGHTINFONEEDED, value);
			}
		}

		// Token: 0x17000616 RID: 1558
		// (get) Token: 0x06001A29 RID: 6697 RVA: 0x0005D25E File Offset: 0x0005B45E
		internal DataGridViewRowHeightInfoNeededEventArgs RowHeightInfoNeededEventArgs
		{
			get
			{
				if (this.dgvrhine == null)
				{
					this.dgvrhine = new DataGridViewRowHeightInfoNeededEventArgs();
				}
				return this.dgvrhine;
			}
		}

		/// <summary>Occurs when the user changes the height of a row.</summary>
		// Token: 0x14000170 RID: 368
		// (add) Token: 0x06001A2A RID: 6698 RVA: 0x0005D279 File Offset: 0x0005B479
		// (remove) Token: 0x06001A2B RID: 6699 RVA: 0x0005D28C File Offset: 0x0005B48C
		[SRCategory("CatData")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRDescription("DataGridView_RowHeightInfoPushedDescr")]
		public event DataGridViewRowHeightInfoPushedEventHandler RowHeightInfoPushed
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEIGHTINFOPUSHED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEIGHTINFOPUSHED, value);
			}
		}

		/// <summary>Occurs when a row loses input focus and is no longer the current row.</summary>
		// Token: 0x14000171 RID: 369
		// (add) Token: 0x06001A2C RID: 6700 RVA: 0x0005D29F File Offset: 0x0005B49F
		// (remove) Token: 0x06001A2D RID: 6701 RVA: 0x0005D2B2 File Offset: 0x0005B4B2
		[SRCategory("CatFocus")]
		[SRDescription("DataGridView_RowLeaveDescr")]
		public event DataGridViewCellEventHandler RowLeave
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWLEAVE, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWLEAVE, value);
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DataGridViewRow.MinimumHeight" /> property for a row changes.</summary>
		// Token: 0x14000172 RID: 370
		// (add) Token: 0x06001A2E RID: 6702 RVA: 0x0005D2C5 File Offset: 0x0005B4C5
		// (remove) Token: 0x06001A2F RID: 6703 RVA: 0x0005D2D8 File Offset: 0x0005B4D8
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_RowMinimumHeightChangedDescr")]
		public event DataGridViewRowEventHandler RowMinimumHeightChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWMINIMUMHEIGHTCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWMINIMUMHEIGHTCHANGED, value);
			}
		}

		/// <summary>Occurs after a <see cref="T:System.Windows.Forms.DataGridViewRow" /> is painted.</summary>
		// Token: 0x14000173 RID: 371
		// (add) Token: 0x06001A30 RID: 6704 RVA: 0x0005D2EB File Offset: 0x0005B4EB
		// (remove) Token: 0x06001A31 RID: 6705 RVA: 0x0005D2FE File Offset: 0x0005B4FE
		[SRCategory("CatDisplay")]
		[SRDescription("DataGridView_RowPostPaintDescr")]
		public event DataGridViewRowPostPaintEventHandler RowPostPaint
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWPOSTPAINT, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWPOSTPAINT, value);
			}
		}

		// Token: 0x17000617 RID: 1559
		// (get) Token: 0x06001A32 RID: 6706 RVA: 0x0005D311 File Offset: 0x0005B511
		internal DataGridViewRowPostPaintEventArgs RowPostPaintEventArgs
		{
			get
			{
				if (this.dgvrpope == null)
				{
					this.dgvrpope = new DataGridViewRowPostPaintEventArgs(this);
				}
				return this.dgvrpope;
			}
		}

		/// <summary>Occurs before a <see cref="T:System.Windows.Forms.DataGridViewRow" /> is painted</summary>
		// Token: 0x14000174 RID: 372
		// (add) Token: 0x06001A33 RID: 6707 RVA: 0x0005D32D File Offset: 0x0005B52D
		// (remove) Token: 0x06001A34 RID: 6708 RVA: 0x0005D340 File Offset: 0x0005B540
		[SRCategory("CatDisplay")]
		[SRDescription("DataGridView_RowPrePaintDescr")]
		public event DataGridViewRowPrePaintEventHandler RowPrePaint
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWPREPAINT, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWPREPAINT, value);
			}
		}

		// Token: 0x17000618 RID: 1560
		// (get) Token: 0x06001A35 RID: 6709 RVA: 0x0005D353 File Offset: 0x0005B553
		internal DataGridViewRowPrePaintEventArgs RowPrePaintEventArgs
		{
			get
			{
				if (this.dgvrprpe == null)
				{
					this.dgvrprpe = new DataGridViewRowPrePaintEventArgs(this);
				}
				return this.dgvrprpe;
			}
		}

		/// <summary>Occurs after a new row is added to the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		// Token: 0x14000175 RID: 373
		// (add) Token: 0x06001A36 RID: 6710 RVA: 0x0005D36F File Offset: 0x0005B56F
		// (remove) Token: 0x06001A37 RID: 6711 RVA: 0x0005D382 File Offset: 0x0005B582
		[SRCategory("CatAction")]
		[SRDescription("DataGridView_RowsAddedDescr")]
		public event DataGridViewRowsAddedEventHandler RowsAdded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWSADDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWSADDED, value);
			}
		}

		/// <summary>Occurs when a row or rows are deleted from the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		// Token: 0x14000176 RID: 374
		// (add) Token: 0x06001A38 RID: 6712 RVA: 0x0005D395 File Offset: 0x0005B595
		// (remove) Token: 0x06001A39 RID: 6713 RVA: 0x0005D3A8 File Offset: 0x0005B5A8
		[SRCategory("CatAction")]
		[SRDescription("DataGridView_RowsRemovedDescr")]
		public event DataGridViewRowsRemovedEventHandler RowsRemoved
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWSREMOVED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWSREMOVED, value);
			}
		}

		/// <summary>Occurs when a row changes state, such as losing or gaining input focus.</summary>
		// Token: 0x14000177 RID: 375
		// (add) Token: 0x06001A3A RID: 6714 RVA: 0x0005D3BB File Offset: 0x0005B5BB
		// (remove) Token: 0x06001A3B RID: 6715 RVA: 0x0005D3CE File Offset: 0x0005B5CE
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_RowStateChangedDescr")]
		public event DataGridViewRowStateChangedEventHandler RowStateChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWSTATECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWSTATECHANGED, value);
			}
		}

		/// <summary>Occurs when a row's state changes from shared to unshared.</summary>
		// Token: 0x14000178 RID: 376
		// (add) Token: 0x06001A3C RID: 6716 RVA: 0x0005D3E1 File Offset: 0x0005B5E1
		// (remove) Token: 0x06001A3D RID: 6717 RVA: 0x0005D3F4 File Offset: 0x0005B5F4
		[SRCategory("CatBehavior")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRDescription("DataGridView_RowUnsharedDescr")]
		public event DataGridViewRowEventHandler RowUnshared
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWUNSHARED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWUNSHARED, value);
			}
		}

		/// <summary>Occurs after a row has finished validating.</summary>
		// Token: 0x14000179 RID: 377
		// (add) Token: 0x06001A3E RID: 6718 RVA: 0x0005D407 File Offset: 0x0005B607
		// (remove) Token: 0x06001A3F RID: 6719 RVA: 0x0005D41A File Offset: 0x0005B61A
		[SRCategory("CatFocus")]
		[SRDescription("DataGridView_RowValidatedDescr")]
		public event DataGridViewCellEventHandler RowValidated
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWVALIDATED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWVALIDATED, value);
			}
		}

		/// <summary>Occurs when a row is validating.</summary>
		// Token: 0x1400017A RID: 378
		// (add) Token: 0x06001A40 RID: 6720 RVA: 0x0005D42D File Offset: 0x0005B62D
		// (remove) Token: 0x06001A41 RID: 6721 RVA: 0x0005D440 File Offset: 0x0005B640
		[SRCategory("CatFocus")]
		[SRDescription("DataGridView_RowValidatingDescr")]
		public event DataGridViewCellCancelEventHandler RowValidating
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWVALIDATING, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWVALIDATING, value);
			}
		}

		/// <summary>Occurs when the user scrolls through the control contents.</summary>
		// Token: 0x1400017B RID: 379
		// (add) Token: 0x06001A42 RID: 6722 RVA: 0x0005D453 File Offset: 0x0005B653
		// (remove) Token: 0x06001A43 RID: 6723 RVA: 0x0005D466 File Offset: 0x0005B666
		[SRCategory("CatAction")]
		[SRDescription("DataGridView_ScrollDescr")]
		public event ScrollEventHandler Scroll
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWSCROLL, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWSCROLL, value);
			}
		}

		/// <summary>Occurs when the current selection changes.</summary>
		// Token: 0x1400017C RID: 380
		// (add) Token: 0x06001A44 RID: 6724 RVA: 0x0005D479 File Offset: 0x0005B679
		// (remove) Token: 0x06001A45 RID: 6725 RVA: 0x0005D48C File Offset: 0x0005B68C
		[SRCategory("CatAction")]
		[SRDescription("DataGridView_SelectionChangedDescr")]
		public event EventHandler SelectionChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWSELECTIONCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWSELECTIONCHANGED, value);
			}
		}

		/// <summary>Occurs when the <see cref="T:System.Windows.Forms.DataGridView" /> compares two cell values to perform a sort operation.</summary>
		// Token: 0x1400017D RID: 381
		// (add) Token: 0x06001A46 RID: 6726 RVA: 0x0005D49F File Offset: 0x0005B69F
		// (remove) Token: 0x06001A47 RID: 6727 RVA: 0x0005D4B2 File Offset: 0x0005B6B2
		[SRCategory("CatData")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRDescription("DataGridView_SortCompareDescr")]
		public event DataGridViewSortCompareEventHandler SortCompare
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWSORTCOMPARE, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWSORTCOMPARE, value);
			}
		}

		/// <summary>Occurs when the <see cref="T:System.Windows.Forms.DataGridView" /> control completes a sorting operation.</summary>
		// Token: 0x1400017E RID: 382
		// (add) Token: 0x06001A48 RID: 6728 RVA: 0x0005D4C5 File Offset: 0x0005B6C5
		// (remove) Token: 0x06001A49 RID: 6729 RVA: 0x0005D4D8 File Offset: 0x0005B6D8
		[SRCategory("CatData")]
		[SRDescription("DataGridView_SortedDescr")]
		public event EventHandler Sorted
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWSORTED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWSORTED, value);
			}
		}

		/// <summary>Occurs when the control style changes.</summary>
		// Token: 0x1400017F RID: 383
		// (add) Token: 0x06001A4A RID: 6730 RVA: 0x0005D4EB File Offset: 0x0005B6EB
		// (remove) Token: 0x06001A4B RID: 6731 RVA: 0x0005D4F4 File Offset: 0x0005B6F4
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new event EventHandler StyleChanged
		{
			add
			{
				base.StyleChanged += value;
			}
			remove
			{
				base.StyleChanged -= value;
			}
		}

		/// <summary>Occurs when the user has finished adding a row to the <see cref="T:System.Windows.Forms.DataGridView" /> control.</summary>
		// Token: 0x14000180 RID: 384
		// (add) Token: 0x06001A4C RID: 6732 RVA: 0x0005D4FD File Offset: 0x0005B6FD
		// (remove) Token: 0x06001A4D RID: 6733 RVA: 0x0005D510 File Offset: 0x0005B710
		[SRCategory("CatAction")]
		[SRDescription("DataGridView_UserAddedRowDescr")]
		public event DataGridViewRowEventHandler UserAddedRow
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWUSERADDEDROW, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWUSERADDEDROW, value);
			}
		}

		/// <summary>Occurs when the user has finished deleting a row from the <see cref="T:System.Windows.Forms.DataGridView" /> control.</summary>
		// Token: 0x14000181 RID: 385
		// (add) Token: 0x06001A4E RID: 6734 RVA: 0x0005D523 File Offset: 0x0005B723
		// (remove) Token: 0x06001A4F RID: 6735 RVA: 0x0005D536 File Offset: 0x0005B736
		[SRCategory("CatAction")]
		[SRDescription("DataGridView_UserDeletedRowDescr")]
		public event DataGridViewRowEventHandler UserDeletedRow
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWUSERDELETEDROW, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWUSERDELETEDROW, value);
			}
		}

		/// <summary>Occurs when the user deletes a row from the <see cref="T:System.Windows.Forms.DataGridView" /> control.</summary>
		// Token: 0x14000182 RID: 386
		// (add) Token: 0x06001A50 RID: 6736 RVA: 0x0005D549 File Offset: 0x0005B749
		// (remove) Token: 0x06001A51 RID: 6737 RVA: 0x0005D55C File Offset: 0x0005B75C
		[SRCategory("CatAction")]
		[SRDescription("DataGridView_UserDeletingRowDescr")]
		public event DataGridViewRowCancelEventHandler UserDeletingRow
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWUSERDELETINGROW, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWUSERDELETINGROW, value);
			}
		}

		/// <summary>For a description of this member, see <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" />.</summary>
		/// <exception cref="T:System.InvalidOperationException">This method has already been called for this control.</exception>
		// Token: 0x06001A52 RID: 6738 RVA: 0x0005D56F File Offset: 0x0005B76F
		void ISupportInitialize.BeginInit()
		{
			if (this.dataGridViewState2[524288])
			{
				throw new InvalidOperationException(SR.GetString("DataGridViewBeginInit"));
			}
			this.dataGridViewState2[524288] = true;
		}

		/// <summary>For a description of this member, see <see cref="M:System.ComponentModel.ISupportInitialize.EndInit" />.</summary>
		// Token: 0x06001A53 RID: 6739 RVA: 0x0005D5A4 File Offset: 0x0005B7A4
		void ISupportInitialize.EndInit()
		{
			this.dataGridViewState2[524288] = false;
			foreach (object obj in this.Columns)
			{
				DataGridViewColumn dataGridViewColumn = (DataGridViewColumn)obj;
				if (dataGridViewColumn.Frozen && dataGridViewColumn.Visible && dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
				{
					dataGridViewColumn.AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
				}
			}
			DataGridViewSelectionMode dataGridViewSelectionMode = this.SelectionMode;
			if (dataGridViewSelectionMode == DataGridViewSelectionMode.FullColumnSelect || dataGridViewSelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)
			{
				foreach (object obj2 in this.Columns)
				{
					DataGridViewColumn dataGridViewColumn2 = (DataGridViewColumn)obj2;
					if (dataGridViewColumn2.SortMode == DataGridViewColumnSortMode.Automatic)
					{
						this.SelectionMode = DataGridViewSelectionMode.RowHeaderSelect;
						throw new InvalidOperationException(SR.GetString("DataGridView_SelectionModeReset", new object[]
						{
							SR.GetString("DataGridView_SelectionModeAndSortModeClash", new object[] { dataGridViewSelectionMode.ToString() }),
							DataGridViewSelectionMode.RowHeaderSelect.ToString()
						}));
					}
				}
			}
		}

		/// <summary>Notifies the accessible client applications when a new cell becomes the current cell.</summary>
		/// <param name="cellAddress">A <see cref="T:System.Drawing.Point" /> indicating the row and column indexes of the new current cell.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Drawing.Point.X" /> property of <paramref name="cellAddress" /> is less than 0 or greater than the number of columns in the control minus 1.  
		///  -or-  
		///  The value of the <see cref="P:System.Drawing.Point.Y" /> property of <paramref name="cellAddress" /> is less than 0 or greater than the number of rows in the control minus 1.</exception>
		// Token: 0x06001A54 RID: 6740 RVA: 0x0005D6E0 File Offset: 0x0005B8E0
		protected virtual void AccessibilityNotifyCurrentCellChanged(Point cellAddress)
		{
			if (cellAddress.X < 0 || cellAddress.X >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("cellAddress");
			}
			if (cellAddress.Y < 0 || cellAddress.Y >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("cellAddress");
			}
			int rowCount = this.Rows.GetRowCount(DataGridViewElementStates.Visible, 0, cellAddress.Y);
			int num = this.Columns.ColumnIndexToActualDisplayIndex(cellAddress.X, DataGridViewElementStates.Visible);
			int num2 = (this.ColumnHeadersVisible ? 1 : 0);
			int num3 = (this.RowHeadersVisible ? 1 : 0);
			int num4 = rowCount + num2 + 1;
			int num5 = num + num3;
			if (base.ContainsFocus)
			{
				base.AccessibilityNotifyClients(AccessibleEvents.Focus, num4, num5);
				if (AccessibilityImprovements.Level3)
				{
					DataGridViewCell currentCell = this.CurrentCell;
					if (currentCell != null)
					{
						currentCell.AccessibilityObject.SetFocus();
					}
				}
			}
			base.AccessibilityNotifyClients(AccessibleEvents.Selection, num4, num5);
		}

		// Token: 0x06001A55 RID: 6741 RVA: 0x0005D7D3 File Offset: 0x0005B9D3
		internal void ActivateToolTip(bool activate, string toolTipText, int columnIndex, int rowIndex)
		{
			this.toolTipCaption = toolTipText;
			this.ptToolTipCell = new Point(columnIndex, rowIndex);
			this.toolTipControl.Activate(activate);
		}

		// Token: 0x06001A56 RID: 6742 RVA: 0x0005D7F8 File Offset: 0x0005B9F8
		internal void AddNewRow(bool createdByEditing)
		{
			this.Rows.AddInternal(true, null);
			this.newRowIndex = this.Rows.Count - 1;
			this.dataGridViewState1[2097152] = createdByEditing;
			if (createdByEditing)
			{
				DataGridViewRowEventArgs dataGridViewRowEventArgs = new DataGridViewRowEventArgs(this.Rows[this.newRowIndex]);
				this.OnUserAddedRow(dataGridViewRowEventArgs);
			}
		}

		/// <summary>Adjusts the <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> for a column header cell of a <see cref="T:System.Windows.Forms.DataGridView" /> that is currently being painted.</summary>
		/// <param name="dataGridViewAdvancedBorderStyleInput">A <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> that represents the column header border style to modify.</param>
		/// <param name="dataGridViewAdvancedBorderStylePlaceholder">A <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> that is used to store intermediate changes to the column header border style.</param>
		/// <param name="isFirstDisplayedColumn">
		///   <see langword="true" /> to indicate that the <see cref="T:System.Windows.Forms.DataGridViewCell" /> that is currently being painted is in the first column displayed on the <see cref="T:System.Windows.Forms.DataGridView" />; otherwise, <see langword="false" />.</param>
		/// <param name="isLastVisibleColumn">
		///   <see langword="true" /> to indicate that the <see cref="T:System.Windows.Forms.DataGridViewCell" /> that is currently being painted is in the last column in the <see cref="T:System.Windows.Forms.DataGridView" /> that has the <see cref="P:System.Windows.Forms.DataGridViewColumn.Visible" /> property set to <see langword="true" />; otherwise, <see langword="false" />.</param>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> that represents the border style for the current column header.</returns>
		// Token: 0x06001A57 RID: 6743 RVA: 0x0005D858 File Offset: 0x0005BA58
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public virtual DataGridViewAdvancedBorderStyle AdjustColumnHeaderBorderStyle(DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyleInput, DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStylePlaceholder, bool isFirstDisplayedColumn, bool isLastVisibleColumn)
		{
			if (this.ApplyVisualStylesToHeaderCells)
			{
				switch (dataGridViewAdvancedBorderStyleInput.All)
				{
				case DataGridViewAdvancedCellBorderStyle.Single:
				case DataGridViewAdvancedCellBorderStyle.Inset:
				case DataGridViewAdvancedCellBorderStyle.Outset:
					if (!isFirstDisplayedColumn || this.RowHeadersVisible)
					{
						dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.None;
						dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.None;
						dataGridViewAdvancedBorderStylePlaceholder.TopInternal = dataGridViewAdvancedBorderStyleInput.All;
						dataGridViewAdvancedBorderStylePlaceholder.BottomInternal = dataGridViewAdvancedBorderStyleInput.All;
						return dataGridViewAdvancedBorderStylePlaceholder;
					}
					if (this.RightToLeftInternal)
					{
						dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.None;
						dataGridViewAdvancedBorderStylePlaceholder.RightInternal = dataGridViewAdvancedBorderStyleInput.All;
					}
					else
					{
						dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = dataGridViewAdvancedBorderStyleInput.All;
						dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.None;
					}
					dataGridViewAdvancedBorderStylePlaceholder.TopInternal = dataGridViewAdvancedBorderStyleInput.All;
					dataGridViewAdvancedBorderStylePlaceholder.BottomInternal = dataGridViewAdvancedBorderStyleInput.All;
					return dataGridViewAdvancedBorderStylePlaceholder;
				case DataGridViewAdvancedCellBorderStyle.InsetDouble:
					if (this.RightToLeftInternal)
					{
						dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.None;
						if (isFirstDisplayedColumn)
						{
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = (this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.None : DataGridViewAdvancedCellBorderStyle.Inset);
						}
						else
						{
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.None;
						}
					}
					else
					{
						if (isFirstDisplayedColumn)
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = (this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.None : DataGridViewAdvancedCellBorderStyle.InsetDouble);
						}
						else
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.None;
						}
						dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.None;
					}
					dataGridViewAdvancedBorderStylePlaceholder.TopInternal = DataGridViewAdvancedCellBorderStyle.InsetDouble;
					dataGridViewAdvancedBorderStylePlaceholder.BottomInternal = DataGridViewAdvancedCellBorderStyle.Inset;
					return dataGridViewAdvancedBorderStylePlaceholder;
				case DataGridViewAdvancedCellBorderStyle.OutsetDouble:
				case DataGridViewAdvancedCellBorderStyle.OutsetPartial:
					if (this.RightToLeftInternal)
					{
						dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.None;
						if (isFirstDisplayedColumn)
						{
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = (this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.None : DataGridViewAdvancedCellBorderStyle.Outset);
						}
						else
						{
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.None;
						}
					}
					else
					{
						if (isFirstDisplayedColumn)
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = (this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.None : DataGridViewAdvancedCellBorderStyle.OutsetDouble);
						}
						else
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.None;
						}
						dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.None;
					}
					dataGridViewAdvancedBorderStylePlaceholder.TopInternal = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
					dataGridViewAdvancedBorderStylePlaceholder.BottomInternal = DataGridViewAdvancedCellBorderStyle.Outset;
					return dataGridViewAdvancedBorderStylePlaceholder;
				}
			}
			else
			{
				switch (dataGridViewAdvancedBorderStyleInput.All)
				{
				case DataGridViewAdvancedCellBorderStyle.Single:
					if (!isFirstDisplayedColumn || this.RowHeadersVisible)
					{
						if (this.RightToLeftInternal)
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.Single;
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.None;
						}
						else
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.None;
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.Single;
						}
						dataGridViewAdvancedBorderStylePlaceholder.TopInternal = DataGridViewAdvancedCellBorderStyle.Single;
						dataGridViewAdvancedBorderStylePlaceholder.BottomInternal = DataGridViewAdvancedCellBorderStyle.Single;
						return dataGridViewAdvancedBorderStylePlaceholder;
					}
					break;
				case DataGridViewAdvancedCellBorderStyle.InsetDouble:
					if (this.RightToLeftInternal)
					{
						dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.Inset;
						if (isFirstDisplayedColumn)
						{
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = (this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.Inset : DataGridViewAdvancedCellBorderStyle.InsetDouble);
						}
						else
						{
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.Inset;
						}
					}
					else
					{
						if (isFirstDisplayedColumn)
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = (this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.Inset : DataGridViewAdvancedCellBorderStyle.InsetDouble);
						}
						else
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.Inset;
						}
						dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.Inset;
					}
					dataGridViewAdvancedBorderStylePlaceholder.TopInternal = DataGridViewAdvancedCellBorderStyle.InsetDouble;
					dataGridViewAdvancedBorderStylePlaceholder.BottomInternal = DataGridViewAdvancedCellBorderStyle.Inset;
					return dataGridViewAdvancedBorderStylePlaceholder;
				case DataGridViewAdvancedCellBorderStyle.OutsetDouble:
					if (this.RightToLeftInternal)
					{
						dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.Outset;
						if (isFirstDisplayedColumn)
						{
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = (this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.Outset : DataGridViewAdvancedCellBorderStyle.OutsetDouble);
						}
						else
						{
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.Outset;
						}
					}
					else
					{
						if (isFirstDisplayedColumn)
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = (this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.Outset : DataGridViewAdvancedCellBorderStyle.OutsetDouble);
						}
						else
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.Outset;
						}
						dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.Outset;
					}
					dataGridViewAdvancedBorderStylePlaceholder.TopInternal = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
					dataGridViewAdvancedBorderStylePlaceholder.BottomInternal = DataGridViewAdvancedCellBorderStyle.Outset;
					return dataGridViewAdvancedBorderStylePlaceholder;
				case DataGridViewAdvancedCellBorderStyle.OutsetPartial:
					if (this.RightToLeftInternal)
					{
						dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = (isLastVisibleColumn ? DataGridViewAdvancedCellBorderStyle.Outset : DataGridViewAdvancedCellBorderStyle.OutsetPartial);
						if (isFirstDisplayedColumn)
						{
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = (this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.Outset : DataGridViewAdvancedCellBorderStyle.OutsetDouble);
						}
						else
						{
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.OutsetPartial;
						}
					}
					else
					{
						if (isFirstDisplayedColumn)
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = (this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.Outset : DataGridViewAdvancedCellBorderStyle.OutsetDouble);
						}
						else
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.OutsetPartial;
						}
						dataGridViewAdvancedBorderStylePlaceholder.RightInternal = (isLastVisibleColumn ? DataGridViewAdvancedCellBorderStyle.Outset : DataGridViewAdvancedCellBorderStyle.OutsetPartial);
					}
					dataGridViewAdvancedBorderStylePlaceholder.TopInternal = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
					dataGridViewAdvancedBorderStylePlaceholder.BottomInternal = DataGridViewAdvancedCellBorderStyle.Outset;
					return dataGridViewAdvancedBorderStylePlaceholder;
				}
			}
			return dataGridViewAdvancedBorderStyleInput;
		}

		// Token: 0x06001A58 RID: 6744 RVA: 0x0005DB8C File Offset: 0x0005BD8C
		private bool AdjustExpandingColumn(DataGridViewColumn dataGridViewColumn, int rowIndex)
		{
			if (!base.IsHandleCreated)
			{
				this.dataGridViewState2[1048576] = true;
				return false;
			}
			bool flag = false;
			try
			{
				this.noAutoSizeCount++;
				DataGridViewRow dataGridViewRow = this.Rows.SharedRow(rowIndex);
				int num = dataGridViewRow.Cells[dataGridViewColumn.Index].GetPreferredWidth(rowIndex, dataGridViewRow.GetHeight(rowIndex));
				if (num > 65536)
				{
					num = 65536;
				}
				if (dataGridViewColumn.Width < num)
				{
					dataGridViewColumn.ThicknessInternal = num;
					flag = true;
				}
			}
			finally
			{
				this.noAutoSizeCount--;
			}
			return flag;
		}

		// Token: 0x06001A59 RID: 6745 RVA: 0x0005DC34 File Offset: 0x0005BE34
		private bool AdjustExpandingColumns(DataGridViewAutoSizeColumnCriteriaInternal autoSizeColumnCriteriaFilter, int rowIndex)
		{
			bool flag = false;
			for (DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible); dataGridViewColumn != null; dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
			{
				DataGridViewAutoSizeColumnCriteriaInternal inheritedAutoSizeMode = (DataGridViewAutoSizeColumnCriteriaInternal)dataGridViewColumn.InheritedAutoSizeMode;
				DataGridViewAutoSizeColumnCriteriaInternal dataGridViewAutoSizeColumnCriteriaInternal = inheritedAutoSizeMode & autoSizeColumnCriteriaFilter;
				if (dataGridViewAutoSizeColumnCriteriaInternal != DataGridViewAutoSizeColumnCriteriaInternal.NotSet)
				{
					flag |= this.AdjustExpandingColumn(dataGridViewColumn, rowIndex);
				}
			}
			return flag;
		}

		// Token: 0x06001A5A RID: 6746 RVA: 0x0005DC80 File Offset: 0x0005BE80
		private int AdjustExpandingRow(int rowIndex, int columnIndex, bool fixedWidth)
		{
			int num = 0;
			DataGridViewCell dataGridViewCell;
			if (columnIndex > -1 && (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) != DataGridViewAutoSizeRowsMode.None)
			{
				dataGridViewCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
				if (fixedWidth)
				{
					num = this.Columns[columnIndex].Thickness;
				}
			}
			else
			{
				dataGridViewCell = this.Rows.SharedRow(rowIndex).HeaderCell;
				if (fixedWidth)
				{
					num = this.RowHeadersWidth;
				}
			}
			int num2;
			if (fixedWidth)
			{
				num2 = dataGridViewCell.GetPreferredHeight(rowIndex, num);
			}
			else
			{
				num2 = dataGridViewCell.GetPreferredSize(rowIndex).Height;
			}
			int num3;
			int num4;
			this.Rows.SharedRow(rowIndex).GetHeightInfo(rowIndex, out num3, out num4);
			if (num2 < num3)
			{
				num2 = num3;
			}
			if (num2 > 65536)
			{
				num2 = 65536;
			}
			if (num3 != num2)
			{
				this.Rows[rowIndex].Thickness = num2;
			}
			return num2;
		}

		// Token: 0x06001A5B RID: 6747 RVA: 0x0005DD48 File Offset: 0x0005BF48
		private void AdjustExpandingRows(int columnIndex, bool fixedWidth)
		{
			if ((this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) != DataGridViewAutoSizeRowsMode.None || ((this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)1) != DataGridViewAutoSizeRowsMode.None && this.RowHeadersVisible))
			{
				if (!base.IsHandleCreated)
				{
					this.dataGridViewState2[1048576] = true;
					return;
				}
				this.inBulkPaintCount++;
				try
				{
					if ((this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)4) != DataGridViewAutoSizeRowsMode.None)
					{
						this.inBulkLayoutCount++;
						try
						{
							for (int num = this.Rows.GetFirstRow(DataGridViewElementStates.Visible); num != -1; num = this.Rows.GetNextRow(num, DataGridViewElementStates.Visible))
							{
								int num2 = 0;
								DataGridViewCell dataGridViewCell;
								if (columnIndex > -1 && (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) != DataGridViewAutoSizeRowsMode.None)
								{
									dataGridViewCell = this.Rows.SharedRow(num).Cells[columnIndex];
									if (fixedWidth)
									{
										num2 = this.Columns[columnIndex].Thickness;
									}
								}
								else
								{
									dataGridViewCell = this.Rows.SharedRow(num).HeaderCell;
									if (fixedWidth)
									{
										num2 = this.RowHeadersWidth;
									}
								}
								int num3;
								if (fixedWidth)
								{
									num3 = dataGridViewCell.GetPreferredHeight(num, num2);
								}
								else
								{
									num3 = dataGridViewCell.GetPreferredSize(num).Height;
								}
								if (this.Rows.SharedRow(num).Height < num3)
								{
									this.Rows[num].Height = num3;
								}
							}
							return;
						}
						finally
						{
							this.ExitBulkLayout(false);
						}
					}
					int height = this.layout.Data.Height;
					int num4 = 0;
					int num5 = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					while (num5 != -1 && num4 < height)
					{
						num4 += this.AdjustExpandingRow(num5, columnIndex, fixedWidth);
						num5 = this.Rows.GetNextRow(num5, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					}
					if (num4 < height)
					{
						num5 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
						while (num5 != -1 && num4 < height)
						{
							num4 += this.AdjustExpandingRow(num5, columnIndex, fixedWidth);
							num5 = this.Rows.GetNextRow(num5, DataGridViewElementStates.Visible);
						}
					}
				}
				finally
				{
					this.ExitBulkPaint(-1, -1);
				}
			}
		}

		// Token: 0x06001A5C RID: 6748 RVA: 0x0005DF60 File Offset: 0x0005C160
		internal void AdjustFillingColumn(DataGridViewColumn dataGridViewColumn, int width)
		{
			if (this.InAdjustFillingColumns)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotAlterAutoFillColumnParameter"));
			}
			this.dataGridViewOper[524288] = true;
			try
			{
				if (this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible) <= this.layout.Data.Width)
				{
					int num = this.layout.Data.Width;
					if (base.DesignMode || dataGridViewColumn == this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen) || dataGridViewColumn == this.Columns.GetLastColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen))
					{
						float num2 = 0f;
						int num3 = 0;
						int num4 = 0;
						bool flag = false;
						foreach (object obj in this.Columns)
						{
							DataGridViewColumn dataGridViewColumn2 = (DataGridViewColumn)obj;
							if (dataGridViewColumn2.Visible)
							{
								if (dataGridViewColumn2.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
								{
									num3 += dataGridViewColumn2.Width;
									if (dataGridViewColumn2.Index != dataGridViewColumn.Index)
									{
										num4 += dataGridViewColumn2.MinimumWidth;
										flag = true;
									}
									num2 += dataGridViewColumn2.FillWeight;
								}
								else
								{
									num4 += dataGridViewColumn2.Width;
									num -= dataGridViewColumn2.Width;
								}
							}
						}
						if (!flag)
						{
							return;
						}
						int num5 = this.layout.Data.Width - num4;
						if (width > num5)
						{
							width = num5;
						}
						float fillWeight = dataGridViewColumn.FillWeight;
						float num6 = (float)width * num2 / (float)num3;
						bool flag2 = false;
						foreach (object obj2 in this.Columns)
						{
							DataGridViewColumn dataGridViewColumn3 = (DataGridViewColumn)obj2;
							if (dataGridViewColumn3.Index != dataGridViewColumn.Index && dataGridViewColumn3.Visible && dataGridViewColumn3.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
							{
								dataGridViewColumn3.FillWeightInternal = (num2 - num6) * dataGridViewColumn3.FillWeight / (num2 - fillWeight);
								if (dataGridViewColumn3.FillWeight < (float)dataGridViewColumn3.MinimumWidth * num2 / (float)num3)
								{
									flag2 = true;
									dataGridViewColumn3.DesiredFillWidth = -1;
								}
								else
								{
									dataGridViewColumn3.DesiredFillWidth = 0;
								}
							}
						}
						dataGridViewColumn.FillWeightInternal = num6;
						if (flag2)
						{
							float num7 = num2;
							float num8 = num2;
							float num9 = 0f;
							foreach (object obj3 in this.Columns)
							{
								DataGridViewColumn dataGridViewColumn4 = (DataGridViewColumn)obj3;
								if (dataGridViewColumn4.Visible && dataGridViewColumn4.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
								{
									if (dataGridViewColumn4.Index == dataGridViewColumn.Index)
									{
										dataGridViewColumn4.UsedFillWeight = dataGridViewColumn4.FillWeight;
										num7 -= dataGridViewColumn4.UsedFillWeight;
										num8 -= dataGridViewColumn4.FillWeight;
										num9 += dataGridViewColumn4.UsedFillWeight;
									}
									else if (dataGridViewColumn4.DesiredFillWidth == -1)
									{
										dataGridViewColumn4.UsedFillWeight = num2 * (float)dataGridViewColumn4.MinimumWidth / (float)num3;
										num7 -= dataGridViewColumn4.UsedFillWeight;
										num8 -= dataGridViewColumn4.FillWeight;
										num9 += dataGridViewColumn4.UsedFillWeight;
									}
								}
							}
							foreach (object obj4 in this.Columns)
							{
								DataGridViewColumn dataGridViewColumn5 = (DataGridViewColumn)obj4;
								if (dataGridViewColumn5.Index != dataGridViewColumn.Index && dataGridViewColumn5.Visible && dataGridViewColumn5.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill && dataGridViewColumn5.DesiredFillWidth != -1)
								{
									dataGridViewColumn5.UsedFillWeight = Math.Max(dataGridViewColumn5.FillWeight * num7 / num8, num2 * (float)dataGridViewColumn5.MinimumWidth / (float)num3);
									num9 += dataGridViewColumn5.UsedFillWeight;
								}
							}
							dataGridViewColumn.UsedFillWeight += num2 - num9;
							goto IL_8B3;
						}
						using (IEnumerator enumerator5 = this.Columns.GetEnumerator())
						{
							while (enumerator5.MoveNext())
							{
								object obj5 = enumerator5.Current;
								DataGridViewColumn dataGridViewColumn6 = (DataGridViewColumn)obj5;
								if (dataGridViewColumn6.Visible && dataGridViewColumn6.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
								{
									dataGridViewColumn6.UsedFillWeight = dataGridViewColumn6.FillWeight;
								}
							}
							goto IL_8B3;
						}
					}
					int num10 = 0;
					float num11 = 0f;
					float num12 = 0f;
					bool flag3 = false;
					foreach (object obj6 in this.Columns)
					{
						DataGridViewColumn dataGridViewColumn7 = (DataGridViewColumn)obj6;
						if (dataGridViewColumn7.Visible)
						{
							if (dataGridViewColumn7.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
							{
								if (dataGridViewColumn7.Index != dataGridViewColumn.Index)
								{
									if (this.Columns.DisplayInOrder(dataGridViewColumn.Index, dataGridViewColumn7.Index))
									{
										num10 += dataGridViewColumn7.MinimumWidth;
										num12 += dataGridViewColumn7.FillWeight;
									}
									else
									{
										num10 += dataGridViewColumn7.Width;
									}
									flag3 = true;
								}
								num11 += dataGridViewColumn7.FillWeight;
							}
							else
							{
								num10 += dataGridViewColumn7.Width;
								num -= dataGridViewColumn7.Width;
							}
						}
					}
					if (!flag3)
					{
						return;
					}
					int num13 = this.layout.Data.Width - num10;
					if (width > num13)
					{
						width = num13;
					}
					float fillWeight2 = dataGridViewColumn.FillWeight;
					float num14 = num11 * (float)width / (float)num;
					float num15 = num12 + fillWeight2 - num14;
					foreach (object obj7 in this.Columns)
					{
						DataGridViewColumn dataGridViewColumn8 = (DataGridViewColumn)obj7;
						if (dataGridViewColumn8.Index != dataGridViewColumn.Index && dataGridViewColumn8.Visible && dataGridViewColumn8.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill && this.Columns.DisplayInOrder(dataGridViewColumn.Index, dataGridViewColumn8.Index))
						{
							dataGridViewColumn8.FillWeightInternal = dataGridViewColumn8.FillWeight * num15 / num12;
						}
					}
					dataGridViewColumn.FillWeightInternal = num14;
					bool flag4 = false;
					foreach (object obj8 in this.Columns)
					{
						DataGridViewColumn dataGridViewColumn9 = (DataGridViewColumn)obj8;
						if (dataGridViewColumn9.Visible && dataGridViewColumn9.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
						{
							if (dataGridViewColumn9.FillWeight < (float)dataGridViewColumn9.MinimumWidth * num11 / (float)num)
							{
								flag4 = true;
								dataGridViewColumn9.DesiredFillWidth = -1;
							}
							else
							{
								dataGridViewColumn9.DesiredFillWidth = 0;
							}
						}
					}
					if (flag4)
					{
						float num16 = num11;
						float num17 = num11;
						float num18 = 0f;
						foreach (object obj9 in this.Columns)
						{
							DataGridViewColumn dataGridViewColumn10 = (DataGridViewColumn)obj9;
							if (dataGridViewColumn10.Visible && dataGridViewColumn10.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
							{
								if (dataGridViewColumn10.Index == dataGridViewColumn.Index || this.Columns.DisplayInOrder(dataGridViewColumn10.Index, dataGridViewColumn.Index))
								{
									if (dataGridViewColumn10.Index == dataGridViewColumn.Index)
									{
										dataGridViewColumn10.UsedFillWeight = dataGridViewColumn10.FillWeight;
									}
									else
									{
										dataGridViewColumn10.UsedFillWeight = num11 * (float)dataGridViewColumn10.Width / (float)num;
									}
									num16 -= dataGridViewColumn10.UsedFillWeight;
									num17 -= dataGridViewColumn10.FillWeight;
									num18 += dataGridViewColumn10.UsedFillWeight;
								}
								else if (dataGridViewColumn10.DesiredFillWidth == -1)
								{
									dataGridViewColumn10.UsedFillWeight = num11 * (float)dataGridViewColumn10.MinimumWidth / (float)num;
									num16 -= dataGridViewColumn10.UsedFillWeight;
									num17 -= dataGridViewColumn10.FillWeight;
									num18 += dataGridViewColumn10.UsedFillWeight;
								}
							}
						}
						foreach (object obj10 in this.Columns)
						{
							DataGridViewColumn dataGridViewColumn11 = (DataGridViewColumn)obj10;
							if (this.Columns.DisplayInOrder(dataGridViewColumn.Index, dataGridViewColumn11.Index) && dataGridViewColumn11.Visible && dataGridViewColumn11.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill && dataGridViewColumn11.DesiredFillWidth != -1)
							{
								dataGridViewColumn11.UsedFillWeight = Math.Max(dataGridViewColumn11.FillWeight * num16 / num17, num11 * (float)dataGridViewColumn11.MinimumWidth / (float)num);
								num18 += dataGridViewColumn11.UsedFillWeight;
							}
						}
						dataGridViewColumn.UsedFillWeight += num11 - num18;
					}
					else
					{
						foreach (object obj11 in this.Columns)
						{
							DataGridViewColumn dataGridViewColumn12 = (DataGridViewColumn)obj11;
							if (dataGridViewColumn12.Visible && dataGridViewColumn12.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
							{
								dataGridViewColumn12.UsedFillWeight = dataGridViewColumn12.FillWeight;
							}
						}
					}
					IL_8B3:
					this.dataGridViewState2[67108864] = false;
					this.availableWidthForFillColumns = num;
					this.PerformLayoutPrivate(false, true, false, false);
				}
			}
			finally
			{
				this.dataGridViewOper[524288] = false;
			}
		}

		// Token: 0x06001A5D RID: 6749 RVA: 0x0005E97C File Offset: 0x0005CB7C
		private bool AdjustFillingColumns()
		{
			if (this.dataGridViewOper[262144])
			{
				return false;
			}
			this.dataGridViewOper[262144] = true;
			bool flag = false;
			try
			{
				int num = 0;
				int num2 = 0;
				int num3 = 0;
				float num4 = 0f;
				ArrayList arrayList = null;
				foreach (object obj in this.Columns)
				{
					DataGridViewColumn dataGridViewColumn = (DataGridViewColumn)obj;
					if (dataGridViewColumn.Visible)
					{
						if (dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
						{
							num++;
							num3 += ((dataGridViewColumn.DesiredMinimumWidth > 0) ? dataGridViewColumn.DesiredMinimumWidth : dataGridViewColumn.MinimumWidth);
							num4 += dataGridViewColumn.FillWeight;
							if (arrayList == null)
							{
								arrayList = new ArrayList(this.Columns.Count);
							}
							arrayList.Add(dataGridViewColumn);
						}
						else
						{
							num2 += dataGridViewColumn.Width;
						}
					}
				}
				if (num > 0)
				{
					int num5 = this.layout.Data.Width - num2;
					if (this.scrollBars == ScrollBars.Both || this.scrollBars == ScrollBars.Vertical)
					{
						int rowCount = this.Rows.GetRowCount(DataGridViewElementStates.Visible);
						int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Visible);
						int rowsHeight2 = this.Rows.GetRowsHeight(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
						this.ComputeVisibleRows();
						if (this.displayedBandsInfo.NumTotallyDisplayedFrozenRows == this.Rows.GetRowCount(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible) && this.displayedBandsInfo.NumTotallyDisplayedScrollingRows != rowCount - this.Rows.GetRowCount(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible) && rowsHeight - rowsHeight2 != this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight2) && this.layout.Data.Height > rowsHeight2 && SystemInformation.VerticalScrollBarWidth <= this.layout.Data.Width)
						{
							num5 -= SystemInformation.VerticalScrollBarWidth;
						}
					}
					if (num5 <= num3)
					{
						num5 = 0;
						for (int i = 0; i < arrayList.Count; i++)
						{
							DataGridViewColumn dataGridViewColumn2 = (DataGridViewColumn)arrayList[i];
							int num6 = ((dataGridViewColumn2.DesiredMinimumWidth > 0) ? dataGridViewColumn2.DesiredMinimumWidth : dataGridViewColumn2.MinimumWidth);
							if (dataGridViewColumn2.Thickness != num6)
							{
								flag = true;
								dataGridViewColumn2.ThicknessInternal = num6;
							}
							num5 += dataGridViewColumn2.Thickness;
						}
						for (int i = 0; i < arrayList.Count; i++)
						{
							DataGridViewColumn dataGridViewColumn3 = (DataGridViewColumn)arrayList[i];
							dataGridViewColumn3.UsedFillWeight = (float)dataGridViewColumn3.Width * num4 / (float)num5;
						}
						this.dataGridViewState2[67108864] = false;
						this.availableWidthForFillColumns = num5;
						return flag;
					}
					int num7 = 0;
					if (this.dataGridViewState2[67108864])
					{
						bool flag2 = false;
						for (int i = 0; i < arrayList.Count; i++)
						{
							DataGridViewColumn dataGridViewColumn4 = (DataGridViewColumn)arrayList[i];
							if (i == arrayList.Count - 1)
							{
								dataGridViewColumn4.DesiredFillWidth = num5 - num7;
							}
							else
							{
								float num8 = dataGridViewColumn4.FillWeight / num4 * (float)num5;
								dataGridViewColumn4.DesiredFillWidth = (int)Math.Round((double)num8, MidpointRounding.AwayFromZero);
								num7 += dataGridViewColumn4.DesiredFillWidth;
							}
							int num9 = ((dataGridViewColumn4.DesiredMinimumWidth > 0) ? dataGridViewColumn4.DesiredMinimumWidth : dataGridViewColumn4.MinimumWidth);
							if (dataGridViewColumn4.DesiredFillWidth < num9)
							{
								flag2 = true;
								dataGridViewColumn4.DesiredFillWidth = -1;
							}
						}
						if (flag2)
						{
							float num10 = num4;
							float num11 = num4;
							for (int i = 0; i < arrayList.Count; i++)
							{
								DataGridViewColumn dataGridViewColumn5 = (DataGridViewColumn)arrayList[i];
								if (dataGridViewColumn5.DesiredFillWidth == -1)
								{
									int num12 = ((dataGridViewColumn5.DesiredMinimumWidth > 0) ? dataGridViewColumn5.DesiredMinimumWidth : dataGridViewColumn5.MinimumWidth);
									dataGridViewColumn5.UsedFillWeight = num4 * (float)num12 / (float)num5;
									num10 -= dataGridViewColumn5.UsedFillWeight;
									num11 -= dataGridViewColumn5.FillWeight;
								}
							}
							for (int i = 0; i < arrayList.Count; i++)
							{
								DataGridViewColumn dataGridViewColumn6 = (DataGridViewColumn)arrayList[i];
								if (dataGridViewColumn6.DesiredFillWidth != -1)
								{
									dataGridViewColumn6.UsedFillWeight = dataGridViewColumn6.FillWeight * num10 / num11;
								}
							}
						}
						else
						{
							for (int i = 0; i < arrayList.Count; i++)
							{
								DataGridViewColumn dataGridViewColumn7 = (DataGridViewColumn)arrayList[i];
								dataGridViewColumn7.UsedFillWeight = dataGridViewColumn7.FillWeight;
							}
						}
						this.dataGridViewState2[67108864] = false;
						this.availableWidthForFillColumns = num5;
					}
					else if (num5 != this.availableWidthForFillColumns)
					{
						if (num5 > this.availableWidthForFillColumns)
						{
							int num13 = num5 - this.availableWidthForFillColumns;
							for (int i = 0; i < arrayList.Count; i++)
							{
								DataGridViewColumn dataGridViewColumn8 = (DataGridViewColumn)arrayList[i];
								dataGridViewColumn8.DesiredFillWidth = dataGridViewColumn8.Width;
							}
							float[] array = new float[arrayList.Count];
							for (int j = 0; j < num13; j++)
							{
								float num14 = 0f;
								bool flag3 = false;
								for (int i = 0; i < arrayList.Count; i++)
								{
									DataGridViewColumn dataGridViewColumn9 = (DataGridViewColumn)arrayList[i];
									num14 += dataGridViewColumn9.FillWeight / dataGridViewColumn9.UsedFillWeight;
									if (dataGridViewColumn9.DesiredFillWidth <= dataGridViewColumn9.MinimumWidth)
									{
										flag3 = true;
									}
								}
								for (int i = 0; i < arrayList.Count; i++)
								{
									DataGridViewColumn dataGridViewColumn10 = (DataGridViewColumn)arrayList[i];
									if (j == 0)
									{
										array[i] = (float)this.availableWidthForFillColumns * dataGridViewColumn10.UsedFillWeight / num4;
									}
									if (flag3)
									{
										array[i] += dataGridViewColumn10.FillWeight / dataGridViewColumn10.UsedFillWeight / num14;
									}
									else
									{
										array[i] += dataGridViewColumn10.FillWeight / num4;
									}
								}
							}
							for (int i = 0; i < arrayList.Count; i++)
							{
								DataGridViewColumn dataGridViewColumn11 = (DataGridViewColumn)arrayList[i];
								dataGridViewColumn11.UsedFillWeight = num4 / (float)num5 * array[i];
							}
						}
						else
						{
							int num15 = this.availableWidthForFillColumns - num5;
							int num16 = 0;
							for (int i = 0; i < arrayList.Count; i++)
							{
								DataGridViewColumn dataGridViewColumn12 = (DataGridViewColumn)arrayList[i];
								dataGridViewColumn12.DesiredFillWidth = dataGridViewColumn12.Width;
							}
							do
							{
								int num17 = this.availableWidthForFillColumns - num16;
								int num18 = Math.Min(num17 - num5, Math.Max(1, (int)((float)num17 * 0.1f)));
								num16 += num18;
								bool flag4;
								do
								{
									flag4 = false;
									float num19 = 0f;
									float num20 = 0f;
									DataGridViewColumn dataGridViewColumn13 = null;
									for (int i = 0; i < arrayList.Count; i++)
									{
										DataGridViewColumn dataGridViewColumn14 = (DataGridViewColumn)arrayList[i];
										if (dataGridViewColumn14.DesiredFillWidth > dataGridViewColumn14.MinimumWidth)
										{
											float num21 = dataGridViewColumn14.UsedFillWeight / dataGridViewColumn14.FillWeight;
											num20 += num21;
											if (num21 > num19)
											{
												dataGridViewColumn13 = dataGridViewColumn14;
												num19 = num21;
											}
										}
									}
									if (dataGridViewColumn13 != null)
									{
										float num22 = (float)num17 * dataGridViewColumn13.UsedFillWeight / num4 - (float)num18 * dataGridViewColumn13.UsedFillWeight / dataGridViewColumn13.FillWeight / num20;
										if (num22 < (float)dataGridViewColumn13.MinimumWidth)
										{
											num22 = (float)dataGridViewColumn13.MinimumWidth;
										}
										int desiredFillWidth = dataGridViewColumn13.DesiredFillWidth;
										dataGridViewColumn13.DesiredFillWidth = Math.Min(desiredFillWidth, (int)Math.Round((double)num22, MidpointRounding.AwayFromZero));
										flag4 = desiredFillWidth != dataGridViewColumn13.DesiredFillWidth;
										if (!flag4 && num18 == 1 && desiredFillWidth > dataGridViewColumn13.MinimumWidth)
										{
											DataGridViewColumn dataGridViewColumn15 = dataGridViewColumn13;
											int desiredFillWidth2 = dataGridViewColumn15.DesiredFillWidth;
											dataGridViewColumn15.DesiredFillWidth = desiredFillWidth2 - 1;
											flag4 = true;
										}
										num18 -= desiredFillWidth - dataGridViewColumn13.DesiredFillWidth;
										if (flag4)
										{
											num17 -= desiredFillWidth - dataGridViewColumn13.DesiredFillWidth;
											for (int i = 0; i < arrayList.Count; i++)
											{
												DataGridViewColumn dataGridViewColumn16 = (DataGridViewColumn)arrayList[i];
												dataGridViewColumn16.UsedFillWeight = num4 / (float)num17 * (float)dataGridViewColumn16.DesiredFillWidth;
											}
										}
									}
								}
								while (flag4 && num18 > 0);
							}
							while (num16 < num15);
						}
						this.availableWidthForFillColumns = num5;
					}
					try
					{
						this.dataGridViewState2[33554432] = false;
						num7 = 0;
						float num23 = 0f;
						while (arrayList.Count > 0)
						{
							DataGridViewColumn dataGridViewColumn17 = null;
							if (arrayList.Count == 1)
							{
								dataGridViewColumn17 = (DataGridViewColumn)arrayList[0];
								dataGridViewColumn17.DesiredFillWidth = Math.Max(num5 - num7, dataGridViewColumn17.MinimumWidth);
								arrayList.Clear();
							}
							else
							{
								float num24 = 0f;
								for (int i = 0; i < arrayList.Count; i++)
								{
									DataGridViewColumn dataGridViewColumn18 = (DataGridViewColumn)arrayList[i];
									float num25 = Math.Abs(dataGridViewColumn18.UsedFillWeight - dataGridViewColumn18.FillWeight) / dataGridViewColumn18.FillWeight;
									if (num25 > num24 || dataGridViewColumn17 == null)
									{
										dataGridViewColumn17 = dataGridViewColumn18;
										num24 = num25;
									}
								}
								float num26 = dataGridViewColumn17.UsedFillWeight * (float)num5 / num4 + num23;
								dataGridViewColumn17.DesiredFillWidth = Math.Max(dataGridViewColumn17.MinimumWidth, (int)Math.Round((double)num26, MidpointRounding.AwayFromZero));
								num23 = num26 - (float)dataGridViewColumn17.DesiredFillWidth;
								num7 += dataGridViewColumn17.DesiredFillWidth;
								arrayList.Remove(dataGridViewColumn17);
							}
							if (dataGridViewColumn17.DesiredFillWidth != dataGridViewColumn17.Thickness)
							{
								flag = true;
								dataGridViewColumn17.ThicknessInternal = dataGridViewColumn17.DesiredFillWidth;
							}
						}
					}
					finally
					{
						this.dataGridViewState2[33554432] = true;
					}
				}
			}
			finally
			{
				this.dataGridViewOper[262144] = false;
			}
			return flag;
		}

		// Token: 0x06001A5E RID: 6750 RVA: 0x0005F334 File Offset: 0x0005D534
		private void AdjustShrinkingRows(DataGridViewAutoSizeRowsMode autoSizeRowsMode, bool fixedWidth, bool internalAutosizing)
		{
			if ((autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) != DataGridViewAutoSizeRowsMode.None || ((autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)1) != DataGridViewAutoSizeRowsMode.None && this.RowHeadersVisible))
			{
				this.inBulkPaintCount++;
				try
				{
					if ((autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)4) != DataGridViewAutoSizeRowsMode.None)
					{
						this.inBulkLayoutCount++;
						try
						{
							for (int num = this.Rows.GetFirstRow(DataGridViewElementStates.Visible); num != -1; num = this.Rows.GetNextRow(num, DataGridViewElementStates.Visible))
							{
								this.AutoResizeRowInternal(num, DataGridView.MapAutoSizeRowsModeToRowMode(autoSizeRowsMode), fixedWidth, internalAutosizing);
							}
							return;
						}
						finally
						{
							this.ExitBulkLayout(false);
						}
					}
					int height = this.layout.Data.Height;
					int num2 = 0;
					int num3 = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					while (num3 != -1 && num2 < height)
					{
						this.AutoResizeRowInternal(num3, DataGridView.MapAutoSizeRowsModeToRowMode(autoSizeRowsMode), fixedWidth, internalAutosizing);
						num2 += this.Rows.SharedRow(num3).GetHeight(num3);
						num3 = this.Rows.GetNextRow(num3, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					}
					if (num2 < height)
					{
						int num4 = num2;
						int num5 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
						num3 = num5;
						while (num3 != -1 && num2 < height && num5 == this.displayedBandsInfo.FirstDisplayedScrollingRow)
						{
							this.AutoResizeRowInternal(num3, DataGridView.MapAutoSizeRowsModeToRowMode(autoSizeRowsMode), fixedWidth, internalAutosizing);
							num2 += this.Rows.SharedRow(num3).GetHeight(num3);
							num3 = this.Rows.GetNextRow(num3, DataGridViewElementStates.Visible);
						}
						do
						{
							num5 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
							if (num2 < height)
							{
								int previousRow = this.Rows.GetPreviousRow(this.displayedBandsInfo.FirstDisplayedScrollingRow, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
								if (previousRow != -1)
								{
									this.AutoResizeRowInternal(previousRow, DataGridView.MapAutoSizeRowsModeToRowMode(autoSizeRowsMode), fixedWidth, internalAutosizing);
								}
							}
							num2 = num4;
							num3 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
							while (num3 != -1 && num2 < height)
							{
								this.AutoResizeRowInternal(num3, DataGridView.MapAutoSizeRowsModeToRowMode(autoSizeRowsMode), fixedWidth, internalAutosizing);
								num2 += this.Rows.SharedRow(num3).GetHeight(num3);
								num3 = this.Rows.GetNextRow(num3, DataGridViewElementStates.Visible);
							}
						}
						while (num5 != this.displayedBandsInfo.FirstDisplayedScrollingRow);
					}
				}
				finally
				{
					this.ExitBulkPaint(-1, -1);
				}
			}
		}

		/// <summary>Returns a value indicating whether all the <see cref="T:System.Windows.Forms.DataGridView" /> cells are currently selected.</summary>
		/// <param name="includeInvisibleCells">
		///   <see langword="true" /> to include the rows and columns with <see cref="P:System.Windows.Forms.DataGridViewBand.Visible" /> property values of <see langword="false" />; otherwise, <see langword="false" />.</param>
		/// <returns>
		///   <see langword="true" /> if all cells (or all visible cells) are selected or if there are no cells (or no visible cells); otherwise, <see langword="false" />.</returns>
		// Token: 0x06001A5F RID: 6751 RVA: 0x0005F55C File Offset: 0x0005D75C
		public bool AreAllCellsSelected(bool includeInvisibleCells)
		{
			if (this.Columns.Count == 0 && this.Rows.Count == 0)
			{
				return true;
			}
			if (!includeInvisibleCells && (this.Rows.GetFirstRow(DataGridViewElementStates.Visible) == -1 || this.Columns.GetFirstColumn(DataGridViewElementStates.Visible) == null))
			{
				return true;
			}
			switch (this.SelectionMode)
			{
			case DataGridViewSelectionMode.CellSelect:
			{
				bool flag = this.individualSelectedCells.Count == this.Columns.Count * this.Rows.Count;
				if (flag || includeInvisibleCells)
				{
					return flag;
				}
				for (int num = this.Rows.GetFirstRow(DataGridViewElementStates.Visible); num != -1; num = this.Rows.GetNextRow(num, DataGridViewElementStates.Visible))
				{
					DataGridViewRow dataGridViewRow = this.Rows[num];
					for (DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible); dataGridViewColumn != null; dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
					{
						if (!dataGridViewRow.Cells[dataGridViewColumn.Index].Selected)
						{
							return false;
						}
					}
				}
				return true;
			}
			case DataGridViewSelectionMode.FullRowSelect:
			case DataGridViewSelectionMode.RowHeaderSelect:
			{
				bool flag = this.selectedBandIndexes.Count * this.Columns.Count + this.individualSelectedCells.Count == this.Columns.Count * this.Rows.Count;
				if (flag || includeInvisibleCells)
				{
					return flag;
				}
				for (int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible); num2 != -1; num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible))
				{
					if ((this.Rows.GetRowState(num2) & DataGridViewElementStates.Selected) == DataGridViewElementStates.None)
					{
						DataGridViewRow dataGridViewRow = this.Rows[num2];
						for (DataGridViewColumn dataGridViewColumn2 = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible); dataGridViewColumn2 != null; dataGridViewColumn2 = this.Columns.GetNextColumn(dataGridViewColumn2, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
						{
							if (!dataGridViewRow.Cells[dataGridViewColumn2.Index].Selected)
							{
								return false;
							}
						}
					}
				}
				return true;
			}
			case DataGridViewSelectionMode.FullColumnSelect:
			case DataGridViewSelectionMode.ColumnHeaderSelect:
			{
				bool flag = this.selectedBandIndexes.Count * this.Rows.Count + this.individualSelectedCells.Count == this.Columns.Count * this.Rows.Count;
				if (flag || includeInvisibleCells)
				{
					return flag;
				}
				for (DataGridViewColumn dataGridViewColumn3 = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible); dataGridViewColumn3 != null; dataGridViewColumn3 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
				{
					if (!this.selectedBandIndexes.Contains(dataGridViewColumn3.Index))
					{
						for (int num3 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible); num3 != -1; num3 = this.Rows.GetNextRow(num3, DataGridViewElementStates.Visible))
						{
							DataGridViewRow dataGridViewRow = this.Rows[num3];
							if (!dataGridViewRow.Cells[dataGridViewColumn3.Index].Selected)
							{
								return false;
							}
						}
					}
				}
				return true;
			}
			default:
				return false;
			}
		}

		// Token: 0x06001A60 RID: 6752 RVA: 0x0005F812 File Offset: 0x0005DA12
		internal override void AssignParent(Control value)
		{
			if (this.toolTipControl.Activated)
			{
				this.toolTipControl.Activate(false);
			}
			base.AssignParent(value);
		}

		// Token: 0x06001A61 RID: 6753 RVA: 0x0005F834 File Offset: 0x0005DA34
		private void AutoGenerateDataBoundColumns(DataGridViewColumn[] boundColumns)
		{
			DataGridViewColumnCollection columns = this.Columns;
			DataGridViewColumn[] array = new DataGridViewColumn[columns.Count];
			int num = 0;
			int i;
			for (i = 0; i < columns.Count; i++)
			{
				if (this.DataSource != null && !string.IsNullOrEmpty(columns[i].DataPropertyName) && !columns[i].IsDataBound)
				{
					this.MapDataGridViewColumnToDataBoundField(columns[i]);
				}
				if (columns[i].IsDataBound && this.dataConnection != null && this.dataConnection.BoundColumnIndex(columns[i].DataPropertyName) != -1)
				{
					array[num] = (DataGridViewColumn)columns[i].Clone();
					array[num].DisplayIndex = columns[i].DisplayIndex;
					num++;
				}
			}
			i = 0;
			while (i < columns.Count)
			{
				if (columns[i].IsDataBound)
				{
					columns.RemoveAtInternal(i, true);
				}
				else
				{
					i++;
				}
			}
			DataGridViewColumn[] array2;
			if (array.Length == num)
			{
				array2 = array;
			}
			else
			{
				array2 = new DataGridViewColumn[num];
				Array.Copy(array, array2, num);
			}
			Array.Sort(array2, DataGridViewColumnCollection.ColumnCollectionOrderComparer);
			if (boundColumns != null)
			{
				for (int j = 0; j < boundColumns.Length; j++)
				{
					if (boundColumns[j] != null && boundColumns[j].IsBrowsableInternal)
					{
						bool flag = true;
						int k;
						for (k = 0; k < num; k++)
						{
							if (array2[k] != null && string.Compare(array2[k].DataPropertyName, boundColumns[j].DataPropertyName, true, CultureInfo.InvariantCulture) == 0)
							{
								flag = false;
								break;
							}
						}
						if (flag)
						{
							columns.Add(boundColumns[j]);
						}
						else
						{
							columns.Add(array2[k]);
							this.MapDataGridViewColumnToDataBoundField(array2[k]);
							array2[k] = null;
						}
					}
				}
			}
			if (num > 0)
			{
				for (int l = 0; l < array2.Length; l++)
				{
					if (array2[l] != null)
					{
						columns.Add(array2[l]);
						this.MapDataGridViewColumnToDataBoundField(array2[l]);
					}
				}
			}
		}

		// Token: 0x06001A62 RID: 6754 RVA: 0x0005FA24 File Offset: 0x0005DC24
		private bool AutoResizeAllVisibleColumnsInternal(DataGridViewAutoSizeColumnCriteriaInternal autoSizeColumnCriteriaFilter, bool fixedHeight)
		{
			bool flag = false;
			for (DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible); dataGridViewColumn != null; dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
			{
				DataGridViewAutoSizeColumnCriteriaInternal inheritedAutoSizeMode = (DataGridViewAutoSizeColumnCriteriaInternal)dataGridViewColumn.InheritedAutoSizeMode;
				DataGridViewAutoSizeColumnCriteriaInternal dataGridViewAutoSizeColumnCriteriaInternal = inheritedAutoSizeMode & autoSizeColumnCriteriaFilter;
				if (dataGridViewAutoSizeColumnCriteriaInternal != DataGridViewAutoSizeColumnCriteriaInternal.NotSet)
				{
					flag |= this.AutoResizeColumnInternal(dataGridViewColumn.Index, inheritedAutoSizeMode, fixedHeight);
				}
			}
			return flag;
		}

		/// <summary>Adjusts the width of the specified column to fit the contents of all its cells, including the header cell.</summary>
		/// <param name="columnIndex">The index of the column to resize.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///   <paramref name="columnIndex" /> is not in the valid range of 0 to the number of columns minus 1.</exception>
		// Token: 0x06001A63 RID: 6755 RVA: 0x0005FA76 File Offset: 0x0005DC76
		public void AutoResizeColumn(int columnIndex)
		{
			this.AutoResizeColumn(columnIndex, DataGridViewAutoSizeColumnMode.AllCells);
		}

		/// <summary>Adjusts the width of the specified column using the specified size mode.</summary>
		/// <param name="columnIndex">The index of the column to resize.</param>
		/// <param name="autoSizeColumnMode">One of the <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnMode" /> values.</param>
		/// <exception cref="T:System.InvalidOperationException">
		///   <paramref name="autoSizeColumnMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.ColumnHeader" /> and <see cref="P:System.Windows.Forms.DataGridView.ColumnHeadersVisible" /> is <see langword="false" />.</exception>
		/// <exception cref="T:System.ArgumentException">
		///   <paramref name="autoSizeColumnMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.NotSet" />, <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.None" />, or <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.Fill" />.</exception>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///   <paramref name="columnIndex" /> is not in the valid range of 0 to the number of columns minus 1.</exception>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		///   <paramref name="autoSizeColumnMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnMode" /> value.</exception>
		// Token: 0x06001A64 RID: 6756 RVA: 0x0005FA80 File Offset: 0x0005DC80
		public void AutoResizeColumn(int columnIndex, DataGridViewAutoSizeColumnMode autoSizeColumnMode)
		{
			this.AutoResizeColumn(columnIndex, autoSizeColumnMode, true);
		}

		/// <summary>Adjusts the width of the specified column using the specified size mode, optionally calculating the width with the expectation that row heights will subsequently be adjusted.</summary>
		/// <param name="columnIndex">The index of the column to resize.</param>
		/// <param name="autoSizeColumnMode">One of the <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnMode" /> values.</param>
		/// <param name="fixedHeight">
		///   <see langword="true" /> to calculate the new width based on the current row heights; <see langword="false" /> to calculate the width with the expectation that the row heights will also be adjusted.</param>
		/// <exception cref="T:System.InvalidOperationException">
		///   <paramref name="autoSizeColumnMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.ColumnHeader" /> and <see cref="P:System.Windows.Forms.DataGridView.ColumnHeadersVisible" /> is <see langword="false" />.</exception>
		/// <exception cref="T:System.ArgumentException">
		///   <paramref name="autoSizeColumnMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.NotSet" />, <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.None" />, or <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.Fill" />.</exception>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///   <paramref name="columnIndex" /> is not in the valid range of 0 to the number of columns minus 1.</exception>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		///   <paramref name="autoSizeColumnMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnMode" /> value.</exception>
		// Token: 0x06001A65 RID: 6757 RVA: 0x0005FA8C File Offset: 0x0005DC8C
		protected void AutoResizeColumn(int columnIndex, DataGridViewAutoSizeColumnMode autoSizeColumnMode, bool fixedHeight)
		{
			if (autoSizeColumnMode == DataGridViewAutoSizeColumnMode.NotSet || autoSizeColumnMode == DataGridViewAutoSizeColumnMode.None || autoSizeColumnMode == DataGridViewAutoSizeColumnMode.Fill)
			{
				throw new ArgumentException(SR.GetString("DataGridView_NeedColumnAutoSizingCriteria", new object[] { "autoSizeColumnMode" }));
			}
			switch (autoSizeColumnMode)
			{
			case DataGridViewAutoSizeColumnMode.NotSet:
			case DataGridViewAutoSizeColumnMode.None:
			case DataGridViewAutoSizeColumnMode.ColumnHeader:
			case DataGridViewAutoSizeColumnMode.AllCellsExceptHeader:
			case DataGridViewAutoSizeColumnMode.AllCells:
			case DataGridViewAutoSizeColumnMode.DisplayedCellsExceptHeader:
			case DataGridViewAutoSizeColumnMode.DisplayedCells:
				goto IL_77;
			case (DataGridViewAutoSizeColumnMode)3:
			case (DataGridViewAutoSizeColumnMode)5:
			case (DataGridViewAutoSizeColumnMode)7:
			case (DataGridViewAutoSizeColumnMode)9:
				break;
			default:
				if (autoSizeColumnMode == DataGridViewAutoSizeColumnMode.Fill)
				{
					goto IL_77;
				}
				break;
			}
			throw new InvalidEnumArgumentException("autoSizeColumnMode", (int)autoSizeColumnMode, typeof(DataGridViewAutoSizeColumnMode));
			IL_77:
			if (columnIndex < 0 || columnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("columnIndex");
			}
			if (autoSizeColumnMode == DataGridViewAutoSizeColumnMode.ColumnHeader && !this.ColumnHeadersVisible)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotAutoSizeInvisibleColumnHeader"));
			}
			this.AutoResizeColumnInternal(columnIndex, (DataGridViewAutoSizeColumnCriteriaInternal)autoSizeColumnMode, fixedHeight);
		}

		/// <summary>Adjusts the height of the column headers to fit the contents of the largest column header.</summary>
		// Token: 0x06001A66 RID: 6758 RVA: 0x0005FB53 File Offset: 0x0005DD53
		public void AutoResizeColumnHeadersHeight()
		{
			this.AutoResizeColumnHeadersHeight(true, true);
		}

		/// <summary>Adjusts the height of the column headers based on changes to the contents of the header in the specified column.</summary>
		/// <param name="columnIndex">The index of the column containing the header with the changed content.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///   <paramref name="columnIndex" /> is not in the valid range of 0 to the number of columns minus 1.</exception>
		// Token: 0x06001A67 RID: 6759 RVA: 0x0005FB5D File Offset: 0x0005DD5D
		public void AutoResizeColumnHeadersHeight(int columnIndex)
		{
			this.AutoResizeColumnHeadersHeight(columnIndex, true, true);
		}

		/// <summary>Adjusts the height of the column headers to fit their contents, optionally calculating the height with the expectation that the column and/or row header widths will subsequently be adjusted.</summary>
		/// <param name="fixedRowHeadersWidth">
		///   <see langword="true" /> to calculate the new height based on the current width of the row headers; <see langword="false" /> to calculate the height with the expectation that the row headers width will also be adjusted.</param>
		/// <param name="fixedColumnsWidth">
		///   <see langword="true" /> to calculate the new height based on the current column widths; <see langword="false" /> to calculate the height with the expectation that the column widths will also be adjusted.</param>
		// Token: 0x06001A68 RID: 6760 RVA: 0x0005FB68 File Offset: 0x0005DD68
		protected void AutoResizeColumnHeadersHeight(bool fixedRowHeadersWidth, bool fixedColumnsWidth)
		{
			if (!this.ColumnHeadersVisible)
			{
				return;
			}
			if (!base.IsHandleCreated)
			{
				this.dataGridViewState2[1048576] = true;
				return;
			}
			try
			{
				this.noAutoSizeCount++;
				int num = 0;
				if (this.layout.TopLeftHeader.Width > 0)
				{
					if (fixedRowHeadersWidth)
					{
						num = this.TopLeftHeaderCell.GetPreferredHeight(-1, this.layout.TopLeftHeader.Width);
					}
					else
					{
						num = this.TopLeftHeaderCell.GetPreferredSize(-1).Height;
					}
				}
				int count = this.Columns.Count;
				for (int i = 0; i < count; i++)
				{
					if (this.Columns[i].Visible)
					{
						if (fixedColumnsWidth)
						{
							num = Math.Max(num, this.Columns[i].HeaderCell.GetPreferredHeight(-1, this.Columns[i].Thickness));
						}
						else
						{
							num = Math.Max(num, this.Columns[i].HeaderCell.GetPreferredSize(-1).Height);
						}
					}
				}
				if (num < 4)
				{
					num = 4;
				}
				if (num > 32768)
				{
					num = 32768;
				}
				if (num != this.ColumnHeadersHeight)
				{
					this.SetColumnHeadersHeightInternal(num, !fixedColumnsWidth);
				}
			}
			finally
			{
				this.noAutoSizeCount--;
			}
		}

		/// <summary>Adjusts the height of the column headers based on changes to the contents of the header in the specified column, optionally calculating the height with the expectation that the column and/or row header widths will subsequently be adjusted.</summary>
		/// <param name="columnIndex">The index of the column header whose contents should be used to determine new height.</param>
		/// <param name="fixedRowHeadersWidth">
		///   <see langword="true" /> to calculate the new height based on the current width of the row headers; <see langword="false" /> to calculate the height with the expectation that the row headers width will also be adjusted.</param>
		/// <param name="fixedColumnWidth">
		///   <see langword="true" /> to calculate the new height based on the current width of the specified column; <see langword="false" /> to calculate the height with the expectation that the column width will also be adjusted.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///   <paramref name="columnIndex" /> is not in the valid range of 0 to the number of columns minus 1.</exception>
		// Token: 0x06001A69 RID: 6761 RVA: 0x0005FCD0 File Offset: 0x0005DED0
		protected void AutoResizeColumnHeadersHeight(int columnIndex, bool fixedRowHeadersWidth, bool fixedColumnWidth)
		{
			if (columnIndex < -1 || columnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("columnIndex");
			}
			if (!this.ColumnHeadersVisible)
			{
				return;
			}
			if (!base.IsHandleCreated)
			{
				this.dataGridViewState2[1048576] = true;
				return;
			}
			try
			{
				this.noAutoSizeCount++;
				int num = 0;
				if (this.layout.TopLeftHeader.Width > 0)
				{
					if (columnIndex != -1 || fixedRowHeadersWidth)
					{
						num = this.TopLeftHeaderCell.GetPreferredHeight(-1, this.layout.TopLeftHeader.Width);
					}
					else
					{
						num = this.TopLeftHeaderCell.GetPreferredSize(-1).Height;
					}
				}
				int count = this.Columns.Count;
				for (int i = 0; i < count; i++)
				{
					if (this.Columns[i].Visible)
					{
						if (columnIndex != i || fixedColumnWidth)
						{
							num = Math.Max(num, this.Columns[i].HeaderCell.GetPreferredHeight(-1, this.Columns[i].Thickness));
						}
						else
						{
							num = Math.Max(num, this.Columns[i].HeaderCell.GetPreferredSize(-1).Height);
						}
					}
				}
				if (num < 4)
				{
					num = 4;
				}
				if (num > 32768)
				{
					num = 32768;
				}
				if (num != this.ColumnHeadersHeight)
				{
					this.SetColumnHeadersHeightInternal(num, !fixedColumnWidth);
				}
			}
			finally
			{
				this.noAutoSizeCount--;
			}
		}

		// Token: 0x06001A6A RID: 6762 RVA: 0x0005FE64 File Offset: 0x0005E064
		private bool AutoResizeColumnInternal(int columnIndex, DataGridViewAutoSizeColumnCriteriaInternal autoSizeColumnCriteriaInternal, bool fixedHeight)
		{
			if (!base.IsHandleCreated)
			{
				this.dataGridViewState2[1048576] = true;
				return false;
			}
			bool flag = false;
			try
			{
				this.noAutoSizeCount++;
				DataGridViewColumn dataGridViewColumn = this.Columns[columnIndex];
				int num = dataGridViewColumn.GetPreferredWidth((DataGridViewAutoSizeColumnMode)autoSizeColumnCriteriaInternal, fixedHeight);
				if (num < dataGridViewColumn.MinimumThickness)
				{
					num = dataGridViewColumn.MinimumThickness;
				}
				if (num > 65536)
				{
					num = 65536;
				}
				if (num != dataGridViewColumn.Thickness)
				{
					if (dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
					{
						this.AdjustFillingColumn(dataGridViewColumn, num);
					}
					else
					{
						this.Columns[columnIndex].ThicknessInternal = num;
					}
					flag = true;
				}
			}
			finally
			{
				this.noAutoSizeCount--;
			}
			return flag;
		}

		/// <summary>Adjusts the width of all columns to fit the contents of all their cells, including the header cells.</summary>
		// Token: 0x06001A6B RID: 6763 RVA: 0x0005FF24 File Offset: 0x0005E124
		public void AutoResizeColumns()
		{
			this.AutoResizeColumns(DataGridViewAutoSizeColumnsMode.AllCells);
		}

		/// <summary>Adjusts the width of all columns using the specified size mode.</summary>
		/// <param name="autoSizeColumnsMode">One of the <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" /> values.</param>
		/// <exception cref="T:System.InvalidOperationException">
		///   <paramref name="autoSizeColumnsMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.ColumnHeader" /> and <see cref="P:System.Windows.Forms.DataGridView.ColumnHeadersVisible" /> is <see langword="false" />.</exception>
		/// <exception cref="T:System.ArgumentException">
		///   <paramref name="autoSizeColumnsMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.None" /> or <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.Fill" />.</exception>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		///   <paramref name="autoSizeColumnsMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" /> value.</exception>
		// Token: 0x06001A6C RID: 6764 RVA: 0x0005FF2D File Offset: 0x0005E12D
		public void AutoResizeColumns(DataGridViewAutoSizeColumnsMode autoSizeColumnsMode)
		{
			this.AutoResizeColumns(autoSizeColumnsMode, true);
		}

		/// <summary>Adjusts the width of all columns using the specified size mode, optionally calculating the widths with the expectation that row heights will subsequently be adjusted.</summary>
		/// <param name="autoSizeColumnsMode">One of the <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" /> values.</param>
		/// <param name="fixedHeight">
		///   <see langword="true" /> to calculate the new widths based on the current row heights; <see langword="false" /> to calculate the widths with the expectation that the row heights will also be adjusted.</param>
		/// <exception cref="T:System.InvalidOperationException">
		///   <paramref name="autoSizeColumnsMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.ColumnHeader" /> and <see cref="P:System.Windows.Forms.DataGridView.ColumnHeadersVisible" /> is <see langword="false" />.</exception>
		/// <exception cref="T:System.ArgumentException">
		///   <paramref name="autoSizeColumnsMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.None" /> or <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.Fill" />.</exception>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		///   <paramref name="autoSizeColumnsMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" /> value.</exception>
		// Token: 0x06001A6D RID: 6765 RVA: 0x0005FF38 File Offset: 0x0005E138
		protected void AutoResizeColumns(DataGridViewAutoSizeColumnsMode autoSizeColumnsMode, bool fixedHeight)
		{
			for (int i = 0; i < this.Columns.Count; i++)
			{
				this.AutoResizeColumn(i, (DataGridViewAutoSizeColumnMode)autoSizeColumnsMode, fixedHeight);
			}
		}

		/// <summary>Adjusts the height of the specified row to fit the contents of all its cells including the header cell.</summary>
		/// <param name="rowIndex">The index of the row to resize.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///   <paramref name="rowIndex" /> is not in the valid range of 0 to the number of rows minus 1.</exception>
		// Token: 0x06001A6E RID: 6766 RVA: 0x0005FF64 File Offset: 0x0005E164
		public void AutoResizeRow(int rowIndex)
		{
			this.AutoResizeRow(rowIndex, DataGridViewAutoSizeRowMode.AllCells);
		}

		/// <summary>Adjusts the height of the specified row using the specified size mode.</summary>
		/// <param name="rowIndex">The index of the row to resize.</param>
		/// <param name="autoSizeRowMode">One of the <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowMode" /> values.</param>
		/// <exception cref="T:System.InvalidOperationException">
		///   <paramref name="autoSizeRowMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowMode.RowHeader" /> and <see cref="P:System.Windows.Forms.DataGridView.RowHeadersVisible" /> is <see langword="false" />.</exception>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		///   <paramref name="autoSizeRowMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowMode" /> value.</exception>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///   <paramref name="rowIndex" /> is not in the valid range of 0 to the number of rows minus 1.</exception>
		// Token: 0x06001A6F RID: 6767 RVA: 0x0005FF6E File Offset: 0x0005E16E
		public void AutoResizeRow(int rowIndex, DataGridViewAutoSizeRowMode autoSizeRowMode)
		{
			this.AutoResizeRow(rowIndex, autoSizeRowMode, true);
		}

		/// <summary>Adjusts the height of the specified row using the specified size mode, optionally calculating the height with the expectation that column widths will subsequently be adjusted.</summary>
		/// <param name="rowIndex">The index of the row to resize.</param>
		/// <param name="autoSizeRowMode">One of the <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowMode" /> values.</param>
		/// <param name="fixedWidth">
		///   <see langword="true" /> to calculate the new height based on the current width of the columns; <see langword="false" /> to calculate the height with the expectation that the column widths will also be adjusted.</param>
		/// <exception cref="T:System.InvalidOperationException">
		///   <paramref name="autoSizeRowMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowMode.RowHeader" /> and <see cref="P:System.Windows.Forms.DataGridView.RowHeadersVisible" /> is <see langword="false" />.</exception>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		///   <paramref name="autoSizeRowMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowMode" /> value.</exception>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///   <paramref name="rowIndex" /> is not in the valid range of 0 to the number of rows minus 1.</exception>
		// Token: 0x06001A70 RID: 6768 RVA: 0x0005FF7C File Offset: 0x0005E17C
		protected void AutoResizeRow(int rowIndex, DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth)
		{
			if (rowIndex < 0 || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			if ((autoSizeRowMode & (DataGridViewAutoSizeRowMode)(-4)) != (DataGridViewAutoSizeRowMode)0)
			{
				throw new InvalidEnumArgumentException("autoSizeRowMode", (int)autoSizeRowMode, typeof(DataGridViewAutoSizeRowMode));
			}
			if (autoSizeRowMode == DataGridViewAutoSizeRowMode.RowHeader && !this.RowHeadersVisible)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotAutoSizeRowInvisibleRowHeader"));
			}
			this.AutoResizeRowInternal(rowIndex, autoSizeRowMode, fixedWidth, false);
		}

		/// <summary>Adjusts the width of the row headers using the specified size mode.</summary>
		/// <param name="rowHeadersWidthSizeMode">One of the <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> values.</param>
		/// <exception cref="T:System.ArgumentException">
		///   <paramref name="rowHeadersWidthSizeMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.EnableResizing" /> or <see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.DisableResizing" />.</exception>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		///   <paramref name="rowHeadersWidthSizeMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> value.</exception>
		// Token: 0x06001A71 RID: 6769 RVA: 0x0005FFE8 File Offset: 0x0005E1E8
		public void AutoResizeRowHeadersWidth(DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode)
		{
			this.AutoResizeRowHeadersWidth(rowHeadersWidthSizeMode, true, true);
		}

		/// <summary>Adjusts the width of the row headers using the specified size mode, optionally calculating the width with the expectation that the row and/or column header widths will subsequently be adjusted.</summary>
		/// <param name="rowHeadersWidthSizeMode">One of the <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> values.</param>
		/// <param name="fixedColumnHeadersHeight">
		///   <see langword="true" /> to calculate the new width based on the current height of the column headers; <see langword="false" /> to calculate the width with the expectation that the height of the column headers will also be adjusted.</param>
		/// <param name="fixedRowsHeight">
		///   <see langword="true" /> to calculate the new width based on the current row heights; <see langword="false" /> to calculate the width with the expectation that the row heights will also be adjusted.</param>
		/// <exception cref="T:System.ArgumentException">
		///   <paramref name="rowHeadersWidthSizeMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.EnableResizing" /> or <see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.DisableResizing" />.</exception>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		///   <paramref name="rowHeadersWidthSizeMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> value.</exception>
		// Token: 0x06001A72 RID: 6770 RVA: 0x0005FFF4 File Offset: 0x0005E1F4
		protected void AutoResizeRowHeadersWidth(DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode, bool fixedColumnHeadersHeight, bool fixedRowsHeight)
		{
			if (rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing || rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.DisableResizing)
			{
				throw new ArgumentException(SR.GetString("DataGridView_NeedAutoSizingCriteria", new object[] { "rowHeadersWidthSizeMode" }));
			}
			if (rowHeadersWidthSizeMode < DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders || rowHeadersWidthSizeMode > DataGridViewRowHeadersWidthSizeMode.AutoSizeToFirstHeader)
			{
				throw new InvalidEnumArgumentException("rowHeadersWidthSizeMode", (int)rowHeadersWidthSizeMode, typeof(DataGridViewRowHeadersWidthSizeMode));
			}
			if (!this.RowHeadersVisible)
			{
				return;
			}
			if (!base.IsHandleCreated)
			{
				this.dataGridViewState2[1048576] = true;
				return;
			}
			try
			{
				this.noAutoSizeCount++;
				int num = 0;
				if (this.layout.TopLeftHeader.Width > 0)
				{
					if (fixedColumnHeadersHeight)
					{
						num = this.TopLeftHeaderCell.GetPreferredWidth(-1, this.layout.TopLeftHeader.Height);
					}
					else
					{
						num = this.TopLeftHeaderCell.GetPreferredSize(-1).Width;
					}
				}
				switch (rowHeadersWidthSizeMode)
				{
				case DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders:
				{
					for (int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible); num2 != -1; num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible))
					{
						if (fixedRowsHeight)
						{
							num = Math.Max(num, this.Rows.SharedRow(num2).HeaderCell.GetPreferredWidth(num2, this.Rows.SharedRow(num2).GetHeight(num2)));
						}
						else
						{
							num = Math.Max(num, this.Rows.SharedRow(num2).HeaderCell.GetPreferredSize(num2).Width);
						}
					}
					break;
				}
				case DataGridViewRowHeadersWidthSizeMode.AutoSizeToDisplayedHeaders:
				{
					int height = this.layout.Data.Height;
					int num3 = 0;
					int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					while (num2 != -1 && num3 < height)
					{
						DataGridViewRow dataGridViewRow = this.Rows.SharedRow(num2);
						int height2 = dataGridViewRow.GetHeight(num2);
						num3 += height2;
						if (fixedRowsHeight)
						{
							num = Math.Max(num, dataGridViewRow.HeaderCell.GetPreferredWidth(num2, height2));
						}
						else
						{
							num = Math.Max(num, dataGridViewRow.HeaderCell.GetPreferredSize(num2).Width);
						}
						num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					}
					if (num3 < height)
					{
						for (num2 = this.displayedBandsInfo.FirstDisplayedScrollingRow; num2 != -1; num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible))
						{
							if (num3 >= height)
							{
								break;
							}
							DataGridViewRow dataGridViewRow2 = this.Rows.SharedRow(num2);
							int height3 = dataGridViewRow2.GetHeight(num2);
							num3 += height3;
							if (fixedRowsHeight)
							{
								num = Math.Max(num, dataGridViewRow2.HeaderCell.GetPreferredWidth(num2, height3));
							}
							else
							{
								num = Math.Max(num, dataGridViewRow2.HeaderCell.GetPreferredSize(num2).Width);
							}
						}
					}
					break;
				}
				case DataGridViewRowHeadersWidthSizeMode.AutoSizeToFirstHeader:
				{
					int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
					if (num2 != -1)
					{
						if (fixedRowsHeight)
						{
							num = Math.Max(num, this.Rows.SharedRow(num2).HeaderCell.GetPreferredWidth(num2, this.Rows.SharedRow(num2).GetHeight(num2)));
						}
						else
						{
							num = Math.Max(num, this.Rows.SharedRow(num2).HeaderCell.GetPreferredSize(num2).Width);
						}
					}
					break;
				}
				}
				if (num < 4)
				{
					num = 4;
				}
				if (num != this.RowHeadersWidth)
				{
					this.RowHeadersWidthInternal = num;
				}
			}
			finally
			{
				this.noAutoSizeCount--;
			}
		}

		/// <summary>Adjusts the width of the row headers based on changes to the contents of the header in the specified row and using the specified size mode.</summary>
		/// <param name="rowIndex">The index of the row header with the changed content.</param>
		/// <param name="rowHeadersWidthSizeMode">One of the <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> values.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///   <paramref name="rowIndex" /> is not in the valid range of 0 to the number of rows minus 1.</exception>
		/// <exception cref="T:System.ArgumentException">
		///   <paramref name="rowHeadersWidthSizeMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.EnableResizing" /> or <see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.DisableResizing" /></exception>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		///   <paramref name="rowHeadersWidthSizeMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> value.</exception>
		// Token: 0x06001A73 RID: 6771 RVA: 0x00060330 File Offset: 0x0005E530
		public void AutoResizeRowHeadersWidth(int rowIndex, DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode)
		{
			this.AutoResizeRowHeadersWidth(rowIndex, rowHeadersWidthSizeMode, true, true);
		}

		/// <summary>Adjusts the width of the row headers based on changes to the contents of the header in the specified row and using the specified size mode, optionally calculating the width with the expectation that the row and/or column header widths will subsequently be adjusted.</summary>
		/// <param name="rowIndex">The index of the row containing the header with the changed content.</param>
		/// <param name="rowHeadersWidthSizeMode">One of the <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> values.</param>
		/// <param name="fixedColumnHeadersHeight">
		///   <see langword="true" /> to calculate the new width based on the current height of the column headers; <see langword="false" /> to calculate the width with the expectation that the height of the column headers will also be adjusted.</param>
		/// <param name="fixedRowHeight">
		///   <see langword="true" /> to calculate the new width based on the current height of the specified row; <see langword="false" /> to calculate the width with the expectation that the row height will also be adjusted.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///   <paramref name="rowIndex" /> is not in the valid range of 0 to the number of rows minus 1.</exception>
		/// <exception cref="T:System.ArgumentException">
		///   <paramref name="rowHeadersWidthSizeMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.EnableResizing" /> or <see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.DisableResizing" />.</exception>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		///   <paramref name="rowHeadersWidthSizeMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> value.</exception>
		// Token: 0x06001A74 RID: 6772 RVA: 0x0006033C File Offset: 0x0005E53C
		protected void AutoResizeRowHeadersWidth(int rowIndex, DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode, bool fixedColumnHeadersHeight, bool fixedRowHeight)
		{
			if (rowIndex < -1 || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			if (rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing || rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.DisableResizing)
			{
				throw new ArgumentException(SR.GetString("DataGridView_NeedAutoSizingCriteria", new object[] { "rowHeadersWidthSizeMode" }));
			}
			if (rowHeadersWidthSizeMode < DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders || rowHeadersWidthSizeMode > DataGridViewRowHeadersWidthSizeMode.AutoSizeToFirstHeader)
			{
				throw new InvalidEnumArgumentException("rowHeadersWidthSizeMode", (int)rowHeadersWidthSizeMode, typeof(DataGridViewRowHeadersWidthSizeMode));
			}
			if (!this.RowHeadersVisible)
			{
				return;
			}
			if (rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.AutoSizeToFirstHeader && rowIndex != -1 && rowIndex != this.Rows.GetFirstRow(DataGridViewElementStates.Visible))
			{
				return;
			}
			if (rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.AutoSizeToDisplayedHeaders && rowIndex != -1)
			{
				DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
				if ((rowState & DataGridViewElementStates.Displayed) <= DataGridViewElementStates.None)
				{
					return;
				}
			}
			if (!base.IsHandleCreated)
			{
				this.dataGridViewState2[1048576] = true;
				return;
			}
			try
			{
				this.noAutoSizeCount++;
				int num = 0;
				if (this.layout.TopLeftHeader.Width > 0)
				{
					if (rowIndex != -1 || fixedColumnHeadersHeight)
					{
						num = this.TopLeftHeaderCell.GetPreferredWidth(-1, this.layout.TopLeftHeader.Height);
					}
					else
					{
						num = this.TopLeftHeaderCell.GetPreferredSize(-1).Width;
					}
				}
				switch (rowHeadersWidthSizeMode)
				{
				case DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders:
				{
					for (int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible); num2 != -1; num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible))
					{
						if (rowIndex != num2 || fixedRowHeight)
						{
							num = Math.Max(num, this.Rows.SharedRow(num2).HeaderCell.GetPreferredWidth(num2, this.Rows.SharedRow(num2).GetHeight(num2)));
						}
						else
						{
							num = Math.Max(num, this.Rows.SharedRow(num2).HeaderCell.GetPreferredSize(num2).Width);
						}
					}
					break;
				}
				case DataGridViewRowHeadersWidthSizeMode.AutoSizeToDisplayedHeaders:
				{
					int height = this.layout.Data.Height;
					int num3 = 0;
					int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					while (num2 != -1 && num3 < height)
					{
						DataGridViewRow dataGridViewRow = this.Rows.SharedRow(num2);
						int height2 = dataGridViewRow.GetHeight(num2);
						num3 += height2;
						if (rowIndex != num2 || fixedRowHeight)
						{
							num = Math.Max(num, dataGridViewRow.HeaderCell.GetPreferredWidth(num2, height2));
						}
						else
						{
							num = Math.Max(num, dataGridViewRow.HeaderCell.GetPreferredSize(num2).Width);
						}
						num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					}
					if (num3 < height)
					{
						for (num2 = this.displayedBandsInfo.FirstDisplayedScrollingRow; num2 != -1; num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible))
						{
							if (num3 >= height)
							{
								break;
							}
							DataGridViewRow dataGridViewRow2 = this.Rows.SharedRow(num2);
							int height3 = dataGridViewRow2.GetHeight(num2);
							num3 += height3;
							if (rowIndex != num2 || fixedRowHeight)
							{
								num = Math.Max(num, dataGridViewRow2.HeaderCell.GetPreferredWidth(num2, height3));
							}
							else
							{
								num = Math.Max(num, dataGridViewRow2.HeaderCell.GetPreferredSize(num2).Width);
							}
						}
					}
					break;
				}
				case DataGridViewRowHeadersWidthSizeMode.AutoSizeToFirstHeader:
				{
					int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
					if (num2 != -1)
					{
						if (rowIndex != num2 || fixedRowHeight)
						{
							num = Math.Max(num, this.Rows.SharedRow(num2).HeaderCell.GetPreferredWidth(num2, this.Rows.SharedRow(num2).GetHeight(num2)));
						}
						else
						{
							num = Math.Max(num, this.Rows.SharedRow(num2).HeaderCell.GetPreferredSize(num2).Width);
						}
					}
					break;
				}
				}
				if (num < 4)
				{
					num = 4;
				}
				if (num != this.RowHeadersWidth)
				{
					this.RowHeadersWidthInternal = num;
				}
			}
			finally
			{
				this.noAutoSizeCount--;
			}
		}

		// Token: 0x06001A75 RID: 6773 RVA: 0x00060708 File Offset: 0x0005E908
		private void AutoResizeRowInternal(int rowIndex, DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth, bool internalAutosizing)
		{
			if (!base.IsHandleCreated)
			{
				this.dataGridViewState2[1048576] = true;
				return;
			}
			try
			{
				this.noAutoSizeCount++;
				DataGridViewRow dataGridViewRow = this.Rows.SharedRow(rowIndex);
				int num;
				int num2;
				dataGridViewRow.GetHeightInfo(rowIndex, out num, out num2);
				int num3 = dataGridViewRow.GetPreferredHeight(rowIndex, autoSizeRowMode, fixedWidth);
				if (num3 < num2)
				{
					num3 = num2;
				}
				if (num3 > 65536)
				{
					num3 = 65536;
				}
				if (num != num3)
				{
					if (this.autoSizeRowsMode == DataGridViewAutoSizeRowsMode.None)
					{
						if (!this.OnRowHeightInfoPushed(rowIndex, num3, num2))
						{
							this.Rows[rowIndex].ThicknessInternal = num3;
						}
					}
					else if (internalAutosizing)
					{
						this.Rows[rowIndex].ThicknessInternal = num3;
					}
					else
					{
						this.Rows[rowIndex].Thickness = num3;
					}
				}
			}
			finally
			{
				this.noAutoSizeCount--;
			}
		}

		/// <summary>Adjusts the heights of all rows to fit the contents of all their cells, including the header cells.</summary>
		// Token: 0x06001A76 RID: 6774 RVA: 0x000607EC File Offset: 0x0005E9EC
		public void AutoResizeRows()
		{
			this.AutoResizeRows(DataGridViewAutoSizeRowsMode.AllCells);
		}

		/// <summary>Adjusts the heights of the rows using the specified size mode value.</summary>
		/// <param name="autoSizeRowsMode">One of the <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> values.</param>
		/// <exception cref="T:System.InvalidOperationException">
		///   <paramref name="autoSizeRowsMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.AllHeaders" /> or <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.DisplayedHeaders" />, and <see cref="P:System.Windows.Forms.DataGridView.RowHeadersVisible" /> is <see langword="false" />.</exception>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		///   <paramref name="autoSizeRowsMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> value.</exception>
		/// <exception cref="T:System.ArgumentException">
		///   <paramref name="autoSizeRowsMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.None" />.</exception>
		// Token: 0x06001A77 RID: 6775 RVA: 0x000607F5 File Offset: 0x0005E9F5
		public void AutoResizeRows(DataGridViewAutoSizeRowsMode autoSizeRowsMode)
		{
			this.AutoResizeRows(autoSizeRowsMode, true);
		}

		/// <summary>Adjusts the heights of all rows using the specified size mode, optionally calculating the heights with the expectation that column widths will subsequently be adjusted.</summary>
		/// <param name="autoSizeRowsMode">One of the <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> values.</param>
		/// <param name="fixedWidth">
		///   <see langword="true" /> to calculate the new heights based on the current column widths; <see langword="false" /> to calculate the heights with the expectation that the column widths will also be adjusted.</param>
		/// <exception cref="T:System.InvalidOperationException">
		///   <paramref name="autoSizeRowsMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.AllHeaders" /> or <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.DisplayedHeaders" />, and <see cref="P:System.Windows.Forms.DataGridView.RowHeadersVisible" /> is <see langword="false" />.</exception>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		///   <paramref name="autoSizeRowsMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> value.</exception>
		/// <exception cref="T:System.ArgumentException">
		///   <paramref name="autoSizeRowsMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.None" />.</exception>
		// Token: 0x06001A78 RID: 6776 RVA: 0x00060800 File Offset: 0x0005EA00
		protected void AutoResizeRows(DataGridViewAutoSizeRowsMode autoSizeRowsMode, bool fixedWidth)
		{
			switch (autoSizeRowsMode)
			{
			case DataGridViewAutoSizeRowsMode.None:
			case DataGridViewAutoSizeRowsMode.AllHeaders:
			case DataGridViewAutoSizeRowsMode.AllCellsExceptHeaders:
			case DataGridViewAutoSizeRowsMode.AllCells:
			case DataGridViewAutoSizeRowsMode.DisplayedHeaders:
			case DataGridViewAutoSizeRowsMode.DisplayedCellsExceptHeaders:
			case DataGridViewAutoSizeRowsMode.DisplayedCells:
				if (autoSizeRowsMode == DataGridViewAutoSizeRowsMode.None)
				{
					throw new ArgumentException(SR.GetString("DataGridView_NeedAutoSizingCriteria", new object[] { "autoSizeRowsMode" }));
				}
				if ((autoSizeRowsMode == DataGridViewAutoSizeRowsMode.AllHeaders || autoSizeRowsMode == DataGridViewAutoSizeRowsMode.DisplayedHeaders) && !this.RowHeadersVisible)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotAutoSizeRowsInvisibleRowHeader"));
				}
				this.AdjustShrinkingRows(autoSizeRowsMode, fixedWidth, false);
				return;
			default:
				throw new InvalidEnumArgumentException("value", (int)autoSizeRowsMode, typeof(DataGridViewAutoSizeRowsMode));
			}
		}

		/// <summary>Adjusts the heights of the specified rows using the specified size mode, optionally calculating the heights with the expectation that column widths will subsequently be adjusted.</summary>
		/// <param name="rowIndexStart">The index of the first row to resize.</param>
		/// <param name="rowsCount">The number of rows to resize.</param>
		/// <param name="autoSizeRowMode">One of the <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowMode" /> values.</param>
		/// <param name="fixedWidth">
		///   <see langword="true" /> to calculate the new heights based on the current column widths; <see langword="false" /> to calculate the heights with the expectation that the column widths will also be adjusted.</param>
		/// <exception cref="T:System.InvalidOperationException">
		///   <paramref name="autoSizeRowsMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.AllHeaders" /> or <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.DisplayedHeaders" />, and <see cref="P:System.Windows.Forms.DataGridView.RowHeadersVisible" /> is <see langword="false" />.</exception>
		/// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		///   <paramref name="autoSizeRowsMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> value.</exception>
		/// <exception cref="T:System.ArgumentException">
		///   <paramref name="autoSizeRowsMode" /> has the value <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.None" />.</exception>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///   <paramref name="rowIndexStart" /> is less than 0.  
		/// -or-  
		/// <paramref name="rowsCount" /> is less than 0.</exception>
		// Token: 0x06001A79 RID: 6777 RVA: 0x000608A4 File Offset: 0x0005EAA4
		protected void AutoResizeRows(int rowIndexStart, int rowsCount, DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth)
		{
			if ((autoSizeRowMode & (DataGridViewAutoSizeRowMode)(-4)) != (DataGridViewAutoSizeRowMode)0)
			{
				throw new InvalidEnumArgumentException("autoSizeRowMode", (int)autoSizeRowMode, typeof(DataGridViewAutoSizeRowMode));
			}
			if (autoSizeRowMode == DataGridViewAutoSizeRowMode.RowHeader && !this.RowHeadersVisible)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotAutoSizeRowsInvisibleRowHeader"));
			}
			if (rowsCount < 0)
			{
				throw new ArgumentOutOfRangeException("rowsCount");
			}
			if (rowIndexStart < 0)
			{
				throw new ArgumentOutOfRangeException("rowIndexStart");
			}
			if (!base.IsHandleCreated)
			{
				this.dataGridViewState2[1048576] = true;
				return;
			}
			this.inBulkPaintCount++;
			this.inBulkLayoutCount++;
			try
			{
				int num = this.Rows.GetNextRow(rowIndexStart - 1, DataGridViewElementStates.Visible);
				int num2 = 0;
				while (num != -1 && num2 < rowsCount)
				{
					this.AutoResizeRowInternal(num, autoSizeRowMode, fixedWidth, false);
					num2++;
					if (num2 < rowsCount)
					{
						num = this.Rows.GetNextRow(num, DataGridViewElementStates.Visible);
					}
				}
			}
			finally
			{
				this.ExitBulkLayout(true);
				this.ExitBulkPaint(-1, -1);
			}
		}

		// Token: 0x06001A7A RID: 6778 RVA: 0x000609A0 File Offset: 0x0005EBA0
		private void BeginColumnHeadersResize(int mouseY, int mouseBarOffset)
		{
			if (this.IsKeyboardOperationActive())
			{
				return;
			}
			Rectangle rectangle = Rectangle.Union(this.layout.ColumnHeaders, this.layout.Data);
			if (this.layout.TopLeftHeader.Width > 0)
			{
				rectangle = Rectangle.Union(this.layout.TopLeftHeader, rectangle);
			}
			rectangle.Y += 4 - mouseBarOffset - 1;
			this.CaptureMouse(rectangle);
			this.dataGridViewOper[128] = true;
			this.trackRowAnchor = mouseY;
			this.mouseBarOffset = mouseBarOffset;
			this.currentRowSplitBar = mouseY;
			base.Invalidate(this.CalcRowResizeFeedbackRect(this.currentRowSplitBar));
		}

		// Token: 0x06001A7B RID: 6779 RVA: 0x00060A4C File Offset: 0x0005EC4C
		private void BeginColumnRelocation(int mouseX, int index)
		{
			if (this.IsKeyboardOperationActive())
			{
				return;
			}
			Rectangle columnHeaders = this.layout.ColumnHeaders;
			int columnsWidth = this.Columns.GetColumnsWidth(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			int num = this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible) - columnsWidth;
			if (this.Columns[index].Frozen)
			{
				if (this.RightToLeftInternal)
				{
					columnHeaders.X += columnHeaders.Width - columnsWidth;
				}
				columnHeaders.Width = Math.Min(columnsWidth, this.layout.Data.Width);
			}
			else
			{
				if (!this.RightToLeftInternal)
				{
					columnHeaders.X += columnsWidth;
				}
				else if (this.layout.Data.Width > columnsWidth + num)
				{
					columnHeaders.X += this.layout.Data.Width - columnsWidth - num;
				}
				columnHeaders.Width = Math.Min(num, this.layout.Data.Width);
			}
			this.CaptureMouse(columnHeaders);
			this.dataGridViewOper[32] = true;
			this.dataGridViewState2[1024] = false;
			this.trackColumn = index;
			this.trackColumnEdge = -1;
			this.mouseBarOffset = this.GetColumnXFromIndex(index) - mouseX;
			this.lastHeaderShadow = mouseX;
			base.Invalidate(this.layout.ColumnHeaders);
		}

		// Token: 0x06001A7C RID: 6780 RVA: 0x00060BA5 File Offset: 0x0005EDA5
		private void BeginColumnResize(int x, int columnIndex)
		{
			this.trackColAnchor = x;
			this.trackColumn = columnIndex;
			this.currentColSplitBar = x;
			base.Invalidate(this.CalcColResizeFeedbackRect(this.currentColSplitBar));
		}

		// Token: 0x06001A7D RID: 6781 RVA: 0x00060BCE File Offset: 0x0005EDCE
		private void BeginMouseColumnResize(int mouseX, int mouseBarOffset, int index)
		{
			if (this.IsKeyboardOperationActive())
			{
				return;
			}
			this.dataGridViewOper[1] = true;
			this.mouseBarOffset = mouseBarOffset;
			this.resizeClipRectangle = this.GetResizeClipRectangle(index);
			this.CaptureMouse(this.resizeClipRectangle);
			this.BeginColumnResize(mouseX, index);
		}

		// Token: 0x06001A7E RID: 6782 RVA: 0x00060C10 File Offset: 0x0005EE10
		private void BeginKeyboardColumnResize(int columnIndex)
		{
			if (this.IsMouseOperationActive())
			{
				return;
			}
			this.dataGridViewOper[16777216] = true;
			this.mouseBarOffset = 0;
			this.resizeClipRectangle = this.GetResizeClipRectangle(columnIndex);
			this.keyboardResizeStep = this.ScaleToCurrentDpi(this.RightToLeftInternal ? (-1) : 1);
			int num = this.GetColumnXFromIndex(columnIndex);
			num += (this.RightToLeftInternal ? (-this.Columns[columnIndex].Width) : this.Columns[columnIndex].Width);
			this.BeginColumnResize(num, columnIndex);
		}

		// Token: 0x06001A7F RID: 6783 RVA: 0x00060CA4 File Offset: 0x0005EEA4
		private Rectangle GetResizeClipRectangle(int columnIndex)
		{
			Rectangle rectangle = Rectangle.Union(this.layout.ColumnHeaders, this.layout.Data);
			int columnXFromIndex = this.GetColumnXFromIndex(columnIndex);
			if (this.RightToLeftInternal)
			{
				rectangle.X = this.layout.Data.X - this.mouseBarOffset - 1;
				rectangle.Width = columnXFromIndex - this.Columns[columnIndex].MinimumThickness - this.layout.Data.X + 3;
				int num = columnXFromIndex - this.mouseBarOffset - rectangle.Left - 65536 + 1;
				if (num > 0)
				{
					rectangle.X += num;
					rectangle.Width -= num;
				}
			}
			else
			{
				rectangle.X = columnXFromIndex + this.Columns[columnIndex].MinimumThickness - this.mouseBarOffset - 1;
				rectangle.Width = this.layout.Data.Right - columnXFromIndex - 1;
				int num2 = rectangle.Right + this.mouseBarOffset - columnXFromIndex - 65536;
				if (num2 > 0)
				{
					rectangle.Width -= num2;
				}
			}
			return rectangle;
		}

		/// <summary>Puts the current cell in edit mode.</summary>
		/// <param name="selectAll">
		///   <see langword="true" /> to select all the cell's contents; <see langword="false" /> to not select any contents.</param>
		/// <returns>
		///   <see langword="true" /> if the current cell is already in edit mode or successfully enters edit mode; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.InvalidOperationException">
		///   <see cref="P:System.Windows.Forms.DataGridView.CurrentCell" /> is not set to a valid cell.  
		/// -or-  
		/// This method was called in a handler for the <see cref="E:System.Windows.Forms.DataGridView.CellBeginEdit" /> event.</exception>
		/// <exception cref="T:System.InvalidCastException">The type indicated by the cell's <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property does not derive from the <see cref="T:System.Windows.Forms.Control" /> type.  
		///  -or-  
		///  The type indicated by the cell's <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property does not implement the <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> interface.</exception>
		/// <exception cref="T:System.Exception">Initialization of the editing cell value failed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. The exception object can typically be cast to type <see cref="T:System.FormatException" />.</exception>
		// Token: 0x06001A80 RID: 6784 RVA: 0x00060DD6 File Offset: 0x0005EFD6
		public virtual bool BeginEdit(bool selectAll)
		{
			if (this.ptCurrentCell.X == -1)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_NoCurrentCell"));
			}
			return this.IsCurrentCellInEditMode || this.BeginEditInternal(selectAll);
		}

		// Token: 0x06001A81 RID: 6785 RVA: 0x00060E08 File Offset: 0x0005F008
		private bool BeginEditInternal(bool selectAll)
		{
			if (this.dataGridViewOper[2097152])
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_BeginEditNotReentrant"));
			}
			bool flag;
			try
			{
				this.dataGridViewOper[2097152] = true;
				DataGridViewCell dataGridViewCell = this.CurrentCellInternal;
				if (this.IsSharedCellReadOnly(dataGridViewCell, this.ptCurrentCell.Y) || !this.ColumnEditable(this.ptCurrentCell.X))
				{
					flag = false;
				}
				else
				{
					Type type = dataGridViewCell.EditType;
					if (type == null)
					{
						Type @interface = dataGridViewCell.GetType().GetInterface("System.Windows.Forms.IDataGridViewEditingCell");
						if (@interface == null)
						{
							return false;
						}
					}
					DataGridViewCellCancelEventArgs dataGridViewCellCancelEventArgs = new DataGridViewCellCancelEventArgs(this.ptCurrentCell.X, this.ptCurrentCell.Y);
					this.OnCellBeginEdit(dataGridViewCellCancelEventArgs);
					if (dataGridViewCellCancelEventArgs.Cancel)
					{
						flag = false;
					}
					else if (this.ptCurrentCell.X > -1)
					{
						DataGridViewCell dataGridViewCell2 = dataGridViewCell;
						dataGridViewCell = this.CurrentCellInternal;
						if (dataGridViewCell2 != dataGridViewCell)
						{
							if (this.IsSharedCellReadOnly(dataGridViewCell, this.ptCurrentCell.Y) || !this.ColumnEditable(this.ptCurrentCell.X))
							{
								return false;
							}
							type = dataGridViewCell.EditType;
							if (type == null)
							{
								Type interface2 = dataGridViewCell.GetType().GetInterface("System.Windows.Forms.IDataGridViewEditingCell");
								if (interface2 == null)
								{
									return false;
								}
							}
						}
						DataGridViewCellStyle inheritedStyle = dataGridViewCell.GetInheritedStyle(null, this.ptCurrentCell.Y, true);
						if (type == null)
						{
							this.dataGridViewState1[32768] = true;
							this.InitializeEditingCellValue(ref inheritedStyle, ref dataGridViewCell);
							((IDataGridViewEditingCell)dataGridViewCell).PrepareEditingCellForEdit(selectAll);
							flag = true;
						}
						else
						{
							Type interface3 = type.GetInterface("System.Windows.Forms.IDataGridViewEditingControl");
							if (!type.IsSubclassOf(Type.GetType("System.Windows.Forms.Control")) || interface3 == null)
							{
								throw new InvalidCastException(SR.GetString("DataGridView_InvalidEditingControl"));
							}
							if (this.latestEditingControl != null && type.IsInstanceOfType(this.latestEditingControl) && !this.latestEditingControl.GetType().IsSubclassOf(type))
							{
								this.editingControl = this.latestEditingControl;
							}
							else
							{
								this.editingControl = (Control)SecurityUtils.SecureCreateInstance(type);
								((IDataGridViewEditingControl)this.editingControl).EditingControlDataGridView = this;
								if (this.latestEditingControl != null)
								{
									this.latestEditingControl.Dispose();
									this.latestEditingControl = null;
								}
							}
							if (string.IsNullOrEmpty(this.editingControl.AccessibleName))
							{
								this.editingControl.AccessibleName = SR.GetString("DataGridView_AccEditingControlAccName");
							}
							this.editingControl.ImeMode = base.ImeMode;
							((IDataGridViewEditingControl)this.editingControl).EditingControlRowIndex = this.ptCurrentCell.Y;
							this.InitializeEditingControlValue(ref inheritedStyle, dataGridViewCell);
							this.WireEditingControlEvents();
							DataGridViewEditingControlShowingEventArgs dataGridViewEditingControlShowingEventArgs = new DataGridViewEditingControlShowingEventArgs(this.editingControl, inheritedStyle);
							this.OnEditingControlShowing(dataGridViewEditingControlShowingEventArgs);
							if (this.editingPanel == null || this.editingControl == null)
							{
								flag = false;
							}
							else
							{
								this.editingPanel.BackColor = dataGridViewEditingControlShowingEventArgs.CellStyle.BackColor;
								((IDataGridViewEditingControl)this.editingControl).ApplyCellStyleToEditingControl(dataGridViewEditingControlShowingEventArgs.CellStyle);
								if (this.toolTipControl.Activated && this.ptToolTipCell == this.ptCurrentCell)
								{
									this.toolTipControl.Activate(false);
								}
								this.PositionEditingControl(true, true, true);
								if (this.editingPanel == null || this.editingControl == null)
								{
									flag = false;
								}
								else
								{
									((IDataGridViewEditingControl)this.editingControl).PrepareEditingControlForEdit(selectAll);
									this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
									flag = true;
								}
							}
						}
					}
					else
					{
						flag = false;
					}
				}
			}
			finally
			{
				this.dataGridViewOper[2097152] = false;
			}
			return flag;
		}

		// Token: 0x06001A82 RID: 6786 RVA: 0x000611D4 File Offset: 0x0005F3D4
		private void BeginRowHeadersResize(int mouseX, int mouseBarOffset)
		{
			if (this.IsKeyboardOperationActive())
			{
				return;
			}
			Rectangle rectangle = Rectangle.Union(this.layout.RowHeaders, this.layout.Data);
			if (this.layout.TopLeftHeader.Width > 0)
			{
				rectangle = Rectangle.Union(this.layout.TopLeftHeader, rectangle);
			}
			if (this.RightToLeftInternal)
			{
				rectangle.X -= mouseBarOffset + 1;
				rectangle.Width -= 3;
			}
			else
			{
				rectangle.X += 4 - mouseBarOffset - 1;
			}
			this.CaptureMouse(rectangle);
			this.dataGridViewOper[256] = true;
			this.trackColAnchor = mouseX;
			this.mouseBarOffset = mouseBarOffset;
			this.currentColSplitBar = mouseX;
			base.Invalidate(this.CalcColResizeFeedbackRect(this.currentColSplitBar));
		}

		// Token: 0x06001A83 RID: 6787 RVA: 0x000612A8 File Offset: 0x0005F4A8
		private void BeginRowResize(int mouseY, int mouseBarOffset, int index)
		{
			if (this.IsKeyboardOperationActive())
			{
				return;
			}
			Rectangle rectangle = Rectangle.Union(this.layout.RowHeaders, this.layout.Data);
			int rowYFromIndex = this.GetRowYFromIndex(index);
			rectangle.Y = rowYFromIndex + this.Rows.SharedRow(index).GetMinimumHeight(index) - mouseBarOffset - 1;
			rectangle.Height = this.layout.Data.Y + this.layout.Data.Height - rowYFromIndex - 1;
			this.CaptureMouse(rectangle);
			this.dataGridViewOper[2] = true;
			this.trackRowAnchor = mouseY;
			this.trackRow = index;
			this.mouseBarOffset = mouseBarOffset;
			this.currentRowSplitBar = mouseY;
			base.Invalidate(this.CalcRowResizeFeedbackRect(this.currentRowSplitBar));
		}

		// Token: 0x06001A84 RID: 6788 RVA: 0x00061370 File Offset: 0x0005F570
		private void BuildInheritedColumnHeaderCellStyle(DataGridViewCellStyle inheritedCellStyle, DataGridViewCell cell)
		{
			DataGridViewCellStyle dataGridViewCellStyle = null;
			if (cell.HasStyle)
			{
				dataGridViewCellStyle = cell.Style;
			}
			DataGridViewCellStyle dataGridViewCellStyle2 = this.ColumnHeadersDefaultCellStyle;
			DataGridViewCellStyle dataGridViewCellStyle3 = this.DefaultCellStyle;
			if (dataGridViewCellStyle != null && !dataGridViewCellStyle.BackColor.IsEmpty)
			{
				inheritedCellStyle.BackColor = dataGridViewCellStyle.BackColor;
			}
			else if (!dataGridViewCellStyle2.BackColor.IsEmpty)
			{
				inheritedCellStyle.BackColor = dataGridViewCellStyle2.BackColor;
			}
			else
			{
				inheritedCellStyle.BackColor = dataGridViewCellStyle3.BackColor;
			}
			if (dataGridViewCellStyle != null && !dataGridViewCellStyle.ForeColor.IsEmpty)
			{
				inheritedCellStyle.ForeColor = dataGridViewCellStyle.ForeColor;
			}
			else if (!dataGridViewCellStyle2.ForeColor.IsEmpty)
			{
				inheritedCellStyle.ForeColor = dataGridViewCellStyle2.ForeColor;
			}
			else
			{
				inheritedCellStyle.ForeColor = dataGridViewCellStyle3.ForeColor;
			}
			if (dataGridViewCellStyle != null && !dataGridViewCellStyle.SelectionBackColor.IsEmpty)
			{
				inheritedCellStyle.SelectionBackColor = dataGridViewCellStyle.SelectionBackColor;
			}
			else if (!dataGridViewCellStyle2.SelectionBackColor.IsEmpty)
			{
				inheritedCellStyle.SelectionBackColor = dataGridViewCellStyle2.SelectionBackColor;
			}
			else
			{
				inheritedCellStyle.SelectionBackColor = dataGridViewCellStyle3.SelectionBackColor;
			}
			if (dataGridViewCellStyle != null && !dataGridViewCellStyle.SelectionForeColor.IsEmpty)
			{
				inheritedCellStyle.SelectionForeColor = dataGridViewCellStyle.SelectionForeColor;
			}
			else if (!dataGridViewCellStyle2.SelectionForeColor.IsEmpty)
			{
				inheritedCellStyle.SelectionForeColor = dataGridViewCellStyle2.SelectionForeColor;
			}
			else
			{
				inheritedCellStyle.SelectionForeColor = dataGridViewCellStyle3.SelectionForeColor;
			}
			if (dataGridViewCellStyle != null && dataGridViewCellStyle.Font != null)
			{
				inheritedCellStyle.Font = dataGridViewCellStyle.Font;
			}
			else if (dataGridViewCellStyle2.Font != null)
			{
				inheritedCellStyle.Font = dataGridViewCellStyle2.Font;
			}
			else
			{
				inheritedCellStyle.Font = dataGridViewCellStyle3.Font;
			}
			if (dataGridViewCellStyle != null && !dataGridViewCellStyle.IsNullValueDefault)
			{
				inheritedCellStyle.NullValue = dataGridViewCellStyle.NullValue;
			}
			else if (!dataGridViewCellStyle2.IsNullValueDefault)
			{
				inheritedCellStyle.NullValue = dataGridViewCellStyle2.NullValue;
			}
			else
			{
				inheritedCellStyle.NullValue = dataGridViewCellStyle3.NullValue;
			}
			if (dataGridViewCellStyle != null && !dataGridViewCellStyle.IsDataSourceNullValueDefault)
			{
				inheritedCellStyle.DataSourceNullValue = dataGridViewCellStyle.DataSourceNullValue;
			}
			else if (!dataGridViewCellStyle2.IsDataSourceNullValueDefault)
			{
				inheritedCellStyle.DataSourceNullValue = dataGridViewCellStyle2.DataSourceNullValue;
			}
			else
			{
				inheritedCellStyle.DataSourceNullValue = dataGridViewCellStyle3.DataSourceNullValue;
			}
			if (dataGridViewCellStyle != null && dataGridViewCellStyle.Format.Length != 0)
			{
				inheritedCellStyle.Format = dataGridViewCellStyle.Format;
			}
			else if (dataGridViewCellStyle2.Format.Length != 0)
			{
				inheritedCellStyle.Format = dataGridViewCellStyle2.Format;
			}
			else
			{
				inheritedCellStyle.Format = dataGridViewCellStyle3.Format;
			}
			if (dataGridViewCellStyle != null && !dataGridViewCellStyle.IsFormatProviderDefault)
			{
				inheritedCellStyle.FormatProvider = dataGridViewCellStyle.FormatProvider;
			}
			else if (!dataGridViewCellStyle2.IsFormatProviderDefault)
			{
				inheritedCellStyle.FormatProvider = dataGridViewCellStyle2.FormatProvider;
			}
			else
			{
				inheritedCellStyle.FormatProvider = dataGridViewCellStyle3.FormatProvider;
			}
			if (dataGridViewCellStyle != null && dataGridViewCellStyle.Alignment != DataGridViewContentAlignment.NotSet)
			{
				inheritedCellStyle.AlignmentInternal = dataGridViewCellStyle.Alignment;
			}
			else if (dataGridViewCellStyle2 != null && dataGridViewCellStyle2.Alignment != DataGridViewContentAlignment.NotSet)
			{
				inheritedCellStyle.AlignmentInternal = dataGridViewCellStyle2.Alignment;
			}
			else
			{
				inheritedCellStyle.AlignmentInternal = dataGridViewCellStyle3.Alignment;
			}
			if (dataGridViewCellStyle != null && dataGridViewCellStyle.WrapMode != DataGridViewTriState.NotSet)
			{
				inheritedCellStyle.WrapModeInternal = dataGridViewCellStyle.WrapMode;
			}
			else if (dataGridViewCellStyle2 != null && dataGridViewCellStyle2.WrapMode != DataGridViewTriState.NotSet)
			{
				inheritedCellStyle.WrapModeInternal = dataGridViewCellStyle2.WrapMode;
			}
			else
			{
				inheritedCellStyle.WrapModeInternal = dataGridViewCellStyle3.WrapMode;
			}
			if (dataGridViewCellStyle != null && dataGridViewCellStyle.Tag != null)
			{
				inheritedCellStyle.Tag = dataGridViewCellStyle.Tag;
			}
			else if (dataGridViewCellStyle2.Tag != null)
			{
				inheritedCellStyle.Tag = dataGridViewCellStyle2.Tag;
			}
			else
			{
				inheritedCellStyle.Tag = dataGridViewCellStyle3.Tag;
			}
			if (dataGridViewCellStyle != null && dataGridViewCellStyle.Padding != Padding.Empty)
			{
				inheritedCellStyle.PaddingInternal = dataGridViewCellStyle.Padding;
				return;
			}
			if (dataGridViewCellStyle2.Padding != Padding.Empty)
			{
				inheritedCellStyle.PaddingInternal = dataGridViewCellStyle2.Padding;
				return;
			}
			inheritedCellStyle.PaddingInternal = dataGridViewCellStyle3.Padding;
		}

		// Token: 0x06001A85 RID: 6789 RVA: 0x00061700 File Offset: 0x0005F900
		private Rectangle CalcColRelocationFeedbackRect(int mouseX)
		{
			Rectangle rectangle = this.layout.ColumnHeaders;
			if (this.layout.TopLeftHeader.Width > 0)
			{
				rectangle = Rectangle.Union(this.layout.TopLeftHeader, rectangle);
			}
			Rectangle rectangle2;
			if (this.RightToLeftInternal)
			{
				rectangle2 = new Rectangle(mouseX + this.mouseBarOffset - this.Columns[this.trackColumn].Thickness + 1, rectangle.Y, this.Columns[this.trackColumn].Thickness, rectangle.Height);
				rectangle2.X = Math.Max(rectangle.Left, rectangle2.X);
				rectangle2.X = Math.Min(rectangle2.X, rectangle.Right - rectangle2.Width);
			}
			else
			{
				rectangle2 = new Rectangle(mouseX + this.mouseBarOffset - 1, rectangle.Y, this.Columns[this.trackColumn].Thickness, rectangle.Height);
				rectangle2.X = Math.Min(rectangle.Right - rectangle2.Width, rectangle2.X);
				rectangle2.X = Math.Max(rectangle2.X, rectangle.Left);
			}
			return rectangle2;
		}

		// Token: 0x06001A86 RID: 6790 RVA: 0x00061848 File Offset: 0x0005FA48
		private Rectangle CalcColResizeFeedbackRect(int mouseX)
		{
			Rectangle data = this.layout.Data;
			Rectangle rectangle = new Rectangle(mouseX + this.mouseBarOffset - 1, data.Y, 3, data.Height);
			if (this.RightToLeftInternal)
			{
				rectangle.X = Math.Max(data.Left, rectangle.X);
			}
			else
			{
				rectangle.X = Math.Min(data.Right - 3, rectangle.X);
				rectangle.X = Math.Max(rectangle.X, 0);
			}
			return rectangle;
		}

		// Token: 0x06001A87 RID: 6791 RVA: 0x000618D8 File Offset: 0x0005FAD8
		private Rectangle CalcRowResizeFeedbackRect(int mouseY)
		{
			Rectangle data = this.layout.Data;
			Rectangle rectangle = new Rectangle(data.X, mouseY + this.mouseBarOffset - 1, data.Width, 3);
			rectangle.Y = Math.Min(data.Bottom - 3, rectangle.Y);
			rectangle.Y = Math.Max(rectangle.Y, 0);
			return rectangle;
		}

		/// <summary>Cancels edit mode for the currently selected cell and discards any changes.</summary>
		/// <returns>
		///   <see langword="true" /> if the cancel was successful; otherwise, <see langword="false" />.</returns>
		// Token: 0x06001A88 RID: 6792 RVA: 0x00061942 File Offset: 0x0005FB42
		public bool CancelEdit()
		{
			return this.CancelEdit(false);
		}

		// Token: 0x06001A89 RID: 6793 RVA: 0x0006194C File Offset: 0x0005FB4C
		private bool CancelEdit(bool endEdit)
		{
			if (this.ptCurrentCell.X != -1)
			{
				int x = this.ptCurrentCell.X;
				DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = this.CancelEditPrivate();
				if (dataGridViewDataErrorEventArgs != null)
				{
					if (dataGridViewDataErrorEventArgs.ThrowException)
					{
						throw dataGridViewDataErrorEventArgs.Exception;
					}
					if (dataGridViewDataErrorEventArgs.Cancel)
					{
						return false;
					}
				}
				if (this.IsCurrentCellInEditMode)
				{
					if (endEdit && this.EditMode != DataGridViewEditMode.EditOnEnter && this.editingControl != null)
					{
						bool flag = this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.InitialValueRestoration, DataGridView.DataGridViewValidateCellInternal.Never, false, false, false, false, false, true, true, true);
					}
					else
					{
						DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs2 = null;
						IDataGridViewEditingCell dataGridViewEditingCell = null;
						try
						{
							this.dataGridViewState1[512] = true;
							if (this.editingControl != null)
							{
								((IDataGridViewEditingControl)this.editingControl).EditingControlFormattedValue = this.uneditedFormattedValue;
								((IDataGridViewEditingControl)this.editingControl).EditingControlValueChanged = false;
							}
							else
							{
								dataGridViewEditingCell = this.CurrentCellInternal as IDataGridViewEditingCell;
								dataGridViewEditingCell.EditingCellFormattedValue = this.uneditedFormattedValue;
								dataGridViewEditingCell.EditingCellValueChanged = false;
							}
						}
						catch (Exception ex)
						{
							if (ClientUtils.IsCriticalException(ex))
							{
								throw;
							}
							dataGridViewDataErrorEventArgs2 = new DataGridViewDataErrorEventArgs(ex, this.ptCurrentCell.X, this.ptCurrentCell.Y, DataGridViewDataErrorContexts.InitialValueRestoration);
						}
						finally
						{
							this.dataGridViewState1[512] = false;
						}
						if (dataGridViewDataErrorEventArgs2 != null)
						{
							this.OnDataErrorInternal(dataGridViewDataErrorEventArgs2);
							if (dataGridViewDataErrorEventArgs2.ThrowException)
							{
								throw dataGridViewDataErrorEventArgs2.Exception;
							}
						}
						if (this.editingControl != null)
						{
							((IDataGridViewEditingControl)this.editingControl).PrepareEditingControlForEdit(true);
						}
						else
						{
							dataGridViewEditingCell.PrepareEditingCellForEdit(true);
							this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
						}
					}
				}
				else if (this.ptCurrentCell.X == -1 && this.Focused && this.Rows.Count > 0)
				{
					if (this.Columns.Count > x && this.Columns[x].Visible)
					{
						int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
						if (firstRow != -1)
						{
							bool flag2 = this.SetAndSelectCurrentCellAddress(x, firstRow, true, false, false, false, false);
						}
					}
					else
					{
						this.MakeFirstDisplayedCellCurrentCell(true);
					}
				}
			}
			return true;
		}

		// Token: 0x06001A8A RID: 6794 RVA: 0x00061B6C File Offset: 0x0005FD6C
		private DataGridViewDataErrorEventArgs CancelEditPrivate()
		{
			bool isCurrentCellDirty = this.IsCurrentCellDirty;
			bool isCurrentRowDirty = this.IsCurrentRowDirty;
			if (this.IsCurrentCellInEditMode)
			{
				if (this.editingControl != null)
				{
					((IDataGridViewEditingControl)this.editingControl).EditingControlValueChanged = false;
				}
				else
				{
					((IDataGridViewEditingCell)this.CurrentCellInternal).EditingCellValueChanged = false;
				}
				this.IsCurrentCellDirtyInternal = false;
			}
			if (this.DataSource != null || this.VirtualMode)
			{
				if ((isCurrentRowDirty && !isCurrentCellDirty) || (this.dataGridViewState1[524288] && !this.dataGridViewState1[262144]))
				{
					bool flag = this.dataGridViewState1[524288];
					this.IsCurrentRowDirtyInternal = false;
					if (this.VirtualMode)
					{
						QuestionEventArgs questionEventArgs = new QuestionEventArgs(flag);
						this.OnCancelRowEdit(questionEventArgs);
						flag &= questionEventArgs.Response;
					}
					if (this.DataSource != null)
					{
						int x = this.ptCurrentCell.X;
						this.dataConnection.CancelRowEdit(true, this.dataGridViewState1[524288]);
						if (this.dataConnection.List.Count == 0)
						{
							if (isCurrentCellDirty || this.ptCurrentCell.Y == -1 || this.ptCurrentCell.X == -1)
							{
								if (!this.IsColumnOutOfBounds(x) && this.Columns[x].Visible)
								{
									this.SetAndSelectCurrentCellAddress(x, 0, true, false, false, true, false);
								}
							}
							else
							{
								this.dataConnection.OnNewRowNeeded();
							}
						}
						flag = false;
					}
					if (this.ptCurrentCell.Y > -1)
					{
						this.InvalidateRowPrivate(this.ptCurrentCell.Y);
						DataGridViewCell currentCellInternal = this.CurrentCellInternal;
						if (this.IsCurrentCellInEditMode)
						{
							DataGridViewCellStyle inheritedStyle = currentCellInternal.GetInheritedStyle(null, this.ptCurrentCell.Y, true);
							if (this.editingControl != null)
							{
								this.InitializeEditingControlValue(ref inheritedStyle, currentCellInternal);
								if (((IDataGridViewEditingControl)this.editingControl).RepositionEditingControlOnValueChange)
								{
									this.PositionEditingControl(true, true, false);
								}
							}
							else
							{
								this.InitializeEditingCellValue(ref inheritedStyle, ref currentCellInternal);
							}
						}
					}
					if (flag && this.ptCurrentCell.Y == this.newRowIndex - 1)
					{
						this.DiscardNewRow();
					}
				}
			}
			else if (!this.IsCurrentRowDirty && this.ptCurrentCell.Y == this.newRowIndex - 1 && this.dataGridViewState1[2097152])
			{
				this.DiscardNewRow();
			}
			return null;
		}

		// Token: 0x06001A8B RID: 6795 RVA: 0x00061DB3 File Offset: 0x0005FFB3
		internal bool CancelToolTipPopup(ToolTip toolTip)
		{
			return this.toolTipControl.ToolTip != toolTip && string.IsNullOrEmpty(this.toolTipCaption) && this.ShowCellToolTips;
		}

		// Token: 0x06001A8C RID: 6796 RVA: 0x00061DDA File Offset: 0x0005FFDA
		private bool CanSort(DataGridViewColumn dataGridViewColumn)
		{
			return dataGridViewColumn.SortMode == DataGridViewColumnSortMode.Automatic && (!this.VirtualMode || dataGridViewColumn.IsDataBound);
		}

		// Token: 0x06001A8D RID: 6797 RVA: 0x00061DF7 File Offset: 0x0005FFF7
		private bool IsSortable(DataGridViewColumn dataGridViewColumn)
		{
			return dataGridViewColumn.SortMode != DataGridViewColumnSortMode.NotSortable && (!this.VirtualMode || dataGridViewColumn.IsDataBound);
		}

		// Token: 0x06001A8E RID: 6798 RVA: 0x00061E14 File Offset: 0x00060014
		private bool CanValidateDataBoundDataGridViewCell(DataGridViewCell dataGridViewCurrentCell)
		{
			if (dataGridViewCurrentCell == null && this.ptCurrentCell.X > -1)
			{
				dataGridViewCurrentCell = this.CurrentCellInternal;
			}
			return dataGridViewCurrentCell == null || !dataGridViewCurrentCell.OwningColumn.IsDataBoundInternal || (!this.dataGridViewOper[1048576] && (this.dataConnection == null || (!this.dataConnection.ProcessingMetaDataChanges && (!this.dataConnection.CancellingRowEdit || this.dataConnection.RestoreRow) && this.dataConnection.CurrencyManager.Count > this.ptCurrentCell.Y && !this.dataConnection.PositionChangingOutsideDataGridView && !this.dataConnection.ListWasReset)));
		}

		// Token: 0x06001A8F RID: 6799 RVA: 0x00061ED5 File Offset: 0x000600D5
		private void CaptureMouse(Rectangle cursorClip)
		{
			base.CaptureInternal = true;
			Cursor.ClipInternal = base.RectangleToScreen(cursorClip);
		}

		// Token: 0x06001A90 RID: 6800 RVA: 0x00061EEA File Offset: 0x000600EA
		private void ClearRegionCache()
		{
			this.cachedScrollableRegion = null;
		}

		/// <summary>Clears the current selection by unselecting all selected cells.</summary>
		// Token: 0x06001A91 RID: 6801 RVA: 0x00061EF4 File Offset: 0x000600F4
		public void ClearSelection()
		{
			this.noDimensionChangeCount++;
			this.noSelectionChangeCount++;
			bool flag = false;
			if (this.selectedBandIndexes.Count > 8 || this.individualSelectedCells.Count > 8)
			{
				this.inBulkPaintCount++;
				flag = true;
			}
			try
			{
				this.RemoveIndividuallySelectedCells();
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.FullRowSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
					while (this.selectedBandIndexes.Count > 0)
					{
						this.SetSelectedRowCore(this.selectedBandIndexes.HeadInt, false);
					}
					if (this.ptCurrentCell.X != -1 && this.SelectionMode == DataGridViewSelectionMode.FullRowSelect && AccessibilityImprovements.Level2)
					{
						this.InvalidateCellPrivate(this.ptCurrentCell.X, -1);
					}
					break;
				case DataGridViewSelectionMode.FullColumnSelect:
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					while (this.selectedBandIndexes.Count > 0)
					{
						this.SetSelectedColumnCore(this.selectedBandIndexes.HeadInt, false);
					}
					break;
				}
			}
			finally
			{
				this.noDimensionChangeCount--;
				int num = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num - 1;
				if (flag)
				{
					this.ExitBulkPaint(-1, -1);
				}
			}
		}

		/// <summary>Cancels the selection of all currently selected cells except the one indicated, optionally ensuring that the indicated cell is selected.</summary>
		/// <param name="columnIndexException">The column index to exclude.</param>
		/// <param name="rowIndexException">The row index to exclude.</param>
		/// <param name="selectExceptionElement">
		///   <see langword="true" /> to select the excluded cell, row, or column; <see langword="false" /> to retain its original state.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///   <paramref name="columnIndexException" /> is greater than the highest column index.  
		/// -or-  
		/// <paramref name="columnIndexException" /> is less than -1 when <see cref="P:System.Windows.Forms.DataGridView.SelectionMode" /> is <see cref="F:System.Windows.Forms.DataGridViewSelectionMode.FullRowSelect" />; otherwise, <paramref name="columnIndexException" /> is less than 0.  
		/// -or-  
		/// <paramref name="rowIndexException" /> is greater than the highest row index.  
		/// -or-  
		/// <paramref name="rowIndexException" /> is less than -1 when <see cref="P:System.Windows.Forms.DataGridView.SelectionMode" /> is <see cref="F:System.Windows.Forms.DataGridViewSelectionMode.FullColumnSelect" />; otherwise, <paramref name="rowIndexException" /> is less than 0.</exception>
		// Token: 0x06001A92 RID: 6802 RVA: 0x00062028 File Offset: 0x00060228
		protected void ClearSelection(int columnIndexException, int rowIndexException, bool selectExceptionElement)
		{
			switch (this.SelectionMode)
			{
			case DataGridViewSelectionMode.CellSelect:
			case DataGridViewSelectionMode.FullColumnSelect:
			case DataGridViewSelectionMode.ColumnHeaderSelect:
				if (columnIndexException < 0 || columnIndexException >= this.Columns.Count)
				{
					throw new ArgumentOutOfRangeException("columnIndexException");
				}
				break;
			case DataGridViewSelectionMode.FullRowSelect:
			case DataGridViewSelectionMode.RowHeaderSelect:
				if (columnIndexException < -1 || columnIndexException >= this.Columns.Count)
				{
					throw new ArgumentOutOfRangeException("columnIndexException");
				}
				break;
			}
			switch (this.SelectionMode)
			{
			case DataGridViewSelectionMode.CellSelect:
			case DataGridViewSelectionMode.FullRowSelect:
			case DataGridViewSelectionMode.RowHeaderSelect:
				if (rowIndexException < 0 || rowIndexException >= this.Rows.Count)
				{
					throw new ArgumentOutOfRangeException("rowIndexException");
				}
				break;
			case DataGridViewSelectionMode.FullColumnSelect:
			case DataGridViewSelectionMode.ColumnHeaderSelect:
				if (rowIndexException < -1 || rowIndexException >= this.Rows.Count)
				{
					throw new ArgumentOutOfRangeException("rowIndexException");
				}
				break;
			}
			this.noDimensionChangeCount++;
			this.noSelectionChangeCount++;
			bool flag = false;
			if (this.selectedBandIndexes.Count > 8 || this.individualSelectedCells.Count > 8)
			{
				this.inBulkPaintCount++;
				flag = true;
			}
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
					this.RemoveIndividuallySelectedCells(columnIndexException, rowIndexException);
					break;
				case DataGridViewSelectionMode.FullRowSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
				{
					int i = 0;
					while (i < this.selectedBandIndexes.Count)
					{
						if (this.selectedBandIndexes[i] != rowIndexException)
						{
							this.SetSelectedRowCore(this.selectedBandIndexes[i], false);
						}
						else
						{
							i++;
						}
					}
					if (this.SelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
					{
						this.RemoveIndividuallySelectedCells(columnIndexException, rowIndexException);
					}
					break;
				}
				case DataGridViewSelectionMode.FullColumnSelect:
				case DataGridViewSelectionMode.ColumnHeaderSelect:
				{
					int j = 0;
					while (j < this.selectedBandIndexes.Count)
					{
						if (this.selectedBandIndexes[j] != columnIndexException)
						{
							this.SetSelectedColumnCore(this.selectedBandIndexes[j], false);
						}
						else
						{
							j++;
						}
					}
					if (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)
					{
						this.RemoveIndividuallySelectedCells(columnIndexException, rowIndexException);
					}
					break;
				}
				}
				if (selectExceptionElement)
				{
					this.SetSelectedElementCore(columnIndexException, rowIndexException, true);
				}
			}
			finally
			{
				this.noDimensionChangeCount--;
				int num = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num - 1;
				if (flag)
				{
					this.ExitBulkPaint(-1, -1);
				}
			}
		}

		// Token: 0x06001A93 RID: 6803 RVA: 0x0006225C File Offset: 0x0006045C
		private bool ColumnEditable(int columnIndex)
		{
			return !this.Columns[columnIndex].IsDataBound || this.dataConnection == null || this.dataConnection.AllowEdit;
		}

		// Token: 0x06001A94 RID: 6804 RVA: 0x0006228C File Offset: 0x0006048C
		private bool ColumnNeedsDisplayedState(DataGridViewColumn dataGridViewColumn)
		{
			if (!dataGridViewColumn.Visible)
			{
				return false;
			}
			if (!dataGridViewColumn.Frozen)
			{
				int firstDisplayedScrollingCol = this.displayedBandsInfo.FirstDisplayedScrollingCol;
				if (firstDisplayedScrollingCol != -1)
				{
					if (firstDisplayedScrollingCol == dataGridViewColumn.Index)
					{
						return this.displayedBandsInfo.NumDisplayedScrollingCols > 0;
					}
					if (this.Columns.DisplayInOrder(firstDisplayedScrollingCol, dataGridViewColumn.Index))
					{
						return this.Columns.GetColumnCount(DataGridViewElementStates.Visible, firstDisplayedScrollingCol, dataGridViewColumn.Index) < this.displayedBandsInfo.NumDisplayedScrollingCols;
					}
				}
				return false;
			}
			DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			if (firstColumn.Index == dataGridViewColumn.Index)
			{
				return this.displayedBandsInfo.NumDisplayedFrozenCols > 0;
			}
			return this.Columns.GetColumnCount(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, firstColumn.Index, dataGridViewColumn.Index) < this.displayedBandsInfo.NumDisplayedFrozenCols;
		}

		// Token: 0x06001A95 RID: 6805 RVA: 0x0006235C File Offset: 0x0006055C
		private bool ColumnRelocationTarget(MouseEventArgs e, DataGridView.HitTestInfo hti, out int previousColumnIndex)
		{
			previousColumnIndex = -1;
			if (hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnHeadersResizeBottom || hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnHeader || hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeLeft || hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeRight || hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnHeaderLeft || hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnHeaderRight)
			{
				if (hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnHeadersResizeBottom || hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnHeader)
				{
					int columnXFromIndex = this.GetColumnXFromIndex(hti.col);
					int width = this.Columns[hti.col].Width;
					if ((this.RightToLeftInternal && e.X < columnXFromIndex - width / 2) || (!this.RightToLeftInternal && e.X > columnXFromIndex + width / 2))
					{
						previousColumnIndex = hti.col;
					}
					else
					{
						DataGridViewColumn previousColumn = this.Columns.GetPreviousColumn(this.Columns[hti.col], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
						if (previousColumn != null)
						{
							previousColumnIndex = previousColumn.Index;
						}
					}
				}
				else
				{
					previousColumnIndex = ((hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeRight || hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnHeaderRight) ? hti.col : hti.adjacentCol);
				}
				DataGridViewColumn dataGridViewColumn = null;
				if (previousColumnIndex != -1)
				{
					dataGridViewColumn = this.Columns.GetNextColumn(this.Columns[previousColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				}
				if (this.trackColumn != previousColumnIndex && (previousColumnIndex != -1 || hti.col != this.trackColumn) && (dataGridViewColumn == null || this.trackColumn != dataGridViewColumn.Index))
				{
					return true;
				}
			}
			else if ((hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.FirstColumnHeaderLeft || hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeRight) && hti.col != this.trackColumn)
			{
				return true;
			}
			return false;
		}

		// Token: 0x06001A96 RID: 6806 RVA: 0x000624DD File Offset: 0x000606DD
		private static bool ColumnsDisplayInOrder(int columnIndex1, int columnDisplayIndex1, int columnIndex2, int columnDisplayIndex2)
		{
			return columnDisplayIndex1 < columnDisplayIndex2 || (columnDisplayIndex1 == columnDisplayIndex2 && columnIndex1 < columnIndex2);
		}

		/// <summary>Commits changes in the current cell to the data cache without ending edit mode.</summary>
		/// <param name="context">A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewDataErrorContexts" /> values that specifies the context in which an error can occur.</param>
		/// <returns>
		///   <see langword="true" /> if the changes were committed; otherwise <see langword="false" />.</returns>
		/// <exception cref="T:System.Exception">The cell value could not be committed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />.</exception>
		// Token: 0x06001A97 RID: 6807 RVA: 0x000624F0 File Offset: 0x000606F0
		public bool CommitEdit(DataGridViewDataErrorContexts context)
		{
			if (this.IsCurrentCellInEditMode)
			{
				DataGridViewCell currentCellInternal = this.CurrentCellInternal;
				DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = this.CommitEdit(ref currentCellInternal, context, DataGridView.DataGridViewValidateCellInternal.Never, false, false, false, false, false);
				if (dataGridViewDataErrorEventArgs != null)
				{
					if (dataGridViewDataErrorEventArgs.ThrowException)
					{
						throw dataGridViewDataErrorEventArgs.Exception;
					}
					if (dataGridViewDataErrorEventArgs.Cancel)
					{
						return false;
					}
				}
			}
			return true;
		}

		// Token: 0x06001A98 RID: 6808 RVA: 0x0006253C File Offset: 0x0006073C
		private DataGridViewDataErrorEventArgs CommitEdit(ref DataGridViewCell dataGridViewCurrentCell, DataGridViewDataErrorContexts context, DataGridView.DataGridViewValidateCellInternal validateCell, bool fireCellLeave, bool fireCellEnter, bool fireRowLeave, bool fireRowEnter, bool fireLeave)
		{
			if (validateCell == DataGridView.DataGridViewValidateCellInternal.Always)
			{
				if (fireCellLeave)
				{
					if (this.ptCurrentCell.X == -1)
					{
						return null;
					}
					this.OnCellLeave(ref dataGridViewCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
				}
				if (fireRowLeave)
				{
					if (this.ptCurrentCell.X == -1)
					{
						return null;
					}
					this.OnRowLeave(ref dataGridViewCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
				}
				if (fireLeave)
				{
					base.OnLeave(EventArgs.Empty);
					if (this.ptCurrentCell.X > -1 && this.ptCurrentCell.Y > -1)
					{
						this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
					}
				}
				bool flag = this.CanValidateDataBoundDataGridViewCell(dataGridViewCurrentCell);
				if (flag)
				{
					if (this.ptCurrentCell.X == -1)
					{
						return null;
					}
					if (this.OnCellValidating(ref dataGridViewCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y, context))
					{
						if (fireRowEnter)
						{
							if (this.ptCurrentCell.X == -1)
							{
								return null;
							}
							this.OnRowEnter(ref dataGridViewCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y, true, true);
						}
						if (fireCellEnter)
						{
							if (this.ptCurrentCell.X == -1)
							{
								return null;
							}
							this.OnCellEnter(ref dataGridViewCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
						}
						if (this.ptCurrentCell.X == -1)
						{
							return null;
						}
						return new DataGridViewDataErrorEventArgs(null, this.ptCurrentCell.X, this.ptCurrentCell.Y, context)
						{
							Cancel = true
						};
					}
					else if (!this.IsCurrentCellInEditMode || !this.IsCurrentCellDirty)
					{
						if (this.ptCurrentCell.X == -1)
						{
							return null;
						}
						this.OnCellValidated(ref dataGridViewCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
					}
				}
			}
			if (this.ptCurrentCell.X == -1 || !this.IsCurrentCellInEditMode)
			{
				return null;
			}
			if (this.IsCurrentCellDirty)
			{
				bool flag2 = this.CanValidateDataBoundDataGridViewCell(dataGridViewCurrentCell);
				if (flag2)
				{
					if (validateCell == DataGridView.DataGridViewValidateCellInternal.WhenChanged)
					{
						if (this.ptCurrentCell.X == -1)
						{
							return null;
						}
						if (this.OnCellValidating(ref dataGridViewCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y, context))
						{
							if (this.ptCurrentCell.X == -1)
							{
								return null;
							}
							return new DataGridViewDataErrorEventArgs(null, this.ptCurrentCell.X, this.ptCurrentCell.Y, context)
							{
								Cancel = true
							};
						}
					}
					object obj;
					if (this.editingControl != null)
					{
						obj = ((IDataGridViewEditingControl)this.editingControl).GetEditingControlFormattedValue(context);
					}
					else
					{
						obj = ((IDataGridViewEditingCell)this.CurrentCellInternal).GetEditingCellFormattedValue(context);
					}
					Exception ex;
					if (!this.PushFormattedValue(ref dataGridViewCurrentCell, obj, out ex))
					{
						if (this.ptCurrentCell.X == -1)
						{
							return null;
						}
						DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = new DataGridViewDataErrorEventArgs(ex, this.ptCurrentCell.X, this.ptCurrentCell.Y, context);
						dataGridViewDataErrorEventArgs.Cancel = true;
						this.OnDataErrorInternal(dataGridViewDataErrorEventArgs);
						return dataGridViewDataErrorEventArgs;
					}
					else
					{
						if (!this.IsCurrentCellInEditMode)
						{
							return null;
						}
						this.uneditedFormattedValue = obj;
					}
				}
				if (this.editingControl != null)
				{
					((IDataGridViewEditingControl)this.editingControl).EditingControlValueChanged = false;
				}
				else
				{
					((IDataGridViewEditingCell)this.CurrentCellInternal).EditingCellValueChanged = false;
				}
				this.IsCurrentCellDirtyInternal = false;
				this.IsCurrentRowDirtyInternal = true;
				if (flag2 && (validateCell == DataGridView.DataGridViewValidateCellInternal.Always || validateCell == DataGridView.DataGridViewValidateCellInternal.WhenChanged))
				{
					if (this.ptCurrentCell.X == -1)
					{
						return null;
					}
					this.OnCellValidated(ref dataGridViewCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
				}
			}
			return null;
		}

		// Token: 0x06001A99 RID: 6809 RVA: 0x000628B8 File Offset: 0x00060AB8
		private bool CommitEdit(DataGridViewDataErrorContexts context, bool forCurrentCellChange, bool forCurrentRowChange)
		{
			if (this.dataGridViewOper[32768])
			{
				return false;
			}
			DataGridViewCell currentCellInternal = this.CurrentCellInternal;
			DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = this.CommitEdit(ref currentCellInternal, context, forCurrentCellChange ? DataGridView.DataGridViewValidateCellInternal.Always : DataGridView.DataGridViewValidateCellInternal.WhenChanged, forCurrentCellChange, forCurrentCellChange, forCurrentRowChange, forCurrentRowChange, false);
			if (dataGridViewDataErrorEventArgs != null)
			{
				if (dataGridViewDataErrorEventArgs.ThrowException)
				{
					throw dataGridViewDataErrorEventArgs.Exception;
				}
				if (dataGridViewDataErrorEventArgs.Cancel)
				{
					return false;
				}
				dataGridViewDataErrorEventArgs = this.CancelEditPrivate();
				if (dataGridViewDataErrorEventArgs != null)
				{
					if (dataGridViewDataErrorEventArgs.ThrowException)
					{
						throw dataGridViewDataErrorEventArgs.Exception;
					}
					if (dataGridViewDataErrorEventArgs.Cancel)
					{
						return false;
					}
				}
			}
			if (forCurrentRowChange && forCurrentCellChange)
			{
				if (this.ptCurrentCell.X == -1)
				{
					return false;
				}
				int x = this.ptCurrentCell.X;
				int y = this.ptCurrentCell.Y;
				if (this.OnRowValidating(ref currentCellInternal, x, y))
				{
					if (this.IsInnerCellOutOfBounds(x, y))
					{
						return false;
					}
					this.OnRowEnter(ref currentCellInternal, x, y, true, true);
					if (this.IsInnerCellOutOfBounds(x, y))
					{
						return false;
					}
					this.OnCellEnter(ref currentCellInternal, x, y);
					return false;
				}
				else
				{
					if (this.IsInnerCellOutOfBounds(x, y))
					{
						return false;
					}
					this.OnRowValidated(ref currentCellInternal, x, y);
				}
			}
			return true;
		}

		// Token: 0x06001A9A RID: 6810 RVA: 0x000629B8 File Offset: 0x00060BB8
		private bool CommitEditForOperation(int columnIndex, int rowIndex, bool forCurrentCellChange)
		{
			if (forCurrentCellChange)
			{
				if (!this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.CurrentCellChange, DataGridView.DataGridViewValidateCellInternal.Always, true, true, this.ptCurrentCell.Y != rowIndex, this.ptCurrentCell.Y != rowIndex, false, this.EditMode > DataGridViewEditMode.EditOnEnter, false, false))
				{
					return false;
				}
				if (this.ptCurrentCell.Y != rowIndex && this.ptCurrentCell.Y != -1)
				{
					DataGridViewCell dataGridViewCell = null;
					int x = this.ptCurrentCell.X;
					int y = this.ptCurrentCell.Y;
					if (this.OnRowValidating(ref dataGridViewCell, x, y))
					{
						if (this.IsInnerCellOutOfBounds(x, y))
						{
							return false;
						}
						this.OnRowEnter(ref dataGridViewCell, x, y, true, true);
						if (this.IsInnerCellOutOfBounds(x, y))
						{
							return false;
						}
						this.OnCellEnter(ref dataGridViewCell, x, y);
						if (this.IsInnerCellOutOfBounds(x, y))
						{
							return false;
						}
						if (this.Focused && !this.IsCurrentCellInEditMode && (this.EditMode == DataGridViewEditMode.EditOnEnter || (this.EditMode != DataGridViewEditMode.EditProgrammatically && this.CurrentCellInternal.EditType == null)))
						{
							this.BeginEditInternal(true);
						}
						return false;
					}
					else
					{
						if (this.IsInnerCellOutOfBounds(x, y))
						{
							return false;
						}
						this.OnRowValidated(ref dataGridViewCell, x, y);
					}
				}
			}
			else if (!this.CommitEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Scroll, false, this.ptCurrentCell.Y != rowIndex))
			{
				return false;
			}
			if (this.IsColumnOutOfBounds(columnIndex))
			{
				return false;
			}
			if (rowIndex >= this.Rows.Count)
			{
				int lastRow = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
				if (forCurrentCellChange && this.ptCurrentCell.X == -1 && lastRow != -1)
				{
					bool flag = this.SetAndSelectCurrentCellAddress(columnIndex, lastRow, true, false, false, false, false);
				}
				return false;
			}
			return rowIndex <= -1 || (this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Visible) != DataGridViewElementStates.None;
		}

		// Token: 0x06001A9B RID: 6811 RVA: 0x00062B6C File Offset: 0x00060D6C
		internal void CompleteCellsCollection(DataGridViewRow dataGridViewRow)
		{
			int count = dataGridViewRow.Cells.Count;
			if (this.Columns.Count > count)
			{
				int num = 0;
				DataGridViewCell[] array = new DataGridViewCell[this.Columns.Count - count];
				for (int i = count; i < this.Columns.Count; i++)
				{
					if (this.Columns[i].CellTemplate == null)
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_AColumnHasNoCellTemplate"));
					}
					DataGridViewCell dataGridViewCell = (DataGridViewCell)this.Columns[i].CellTemplate.Clone();
					array[num] = dataGridViewCell;
					num++;
				}
				dataGridViewRow.Cells.AddRange(array);
			}
		}

		// Token: 0x06001A9C RID: 6812 RVA: 0x00062C18 File Offset: 0x00060E18
		private int ComputeFirstVisibleScrollingColumn()
		{
			if (this.Columns.GetColumnsWidth(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible) >= this.layout.Data.Width)
			{
				this.negOffset = 0;
				return -1;
			}
			DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
			if (this.horizontalOffset == 0)
			{
				this.negOffset = 0;
				if (dataGridViewColumn != null)
				{
					return dataGridViewColumn.Index;
				}
				return -1;
			}
			else
			{
				int num = 0;
				while (dataGridViewColumn != null)
				{
					num += dataGridViewColumn.Thickness;
					if (num > this.horizontalOffset)
					{
						break;
					}
					dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				}
				if (dataGridViewColumn != null)
				{
					this.negOffset = dataGridViewColumn.Thickness - (num - this.horizontalOffset);
					return dataGridViewColumn.Index;
				}
				dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
				if (dataGridViewColumn == null)
				{
					this.negOffset = 0;
					return -1;
				}
				if (this.negOffset != this.horizontalOffset)
				{
					this.negOffset = 0;
				}
				return dataGridViewColumn.Index;
			}
		}

		// Token: 0x06001A9D RID: 6813 RVA: 0x00062CF8 File Offset: 0x00060EF8
		private int ComputeHeightOfFittingTrailingScrollingRows(int totalVisibleFrozenHeight)
		{
			int num = this.layout.Data.Height - totalVisibleFrozenHeight;
			int num2 = 0;
			int num3 = 0;
			int num4 = this.Rows.Count;
			if (num4 == 0 || num <= 0)
			{
				return 0;
			}
			num4--;
			DataGridViewElementStates rowState = this.Rows.GetRowState(num4);
			if ((rowState & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None)
			{
				return 0;
			}
			if ((rowState & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
			{
				num4 = this.Rows.GetPreviousRow(num4, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
			}
			if (num4 != -1)
			{
				num2 = this.Rows.SharedRow(num4).GetHeight(num4);
				if (num2 > num)
				{
					return num2;
				}
			}
			while (num4 != -1 && num3 + num2 <= num)
			{
				num3 += num2;
				num4 = this.Rows.GetPreviousRow(num4, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
				if (num4 != -1)
				{
					num2 = this.Rows.SharedRow(num4).GetHeight(num4);
				}
			}
			return num3;
		}

		// Token: 0x06001A9E RID: 6814 RVA: 0x00062DB8 File Offset: 0x00060FB8
		private int ComputeHeightOfScrolledOffRows()
		{
			int num = 0;
			if (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0)
			{
				int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
				if (num2 != -1)
				{
					while (num2 != this.displayedBandsInfo.FirstDisplayedScrollingRow)
					{
						num += this.Rows.SharedRow(num2).GetHeight(num2);
						num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
					}
				}
			}
			return num;
		}

		// Token: 0x06001A9F RID: 6815 RVA: 0x00062E20 File Offset: 0x00061020
		private int ComputeHeightOfTrailingScrollingRows()
		{
			if (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0)
			{
				int lastRow = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
				return this.Rows.GetRowsHeight(DataGridViewElementStates.Visible, this.displayedBandsInfo.FirstDisplayedScrollingRow, lastRow) + this.Rows.SharedRow(lastRow).GetHeight(lastRow);
			}
			return 0;
		}

		// Token: 0x06001AA0 RID: 6816 RVA: 0x00062E78 File Offset: 0x00061078
		private bool ComputeLayout()
		{
			this.ClearRegionCache();
			DataGridView.LayoutData layoutData = new DataGridView.LayoutData(this.layout);
			Rectangle resizeBoxRect = this.layout.ResizeBoxRect;
			if (this.normalClientRectangle.Width > 0 || this.normalClientRectangle.Height > 0)
			{
				layoutData.Inside = this.normalClientRectangle;
			}
			else
			{
				layoutData.Inside = base.ClientRectangle;
			}
			Rectangle inside = layoutData.Inside;
			int borderWidth = this.BorderWidth;
			inside.Inflate(-borderWidth, -borderWidth);
			if (inside.Height < 0)
			{
				inside.Height = 0;
			}
			if (inside.Width < 0)
			{
				inside.Width = 0;
			}
			Rectangle rectangle = inside;
			if (this.layout.ColumnHeadersVisible)
			{
				Rectangle rectangle2 = rectangle;
				rectangle2.Height = Math.Min(this.columnHeadersHeight, rectangle2.Height);
				rectangle.Y += rectangle2.Height;
				rectangle.Height -= rectangle2.Height;
				layoutData.ColumnHeaders = rectangle2;
			}
			else
			{
				layoutData.ColumnHeaders = Rectangle.Empty;
			}
			if (this.layout.RowHeadersVisible)
			{
				Rectangle rectangle3 = rectangle;
				rectangle3.Width = Math.Min(this.rowHeadersWidth, rectangle3.Width);
				if (this.RightToLeftInternal)
				{
					rectangle3.X += rectangle.Width - rectangle3.Width;
				}
				else
				{
					rectangle.X += rectangle3.Width;
				}
				rectangle.Width -= rectangle3.Width;
				layoutData.RowHeaders = rectangle3;
				if (this.layout.ColumnHeadersVisible)
				{
					Rectangle columnHeaders = layoutData.ColumnHeaders;
					Rectangle rectangle4 = columnHeaders;
					rectangle4.Width = Math.Min(this.rowHeadersWidth, rectangle4.Width);
					columnHeaders.Width -= rectangle4.Width;
					if (this.RightToLeftInternal)
					{
						rectangle4.X += rectangle.Width;
					}
					else
					{
						columnHeaders.X += rectangle4.Width;
					}
					layoutData.TopLeftHeader = rectangle4;
					layoutData.ColumnHeaders = columnHeaders;
				}
				else
				{
					layoutData.TopLeftHeader = Rectangle.Empty;
				}
			}
			else
			{
				layoutData.RowHeaders = Rectangle.Empty;
				layoutData.TopLeftHeader = Rectangle.Empty;
			}
			if (this.SingleVerticalBorderAdded)
			{
				if (!this.RightToLeftInternal)
				{
					int num = rectangle.X;
					rectangle.X = num + 1;
				}
				if (rectangle.Width > 0)
				{
					int num = rectangle.Width;
					rectangle.Width = num - 1;
				}
			}
			if (this.SingleHorizontalBorderAdded)
			{
				int num = rectangle.Y;
				rectangle.Y = num + 1;
				if (rectangle.Height > 0)
				{
					num = rectangle.Height;
					rectangle.Height = num - 1;
				}
			}
			layoutData.Data = rectangle;
			layoutData.Inside = inside;
			this.layout = layoutData;
			this.layout.dirty = false;
			bool flag = this.AdjustFillingColumns();
			this.layout = layoutData;
			this.LayoutScrollBars();
			if (!resizeBoxRect.Equals(this.layout.ResizeBoxRect) && !this.layout.ResizeBoxRect.IsEmpty)
			{
				base.Invalidate(this.layout.ResizeBoxRect);
			}
			return flag;
		}

		// Token: 0x06001AA1 RID: 6817 RVA: 0x000631B0 File Offset: 0x000613B0
		private void ComputeLayoutShortcut(bool computeVisibleRows)
		{
			if (computeVisibleRows)
			{
				this.ComputeVisibleRows();
			}
			if (this.vertScrollBar.Enabled)
			{
				int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Visible);
				int rowsHeight2 = this.Rows.GetRowsHeight(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				int value = this.vertScrollBar.Value;
				int num = Math.Max((this.vertScrollBar.Height - 2 * SystemInformation.VerticalScrollBarArrowHeight) * this.vertScrollBar.LargeChange / this.vertScrollBar.Maximum, 8);
				this.vertScrollBar.Maximum = rowsHeight - rowsHeight2;
				this.vertScrollBar.Value = this.ComputeHeightOfScrolledOffRows();
				this.vertScrollBar.LargeChange = this.layout.Data.Height - rowsHeight2;
				this.verticalOffset = this.vertScrollBar.Value;
				if (this.vertScrollBar.Visible && (value != this.verticalOffset || num != Math.Max((this.vertScrollBar.Height - 2 * SystemInformation.VerticalScrollBarArrowHeight) * this.vertScrollBar.LargeChange / this.vertScrollBar.Maximum, 8)))
				{
					this.vertScrollBar.Invalidate();
				}
			}
		}

		// Token: 0x06001AA2 RID: 6818 RVA: 0x000632D4 File Offset: 0x000614D4
		private void ComputeVisibleColumns()
		{
			int num = 0;
			int num2 = 0;
			int width = this.layout.Data.Width;
			int num3 = 0;
			int num4 = 0;
			int num5 = -1;
			int num6 = -1;
			int num7 = this.displayedBandsInfo.FirstDisplayedScrollingCol;
			if (width <= 0 || this.Columns.GetColumnCount(DataGridViewElementStates.Visible) == 0)
			{
				this.displayedBandsInfo.FirstDisplayedFrozenCol = -1;
				this.displayedBandsInfo.NumDisplayedFrozenCols = 0;
				this.displayedBandsInfo.FirstDisplayedScrollingCol = -1;
				this.displayedBandsInfo.NumDisplayedScrollingCols = 0;
				this.displayedBandsInfo.LastDisplayedFrozenCol = -1;
				this.displayedBandsInfo.LastTotallyDisplayedScrollingCol = -1;
				return;
			}
			DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.None);
			while (dataGridViewColumn != null && (dataGridViewColumn.Frozen || !dataGridViewColumn.Visible))
			{
				if (dataGridViewColumn.Visible)
				{
					if (num5 == -1)
					{
						num5 = dataGridViewColumn.Index;
					}
					num3 += dataGridViewColumn.Width;
					num4++;
					num6 = dataGridViewColumn.Index;
					if (num3 >= width)
					{
						break;
					}
				}
				dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.None, DataGridViewElementStates.None);
			}
			if (num3 < width && num7 >= 0)
			{
				dataGridViewColumn = this.Columns[num7];
				if (dataGridViewColumn.Frozen)
				{
					dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
					this.negOffset = 0;
					if (dataGridViewColumn == null)
					{
						this.displayedBandsInfo.FirstDisplayedFrozenCol = num5;
						this.displayedBandsInfo.LastDisplayedFrozenCol = num6;
						this.displayedBandsInfo.NumDisplayedFrozenCols = num4;
						this.displayedBandsInfo.FirstDisplayedScrollingCol = (this.displayedBandsInfo.LastTotallyDisplayedScrollingCol = -1);
						this.displayedBandsInfo.NumDisplayedScrollingCols = 0;
						return;
					}
					num7 = dataGridViewColumn.Index;
				}
				num3 -= this.negOffset;
				while (num3 < width && dataGridViewColumn != null)
				{
					num3 += dataGridViewColumn.Thickness;
					num2++;
					dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				}
				num = num2;
				if (num3 < width)
				{
					bool flag = false;
					if (this.negOffset > 0)
					{
						flag = true;
						if (width - num3 > this.negOffset)
						{
							num3 += this.negOffset;
							this.horizontalOffset -= this.negOffset;
							this.negOffset = 0;
						}
						else
						{
							this.horizontalOffset -= width - num3;
							this.negOffset -= width - num3;
							num3 = width;
						}
					}
					if (num3 < width && this.horizontalOffset > 0)
					{
						dataGridViewColumn = this.Columns.GetPreviousColumn(this.Columns[num7], DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
						while (dataGridViewColumn != null && num3 + dataGridViewColumn.Thickness <= width)
						{
							num3 += dataGridViewColumn.Thickness;
							num2++;
							flag = true;
							num7 = dataGridViewColumn.Index;
							this.horizontalOffset -= dataGridViewColumn.Thickness;
							dataGridViewColumn = this.Columns.GetPreviousColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
						}
					}
					if (num3 < width && this.horizontalOffset > 0 && num7 != 0)
					{
						dataGridViewColumn = this.Columns.GetPreviousColumn(this.Columns[num7], DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
						num7 = dataGridViewColumn.Index;
						this.negOffset = dataGridViewColumn.Thickness - width + num3;
						this.horizontalOffset -= width - num3;
						num2++;
						flag = true;
						num3 = width;
					}
					num = num2;
					if (flag)
					{
						this.InvalidateData();
						base.Invalidate(this.layout.ColumnHeaders);
					}
				}
				int num8 = num - 1;
				if (num3 > width)
				{
					num8--;
				}
				if (num8 < 0)
				{
					this.displayedBandsInfo.LastTotallyDisplayedScrollingCol = -1;
				}
				else
				{
					dataGridViewColumn = this.Columns[num7];
					for (int i = 0; i < num8; i++)
					{
						dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					}
					this.displayedBandsInfo.LastTotallyDisplayedScrollingCol = dataGridViewColumn.Index;
				}
			}
			else
			{
				this.displayedBandsInfo.LastTotallyDisplayedScrollingCol = -1;
			}
			this.displayedBandsInfo.FirstDisplayedFrozenCol = num5;
			this.displayedBandsInfo.LastDisplayedFrozenCol = num6;
			this.displayedBandsInfo.NumDisplayedFrozenCols = num4;
			this.displayedBandsInfo.FirstDisplayedScrollingCol = num7;
			this.displayedBandsInfo.NumDisplayedScrollingCols = num;
		}

		// Token: 0x06001AA3 RID: 6819 RVA: 0x000636B8 File Offset: 0x000618B8
		private void ComputeVisibleRows()
		{
			int num = -1;
			int num2 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
			int num3 = -1;
			int num4 = -1;
			int num5 = 0;
			int height = this.layout.Data.Height;
			int num6 = 0;
			int num7 = 0;
			int count = this.Rows.Count;
			if (height <= 0 || count == 0)
			{
				this.displayedBandsInfo.NumDisplayedFrozenRows = (this.displayedBandsInfo.NumTotallyDisplayedFrozenRows = (this.displayedBandsInfo.NumDisplayedScrollingRows = (this.displayedBandsInfo.NumTotallyDisplayedScrollingRows = 0)));
				this.displayedBandsInfo.FirstDisplayedFrozenRow = (this.displayedBandsInfo.FirstDisplayedScrollingRow = (this.displayedBandsInfo.LastDisplayedFrozenRow = (this.displayedBandsInfo.LastDisplayedScrollingRow = -1)));
				return;
			}
			int i;
			for (i = 0; i < count; i++)
			{
				DataGridViewElementStates rowState = this.Rows.GetRowState(i);
				if ((rowState & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None && (rowState & DataGridViewElementStates.Visible) != DataGridViewElementStates.None)
				{
					break;
				}
				if ((rowState & DataGridViewElementStates.Visible) != DataGridViewElementStates.None)
				{
					num6 += this.Rows.SharedRow(i).GetHeight(i);
					if (num == -1)
					{
						num = i;
					}
					num3 = i;
					if (num6 <= height)
					{
						num5++;
					}
					if (num6 >= height)
					{
						break;
					}
				}
			}
			if (num6 > height)
			{
				this.displayedBandsInfo.NumDisplayedFrozenRows = num5 + 1;
			}
			else
			{
				this.displayedBandsInfo.NumDisplayedFrozenRows = num5;
			}
			if (num6 < height && i < count)
			{
				if (num2 == -1)
				{
					num2 = i;
				}
				while (num2 < count && ((this.Rows.GetRowState(num2) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None || (this.Rows.GetRowState(num2) & DataGridViewElementStates.Visible) == DataGridViewElementStates.None))
				{
					num2++;
				}
				for (int j = num2; j < count; j++)
				{
					if ((this.Rows.GetRowState(j) & DataGridViewElementStates.Visible) != DataGridViewElementStates.None)
					{
						num6 += this.Rows.SharedRow(j).GetHeight(j);
						num7++;
						num4 = j;
					}
					if (num6 >= height)
					{
						break;
					}
				}
				if (num6 < height)
				{
					for (int k = num2 - 1; k >= num5; k--)
					{
						if ((this.Rows.GetRowState(k) & (DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible)) == DataGridViewElementStates.Visible)
						{
							int height2 = this.Rows.SharedRow(k).GetHeight(k);
							if (num6 + height2 > height)
							{
								break;
							}
							num6 += height2;
							num2 = k;
							num7++;
							num4 = k;
						}
					}
				}
				this.displayedBandsInfo.NumDisplayedScrollingRows = num7;
				if (num6 > height)
				{
					this.displayedBandsInfo.NumTotallyDisplayedScrollingRows = num7 - 1;
				}
				else
				{
					this.displayedBandsInfo.NumTotallyDisplayedScrollingRows = num7;
				}
				if (num7 == 0)
				{
					num2 = -1;
				}
			}
			else
			{
				this.displayedBandsInfo.NumDisplayedScrollingRows = (this.displayedBandsInfo.NumTotallyDisplayedScrollingRows = 0);
				num2 = -1;
			}
			this.displayedBandsInfo.FirstDisplayedFrozenRow = num;
			this.displayedBandsInfo.FirstDisplayedScrollingRow = num2;
			this.displayedBandsInfo.NumTotallyDisplayedFrozenRows = num5;
			this.displayedBandsInfo.LastDisplayedFrozenRow = num3;
			this.displayedBandsInfo.LastDisplayedScrollingRow = num4;
		}

		// Token: 0x06001AA4 RID: 6820 RVA: 0x00063994 File Offset: 0x00061B94
		private Point ConvertCellToGridCoord(int columnIndex, int rowIndex, int x, int y)
		{
			int num;
			if (columnIndex > -1)
			{
				num = this.GetColumnXFromIndex(columnIndex);
				if (this.RightToLeftInternal)
				{
					num -= this.Columns[columnIndex].Width;
				}
			}
			else if (this.RightToLeftInternal)
			{
				num = this.layout.RowHeaders.Left - 1;
			}
			else
			{
				num = this.layout.RowHeaders.Left;
			}
			int num2;
			if (rowIndex > -1)
			{
				num2 = this.GetRowYFromIndex(rowIndex);
			}
			else
			{
				num2 = this.layout.ColumnHeaders.Top;
			}
			return new Point(num + x, num2 + y);
		}

		// Token: 0x06001AA5 RID: 6821 RVA: 0x00063A24 File Offset: 0x00061C24
		private void CorrectColumnDisplayIndexesAfterDeletion(DataGridViewColumn dataGridViewColumn)
		{
			try
			{
				this.dataGridViewOper[2048] = true;
				foreach (object obj in this.Columns)
				{
					DataGridViewColumn dataGridViewColumn2 = (DataGridViewColumn)obj;
					if (dataGridViewColumn2.DisplayIndex > dataGridViewColumn.DisplayIndex)
					{
						dataGridViewColumn2.DisplayIndexInternal = dataGridViewColumn2.DisplayIndex - 1;
						dataGridViewColumn2.DisplayIndexHasChanged = true;
					}
				}
				this.FlushDisplayIndexChanged(true);
			}
			finally
			{
				this.dataGridViewOper[2048] = false;
				this.FlushDisplayIndexChanged(false);
			}
		}

		// Token: 0x06001AA6 RID: 6822 RVA: 0x00063AD8 File Offset: 0x00061CD8
		private void CorrectColumnDisplayIndexesAfterInsertion(DataGridViewColumn dataGridViewColumn)
		{
			try
			{
				this.dataGridViewOper[2048] = true;
				foreach (object obj in this.Columns)
				{
					DataGridViewColumn dataGridViewColumn2 = (DataGridViewColumn)obj;
					if (dataGridViewColumn2 != dataGridViewColumn && dataGridViewColumn2.DisplayIndex >= dataGridViewColumn.DisplayIndex)
					{
						dataGridViewColumn2.DisplayIndexInternal = dataGridViewColumn2.DisplayIndex + 1;
						dataGridViewColumn2.DisplayIndexHasChanged = true;
					}
				}
				this.FlushDisplayIndexChanged(true);
			}
			finally
			{
				this.dataGridViewOper[2048] = false;
				this.FlushDisplayIndexChanged(false);
			}
		}

		// Token: 0x06001AA7 RID: 6823 RVA: 0x00063B90 File Offset: 0x00061D90
		private void CorrectColumnFrozenState(DataGridViewColumn dataGridViewColumn, int anticipatedColumnIndex)
		{
			int num;
			if (dataGridViewColumn.DisplayIndex == -1 || dataGridViewColumn.DisplayIndex > this.Columns.Count)
			{
				num = anticipatedColumnIndex;
			}
			else
			{
				num = dataGridViewColumn.DisplayIndex;
			}
			int num2 = num - 1;
			DataGridViewColumn columnAtDisplayIndex;
			do
			{
				columnAtDisplayIndex = this.Columns.GetColumnAtDisplayIndex(num2);
				num2--;
			}
			while (num2 >= 0 && (columnAtDisplayIndex == null || !columnAtDisplayIndex.Visible));
			if (columnAtDisplayIndex != null && !columnAtDisplayIndex.Frozen && dataGridViewColumn.Frozen)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddFrozenColumn"));
			}
			num2 = num;
			DataGridViewColumn columnAtDisplayIndex2;
			do
			{
				columnAtDisplayIndex2 = this.Columns.GetColumnAtDisplayIndex(num2);
				num2++;
			}
			while (num2 < this.Columns.Count && (columnAtDisplayIndex2 == null || !columnAtDisplayIndex2.Visible));
			if (columnAtDisplayIndex2 != null && columnAtDisplayIndex2.Frozen && !dataGridViewColumn.Frozen)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddNonFrozenColumn"));
			}
		}

		// Token: 0x06001AA8 RID: 6824 RVA: 0x00063C5C File Offset: 0x00061E5C
		private void CorrectColumnFrozenStates(DataGridViewColumn[] dataGridViewColumns)
		{
			DataGridView dataGridView = new DataGridView();
			foreach (object obj in this.Columns)
			{
				DataGridViewColumn dataGridViewColumn = (DataGridViewColumn)obj;
				DataGridViewColumn dataGridViewColumn2 = (DataGridViewColumn)dataGridViewColumn.Clone();
				dataGridViewColumn2.DisplayIndex = dataGridViewColumn.DisplayIndex;
				dataGridView.Columns.Add(dataGridViewColumn2);
			}
			foreach (DataGridViewColumn dataGridViewColumn3 in dataGridViewColumns)
			{
				DataGridViewColumn dataGridViewColumn2 = (DataGridViewColumn)dataGridViewColumn3.Clone();
				dataGridViewColumn2.DisplayIndex = dataGridViewColumn3.DisplayIndex;
				dataGridView.Columns.Add(dataGridViewColumn2);
			}
		}

		// Token: 0x06001AA9 RID: 6825 RVA: 0x00063D20 File Offset: 0x00061F20
		private void CorrectColumnFrozenStates(DataGridViewColumn dataGridViewColumn, bool frozenStateChanging)
		{
			if ((dataGridViewColumn.Frozen && !frozenStateChanging) || (!dataGridViewColumn.Frozen && frozenStateChanging))
			{
				DataGridViewColumn dataGridViewColumn2 = this.Columns.GetPreviousColumn(dataGridViewColumn, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				if (dataGridViewColumn2 == null)
				{
					DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
					if (firstColumn != dataGridViewColumn)
					{
						dataGridViewColumn2 = firstColumn;
					}
				}
				while (dataGridViewColumn2 != null)
				{
					if (!this.Columns.DisplayInOrder(dataGridViewColumn2.Index, dataGridViewColumn.Index))
					{
						return;
					}
					dataGridViewColumn2.Frozen = true;
					dataGridViewColumn2 = this.Columns.GetNextColumn(dataGridViewColumn2, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
				}
			}
			else
			{
				DataGridViewColumn dataGridViewColumn2 = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
				if (dataGridViewColumn2 == null)
				{
					DataGridViewColumn dataGridViewColumn3 = dataGridViewColumn;
					do
					{
						dataGridViewColumn2 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
						if (dataGridViewColumn2 != null)
						{
							dataGridViewColumn3 = dataGridViewColumn2;
						}
					}
					while (dataGridViewColumn2 != null);
					if (dataGridViewColumn3 != dataGridViewColumn)
					{
						dataGridViewColumn2 = dataGridViewColumn3;
					}
				}
				while (dataGridViewColumn2 != null && this.Columns.DisplayInOrder(dataGridViewColumn.Index, dataGridViewColumn2.Index))
				{
					dataGridViewColumn2.Frozen = false;
					dataGridViewColumn2 = this.Columns.GetPreviousColumn(dataGridViewColumn2, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				}
			}
		}

		// Token: 0x06001AAA RID: 6826 RVA: 0x00063E10 File Offset: 0x00062010
		private void CorrectColumnFrozenStatesForMove(DataGridViewColumn dataGridViewColumn, int newDisplayIndex)
		{
			if (!dataGridViewColumn.Visible || (newDisplayIndex < dataGridViewColumn.DisplayIndex && dataGridViewColumn.Frozen) || (newDisplayIndex > dataGridViewColumn.DisplayIndex && !dataGridViewColumn.Frozen))
			{
				return;
			}
			int count = this.Columns.Count;
			if (newDisplayIndex < dataGridViewColumn.DisplayIndex)
			{
				int num = newDisplayIndex;
				DataGridViewColumn columnAtDisplayIndex;
				do
				{
					columnAtDisplayIndex = this.Columns.GetColumnAtDisplayIndex(num);
					num++;
				}
				while (num < count && (columnAtDisplayIndex == null || columnAtDisplayIndex == dataGridViewColumn || !columnAtDisplayIndex.Visible));
				if (columnAtDisplayIndex != null && columnAtDisplayIndex.Frozen)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotMoveNonFrozenColumn"));
				}
			}
			else
			{
				int num = newDisplayIndex;
				DataGridViewColumn columnAtDisplayIndex2;
				do
				{
					columnAtDisplayIndex2 = this.Columns.GetColumnAtDisplayIndex(num);
					num--;
				}
				while (num >= 0 && (columnAtDisplayIndex2 == null || !columnAtDisplayIndex2.Visible));
				if (columnAtDisplayIndex2 != null && !columnAtDisplayIndex2.Frozen)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotMoveFrozenColumn"));
				}
			}
		}

		// Token: 0x06001AAB RID: 6827 RVA: 0x00063EDC File Offset: 0x000620DC
		private void CorrectColumnIndexesAfterDeletion(DataGridViewColumn dataGridViewColumn)
		{
			for (int i = dataGridViewColumn.Index; i < this.Columns.Count; i++)
			{
				this.Columns[i].IndexInternal = this.Columns[i].Index - 1;
			}
		}

		// Token: 0x06001AAC RID: 6828 RVA: 0x00063F28 File Offset: 0x00062128
		private void CorrectColumnIndexesAfterInsertion(DataGridViewColumn dataGridViewColumn, int insertionCount)
		{
			for (int i = dataGridViewColumn.Index + insertionCount; i < this.Columns.Count; i++)
			{
				this.Columns[i].IndexInternal = i;
			}
		}

		// Token: 0x06001AAD RID: 6829 RVA: 0x00063F64 File Offset: 0x00062164
		private void CorrectFocus(bool onlyIfGridHasFocus)
		{
			if ((!onlyIfGridHasFocus || this.Focused) && this.editingControl != null)
			{
				this.editingControl.FocusInternal();
			}
		}

		// Token: 0x06001AAE RID: 6830 RVA: 0x00063F88 File Offset: 0x00062188
		private void CorrectRowFrozenState(DataGridViewRow dataGridViewRow, DataGridViewElementStates rowState, int anticipatedRowIndex)
		{
			int previousRow = this.Rows.GetPreviousRow(anticipatedRowIndex, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
			if (previousRow != -1 && (this.Rows.GetRowState(previousRow) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None && (rowState & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddFrozenRow"));
			}
			int nextRow = this.Rows.GetNextRow((previousRow == -1) ? (anticipatedRowIndex - 1) : previousRow, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
			if (nextRow != -1 && (this.Rows.GetRowState(nextRow) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None && (rowState & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddNonFrozenRow"));
			}
		}

		// Token: 0x06001AAF RID: 6831 RVA: 0x00064010 File Offset: 0x00062210
		private void CorrectRowFrozenStates(DataGridViewRow[] dataGridViewRows, int rowIndexInserted)
		{
			bool flag = false;
			bool flag2 = true;
			bool flag3 = false;
			int num = this.Rows.GetPreviousRow(rowIndexInserted, DataGridViewElementStates.Visible);
			if (num != -1)
			{
				flag2 = (this.Rows.GetRowState(num) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.Frozen;
			}
			num = this.Rows.GetNextRow(rowIndexInserted - 1, DataGridViewElementStates.Visible);
			if (num != -1)
			{
				flag = true;
				flag3 = (this.Rows.GetRowState(num) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.Frozen;
			}
			for (int i = 0; i < dataGridViewRows.Length; i++)
			{
				bool frozen = dataGridViewRows[i].Frozen;
				if (!flag2 && frozen)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddFrozenRow"));
				}
				flag2 = frozen;
				if (i == dataGridViewRows.Length - 1 && !frozen && flag && flag3)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddNonFrozenRow"));
				}
			}
		}

		// Token: 0x06001AB0 RID: 6832 RVA: 0x000640D4 File Offset: 0x000622D4
		private void CorrectRowFrozenStates(DataGridViewRow dataGridViewRow, int rowIndex, bool frozenStateChanging)
		{
			if (((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None && !frozenStateChanging) || ((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None && frozenStateChanging))
			{
				int num = this.Rows.GetPreviousRow(rowIndex, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				if (num == -1)
				{
					int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
					if (firstRow != rowIndex)
					{
						num = firstRow;
					}
				}
				while (num != -1)
				{
					if (num >= rowIndex)
					{
						return;
					}
					this.Rows.SetRowState(num, DataGridViewElementStates.Frozen, true);
					num = this.Rows.GetNextRow(num, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
				}
			}
			else
			{
				int num = this.Rows.GetNextRow(rowIndex, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
				if (num == -1)
				{
					int num2 = rowIndex;
					do
					{
						num = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
						if (num != -1)
						{
							num2 = num;
						}
					}
					while (num != -1);
					if (num2 != rowIndex)
					{
						num = num2;
					}
				}
				while (num != -1 && num > rowIndex)
				{
					this.Rows.SetRowState(num, DataGridViewElementStates.Frozen, false);
					num = this.Rows.GetPreviousRow(num, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				}
			}
		}

		// Token: 0x06001AB1 RID: 6833 RVA: 0x000641B8 File Offset: 0x000623B8
		private void CorrectRowIndexesAfterDeletion(int rowIndexDeleted)
		{
			int count = this.Rows.Count;
			for (int i = rowIndexDeleted; i < count; i++)
			{
				DataGridViewRow dataGridViewRow = this.Rows.SharedRow(i);
				if (dataGridViewRow.Index >= 0)
				{
					dataGridViewRow.IndexInternal = dataGridViewRow.Index - 1;
				}
			}
			if (this.newRowIndex == rowIndexDeleted)
			{
				this.newRowIndex = -1;
				return;
			}
			if (this.newRowIndex != -1)
			{
				this.newRowIndex--;
			}
		}

		// Token: 0x06001AB2 RID: 6834 RVA: 0x0006422C File Offset: 0x0006242C
		private void CorrectRowIndexesAfterInsertion(int rowIndexInserted, int insertionCount)
		{
			int count = this.Rows.Count;
			for (int i = rowIndexInserted + insertionCount; i < count; i++)
			{
				DataGridViewRow dataGridViewRow = this.Rows.SharedRow(i);
				if (dataGridViewRow.Index >= 0)
				{
					dataGridViewRow.IndexInternal = dataGridViewRow.Index + insertionCount;
				}
			}
			if (this.newRowIndex != -1)
			{
				this.newRowIndex += insertionCount;
			}
		}

		/// <summary>Creates a new accessible object for the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <returns>A new <see cref="T:System.Windows.Forms.DataGridView.DataGridViewAccessibleObject" /> for the <see cref="T:System.Windows.Forms.DataGridView" />.</returns>
		// Token: 0x06001AB3 RID: 6835 RVA: 0x0006428E File Offset: 0x0006248E
		protected override AccessibleObject CreateAccessibilityInstance()
		{
			return new DataGridView.DataGridViewAccessibleObject(this);
		}

		/// <summary>Creates and returns a new <see cref="T:System.Windows.Forms.Control.ControlCollection" /> that can be cast to type <see cref="T:System.Windows.Forms.DataGridView.DataGridViewControlCollection" />.</summary>
		/// <returns>An empty <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</returns>
		// Token: 0x06001AB4 RID: 6836 RVA: 0x00064296 File Offset: 0x00062496
		protected override Control.ControlCollection CreateControlsInstance()
		{
			return new DataGridView.DataGridViewControlCollection(this);
		}

		/// <summary>Creates and returns a new <see cref="T:System.Windows.Forms.DataGridViewColumnCollection" />.</summary>
		/// <returns>An empty <see cref="T:System.Windows.Forms.DataGridViewColumnCollection" />.</returns>
		// Token: 0x06001AB5 RID: 6837 RVA: 0x0006429E File Offset: 0x0006249E
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		protected virtual DataGridViewColumnCollection CreateColumnsInstance()
		{
			return new DataGridViewColumnCollection(this);
		}

		/// <summary>Creates and returns a new <see cref="T:System.Windows.Forms.DataGridViewRowCollection" />.</summary>
		/// <returns>An empty <see cref="T:System.Windows.Forms.DataGridViewRowCollection" />.</returns>
		// Token: 0x06001AB6 RID: 6838 RVA: 0x000642A6 File Offset: 0x000624A6
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		protected virtual DataGridViewRowCollection CreateRowsInstance()
		{
			return new DataGridViewRowCollection(this);
		}

		// Token: 0x06001AB7 RID: 6839 RVA: 0x000642B0 File Offset: 0x000624B0
		private NativeMethods.RECT[] CreateScrollableRegion(Rectangle scroll)
		{
			if (this.cachedScrollableRegion != null)
			{
				return this.cachedScrollableRegion;
			}
			using (Region region = new Region(scroll))
			{
				IntPtr intPtr = IntPtr.Zero;
				using (Graphics graphics = base.CreateGraphicsInternal())
				{
					intPtr = region.GetHrgn(graphics);
				}
				if (intPtr != IntPtr.Zero)
				{
					this.cachedScrollableRegion = UnsafeNativeMethods.GetRectsFromRegion(intPtr);
					IntSecurity.ObjectFromWin32Handle.Assert();
					try
					{
						region.ReleaseHrgn(intPtr);
					}
					finally
					{
						CodeAccessPermission.RevertAssert();
					}
				}
			}
			return this.cachedScrollableRegion;
		}

		// Token: 0x06001AB8 RID: 6840 RVA: 0x00064360 File Offset: 0x00062560
		private void DiscardNewRow()
		{
			DataGridViewRowCancelEventArgs dataGridViewRowCancelEventArgs = new DataGridViewRowCancelEventArgs(this.Rows[this.newRowIndex]);
			this.OnUserDeletingRow(dataGridViewRowCancelEventArgs);
			if (dataGridViewRowCancelEventArgs.Cancel)
			{
				return;
			}
			DataGridViewRow dataGridViewRow = this.Rows[this.newRowIndex];
			this.Rows.RemoveAtInternal(this.newRowIndex, false);
			DataGridViewRowEventArgs dataGridViewRowEventArgs = new DataGridViewRowEventArgs(dataGridViewRow);
			this.OnUserDeletedRow(dataGridViewRowEventArgs);
			if (this.AllowUserToAddRowsInternal)
			{
				this.newRowIndex = this.Rows.Count - 1;
				this.OnDefaultValuesNeeded(new DataGridViewRowEventArgs(this.Rows[this.newRowIndex]));
				this.InvalidateRowPrivate(this.newRowIndex);
			}
		}

		// Token: 0x06001AB9 RID: 6841 RVA: 0x0006440C File Offset: 0x0006260C
		private void DiscardZonesInScrollingArea(ref Rectangle rectScrollingArea, int emptyBackgroundWidth, int emptyBackgroundHeight, int frozenVisibleRowsHeight, bool discardFrozenColumns, bool discardFrozenRows)
		{
			rectScrollingArea.Width -= emptyBackgroundWidth;
			rectScrollingArea.Height -= emptyBackgroundHeight;
			if (this.RightToLeftInternal)
			{
				rectScrollingArea.X += emptyBackgroundWidth;
			}
			if (discardFrozenColumns)
			{
				int columnsWidth = this.Columns.GetColumnsWidth(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				if (!this.RightToLeftInternal)
				{
					rectScrollingArea.X += columnsWidth;
				}
				rectScrollingArea.Width -= columnsWidth;
			}
			if (discardFrozenRows)
			{
				rectScrollingArea.Y += frozenVisibleRowsHeight;
				rectScrollingArea.Height -= frozenVisibleRowsHeight;
			}
		}

		/// <summary>Returns the number of columns displayed to the user.</summary>
		/// <param name="includePartialColumns">
		///   <see langword="true" /> to include partial columns in the displayed column count; otherwise, <see langword="false" />.</param>
		/// <returns>The number of columns displayed to the user.</returns>
		// Token: 0x06001ABA RID: 6842 RVA: 0x000644A4 File Offset: 0x000626A4
		public int DisplayedColumnCount(bool includePartialColumns)
		{
			int width = this.layout.Data.Width;
			int num = 0;
			int num2 = 0;
			int num3 = 0;
			DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			while (dataGridViewColumn != null && num < width)
			{
				num3++;
				num += dataGridViewColumn.Thickness;
				if (num <= width)
				{
					num2++;
					dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				}
			}
			if (num < width && this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0)
			{
				if (this.negOffset > 0)
				{
					num -= this.negOffset;
					num2--;
				}
				dataGridViewColumn = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
				while (dataGridViewColumn != null && num < width)
				{
					num3++;
					num += dataGridViewColumn.Thickness;
					if (num <= width)
					{
						num2++;
						dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					}
				}
			}
			if (!includePartialColumns)
			{
				return num2;
			}
			return num3;
		}

		/// <summary>Returns the number of rows displayed to the user.</summary>
		/// <param name="includePartialRow">
		///   <see langword="true" /> to include partial rows in the displayed row count; otherwise, <see langword="false" />.</param>
		/// <returns>The number of rows displayed to the user.</returns>
		// Token: 0x06001ABB RID: 6843 RVA: 0x00064581 File Offset: 0x00062781
		public int DisplayedRowCount(bool includePartialRow)
		{
			if (!includePartialRow)
			{
				return this.displayedBandsInfo.NumTotallyDisplayedFrozenRows + this.displayedBandsInfo.NumTotallyDisplayedScrollingRows;
			}
			return this.displayedBandsInfo.NumDisplayedFrozenRows + this.displayedBandsInfo.NumDisplayedScrollingRows;
		}

		/// <summary>Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.Control" /> and its child controls and optionally releases the managed resources.</summary>
		/// <param name="disposing">
		///   <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
		// Token: 0x06001ABC RID: 6844 RVA: 0x000645B8 File Offset: 0x000627B8
		protected override void Dispose(bool disposing)
		{
			if (disposing)
			{
				this.dataGridViewOper[1048576] = true;
				try
				{
					for (int i = 0; i < this.Columns.Count; i++)
					{
						this.Columns[i].Dispose();
					}
					this.Columns.Clear();
					this.UnwireScrollBarsEvents();
					if (this.vertScrollBar != null)
					{
						this.vertScrollBar.Dispose();
						this.vertScrollBar = null;
					}
					if (this.horizScrollBar != null)
					{
						this.horizScrollBar.Dispose();
						this.horizScrollBar = null;
					}
					if (this.pens != null)
					{
						int count = this.pens.Count;
						if (count > 0)
						{
							foreach (object obj in this.pens.Values)
							{
								Pen pen = (Pen)obj;
								pen.Dispose();
							}
							this.pens.Clear();
						}
						this.pens = null;
					}
					if (this.brushes != null)
					{
						int count2 = this.brushes.Count;
						if (count2 > 0)
						{
							foreach (object obj2 in this.brushes.Values)
							{
								SolidBrush solidBrush = (SolidBrush)obj2;
								solidBrush.Dispose();
							}
							this.brushes.Clear();
						}
						this.brushes = null;
					}
					if (this.placeholderStringFormat != null)
					{
						this.placeholderStringFormat.Dispose();
						this.placeholderStringFormat = null;
					}
					if (this.latestEditingControl != null)
					{
						this.latestEditingControl.Dispose();
						this.latestEditingControl = null;
					}
					if (this.editingControl != null)
					{
						this.editingControl.Dispose();
						this.editingControl = null;
					}
					if (this.editingPanel != null)
					{
						this.editingPanel.Dispose();
						this.editingPanel = null;
					}
					if (this.gridPen != null)
					{
						this.gridPen.Dispose();
						this.gridPen = null;
					}
					if (this.dataConnection != null)
					{
						this.dataConnection.Dispose();
					}
					this.toolTipControl.Dispose();
				}
				finally
				{
					this.dataGridViewOper[1048576] = false;
				}
			}
			base.Dispose(disposing);
		}

		// Token: 0x06001ABD RID: 6845 RVA: 0x00064834 File Offset: 0x00062A34
		private void DrawColHeaderShadow(Graphics g, int mouseX)
		{
			Rectangle rectangle = this.CalcColRelocationFeedbackRect(mouseX);
			this.DrawShadowRect(rectangle);
			if (this.dataGridViewState2[1024])
			{
				Rectangle rectangle2 = new Rectangle(0, this.layout.ColumnHeaders.Top, 3, this.layout.ColumnHeaders.Height);
				if (this.trackColumnEdge == -1)
				{
					rectangle2.X = this.GetColumnXFromIndex(this.Columns.GetFirstColumn(DataGridViewElementStates.Visible).Index);
					if (this.RightToLeftInternal)
					{
						rectangle2.X -= 3;
					}
				}
				else
				{
					int num = 0;
					if (this.Columns.GetNextColumn(this.Columns[this.trackColumnEdge], DataGridViewElementStates.Visible, DataGridViewElementStates.None) == null)
					{
						if (!this.RightToLeftInternal)
						{
							num = 3;
						}
					}
					else if (this.RightToLeftInternal)
					{
						num = 0;
					}
					else
					{
						num = 2;
					}
					if (this.RightToLeftInternal)
					{
						rectangle2.X = Math.Max(this.layout.ColumnHeaders.X, this.GetColumnXFromIndex(this.trackColumnEdge) - this.Columns[this.trackColumnEdge].Width - num);
					}
					else
					{
						rectangle2.X = Math.Min(this.GetColumnXFromIndex(this.trackColumnEdge) + this.Columns[this.trackColumnEdge].Width - num, this.layout.ColumnHeaders.Right - 3);
					}
				}
				if (this.ApplyVisualStylesToHeaderCells)
				{
					g.FillRectangle(this.GetCachedBrush(SystemColors.HotTrack), rectangle2);
					return;
				}
				ControlPaint.FillReversibleRectangle(base.RectangleToScreen(rectangle2), Color.White);
			}
		}

		// Token: 0x06001ABE RID: 6846 RVA: 0x000649CC File Offset: 0x00062BCC
		private void DrawColSplitBar(int mouseX)
		{
			Rectangle rectangle = this.CalcColResizeFeedbackRect(mouseX);
			this.DrawSplitBar(rectangle);
		}

		// Token: 0x06001ABF RID: 6847 RVA: 0x000649E8 File Offset: 0x00062BE8
		private void DrawRowSplitBar(int mouseY)
		{
			Rectangle rectangle = this.CalcRowResizeFeedbackRect(mouseY);
			this.DrawSplitBar(rectangle);
		}

		// Token: 0x06001AC0 RID: 6848 RVA: 0x00064A04 File Offset: 0x00062C04
		private void DrawShadowRect(Rectangle r)
		{
			IntPtr handle = base.Handle;
			IntPtr dcex = UnsafeNativeMethods.GetDCEx(new HandleRef(this, handle), NativeMethods.NullHandleRef, 1026);
			IntPtr intPtr = ControlPaint.CreateHalftoneHBRUSH();
			IntPtr intPtr2 = SafeNativeMethods.SelectObject(new HandleRef(this, dcex), new HandleRef(null, intPtr));
			SafeNativeMethods.PatBlt(new HandleRef(this, dcex), r.X, r.Y, r.Width, 3, 5898313);
			SafeNativeMethods.PatBlt(new HandleRef(this, dcex), r.X, r.Y + r.Height - 3, r.Width, 3, 5898313);
			SafeNativeMethods.PatBlt(new HandleRef(this, dcex), r.X, r.Y + 3, 3, r.Height - 6, 5898313);
			SafeNativeMethods.PatBlt(new HandleRef(this, dcex), r.X + r.Width - 3, r.Y + 3, 3, r.Height - 6, 5898313);
			SafeNativeMethods.SelectObject(new HandleRef(this, dcex), new HandleRef(null, intPtr2));
			SafeNativeMethods.DeleteObject(new HandleRef(null, intPtr));
			UnsafeNativeMethods.ReleaseDC(new HandleRef(this, handle), new HandleRef(this, dcex));
		}

		// Token: 0x06001AC1 RID: 6849 RVA: 0x00064B3C File Offset: 0x00062D3C
		private void DrawSplitBar(Rectangle r)
		{
			IntPtr handle = base.Handle;
			IntPtr dcex = UnsafeNativeMethods.GetDCEx(new HandleRef(this, handle), NativeMethods.NullHandleRef, 1026);
			IntPtr intPtr = ControlPaint.CreateHalftoneHBRUSH();
			IntPtr intPtr2 = SafeNativeMethods.SelectObject(new HandleRef(this, dcex), new HandleRef(null, intPtr));
			SafeNativeMethods.PatBlt(new HandleRef(this, dcex), r.X, r.Y, r.Width, r.Height, 5898313);
			SafeNativeMethods.SelectObject(new HandleRef(this, dcex), new HandleRef(null, intPtr2));
			SafeNativeMethods.DeleteObject(new HandleRef(null, intPtr));
			UnsafeNativeMethods.ReleaseDC(new HandleRef(this, handle), new HandleRef(this, dcex));
		}

		// Token: 0x06001AC2 RID: 6850 RVA: 0x00064BE4 File Offset: 0x00062DE4
		private void EditingControls_CommonMouseEventHandler(object sender, MouseEventArgs e, DataGridView.DataGridViewMouseEvent dgvme)
		{
			int num = this.editingPanel.Location.X + e.X;
			int num2 = this.editingPanel.Location.Y + e.Y;
			if (sender == this.editingControl)
			{
				num += this.editingControl.Location.X;
				num2 += this.editingControl.Location.Y;
			}
			if (dgvme == DataGridView.DataGridViewMouseEvent.MouseDown && e.Clicks == 1)
			{
				this.dataGridViewOper[4096] = false;
			}
			MouseEventArgs mouseEventArgs = new MouseEventArgs(e.Button, e.Clicks, num, num2, e.Delta);
			DataGridView.HitTestInfo hitTestInfo = this.HitTest(mouseEventArgs.X, mouseEventArgs.Y);
			int num3 = mouseEventArgs.X - hitTestInfo.ColumnX;
			if (this.RightToLeftInternal)
			{
				num3 += ((hitTestInfo.col == -1) ? this.RowHeadersWidth : this.Columns[hitTestInfo.col].Thickness);
			}
			DataGridViewCellMouseEventArgs dataGridViewCellMouseEventArgs = new DataGridViewCellMouseEventArgs(hitTestInfo.col, hitTestInfo.row, num3, mouseEventArgs.Y - hitTestInfo.RowY, mouseEventArgs);
			try
			{
				this.dataGridViewState2[134217728] = true;
				if ((dgvme == DataGridView.DataGridViewMouseEvent.MouseDown || dgvme == DataGridView.DataGridViewMouseEvent.Click || dgvme == DataGridView.DataGridViewMouseEvent.MouseClick) && (DateTime.Now.Ticks - this.lastMouseClickInfo.timeStamp) / 10000L <= (long)SystemInformation.DoubleClickTime && e.Button == this.lastMouseClickInfo.button && e.Clicks == 1 && dataGridViewCellMouseEventArgs.ColumnIndex == this.lastMouseClickInfo.col && dataGridViewCellMouseEventArgs.RowIndex == this.lastMouseClickInfo.row)
				{
					Size doubleClickSize = SystemInformation.DoubleClickSize;
					if (Math.Abs(dataGridViewCellMouseEventArgs.X - this.lastMouseClickInfo.x) <= doubleClickSize.Width / 2 && Math.Abs(dataGridViewCellMouseEventArgs.Y - this.lastMouseClickInfo.y) <= doubleClickSize.Height / 2)
					{
						mouseEventArgs = new MouseEventArgs(e.Button, 2, num, num2, e.Delta);
						dataGridViewCellMouseEventArgs = new DataGridViewCellMouseEventArgs(dataGridViewCellMouseEventArgs.ColumnIndex, dataGridViewCellMouseEventArgs.RowIndex, dataGridViewCellMouseEventArgs.X, dataGridViewCellMouseEventArgs.Y, mouseEventArgs);
						switch (dgvme)
						{
						case DataGridView.DataGridViewMouseEvent.Click:
							this.OnDoubleClick(mouseEventArgs);
							if (e.Button == MouseButtons.Left && dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
							{
								this.OnCellDoubleClick(new DataGridViewCellEventArgs(dataGridViewCellMouseEventArgs.ColumnIndex, dataGridViewCellMouseEventArgs.RowIndex));
							}
							break;
						case DataGridView.DataGridViewMouseEvent.MouseClick:
							this.dataGridViewOper[4096] = true;
							this.OnMouseDoubleClick(mouseEventArgs);
							if (dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
							{
								this.OnCellMouseDoubleClick(dataGridViewCellMouseEventArgs);
							}
							break;
						case DataGridView.DataGridViewMouseEvent.MouseDown:
							this.OnMouseDown(mouseEventArgs);
							if (dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
							{
								this.OnCellMouseDown(dataGridViewCellMouseEventArgs);
							}
							break;
						}
						return;
					}
				}
				if (this.dataGridViewOper[4096])
				{
					if (e.Clicks == 2)
					{
						mouseEventArgs = new MouseEventArgs(e.Button, 1, num, num2, e.Delta);
						dataGridViewCellMouseEventArgs = new DataGridViewCellMouseEventArgs(hitTestInfo.col, hitTestInfo.row, num3, mouseEventArgs.Y - hitTestInfo.RowY, mouseEventArgs);
					}
					if (dgvme != DataGridView.DataGridViewMouseEvent.DoubleClick)
					{
						if (dgvme == DataGridView.DataGridViewMouseEvent.MouseDoubleClick)
						{
							dgvme = DataGridView.DataGridViewMouseEvent.MouseClick;
						}
					}
					else
					{
						dgvme = DataGridView.DataGridViewMouseEvent.Click;
					}
				}
				switch (dgvme)
				{
				case DataGridView.DataGridViewMouseEvent.Click:
					this.OnClick(mouseEventArgs);
					if (e.Button == MouseButtons.Left && dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
					{
						this.OnCellClick(new DataGridViewCellEventArgs(dataGridViewCellMouseEventArgs.ColumnIndex, dataGridViewCellMouseEventArgs.RowIndex));
					}
					break;
				case DataGridView.DataGridViewMouseEvent.DoubleClick:
					this.OnDoubleClick(mouseEventArgs);
					if (e.Button == MouseButtons.Left && dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
					{
						this.OnCellDoubleClick(new DataGridViewCellEventArgs(dataGridViewCellMouseEventArgs.ColumnIndex, dataGridViewCellMouseEventArgs.RowIndex));
					}
					break;
				case DataGridView.DataGridViewMouseEvent.MouseClick:
					this.OnMouseClick(mouseEventArgs);
					if (dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
					{
						this.OnCellMouseClick(dataGridViewCellMouseEventArgs);
					}
					break;
				case DataGridView.DataGridViewMouseEvent.MouseDoubleClick:
					this.OnMouseDoubleClick(mouseEventArgs);
					if (dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
					{
						this.OnCellMouseDoubleClick(dataGridViewCellMouseEventArgs);
					}
					break;
				case DataGridView.DataGridViewMouseEvent.MouseDown:
					this.OnMouseDown(mouseEventArgs);
					if (dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
					{
						this.OnCellMouseDown(dataGridViewCellMouseEventArgs);
					}
					break;
				case DataGridView.DataGridViewMouseEvent.MouseUp:
					if (this.dataGridViewState2[8388608])
					{
						MouseEventArgs mouseEventArgs2 = new MouseEventArgs(e.Button, 2, num, num2, e.Delta);
						dataGridViewCellMouseEventArgs = new DataGridViewCellMouseEventArgs(dataGridViewCellMouseEventArgs.ColumnIndex, dataGridViewCellMouseEventArgs.RowIndex, dataGridViewCellMouseEventArgs.X, dataGridViewCellMouseEventArgs.Y, mouseEventArgs2);
					}
					this.OnCellMouseUp(dataGridViewCellMouseEventArgs);
					this.OnMouseUp(mouseEventArgs);
					break;
				case DataGridView.DataGridViewMouseEvent.MouseMove:
					this.OnCellMouseMove(dataGridViewCellMouseEventArgs);
					break;
				}
			}
			finally
			{
				this.dataGridViewState2[134217728] = false;
			}
		}

		// Token: 0x06001AC3 RID: 6851 RVA: 0x000651E8 File Offset: 0x000633E8
		private void EditingControls_Click(object sender, EventArgs e)
		{
			MouseEventArgs mouseEventArgs = e as MouseEventArgs;
			if (mouseEventArgs != null)
			{
				this.EditingControls_CommonMouseEventHandler(sender, mouseEventArgs, DataGridView.DataGridViewMouseEvent.Click);
			}
		}

		// Token: 0x06001AC4 RID: 6852 RVA: 0x00065208 File Offset: 0x00063408
		private void EditingControls_DoubleClick(object sender, EventArgs e)
		{
			MouseEventArgs mouseEventArgs = e as MouseEventArgs;
			if (mouseEventArgs != null)
			{
				this.EditingControls_CommonMouseEventHandler(sender, mouseEventArgs, DataGridView.DataGridViewMouseEvent.DoubleClick);
			}
		}

		// Token: 0x06001AC5 RID: 6853 RVA: 0x00065228 File Offset: 0x00063428
		private void EditingControls_MouseClick(object sender, MouseEventArgs e)
		{
			this.EditingControls_CommonMouseEventHandler(sender, e, DataGridView.DataGridViewMouseEvent.MouseClick);
		}

		// Token: 0x06001AC6 RID: 6854 RVA: 0x00065233 File Offset: 0x00063433
		private void EditingControls_MouseDoubleClick(object sender, MouseEventArgs e)
		{
			this.EditingControls_CommonMouseEventHandler(sender, e, DataGridView.DataGridViewMouseEvent.MouseDoubleClick);
		}

		// Token: 0x06001AC7 RID: 6855 RVA: 0x0006523E File Offset: 0x0006343E
		private void EditingControls_MouseDown(object sender, MouseEventArgs e)
		{
			this.EditingControls_CommonMouseEventHandler(sender, e, DataGridView.DataGridViewMouseEvent.MouseDown);
		}

		// Token: 0x06001AC8 RID: 6856 RVA: 0x0006524C File Offset: 0x0006344C
		private void EditingControls_MouseEnter(object sender, EventArgs e)
		{
			if (sender == this.editingPanel)
			{
				this.dataGridViewState1[16777216] = true;
				this.oldCursor = this.Cursor;
				this.CursorInternal = ((IDataGridViewEditingControl)this.editingControl).EditingPanelCursor;
			}
			if (this.dataGridViewState2[32])
			{
				this.OnMouseEnter(EventArgs.Empty);
			}
			this.UpdateMouseEnteredCell(null, null);
		}

		// Token: 0x06001AC9 RID: 6857 RVA: 0x000652B8 File Offset: 0x000634B8
		private void EditingControls_MouseLeave(object sender, EventArgs e)
		{
			if (sender == this.editingPanel && this.dataGridViewState1[16777216])
			{
				this.dataGridViewState1[16777216] = false;
				this.CursorInternal = this.oldCursor;
			}
			this.UpdateMouseEnteredCell(null, null);
			Point point = base.PointToClient(Control.MousePosition);
			if (!base.ClientRectangle.Contains(point))
			{
				this.OnMouseLeave(EventArgs.Empty);
			}
		}

		// Token: 0x06001ACA RID: 6858 RVA: 0x0006532D File Offset: 0x0006352D
		private void EditingControls_MouseMove(object sender, MouseEventArgs e)
		{
			this.EditingControls_CommonMouseEventHandler(sender, e, DataGridView.DataGridViewMouseEvent.MouseMove);
		}

		// Token: 0x06001ACB RID: 6859 RVA: 0x00065338 File Offset: 0x00063538
		private void EditingControls_MouseUp(object sender, MouseEventArgs e)
		{
			this.EditingControls_CommonMouseEventHandler(sender, e, DataGridView.DataGridViewMouseEvent.MouseUp);
		}

		// Token: 0x06001ACC RID: 6860 RVA: 0x00065344 File Offset: 0x00063544
		private void EndColumnHeadersResize(MouseEventArgs e)
		{
			try
			{
				if (this.currentRowSplitBar != -1)
				{
					base.Invalidate(this.CalcRowResizeFeedbackRect(this.currentRowSplitBar), true);
					this.lastRowSplitBar = (this.currentRowSplitBar = -1);
				}
				int num = Math.Min(e.Y + this.mouseBarOffset, this.layout.Data.Bottom - 1);
				int num2 = num - this.layout.ColumnHeaders.Y - this.ColumnHeadersHeight + 1;
				if (this.trackRowAnchor != num && num2 != 0)
				{
					this.ColumnHeadersHeight += num2;
				}
			}
			finally
			{
				this.RealeaseMouse();
			}
		}

		// Token: 0x06001ACD RID: 6861 RVA: 0x000653F4 File Offset: 0x000635F4
		private void EndColumnRelocation(MouseEventArgs e, DataGridView.HitTestInfo hti)
		{
			try
			{
				if (this.lastHeaderShadow != -1)
				{
					this.dataGridViewState2[1024] = false;
					this.trackColumnEdge = -1;
					this.lastHeaderShadow = -1;
					base.Invalidate(Rectangle.Union(this.layout.TopLeftHeader, this.layout.ColumnHeaders));
				}
				int num;
				if (this.ColumnRelocationTarget(e, hti, out num))
				{
					if (num == -1)
					{
						this.Columns[this.trackColumn].DisplayIndex = 0;
					}
					else if (this.Columns[this.trackColumn].DisplayIndex > this.Columns[num].DisplayIndex)
					{
						this.Columns[this.trackColumn].DisplayIndex = this.Columns[num].DisplayIndex + 1;
					}
					else
					{
						this.Columns[this.trackColumn].DisplayIndex = this.Columns[num].DisplayIndex;
					}
				}
			}
			finally
			{
				this.RealeaseMouse();
			}
		}

		// Token: 0x06001ACE RID: 6862 RVA: 0x00065510 File Offset: 0x00063710
		private void EndColumnResize(MouseEventArgs e)
		{
			try
			{
				this.EndColumnResize(e.X);
			}
			finally
			{
				this.RealeaseMouse();
			}
		}

		// Token: 0x06001ACF RID: 6863 RVA: 0x00065544 File Offset: 0x00063744
		private void EndColumnResize(int x)
		{
			int num;
			int num2;
			if (this.RightToLeftInternal)
			{
				num = Math.Max(x + this.mouseBarOffset, this.layout.Data.X);
				num2 = this.GetColumnXFromIndex(this.trackColumn) - this.Columns[this.trackColumn].Thickness - num + 1;
			}
			else
			{
				num = Math.Min(x + this.mouseBarOffset, this.layout.Data.Right - 1);
				num2 = num - (this.GetColumnXFromIndex(this.trackColumn) + this.Columns[this.trackColumn].Thickness) + 1;
			}
			if (this.trackColAnchor != num && num2 != 0)
			{
				int num3 = this.Columns[this.trackColumn].Thickness + num2;
				this.Columns[this.trackColumn].Thickness = num3;
			}
		}

		/// <summary>Commits and ends the edit operation on the current cell using the default error context.</summary>
		/// <returns>
		///   <see langword="true" /> if the edit operation is committed and ended; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.Exception">The cell value could not be committed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />.</exception>
		// Token: 0x06001AD0 RID: 6864 RVA: 0x00065625 File Offset: 0x00063825
		public bool EndEdit()
		{
			return this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit);
		}

		/// <summary>Commits and ends the edit operation on the current cell using the specified error context.</summary>
		/// <param name="context">A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewDataErrorContexts" /> values that specifies the context in which an error can occur.</param>
		/// <returns>
		///   <see langword="true" /> if the edit operation is committed and ended; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.Exception">The cell value could not be committed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />.</exception>
		// Token: 0x06001AD1 RID: 6865 RVA: 0x00065634 File Offset: 0x00063834
		public bool EndEdit(DataGridViewDataErrorContexts context)
		{
			if (this.EditMode == DataGridViewEditMode.EditOnEnter)
			{
				return this.CommitEdit(context);
			}
			return this.EndEdit(context, DataGridView.DataGridViewValidateCellInternal.Never, false, false, false, false, false, true, true, true);
		}

		// Token: 0x06001AD2 RID: 6866 RVA: 0x00065664 File Offset: 0x00063864
		private bool EndEdit(DataGridViewDataErrorContexts context, DataGridView.DataGridViewValidateCellInternal validateCell, bool fireCellLeave, bool fireCellEnter, bool fireRowLeave, bool fireRowEnter, bool fireLeave, bool keepFocus, bool resetCurrentCell, bool resetAnchorCell)
		{
			if (this.ptCurrentCell.X == -1)
			{
				return true;
			}
			this.dataGridViewOper[4194304] = true;
			bool flag;
			try
			{
				int y = this.ptCurrentCell.Y;
				int x = this.ptCurrentCell.X;
				DataGridViewCell currentCellInternal = this.CurrentCellInternal;
				DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = this.CommitEdit(ref currentCellInternal, context, validateCell, fireCellLeave, fireCellEnter, fireRowLeave, fireRowEnter, fireLeave);
				if (dataGridViewDataErrorEventArgs != null)
				{
					if (dataGridViewDataErrorEventArgs.ThrowException)
					{
						throw dataGridViewDataErrorEventArgs.Exception;
					}
					if (dataGridViewDataErrorEventArgs.Cancel)
					{
						return false;
					}
					dataGridViewDataErrorEventArgs = this.CancelEditPrivate();
					if (dataGridViewDataErrorEventArgs != null)
					{
						if (dataGridViewDataErrorEventArgs.ThrowException)
						{
							throw dataGridViewDataErrorEventArgs.Exception;
						}
						if (dataGridViewDataErrorEventArgs.Cancel)
						{
							return false;
						}
					}
				}
				if (!this.IsCurrentCellInEditMode)
				{
					flag = true;
				}
				else if (y != this.ptCurrentCell.Y || x != this.ptCurrentCell.X)
				{
					flag = true;
				}
				else
				{
					if (this.editingControl != null)
					{
						this.UnwireEditingControlEvents();
						this.dataGridViewState2[8] = this.MouseOverEditingControl;
						this.dataGridViewState2[16] = this.MouseOverEditingPanel;
						this.dataGridViewState1[16384] = true;
						try
						{
							currentCellInternal.DetachEditingControl();
						}
						finally
						{
							this.dataGridViewState1[16384] = false;
						}
						ImeMode cachedImeMode = this.editingControl.CachedImeMode;
						this.latestEditingControl = this.editingControl;
						this.editingControl = null;
						this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
						if (this.EditMode == DataGridViewEditMode.EditOnEnter && resetCurrentCell)
						{
							bool flag2 = this.SetCurrentCellAddressCore(-1, -1, resetAnchorCell, false, false);
						}
						if (keepFocus)
						{
							this.FocusInternal();
						}
						base.ImeMode = cachedImeMode;
					}
					else
					{
						this.dataGridViewState1[32768] = false;
						this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
					}
					if (!this.IsInnerCellOutOfBounds(x, y))
					{
						DataGridViewCellEventArgs dataGridViewCellEventArgs = new DataGridViewCellEventArgs(x, y);
						this.OnCellEndEdit(dataGridViewCellEventArgs);
					}
					flag = true;
				}
			}
			finally
			{
				this.dataGridViewOper[4194304] = false;
			}
			return flag;
		}

		// Token: 0x06001AD3 RID: 6867 RVA: 0x000658A8 File Offset: 0x00063AA8
		private void EndRowHeadersResize(MouseEventArgs e)
		{
			try
			{
				if (this.currentColSplitBar != -1)
				{
					base.Invalidate(this.CalcColResizeFeedbackRect(this.currentColSplitBar), true);
					this.lastColSplitBar = (this.currentColSplitBar = -1);
				}
				int num;
				int num2;
				if (this.RightToLeftInternal)
				{
					num = Math.Max(e.X + this.mouseBarOffset, this.layout.Data.Left - 1);
					num2 = this.layout.RowHeaders.Right - this.RowHeadersWidth - num - 1;
				}
				else
				{
					num = Math.Min(e.X + this.mouseBarOffset, this.layout.Data.Right - 1);
					num2 = num - this.layout.RowHeaders.X - this.RowHeadersWidth + 1;
				}
				if (this.trackColAnchor != num && num2 != 0)
				{
					this.RowHeadersWidth += num2;
				}
			}
			finally
			{
				this.RealeaseMouse();
			}
		}

		// Token: 0x06001AD4 RID: 6868 RVA: 0x000659A0 File Offset: 0x00063BA0
		private void EndRowResize(MouseEventArgs e)
		{
			try
			{
				if (this.currentRowSplitBar != -1)
				{
					base.Invalidate(this.CalcRowResizeFeedbackRect(this.currentRowSplitBar), true);
					this.lastRowSplitBar = (this.currentRowSplitBar = -1);
				}
				DataGridViewRow dataGridViewRow = this.Rows.SharedRow(this.trackRow);
				int num;
				int num2;
				dataGridViewRow.GetHeightInfo(this.trackRow, out num, out num2);
				int num3 = Math.Min(e.Y + this.mouseBarOffset, this.layout.Data.Bottom - 1);
				int num4 = num3 - (this.GetRowYFromIndex(this.trackRow) + num) + 1;
				if (this.trackRowAnchor != num3 && num4 != 0)
				{
					int num5 = num + num4;
					num5 = Math.Max(num5, num2);
					if (!this.OnRowHeightInfoPushed(this.trackRow, num5, num2))
					{
						if (dataGridViewRow.Index == -1)
						{
							dataGridViewRow = this.Rows[this.trackRow];
						}
						dataGridViewRow.ThicknessInternal = num5;
					}
				}
			}
			finally
			{
				this.RealeaseMouse();
			}
		}

		// Token: 0x06001AD5 RID: 6869 RVA: 0x00065AA0 File Offset: 0x00063CA0
		private void ExitBulkLayout(bool invalidInAdjustFillingColumns)
		{
			if (this.inBulkLayoutCount > 0)
			{
				this.inBulkLayoutCount--;
				if (this.inBulkLayoutCount == 0)
				{
					this.PerformLayoutPrivate(false, false, invalidInAdjustFillingColumns, false);
				}
			}
		}

		// Token: 0x06001AD6 RID: 6870 RVA: 0x00065ACB File Offset: 0x00063CCB
		private void ExitBulkPaint(int columnIndex, int rowIndex)
		{
			if (this.inBulkPaintCount > 0)
			{
				this.inBulkPaintCount--;
				if (this.inBulkPaintCount == 0)
				{
					if (columnIndex >= 0)
					{
						this.InvalidateColumnInternal(columnIndex);
						return;
					}
					if (rowIndex >= 0)
					{
						this.InvalidateRowPrivate(rowIndex);
						return;
					}
					base.Invalidate();
				}
			}
		}

		// Token: 0x06001AD7 RID: 6871 RVA: 0x00065B0C File Offset: 0x00063D0C
		private void FirstVisibleScrollingRowTempted(int rowIndex)
		{
			int height = this.layout.Data.Height;
			if (height <= 0)
			{
				return;
			}
			int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			if (rowsHeight < height)
			{
				this.displayedBandsInfo.FirstDisplayedScrollingRow = rowIndex;
			}
		}

		// Token: 0x06001AD8 RID: 6872 RVA: 0x00065B50 File Offset: 0x00063D50
		private void FlushDisplayedChanged()
		{
			if (this.displayedBandsInfo.Dirty && base.Visible)
			{
				if (!this.RowHeadersVisible && this.Columns.GetColumnCount(DataGridViewElementStates.Visible) == 0)
				{
					this.UpdateRowsDisplayedState(false);
				}
				else
				{
					int num = Screen.FromControl(this).WorkingArea.Height / 2;
					int num2 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
					if (num2 != -1)
					{
						for (int i = this.displayedBandsInfo.NumDisplayedScrollingRows; i > 0; i--)
						{
							if ((this.Rows.GetRowState(num2) & DataGridViewElementStates.Displayed) == DataGridViewElementStates.None)
							{
								this.Rows.SetRowState(num2, DataGridViewElementStates.Displayed, true);
							}
							num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
						}
						int num3 = num2;
						num2 = this.Rows.GetPreviousRow(this.displayedBandsInfo.FirstDisplayedScrollingRow, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
						while (num2 != -1 && (this.Rows.GetRowState(num2) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None)
						{
							this.Rows.SetRowState(num2, DataGridViewElementStates.Displayed, false);
							num2 = this.Rows.GetPreviousRow(num2, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
						}
						num2 = num3;
					}
					else
					{
						num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
					}
					while (num2 != -1 && (this.Rows.GetRowState(num2) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None)
					{
						this.Rows.SetRowState(num2, DataGridViewElementStates.Displayed, false);
						num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
					}
					int j = this.displayedBandsInfo.NumDisplayedFrozenRows;
					num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					while (j > 0)
					{
						if ((this.Rows.GetRowState(num2) & DataGridViewElementStates.Displayed) == DataGridViewElementStates.None)
						{
							this.Rows.SetRowState(num2, DataGridViewElementStates.Displayed, true);
						}
						num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
						j--;
					}
					while (num2 != -1 && (this.Rows.GetRowState(num2) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None)
					{
						this.Rows.SetRowState(num2, DataGridViewElementStates.Displayed, false);
						num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					}
					int num4 = -1;
					int num5 = -1;
					if (this.displayedBandsInfo.NumDisplayedFrozenRows > 0)
					{
						int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
						if (this.displayedBandsInfo.NumDisplayedFrozenRows > 1)
						{
							num4 = this.Rows.GetNextRow(firstRow, DataGridViewElementStates.Visible, this.displayedBandsInfo.NumDisplayedFrozenRows - 2);
						}
						else
						{
							num4 = firstRow;
						}
					}
					if (this.displayedBandsInfo.FirstDisplayedScrollingRow != -1)
					{
						if (this.displayedBandsInfo.NumDisplayedScrollingRows > 1)
						{
							num5 = this.Rows.GetNextRow(this.displayedBandsInfo.FirstDisplayedScrollingRow, DataGridViewElementStates.Visible, this.displayedBandsInfo.NumDisplayedScrollingRows - 2);
						}
						else
						{
							num5 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
						}
					}
					num2 = this.displayedBandsInfo.OldFirstDisplayedScrollingRow;
					while (num2 != -1 && num2 < this.displayedBandsInfo.FirstDisplayedScrollingRow && !this.RowNeedsDisplayedState(num2, num4, num5) && (this.Rows.GetRowState(num2) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None)
					{
						this.Rows.SetRowState(num2, DataGridViewElementStates.Displayed, false);
						num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
					}
					num2 = this.displayedBandsInfo.OldFirstDisplayedScrollingRow;
					if (num2 != -1 && num2 < this.Rows.Count && (this.displayedBandsInfo.FirstDisplayedScrollingRow == -1 || this.displayedBandsInfo.FirstDisplayedScrollingRow < num2) && !this.RowNeedsDisplayedState(num2, num4, num5))
					{
						while (num2 != -1 && (this.Rows.GetRowState(num2) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None)
						{
							this.Rows.SetRowState(num2, DataGridViewElementStates.Displayed, false);
							num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
						}
					}
					if (this.displayedBandsInfo.RowInsertionOccurred)
					{
						num2 = this.displayedBandsInfo.OldFirstDisplayedScrollingRow;
						if (num2 != -1)
						{
							num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible, this.displayedBandsInfo.OldNumDisplayedScrollingRows - 1);
							if (num2 == -1)
							{
								num2 = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
							}
							int num6 = 0;
							while (num2 != -1 && num6 <= num && !this.RowNeedsDisplayedState(num2, num4, num5))
							{
								if ((this.Rows.GetRowState(num2) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None)
								{
									this.Rows.SetRowState(num2, DataGridViewElementStates.Displayed, false);
								}
								num2 = this.Rows.GetPreviousRow(num2, DataGridViewElementStates.Visible);
								num6++;
							}
						}
						num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
						if (num2 != -1)
						{
							num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, this.displayedBandsInfo.OldNumDisplayedFrozenRows - 1);
							if (num2 == -1)
							{
								num2 = this.Rows.GetLastRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
							}
							int num7 = 0;
							while (num2 != -1 && num7 <= num && !this.RowNeedsDisplayedState(num2, num4, num5))
							{
								if ((this.Rows.GetRowState(num2) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None)
								{
									this.Rows.SetRowState(num2, DataGridViewElementStates.Displayed, false);
								}
								num2 = this.Rows.GetPreviousRow(num2, DataGridViewElementStates.Visible);
								num7++;
							}
						}
					}
				}
				if (!this.ColumnHeadersVisible && this.Rows.GetRowCount(DataGridViewElementStates.Visible) == 0)
				{
					this.UpdateColumnsDisplayedState(false);
				}
				else
				{
					int num8 = this.displayedBandsInfo.FirstDisplayedScrollingCol;
					DataGridViewColumn dataGridViewColumn;
					if (num8 != -1)
					{
						int k = this.displayedBandsInfo.NumDisplayedScrollingCols;
						dataGridViewColumn = this.Columns[num8];
						while (k > 0)
						{
							if (!dataGridViewColumn.Displayed)
							{
								dataGridViewColumn.DisplayedInternal = true;
							}
							dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
							k--;
						}
						DataGridViewColumn dataGridViewColumn2 = dataGridViewColumn;
						dataGridViewColumn = this.Columns.GetPreviousColumn(this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol], DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
						while (dataGridViewColumn != null && dataGridViewColumn.Displayed)
						{
							dataGridViewColumn.DisplayedInternal = false;
							dataGridViewColumn = this.Columns.GetPreviousColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
						}
						dataGridViewColumn = dataGridViewColumn2;
					}
					else
					{
						dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
					}
					while (dataGridViewColumn != null && dataGridViewColumn.Displayed)
					{
						dataGridViewColumn.DisplayedInternal = false;
						dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					}
					int l = this.displayedBandsInfo.NumDisplayedFrozenCols;
					dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					while (l > 0)
					{
						if (!dataGridViewColumn.Displayed)
						{
							dataGridViewColumn.DisplayedInternal = true;
						}
						dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
						l--;
					}
					while (dataGridViewColumn != null && dataGridViewColumn.Displayed)
					{
						dataGridViewColumn.DisplayedInternal = false;
						dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					}
					num8 = this.displayedBandsInfo.OldFirstDisplayedScrollingCol;
					while (num8 != -1 && num8 < this.Columns.Count && this.displayedBandsInfo.FirstDisplayedScrollingCol != -1 && num8 != this.displayedBandsInfo.FirstDisplayedScrollingCol && this.Columns.DisplayInOrder(num8, this.displayedBandsInfo.FirstDisplayedScrollingCol) && !this.ColumnNeedsDisplayedState(this.Columns[num8]))
					{
						dataGridViewColumn = this.Columns[num8];
						if (!dataGridViewColumn.Displayed)
						{
							break;
						}
						dataGridViewColumn.DisplayedInternal = false;
						dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
						num8 = ((dataGridViewColumn == null) ? (-1) : dataGridViewColumn.Index);
					}
					num8 = this.displayedBandsInfo.OldFirstDisplayedScrollingCol;
					if (num8 != -1 && num8 < this.Columns.Count && (this.displayedBandsInfo.FirstDisplayedScrollingCol == -1 || (this.displayedBandsInfo.FirstDisplayedScrollingCol != num8 && this.Columns.DisplayInOrder(this.displayedBandsInfo.FirstDisplayedScrollingCol, num8))) && !this.ColumnNeedsDisplayedState(this.Columns[num8]))
					{
						dataGridViewColumn = this.Columns[num8];
						while (dataGridViewColumn != null && dataGridViewColumn.Displayed)
						{
							dataGridViewColumn.DisplayedInternal = false;
							dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
						}
					}
					if (this.displayedBandsInfo.ColumnInsertionOccurred)
					{
						dataGridViewColumn = this.Columns[this.Columns.Count - 1];
						while (dataGridViewColumn != null && !this.ColumnNeedsDisplayedState(dataGridViewColumn))
						{
							if (dataGridViewColumn.Displayed)
							{
								dataGridViewColumn.DisplayedInternal = false;
							}
							dataGridViewColumn = this.Columns.GetPreviousColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
						}
					}
				}
				this.displayedBandsInfo.Dirty = false;
			}
		}

		// Token: 0x06001AD9 RID: 6873 RVA: 0x00066320 File Offset: 0x00064520
		private void FlushDisplayIndexChanged(bool raiseEvent)
		{
			foreach (object obj in this.Columns)
			{
				DataGridViewColumn dataGridViewColumn = (DataGridViewColumn)obj;
				if (dataGridViewColumn.DisplayIndexHasChanged)
				{
					dataGridViewColumn.DisplayIndexHasChanged = false;
					if (raiseEvent)
					{
						this.OnColumnDisplayIndexChanged(dataGridViewColumn);
					}
				}
			}
		}

		// Token: 0x06001ADA RID: 6874 RVA: 0x0006638C File Offset: 0x0006458C
		private void FlushSelectionChanged()
		{
			if (this.dataGridViewState2[262144])
			{
				this.OnSelectionChanged(EventArgs.Empty);
			}
		}

		/// <summary>Retrieves the specified <see cref="T:System.Windows.Forms.AccessibleObject" />.</summary>
		/// <param name="objectId">An <see langword="Int32" /> that identifies the <see cref="T:System.Windows.Forms.AccessibleObject" /> to retrieve.</param>
		/// <returns>The specified <see cref="T:System.Windows.Forms.AccessibleObject" />.</returns>
		// Token: 0x06001ADB RID: 6875 RVA: 0x000663AB File Offset: 0x000645AB
		protected override AccessibleObject GetAccessibilityObjectById(int objectId)
		{
			return base.AccessibilityObject.GetChild(objectId - 1);
		}

		// Token: 0x06001ADC RID: 6876 RVA: 0x000663BC File Offset: 0x000645BC
		internal SolidBrush GetCachedBrush(Color color)
		{
			SolidBrush solidBrush = (SolidBrush)this.brushes[color];
			if (solidBrush == null)
			{
				solidBrush = new SolidBrush(color);
				this.brushes.Add(color, solidBrush);
			}
			return solidBrush;
		}

		// Token: 0x06001ADD RID: 6877 RVA: 0x00066400 File Offset: 0x00064600
		internal Pen GetCachedPen(Color color)
		{
			Pen pen = (Pen)this.pens[color];
			if (pen == null)
			{
				pen = new Pen(color);
				this.pens.Add(color, pen);
			}
			return pen;
		}

		// Token: 0x06001ADE RID: 6878 RVA: 0x00066444 File Offset: 0x00064644
		internal TypeConverter GetCachedTypeConverter(Type type)
		{
			if (this.converters.ContainsKey(type))
			{
				return (TypeConverter)this.converters[type];
			}
			TypeConverter converter = TypeDescriptor.GetConverter(type);
			this.converters.Add(type, converter);
			return converter;
		}

		// Token: 0x06001ADF RID: 6879 RVA: 0x00066488 File Offset: 0x00064688
		internal Rectangle GetCellAdjustedDisplayRectangle(int columnIndex, int rowIndex, bool cutOverflow)
		{
			Rectangle cellDisplayRectangle = this.GetCellDisplayRectangle(columnIndex, rowIndex, cutOverflow);
			if (!cellDisplayRectangle.IsEmpty)
			{
				if (this.SingleVerticalBorderAdded && columnIndex == this.FirstDisplayedColumnIndex)
				{
					int num;
					if (!this.RightToLeftInternal)
					{
						num = cellDisplayRectangle.X;
						cellDisplayRectangle.X = num - 1;
					}
					num = cellDisplayRectangle.Width;
					cellDisplayRectangle.Width = num + 1;
				}
				if (this.SingleHorizontalBorderAdded && rowIndex == this.FirstDisplayedRowIndex)
				{
					int num = cellDisplayRectangle.Y;
					cellDisplayRectangle.Y = num - 1;
					num = cellDisplayRectangle.Height;
					cellDisplayRectangle.Height = num + 1;
				}
			}
			return cellDisplayRectangle;
		}

		/// <summary>Gets the number of cells that satisfy the provided filter.</summary>
		/// <param name="includeFilter">A bitwise combination of the <see cref="T:System.Windows.Forms.DataGridViewElementStates" /> values specifying the cells to count.</param>
		/// <returns>The number of cells that match the <paramref name="includeFilter" /> parameter.</returns>
		/// <exception cref="T:System.ArgumentException">
		///   <paramref name="includeFilter" /> includes the value <see cref="F:System.Windows.Forms.DataGridViewElementStates.ResizableSet" />.</exception>
		// Token: 0x06001AE0 RID: 6880 RVA: 0x00066518 File Offset: 0x00064718
		public int GetCellCount(DataGridViewElementStates includeFilter)
		{
			if ((includeFilter & ~(DataGridViewElementStates.Displayed | DataGridViewElementStates.Frozen | DataGridViewElementStates.ReadOnly | DataGridViewElementStates.Resizable | DataGridViewElementStates.Selected | DataGridViewElementStates.Visible)) != DataGridViewElementStates.None)
			{
				throw new ArgumentException(SR.GetString("DataGridView_InvalidDataGridViewElementStateCombination", new object[] { "includeFilter" }));
			}
			int num = 0;
			bool flag;
			bool flag2;
			bool flag3;
			bool flag4;
			bool flag5;
			if ((includeFilter & DataGridViewElementStates.Selected) == DataGridViewElementStates.Selected)
			{
				if (includeFilter == DataGridViewElementStates.Selected)
				{
					num = this.individualSelectedCells.Count;
					switch (this.SelectionMode)
					{
					case DataGridViewSelectionMode.CellSelect:
						return num;
					case DataGridViewSelectionMode.FullRowSelect:
					case DataGridViewSelectionMode.RowHeaderSelect:
						return num + this.selectedBandIndexes.Count * this.Columns.Count;
					case DataGridViewSelectionMode.FullColumnSelect:
					case DataGridViewSelectionMode.ColumnHeaderSelect:
						return num + this.selectedBandIndexes.Count * this.Rows.Count;
					}
				}
				flag = (includeFilter & DataGridViewElementStates.Displayed) == DataGridViewElementStates.Displayed;
				flag2 = (includeFilter & DataGridViewElementStates.Frozen) == DataGridViewElementStates.Frozen;
				flag3 = (includeFilter & DataGridViewElementStates.Resizable) == DataGridViewElementStates.Resizable;
				flag4 = (includeFilter & DataGridViewElementStates.ReadOnly) == DataGridViewElementStates.ReadOnly;
				flag5 = (includeFilter & DataGridViewElementStates.Visible) == DataGridViewElementStates.Visible;
				foreach (object obj in ((IEnumerable)this.individualSelectedCells))
				{
					DataGridViewCell dataGridViewCell = (DataGridViewCell)obj;
					if (this.GetCellCount_CellIncluded(dataGridViewCell, dataGridViewCell.RowIndex, flag, flag2, flag3, flag4, flag5))
					{
						num++;
					}
				}
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
					return num;
				case DataGridViewSelectionMode.FullRowSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
					foreach (object obj2 in ((IEnumerable)this.selectedBandIndexes))
					{
						int num2 = (int)obj2;
						DataGridViewRow dataGridViewRow = this.Rows.SharedRow(num2);
						foreach (object obj3 in dataGridViewRow.Cells)
						{
							DataGridViewCell dataGridViewCell2 = (DataGridViewCell)obj3;
							if (this.GetCellCount_CellIncluded(dataGridViewCell2, num2, flag, flag2, flag3, flag4, flag5))
							{
								num++;
							}
						}
					}
					return num;
				case DataGridViewSelectionMode.FullColumnSelect:
				case DataGridViewSelectionMode.ColumnHeaderSelect:
				{
					for (int i = 0; i < this.Rows.Count; i++)
					{
						DataGridViewRow dataGridViewRow2 = this.Rows.SharedRow(i);
						foreach (object obj4 in ((IEnumerable)this.selectedBandIndexes))
						{
							int num3 = (int)obj4;
							DataGridViewCell dataGridViewCell3 = dataGridViewRow2.Cells[num3];
							if (this.GetCellCount_CellIncluded(dataGridViewCell3, i, flag, flag2, flag3, flag4, flag5))
							{
								num++;
							}
						}
					}
					return num;
				}
				}
			}
			if ((includeFilter == DataGridViewElementStates.ReadOnly && this.ReadOnly) || includeFilter == DataGridViewElementStates.None)
			{
				return this.Rows.Count * this.Columns.Count;
			}
			flag = (includeFilter & DataGridViewElementStates.Displayed) == DataGridViewElementStates.Displayed;
			flag2 = (includeFilter & DataGridViewElementStates.Frozen) == DataGridViewElementStates.Frozen;
			flag3 = (includeFilter & DataGridViewElementStates.Resizable) == DataGridViewElementStates.Resizable;
			flag4 = (includeFilter & DataGridViewElementStates.ReadOnly) == DataGridViewElementStates.ReadOnly;
			flag5 = (includeFilter & DataGridViewElementStates.Visible) == DataGridViewElementStates.Visible;
			for (int j = 0; j < this.Rows.Count; j++)
			{
				DataGridViewRow dataGridViewRow3 = this.Rows.SharedRow(j);
				if (!flag5 || (this.Rows.GetRowState(j) & DataGridViewElementStates.Visible) != DataGridViewElementStates.None)
				{
					foreach (object obj5 in dataGridViewRow3.Cells)
					{
						DataGridViewCell dataGridViewCell4 = (DataGridViewCell)obj5;
						if (this.GetCellCount_CellIncluded(dataGridViewCell4, j, flag, flag2, flag3, flag4, flag5))
						{
							num++;
						}
					}
				}
			}
			return num;
		}

		// Token: 0x06001AE1 RID: 6881 RVA: 0x000668CC File Offset: 0x00064ACC
		private bool GetCellCount_CellIncluded(DataGridViewCell dataGridViewCell, int rowIndex, bool displayedRequired, bool frozenRequired, bool resizableRequired, bool readOnlyRequired, bool visibleRequired)
		{
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			return (!displayedRequired || ((rowState & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None && dataGridViewCell.OwningColumn.Displayed)) && (!frozenRequired || (rowState & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None || dataGridViewCell.OwningColumn.Frozen || dataGridViewCell.StateIncludes(DataGridViewElementStates.Frozen)) && (!resizableRequired || this.RowIsResizable(rowIndex) || dataGridViewCell.OwningColumn.Resizable == DataGridViewTriState.True) && (!readOnlyRequired || this.ReadOnly || (rowState & DataGridViewElementStates.ReadOnly) != DataGridViewElementStates.None || dataGridViewCell.OwningColumn.ReadOnly || dataGridViewCell.StateIncludes(DataGridViewElementStates.ReadOnly)) && (!visibleRequired || ((rowState & DataGridViewElementStates.Visible) != DataGridViewElementStates.None && dataGridViewCell.OwningColumn.Visible));
		}

		/// <summary>Returns the rectangle that represents the display area for a cell.</summary>
		/// <param name="columnIndex">The column index for the desired cell.</param>
		/// <param name="rowIndex">The row index for the desired cell.</param>
		/// <param name="cutOverflow">
		///   <see langword="true" /> to return the displayed portion of the cell only; <see langword="false" /> to return the entire cell bounds.</param>
		/// <returns>The <see cref="T:System.Drawing.Rectangle" /> that represents the display rectangle of the cell.</returns>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///   <paramref name="columnIndex" /> is less than -1 or greater than the number of columns in the control minus 1.  
		/// -or-  
		/// <paramref name="rowIndex" /> is less than -1 or greater than the number of rows in the control minus 1.</exception>
		// Token: 0x06001AE2 RID: 6882 RVA: 0x00066994 File Offset: 0x00064B94
		public Rectangle GetCellDisplayRectangle(int columnIndex, int rowIndex, bool cutOverflow)
		{
			Rectangle rectangle;
			if (columnIndex >= 0)
			{
				if (columnIndex >= this.Columns.Count)
				{
					throw new ArgumentOutOfRangeException("columnIndex");
				}
				rectangle = this.GetColumnDisplayRectanglePrivate(columnIndex, cutOverflow);
			}
			else
			{
				if (columnIndex != -1)
				{
					throw new ArgumentOutOfRangeException("columnIndex");
				}
				if (rowIndex >= 0)
				{
					rectangle = this.layout.RowHeaders;
				}
				else
				{
					rectangle = this.layout.TopLeftHeader;
				}
			}
			Rectangle rectangle2;
			if (rowIndex >= 0)
			{
				if (rowIndex >= this.Rows.Count)
				{
					throw new ArgumentOutOfRangeException("rowIndex");
				}
				rectangle2 = this.GetRowDisplayRectanglePrivate(rowIndex, cutOverflow);
			}
			else
			{
				if (rowIndex != -1)
				{
					throw new ArgumentOutOfRangeException("rowIndex");
				}
				if (columnIndex >= 0)
				{
					rectangle2 = this.layout.ColumnHeaders;
				}
				else
				{
					rectangle2 = this.layout.TopLeftHeader;
				}
			}
			if (!cutOverflow)
			{
				int num = rectangle2.Bottom - rectangle.Bottom;
				if (num > 0)
				{
					rectangle.Height += num;
				}
				if (this.RightToLeftInternal)
				{
					int num2 = rectangle2.X - rectangle.X;
					if (num2 > 0)
					{
						rectangle2.Width += num2;
						rectangle2.X -= num2;
					}
				}
				else
				{
					int num2 = rectangle.Right - rectangle2.Right;
					if (num2 > 0)
					{
						rectangle2.Width += num2;
					}
				}
			}
			rectangle2.Intersect(rectangle);
			return rectangle2;
		}

		// Token: 0x06001AE3 RID: 6883 RVA: 0x00066ADC File Offset: 0x00064CDC
		internal DataGridViewCell GetCellInternal(int columnIndex, int rowIndex)
		{
			if (rowIndex >= 0)
			{
				DataGridViewRow dataGridViewRow = this.Rows.SharedRow(rowIndex);
				if (columnIndex >= 0)
				{
					return dataGridViewRow.Cells[columnIndex];
				}
				return dataGridViewRow.HeaderCell;
			}
			else
			{
				if (columnIndex >= 0)
				{
					return this.Columns[columnIndex].HeaderCell;
				}
				return this.TopLeftHeaderCell;
			}
		}

		/// <summary>Retrieves the formatted values that represent the contents of the selected cells for copying to the <see cref="T:System.Windows.Forms.Clipboard" />.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.DataObject" /> that represents the contents of the selected cells.</returns>
		/// <exception cref="T:System.NotSupportedException">
		///   <see cref="P:System.Windows.Forms.DataGridView.ClipboardCopyMode" /> is set to <see cref="F:System.Windows.Forms.DataGridViewClipboardCopyMode.Disable" />.</exception>
		// Token: 0x06001AE4 RID: 6884 RVA: 0x00066B30 File Offset: 0x00064D30
		public virtual DataObject GetClipboardContent()
		{
			if (this.ClipboardCopyMode == DataGridViewClipboardCopyMode.Disable)
			{
				throw new NotSupportedException(SR.GetString("DataGridView_DisabledClipboardCopy"));
			}
			if (this.CurrentCellIsEditedAndOnlySelectedCell)
			{
				return null;
			}
			string[] array = new string[]
			{
				DataFormats.Html,
				DataFormats.Text,
				DataFormats.UnicodeText,
				DataFormats.CommaSeparatedValue
			};
			DataObject dataObject = new DataObject();
			bool flag = false;
			bool flag2 = false;
			StringBuilder stringBuilder = null;
			switch (this.SelectionMode)
			{
			case DataGridViewSelectionMode.CellSelect:
			case DataGridViewSelectionMode.RowHeaderSelect:
			case DataGridViewSelectionMode.ColumnHeaderSelect:
			{
				bool flag3 = false;
				bool flag4 = false;
				bool flag5 = false;
				if (this.SelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
				{
					flag5 = this.Rows.GetRowCount(DataGridViewElementStates.Selected | DataGridViewElementStates.Visible) != 0;
					flag3 = flag5 && this.Columns.GetColumnCount(DataGridViewElementStates.Visible) != 0;
				}
				else if (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)
				{
					flag4 = this.Columns.GetColumnCount(DataGridViewElementStates.Selected | DataGridViewElementStates.Visible) != 0;
					flag3 = flag4 && this.Rows.GetRowCount(DataGridViewElementStates.Visible) != 0;
				}
				if (!flag3 && this.individualSelectedCells.Count > 0)
				{
					foreach (object obj in ((IEnumerable)this.individualSelectedCells))
					{
						DataGridViewCell dataGridViewCell = (DataGridViewCell)obj;
						if (dataGridViewCell.Visible)
						{
							flag3 = true;
							break;
						}
					}
				}
				if (!flag3)
				{
					return null;
				}
				if (this.SelectionMode == DataGridViewSelectionMode.CellSelect)
				{
					flag2 = (flag = this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableAlwaysIncludeHeaderText);
					flag &= this.ColumnHeadersVisible;
					flag2 &= this.RowHeadersVisible;
				}
				else
				{
					flag2 = (flag = false);
					if (this.ColumnHeadersVisible)
					{
						if (this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableWithAutoHeaderText)
						{
							if (flag4)
							{
								flag = true;
							}
						}
						else
						{
							flag = this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableAlwaysIncludeHeaderText;
						}
					}
					if (this.RowHeadersVisible)
					{
						if (this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableWithAutoHeaderText)
						{
							if (flag5)
							{
								flag2 = true;
							}
						}
						else
						{
							flag2 = this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableAlwaysIncludeHeaderText;
						}
					}
				}
				int num = int.MaxValue;
				int num2 = -1;
				DataGridViewColumn dataGridViewColumn = null;
				DataGridViewColumn dataGridViewColumn2 = null;
				if (this.SelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
				{
					DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
					DataGridViewColumn lastColumn = this.Columns.GetLastColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					using (IEnumerator enumerator2 = ((IEnumerable)this.selectedBandIndexes).GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							object obj2 = enumerator2.Current;
							int num3 = (int)obj2;
							if ((this.Rows.GetRowState(num3) & DataGridViewElementStates.Visible) != DataGridViewElementStates.None)
							{
								if (num3 < num)
								{
									num = num3;
								}
								if (num3 > num2)
								{
									num2 = num3;
								}
								dataGridViewColumn = firstColumn;
								dataGridViewColumn2 = lastColumn;
							}
						}
						goto IL_E26;
					}
				}
				if (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)
				{
					int num4 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
					int lastRow = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
					foreach (object obj3 in ((IEnumerable)this.selectedBandIndexes))
					{
						int num5 = (int)obj3;
						if (this.Columns[num5].Visible)
						{
							if (dataGridViewColumn == null || this.Columns.DisplayInOrder(num5, dataGridViewColumn.Index))
							{
								dataGridViewColumn = this.Columns[num5];
							}
							if (dataGridViewColumn2 == null || this.Columns.DisplayInOrder(dataGridViewColumn2.Index, num5))
							{
								dataGridViewColumn2 = this.Columns[num5];
							}
							num = num4;
							num2 = lastRow;
						}
					}
				}
				IL_E26:
				foreach (object obj4 in ((IEnumerable)this.individualSelectedCells))
				{
					DataGridViewCell dataGridViewCell2 = (DataGridViewCell)obj4;
					if (dataGridViewCell2.Visible)
					{
						if (dataGridViewCell2.RowIndex < num)
						{
							num = dataGridViewCell2.RowIndex;
						}
						if (dataGridViewCell2.RowIndex > num2)
						{
							num2 = dataGridViewCell2.RowIndex;
						}
						if (dataGridViewColumn == null || this.Columns.DisplayInOrder(dataGridViewCell2.ColumnIndex, dataGridViewColumn.Index))
						{
							dataGridViewColumn = dataGridViewCell2.OwningColumn;
						}
						if (dataGridViewColumn2 == null || this.Columns.DisplayInOrder(dataGridViewColumn2.Index, dataGridViewCell2.ColumnIndex))
						{
							dataGridViewColumn2 = dataGridViewCell2.OwningColumn;
						}
					}
				}
				foreach (string text in array)
				{
					if (stringBuilder == null)
					{
						stringBuilder = new StringBuilder(1024);
					}
					else
					{
						stringBuilder.Length = 0;
					}
					if (flag)
					{
						if (this.RightToLeftInternal)
						{
							DataGridViewColumn dataGridViewColumn4;
							for (DataGridViewColumn dataGridViewColumn3 = dataGridViewColumn2; dataGridViewColumn3 != null; dataGridViewColumn3 = dataGridViewColumn4)
							{
								if (dataGridViewColumn3 != dataGridViewColumn)
								{
									dataGridViewColumn4 = this.Columns.GetPreviousColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								}
								else
								{
									dataGridViewColumn4 = null;
								}
								string text2 = dataGridViewColumn3.HeaderCell.GetClipboardContentInternal(-1, dataGridViewColumn3 == dataGridViewColumn2, !flag2 && dataGridViewColumn4 == null, true, false, text) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
							if (flag2)
							{
								string text2 = this.TopLeftHeaderCell.GetClipboardContentInternal(-1, false, true, true, false, text) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
						}
						else
						{
							if (flag2)
							{
								string text2 = this.TopLeftHeaderCell.GetClipboardContentInternal(-1, true, false, true, false, text) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
							DataGridViewColumn dataGridViewColumn5;
							for (DataGridViewColumn dataGridViewColumn3 = dataGridViewColumn; dataGridViewColumn3 != null; dataGridViewColumn3 = dataGridViewColumn5)
							{
								if (dataGridViewColumn3 != dataGridViewColumn2)
								{
									dataGridViewColumn5 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								}
								else
								{
									dataGridViewColumn5 = null;
								}
								string text2 = dataGridViewColumn3.HeaderCell.GetClipboardContentInternal(-1, !flag2 && dataGridViewColumn3 == dataGridViewColumn, dataGridViewColumn5 == null, true, false, text) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
						}
					}
					bool flag6 = true;
					int num6 = num;
					while (num6 != -1)
					{
						int num7;
						if (num6 != num2)
						{
							num7 = this.Rows.GetNextRow(num6, DataGridViewElementStates.Visible);
						}
						else
						{
							num7 = -1;
						}
						if (this.RightToLeftInternal)
						{
							DataGridViewColumn dataGridViewColumn4;
							for (DataGridViewColumn dataGridViewColumn3 = dataGridViewColumn2; dataGridViewColumn3 != null; dataGridViewColumn3 = dataGridViewColumn4)
							{
								if (dataGridViewColumn3 != dataGridViewColumn)
								{
									dataGridViewColumn4 = this.Columns.GetPreviousColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								}
								else
								{
									dataGridViewColumn4 = null;
								}
								string text2 = this.Rows.SharedRow(num6).Cells[dataGridViewColumn3.Index].GetClipboardContentInternal(num6, dataGridViewColumn3 == dataGridViewColumn2, !flag2 && dataGridViewColumn4 == null, !flag && flag6, num7 == -1, text) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
							if (flag2)
							{
								string text2 = this.Rows.SharedRow(num6).HeaderCell.GetClipboardContentInternal(num6, false, true, !flag && flag6, num7 == -1, text) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
						}
						else
						{
							if (flag2)
							{
								string text2 = this.Rows.SharedRow(num6).HeaderCell.GetClipboardContentInternal(num6, true, false, !flag && flag6, num7 == -1, text) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
							DataGridViewColumn dataGridViewColumn5;
							for (DataGridViewColumn dataGridViewColumn3 = dataGridViewColumn; dataGridViewColumn3 != null; dataGridViewColumn3 = dataGridViewColumn5)
							{
								if (dataGridViewColumn3 != dataGridViewColumn2)
								{
									dataGridViewColumn5 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								}
								else
								{
									dataGridViewColumn5 = null;
								}
								string text2 = this.Rows.SharedRow(num6).Cells[dataGridViewColumn3.Index].GetClipboardContentInternal(num6, !flag2 && dataGridViewColumn3 == dataGridViewColumn, dataGridViewColumn5 == null, !flag && flag6, num7 == -1, text) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
						}
						num6 = num7;
						flag6 = false;
					}
					if (string.Equals(text, DataFormats.Html, StringComparison.OrdinalIgnoreCase))
					{
						MemoryStream memoryStream = null;
						DataGridView.GetClipboardContentForHtml(stringBuilder, out memoryStream);
						dataObject.SetData(text, false, memoryStream);
					}
					else
					{
						dataObject.SetData(text, false, stringBuilder.ToString());
					}
				}
				break;
			}
			case DataGridViewSelectionMode.FullRowSelect:
				if (this.Rows.GetRowCount(DataGridViewElementStates.Selected | DataGridViewElementStates.Visible) == 0)
				{
					return null;
				}
				if (this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableWithAutoHeaderText)
				{
					flag = this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Selected) == -1;
					flag2 = true;
				}
				else
				{
					flag2 = (flag = this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableAlwaysIncludeHeaderText);
				}
				flag &= this.ColumnHeadersVisible;
				flag2 &= this.RowHeadersVisible;
				foreach (string text3 in array)
				{
					if (stringBuilder == null)
					{
						stringBuilder = new StringBuilder(1024);
					}
					else
					{
						stringBuilder.Length = 0;
					}
					if (flag)
					{
						if (this.RightToLeftInternal)
						{
							DataGridViewColumn dataGridViewColumn3 = this.Columns.GetLastColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.None);
							if (dataGridViewColumn3 != null)
							{
								DataGridViewColumn dataGridViewColumn4 = this.Columns.GetPreviousColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								string text2 = dataGridViewColumn3.HeaderCell.GetClipboardContentInternal(-1, true, !flag2 && dataGridViewColumn4 == null, true, false, text3) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
								while (dataGridViewColumn4 != null)
								{
									dataGridViewColumn3 = dataGridViewColumn4;
									dataGridViewColumn4 = this.Columns.GetPreviousColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
									text2 = dataGridViewColumn3.HeaderCell.GetClipboardContentInternal(-1, false, !flag2 && dataGridViewColumn4 == null, true, false, text3) as string;
									if (text2 != null)
									{
										stringBuilder.Append(text2);
									}
								}
							}
							if (flag2)
							{
								string text2 = this.TopLeftHeaderCell.GetClipboardContentInternal(-1, this.Columns.GetColumnCount(DataGridViewElementStates.Visible) == 0, true, true, false, text3) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
						}
						else
						{
							if (flag2)
							{
								string text2 = this.TopLeftHeaderCell.GetClipboardContentInternal(-1, true, this.Columns.GetColumnCount(DataGridViewElementStates.Visible) == 0, true, false, text3) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
							DataGridViewColumn dataGridViewColumn3 = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
							if (dataGridViewColumn3 != null)
							{
								DataGridViewColumn dataGridViewColumn5 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								string text2 = dataGridViewColumn3.HeaderCell.GetClipboardContentInternal(-1, !flag2, dataGridViewColumn5 == null, true, false, text3) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
								while (dataGridViewColumn5 != null)
								{
									dataGridViewColumn3 = dataGridViewColumn5;
									dataGridViewColumn5 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
									text2 = dataGridViewColumn3.HeaderCell.GetClipboardContentInternal(-1, false, dataGridViewColumn5 == null, true, false, text3) as string;
									if (text2 != null)
									{
										stringBuilder.Append(text2);
									}
								}
							}
						}
					}
					bool flag7 = true;
					int num8 = this.Rows.GetFirstRow(DataGridViewElementStates.Selected | DataGridViewElementStates.Visible);
					int num9 = this.Rows.GetNextRow(num8, DataGridViewElementStates.Selected | DataGridViewElementStates.Visible);
					while (num8 != -1)
					{
						if (this.RightToLeftInternal)
						{
							DataGridViewColumn dataGridViewColumn3 = this.Columns.GetLastColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.None);
							if (dataGridViewColumn3 != null)
							{
								DataGridViewColumn dataGridViewColumn4 = this.Columns.GetPreviousColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								string text2 = this.Rows.SharedRow(num8).Cells[dataGridViewColumn3.Index].GetClipboardContentInternal(num8, true, !flag2 && dataGridViewColumn4 == null, !flag && flag7, num9 == -1, text3) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
								while (dataGridViewColumn4 != null)
								{
									dataGridViewColumn3 = dataGridViewColumn4;
									dataGridViewColumn4 = this.Columns.GetPreviousColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
									text2 = this.Rows.SharedRow(num8).Cells[dataGridViewColumn3.Index].GetClipboardContentInternal(num8, false, !flag2 && dataGridViewColumn4 == null, !flag && flag7, num9 == -1, text3) as string;
									if (text2 != null)
									{
										stringBuilder.Append(text2);
									}
								}
							}
							if (flag2)
							{
								string text2 = this.Rows.SharedRow(num8).HeaderCell.GetClipboardContentInternal(num8, this.Columns.GetColumnCount(DataGridViewElementStates.Visible) == 0, true, !flag && flag7, num9 == -1, text3) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
						}
						else
						{
							DataGridViewColumn dataGridViewColumn3 = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
							if (flag2)
							{
								string text2 = this.Rows.SharedRow(num8).HeaderCell.GetClipboardContentInternal(num8, true, dataGridViewColumn3 == null, !flag && flag7, num9 == -1, text3) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
							if (dataGridViewColumn3 != null)
							{
								DataGridViewColumn dataGridViewColumn5 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								string text2 = this.Rows.SharedRow(num8).Cells[dataGridViewColumn3.Index].GetClipboardContentInternal(num8, !flag2, dataGridViewColumn5 == null, !flag && flag7, num9 == -1, text3) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
								while (dataGridViewColumn5 != null)
								{
									dataGridViewColumn3 = dataGridViewColumn5;
									dataGridViewColumn5 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
									text2 = this.Rows.SharedRow(num8).Cells[dataGridViewColumn3.Index].GetClipboardContentInternal(num8, false, dataGridViewColumn5 == null, !flag && flag7, num9 == -1, text3) as string;
									if (text2 != null)
									{
										stringBuilder.Append(text2);
									}
								}
							}
						}
						num8 = num9;
						if (num8 != -1)
						{
							num9 = this.Rows.GetNextRow(num8, DataGridViewElementStates.Selected | DataGridViewElementStates.Visible);
						}
						flag7 = false;
					}
					if (string.Equals(text3, DataFormats.Html, StringComparison.OrdinalIgnoreCase))
					{
						MemoryStream memoryStream2 = null;
						DataGridView.GetClipboardContentForHtml(stringBuilder, out memoryStream2);
						dataObject.SetData(text3, false, memoryStream2);
					}
					else
					{
						dataObject.SetData(text3, false, stringBuilder.ToString());
					}
				}
				break;
			case DataGridViewSelectionMode.FullColumnSelect:
			{
				if (this.Columns.GetColumnCount(DataGridViewElementStates.Selected | DataGridViewElementStates.Visible) == 0)
				{
					return null;
				}
				if (this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableWithAutoHeaderText)
				{
					flag = true;
					flag2 = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Selected) == null;
				}
				else
				{
					flag2 = (flag = this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableAlwaysIncludeHeaderText);
				}
				flag &= this.ColumnHeadersVisible;
				flag2 &= this.RowHeadersVisible;
				int num4 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
				foreach (string text4 in array)
				{
					if (stringBuilder == null)
					{
						stringBuilder = new StringBuilder(1024);
					}
					else
					{
						stringBuilder.Length = 0;
					}
					if (flag)
					{
						if (this.RightToLeftInternal)
						{
							DataGridViewColumn lastColumn2 = this.Columns.GetLastColumn(DataGridViewElementStates.Selected | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
							DataGridViewColumn dataGridViewColumn3 = lastColumn2;
							if (dataGridViewColumn3 != null)
							{
								DataGridViewColumn dataGridViewColumn4 = this.Columns.GetPreviousColumn(dataGridViewColumn3, DataGridViewElementStates.Selected | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								string text2 = dataGridViewColumn3.HeaderCell.GetClipboardContentInternal(-1, true, !flag2 && dataGridViewColumn4 == null, true, num4 == -1, text4) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
								while (dataGridViewColumn4 != null)
								{
									dataGridViewColumn3 = dataGridViewColumn4;
									dataGridViewColumn4 = this.Columns.GetPreviousColumn(dataGridViewColumn3, DataGridViewElementStates.Selected | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
									text2 = dataGridViewColumn3.HeaderCell.GetClipboardContentInternal(-1, false, !flag2 && dataGridViewColumn4 == null, true, num4 == -1, text4) as string;
									if (text2 != null)
									{
										stringBuilder.Append(text2);
									}
								}
							}
							if (flag2)
							{
								string text2 = this.TopLeftHeaderCell.GetClipboardContentInternal(-1, lastColumn2 == null, true, true, num4 == -1, text4) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
						}
						else
						{
							DataGridViewColumn dataGridViewColumn3 = this.Columns.GetFirstColumn(DataGridViewElementStates.Selected | DataGridViewElementStates.Visible);
							if (flag2)
							{
								string text2 = this.TopLeftHeaderCell.GetClipboardContentInternal(-1, true, dataGridViewColumn3 == null, true, num4 == -1, text4) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
							if (dataGridViewColumn3 != null)
							{
								DataGridViewColumn dataGridViewColumn5 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Selected | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								string text2 = dataGridViewColumn3.HeaderCell.GetClipboardContentInternal(-1, !flag2, dataGridViewColumn5 == null, true, num4 == -1, text4) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
								while (dataGridViewColumn5 != null)
								{
									dataGridViewColumn3 = dataGridViewColumn5;
									dataGridViewColumn5 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Selected | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
									text2 = dataGridViewColumn3.HeaderCell.GetClipboardContentInternal(-1, false, dataGridViewColumn5 == null, true, num4 == -1, text4) as string;
									if (text2 != null)
									{
										stringBuilder.Append(text2);
									}
								}
							}
						}
					}
					bool flag8 = true;
					int num10 = num4;
					int num11 = -1;
					if (num10 != -1)
					{
						num11 = this.Rows.GetNextRow(num10, DataGridViewElementStates.Visible);
					}
					while (num10 != -1)
					{
						if (this.RightToLeftInternal)
						{
							DataGridViewColumn lastColumn3 = this.Columns.GetLastColumn(DataGridViewElementStates.Selected | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
							DataGridViewColumn dataGridViewColumn3 = lastColumn3;
							if (dataGridViewColumn3 != null)
							{
								DataGridViewColumn dataGridViewColumn4 = this.Columns.GetPreviousColumn(dataGridViewColumn3, DataGridViewElementStates.Selected | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								string text2 = this.Rows.SharedRow(num10).Cells[dataGridViewColumn3.Index].GetClipboardContentInternal(num10, true, !flag2 && dataGridViewColumn4 == null, !flag && flag8, num11 == -1, text4) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
								while (dataGridViewColumn4 != null)
								{
									dataGridViewColumn3 = dataGridViewColumn4;
									dataGridViewColumn4 = this.Columns.GetPreviousColumn(dataGridViewColumn3, DataGridViewElementStates.Selected | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
									text2 = this.Rows.SharedRow(num10).Cells[dataGridViewColumn3.Index].GetClipboardContentInternal(num10, false, !flag2 && dataGridViewColumn4 == null, !flag && flag8, num11 == -1, text4) as string;
									if (text2 != null)
									{
										stringBuilder.Append(text2);
									}
								}
							}
							if (flag2)
							{
								string text2 = this.Rows.SharedRow(num10).HeaderCell.GetClipboardContentInternal(num10, lastColumn3 == null, true, !flag && flag8, num11 == -1, text4) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
						}
						else
						{
							DataGridViewColumn dataGridViewColumn3 = this.Columns.GetFirstColumn(DataGridViewElementStates.Selected | DataGridViewElementStates.Visible);
							if (flag2)
							{
								string text2 = this.Rows.SharedRow(num10).HeaderCell.GetClipboardContentInternal(num10, true, dataGridViewColumn3 == null, !flag && flag8, num11 == -1, text4) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
							if (dataGridViewColumn3 != null)
							{
								DataGridViewColumn dataGridViewColumn5 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Selected | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								string text2 = this.Rows.SharedRow(num10).Cells[dataGridViewColumn3.Index].GetClipboardContentInternal(num10, !flag2, dataGridViewColumn5 == null, !flag && flag8, num11 == -1, text4) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
								while (dataGridViewColumn5 != null)
								{
									dataGridViewColumn3 = dataGridViewColumn5;
									dataGridViewColumn5 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Selected | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
									text2 = this.Rows.SharedRow(num10).Cells[dataGridViewColumn3.Index].GetClipboardContentInternal(num10, false, dataGridViewColumn5 == null, !flag && flag8, num11 == -1, text4) as string;
									if (text2 != null)
									{
										stringBuilder.Append(text2);
									}
								}
							}
						}
						num10 = num11;
						if (num10 != -1)
						{
							num11 = this.Rows.GetNextRow(num10, DataGridViewElementStates.Visible);
						}
						flag8 = false;
					}
					if (string.Equals(text4, DataFormats.Html, StringComparison.OrdinalIgnoreCase))
					{
						MemoryStream memoryStream3 = null;
						DataGridView.GetClipboardContentForHtml(stringBuilder, out memoryStream3);
						dataObject.SetData(text4, false, memoryStream3);
					}
					else
					{
						dataObject.SetData(text4, false, stringBuilder.ToString());
					}
				}
				break;
			}
			}
			return dataObject;
		}

		// Token: 0x06001AE5 RID: 6885 RVA: 0x00067DE0 File Offset: 0x00065FE0
		private static void GetClipboardContentForHtml(StringBuilder sbContent, out MemoryStream utf8Stream)
		{
			byte[] array = Encoding.Unicode.GetBytes(sbContent.ToString());
			byte[] array2 = Encoding.Convert(Encoding.Unicode, Encoding.UTF8, array);
			int num = 135 + array2.Length;
			int num2 = num + 36;
			string text = string.Format(CultureInfo.InvariantCulture, "Version:1.0\r\nStartHTML:00000097\r\nEndHTML:{0}\r\nStartFragment:00000133\r\nEndFragment:{1}\r\n", new object[]
			{
				num2.ToString("00000000", CultureInfo.InvariantCulture),
				num.ToString("00000000", CultureInfo.InvariantCulture)
			}) + "<HTML>\r\n<BODY>\r\n<!--StartFragment-->";
			sbContent.Insert(0, text);
			sbContent.Append("\r\n<!--EndFragment-->\r\n</BODY>\r\n</HTML>");
			array = Encoding.Unicode.GetBytes(sbContent.ToString());
			array2 = Encoding.Convert(Encoding.Unicode, Encoding.UTF8, array);
			utf8Stream = new MemoryStream(num2 + 1);
			utf8Stream.Write(array2, 0, num2);
			utf8Stream.WriteByte(0);
		}

		/// <summary>Returns the rectangle that represents the display area for a column, as determined by the column index.</summary>
		/// <param name="columnIndex">The column index for the desired cell.</param>
		/// <param name="cutOverflow">
		///   <see langword="true" /> to return the column rectangle visible in the <see cref="T:System.Windows.Forms.DataGridView" /> bounds; <see langword="false" /> to return the entire column rectangle.</param>
		/// <returns>The <see cref="T:System.Drawing.Rectangle" /> that represents the display rectangle of the column.</returns>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///   <paramref name="columnIndex" /> is not in the valid range of 0 to the number of columns minus 1.</exception>
		// Token: 0x06001AE6 RID: 6886 RVA: 0x00067EBB File Offset: 0x000660BB
		public Rectangle GetColumnDisplayRectangle(int columnIndex, bool cutOverflow)
		{
			if (columnIndex < 0 || columnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("columnIndex");
			}
			return this.GetColumnDisplayRectanglePrivate(columnIndex, cutOverflow);
		}

		// Token: 0x06001AE7 RID: 6887 RVA: 0x00067EE4 File Offset: 0x000660E4
		private Rectangle GetColumnDisplayRectanglePrivate(int columnIndex, bool cutOverflow)
		{
			if (!this.Columns[columnIndex].Displayed)
			{
				return Rectangle.Empty;
			}
			Rectangle data = this.layout.Data;
			bool flag = false;
			int num;
			if (this.RightToLeftInternal)
			{
				num = data.Right;
			}
			else
			{
				num = data.X;
			}
			DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			while (dataGridViewColumn != null && !flag && (!this.RightToLeftInternal || num >= data.X) && (this.RightToLeftInternal || num <= data.Right))
			{
				if (dataGridViewColumn.Index == columnIndex)
				{
					flag = true;
				}
				else
				{
					if (this.RightToLeftInternal)
					{
						num -= dataGridViewColumn.Thickness;
					}
					else
					{
						num += dataGridViewColumn.Thickness;
					}
					dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				}
			}
			if (!flag && this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0)
			{
				dataGridViewColumn = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
				while (dataGridViewColumn != null && !flag && (!this.RightToLeftInternal || num >= data.X) && (this.RightToLeftInternal || num <= data.Right))
				{
					if (dataGridViewColumn.Index == columnIndex)
					{
						flag = true;
					}
					else
					{
						if (this.RightToLeftInternal)
						{
							num -= dataGridViewColumn.Thickness;
						}
						else
						{
							num += dataGridViewColumn.Thickness;
						}
						if (dataGridViewColumn.Index == this.displayedBandsInfo.FirstDisplayedScrollingCol)
						{
							if (this.RightToLeftInternal)
							{
								num += this.negOffset;
							}
							else
							{
								num -= this.negOffset;
							}
						}
						dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					}
				}
			}
			if (flag)
			{
				int num2 = dataGridViewColumn.Thickness;
				if (dataGridViewColumn.Index == this.displayedBandsInfo.FirstDisplayedScrollingCol)
				{
					num2 -= this.negOffset;
				}
				int num3;
				if (cutOverflow && ((!this.RightToLeftInternal && num + num2 > data.Right) || (this.RightToLeftInternal && num - num2 < data.X)))
				{
					if (this.RightToLeftInternal)
					{
						num3 = num - data.X;
					}
					else
					{
						num3 = data.Right - num;
					}
				}
				else
				{
					num3 = num2;
				}
				Rectangle rectangle;
				if (this.RightToLeftInternal)
				{
					rectangle = new Rectangle(num - num3, data.Y, num3, data.Height);
				}
				else
				{
					rectangle = new Rectangle(num, data.Y, num3, data.Height);
				}
				if (this.layout.ColumnHeadersVisible)
				{
					rectangle.Height += this.layout.ColumnHeaders.Height;
					rectangle.Y -= this.layout.ColumnHeaders.Height;
				}
				return rectangle;
			}
			return Rectangle.Empty;
		}

		// Token: 0x06001AE8 RID: 6888 RVA: 0x00068180 File Offset: 0x00066380
		private int GetColumnIndexFromX(int x, out int xColumnLeftEdge)
		{
			Rectangle data = this.layout.Data;
			if (!this.RightToLeftInternal && x == data.X - 1)
			{
				x++;
			}
			else if (this.RightToLeftInternal && x == data.Right)
			{
				x--;
			}
			int num;
			if (this.RightToLeftInternal)
			{
				num = data.Right - 1;
			}
			else
			{
				num = data.X;
			}
			DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			while (dataGridViewColumn != null && ((!this.RightToLeftInternal && num < data.Right) || (this.RightToLeftInternal && num >= data.X)))
			{
				if (this.RightToLeftInternal)
				{
					num -= dataGridViewColumn.Thickness;
				}
				else
				{
					num += dataGridViewColumn.Thickness;
				}
				if (!this.RightToLeftInternal && num > x)
				{
					xColumnLeftEdge = num - dataGridViewColumn.Thickness;
					return dataGridViewColumn.Index;
				}
				if (this.RightToLeftInternal && num < x)
				{
					xColumnLeftEdge = num + dataGridViewColumn.Thickness;
					return dataGridViewColumn.Index;
				}
				dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
			}
			if (this.RightToLeftInternal)
			{
				num += this.negOffset;
			}
			else
			{
				num -= this.negOffset;
			}
			if (this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0)
			{
				dataGridViewColumn = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
				while (dataGridViewColumn != null && ((!this.RightToLeftInternal && num < data.Right) || (this.RightToLeftInternal && num >= data.X)))
				{
					if (this.RightToLeftInternal)
					{
						num -= dataGridViewColumn.Thickness;
					}
					else
					{
						num += dataGridViewColumn.Thickness;
					}
					if (!this.RightToLeftInternal && num > x)
					{
						xColumnLeftEdge = num - dataGridViewColumn.Thickness;
						return dataGridViewColumn.Index;
					}
					if (this.RightToLeftInternal && num < x)
					{
						xColumnLeftEdge = num + dataGridViewColumn.Thickness;
						return dataGridViewColumn.Index;
					}
					dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				}
			}
			xColumnLeftEdge = -1;
			return -1;
		}

		// Token: 0x06001AE9 RID: 6889 RVA: 0x00068361 File Offset: 0x00066561
		private static int GetColumnScrollRate(int xOffset)
		{
			if (xOffset <= 10)
			{
				return 480;
			}
			if (xOffset <= 15)
			{
				return 313;
			}
			if (xOffset <= 25)
			{
				return 180;
			}
			if (xOffset <= 35)
			{
				return 123;
			}
			return Math.Max(1, 4000 / xOffset);
		}

		// Token: 0x06001AEA RID: 6890 RVA: 0x0006839C File Offset: 0x0006659C
		internal int GetColumnXFromIndex(int index)
		{
			int num;
			if (this.RightToLeftInternal)
			{
				num = this.layout.Data.Right - 1;
			}
			else
			{
				num = this.layout.Data.X;
			}
			DataGridViewColumn dataGridViewColumn;
			for (dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible); dataGridViewColumn != null; dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, DataGridViewElementStates.None))
			{
				if (index == dataGridViewColumn.Index)
				{
					return num;
				}
				if (this.RightToLeftInternal)
				{
					num -= dataGridViewColumn.Thickness;
				}
				else
				{
					num += dataGridViewColumn.Thickness;
				}
			}
			if (this.RightToLeftInternal)
			{
				num += this.negOffset;
			}
			else
			{
				num -= this.negOffset;
			}
			int num2 = num;
			if (this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0)
			{
				dataGridViewColumn = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
			}
			else
			{
				dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
			}
			while (dataGridViewColumn != null)
			{
				if (index == dataGridViewColumn.Index)
				{
					return num;
				}
				if (this.RightToLeftInternal)
				{
					num -= dataGridViewColumn.Thickness;
				}
				else
				{
					num += dataGridViewColumn.Thickness;
				}
				dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
			}
			num = num2;
			dataGridViewColumn = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
			for (dataGridViewColumn = this.Columns.GetPreviousColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen); dataGridViewColumn != null; dataGridViewColumn = this.Columns.GetPreviousColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen))
			{
				if (this.RightToLeftInternal)
				{
					num += dataGridViewColumn.Thickness;
				}
				else
				{
					num -= dataGridViewColumn.Thickness;
				}
				if (index == dataGridViewColumn.Index)
				{
					return num;
				}
			}
			return 0;
		}

		// Token: 0x06001AEB RID: 6891 RVA: 0x00068518 File Offset: 0x00066718
		private int GetNegOffsetFromHorizontalOffset(int horizontalOffset)
		{
			DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
			while (dataGridViewColumn != null && dataGridViewColumn.Thickness <= horizontalOffset)
			{
				horizontalOffset -= dataGridViewColumn.Thickness;
				dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
			}
			return horizontalOffset;
		}

		// Token: 0x06001AEC RID: 6892 RVA: 0x00068560 File Offset: 0x00066760
		private bool GetOutOfBoundCorrectedHitTestInfo(ref DataGridView.HitTestInfo hti, ref int mouseX, ref int mouseY, out int xOffset, out int yOffset)
		{
			xOffset = (yOffset = 0);
			Rectangle rectangle = this.layout.Data;
			int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Visible);
			int rowsHeight2 = this.Rows.GetRowsHeight(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			int num = this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight2);
			int num2 = this.ComputeHeightOfTrailingScrollingRows();
			int num3 = Math.Max(0, this.layout.Data.Width - this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible));
			int num4 = Math.Max(0, this.layout.Data.Height - rowsHeight2 - num2);
			if (this.dataGridViewOper[8])
			{
				if (this.layout.RowHeadersVisible)
				{
					rectangle = Rectangle.Union(rectangle, this.layout.RowHeaders);
				}
				this.DiscardZonesInScrollingArea(ref rectangle, num3, num4, rowsHeight2, false, true);
				if (mouseY >= rectangle.Top && mouseY <= rectangle.Bottom)
				{
					hti = this.HitTest(this.RightToLeftInternal ? (rectangle.Right - 1) : rectangle.Left, mouseY);
					if (this.ptAnchorCell.Y != -1 && (this.Rows.GetRowState(this.ptAnchorCell.Y) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None && this.trackRowEdge != -1 && (this.Rows.GetRowState(this.trackRowEdge) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None && hti.row >= 0 && (this.Rows.GetRowState(hti.row) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None)
					{
						int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
						int num5;
						if (hti.col >= 0)
						{
							num5 = hti.col;
						}
						else
						{
							DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
							num5 = ((firstColumn == null) ? (-1) : firstColumn.Index);
						}
						if (num5 >= 0 && firstRow >= 0)
						{
							if (!this.ScrollIntoView(num5, firstRow, false))
							{
								return false;
							}
							hti = this.HitTest(this.RightToLeftInternal ? rectangle.Right : rectangle.Left, mouseY);
						}
					}
					return true;
				}
				if (mouseY < rectangle.Top)
				{
					if (this.ptAnchorCell.Y != -1 && ((this.Rows.GetRowState(this.ptAnchorCell.Y) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None || (this.trackRowEdge != -1 && (this.Rows.GetRowState(this.trackRowEdge) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None)) && this.verticalOffset != 0)
					{
						yOffset = mouseY - rectangle.Top;
						if (this.RightToLeftInternal)
						{
							mouseX = rectangle.Right - 1;
						}
						else
						{
							mouseX = rectangle.Left + 1;
						}
					}
					else
					{
						hti = this.HitTest(this.RightToLeftInternal ? rectangle.Right : rectangle.Left, mouseY);
					}
				}
				else if (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0 && this.verticalOffset + this.Rows.SharedRow(this.displayedBandsInfo.FirstDisplayedScrollingRow).GetHeight(this.displayedBandsInfo.FirstDisplayedScrollingRow) <= rowsHeight - rowsHeight2 - num)
				{
					yOffset = mouseY - rectangle.Bottom;
					if (this.RightToLeftInternal)
					{
						mouseX = rectangle.Right - 1;
					}
					else
					{
						mouseX = rectangle.Left + 1;
					}
				}
				return true;
			}
			else
			{
				if (!this.dataGridViewOper[4])
				{
					if (this.dataGridViewOper[16])
					{
						bool flag = false;
						this.DiscardZonesInScrollingArea(ref rectangle, num3, num4, rowsHeight2, true, true);
						if (mouseY < rectangle.Top)
						{
							if (((this.ptAnchorCell.Y != -1 && (this.Rows.GetRowState(this.ptAnchorCell.Y) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None) || (this.ptCurrentCell.Y != -1 && (this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None)) && this.verticalOffset != 0)
							{
								yOffset = mouseY - rectangle.Top;
							}
							else if (mouseY < this.layout.Data.Top)
							{
								mouseY = this.layout.Data.Top + 1;
								flag = true;
							}
						}
						else if (mouseY > rectangle.Bottom)
						{
							if (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0)
							{
								if (this.verticalOffset + this.Rows.SharedRow(this.displayedBandsInfo.FirstDisplayedScrollingRow).GetHeight(this.displayedBandsInfo.FirstDisplayedScrollingRow) <= rowsHeight - rowsHeight2 - num)
								{
									yOffset = mouseY - rectangle.Bottom;
								}
								else
								{
									mouseY = rectangle.Bottom - 1;
									flag = true;
								}
							}
							else
							{
								mouseY = rectangle.Bottom - 1;
								flag = true;
							}
						}
						if ((!this.RightToLeftInternal && mouseX < rectangle.Left) || (this.RightToLeftInternal && mouseX > rectangle.Right))
						{
							if (((this.ptAnchorCell.X != -1 && !this.Columns[this.ptAnchorCell.X].Frozen) || (this.ptCurrentCell.X != -1 && !this.Columns[this.ptCurrentCell.X].Frozen)) && this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0 && (this.negOffset > 0 || this.Columns.GetPreviousColumn(this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol], DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen) != null))
							{
								if (this.RightToLeftInternal)
								{
									xOffset = rectangle.Right - mouseX;
								}
								else
								{
									xOffset = mouseX - rectangle.Left;
								}
							}
							else if (!this.RightToLeftInternal && mouseX < this.layout.Data.Left)
							{
								mouseX = this.layout.Data.Left + 1;
								flag = true;
							}
							else if (this.RightToLeftInternal && mouseX > this.layout.Data.Right)
							{
								mouseX = this.layout.Data.Right - 1;
								flag = true;
							}
						}
						else if ((!this.RightToLeftInternal && mouseX > rectangle.Right) || (this.RightToLeftInternal && mouseX < rectangle.Left))
						{
							if (this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0 && (this.displayedBandsInfo.LastTotallyDisplayedScrollingCol == -1 || this.Columns.GetNextColumn(this.Columns[this.displayedBandsInfo.LastTotallyDisplayedScrollingCol], DataGridViewElementStates.Visible, DataGridViewElementStates.None) != null))
							{
								DataGridViewColumn nextColumn = this.Columns.GetNextColumn(this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								int num6 = 0;
								for (DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen); dataGridViewColumn != nextColumn; dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
								{
									num6 += dataGridViewColumn.Thickness;
								}
								if (this.HorizontalOffset != num6)
								{
									if (this.RightToLeftInternal)
									{
										xOffset = rectangle.Left - mouseX;
									}
									else
									{
										xOffset = mouseX - rectangle.Right;
									}
								}
								else
								{
									if (this.RightToLeftInternal)
									{
										mouseX = rectangle.Left + 1;
									}
									else
									{
										mouseX = rectangle.Right - 1;
									}
									flag = true;
								}
							}
							else
							{
								if (this.RightToLeftInternal)
								{
									mouseX = rectangle.Left + 1;
								}
								else
								{
									mouseX = rectangle.Right - 1;
								}
								flag = true;
							}
						}
						if (flag)
						{
							hti = this.HitTest(mouseX, mouseY);
						}
					}
					return true;
				}
				if (this.layout.ColumnHeadersVisible)
				{
					rectangle = Rectangle.Union(rectangle, this.layout.ColumnHeaders);
				}
				this.DiscardZonesInScrollingArea(ref rectangle, num3, num4, rowsHeight2, true, false);
				if (mouseX >= rectangle.Left && mouseX <= rectangle.Right)
				{
					hti = this.HitTest(mouseX, rectangle.Top);
					if (this.ptAnchorCell.X != -1 && this.Columns[this.ptAnchorCell.X].Frozen && this.trackColumnEdge != -1 && this.Columns[this.trackColumnEdge].Frozen && hti.col >= 0 && !this.Columns[hti.col].Frozen)
					{
						int index = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen).Index;
						int num7;
						if (hti.row >= 0)
						{
							num7 = hti.row;
						}
						else
						{
							num7 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
						}
						if (num7 >= 0 && index >= 0)
						{
							if (!this.ScrollIntoView(index, num7, false))
							{
								return false;
							}
							hti = this.HitTest(mouseX, rectangle.Top);
						}
					}
					return true;
				}
				if ((!this.RightToLeftInternal && mouseX < rectangle.Left) || (this.RightToLeftInternal && mouseX > rectangle.Right))
				{
					if (this.ptAnchorCell.X != -1 && (!this.Columns[this.ptAnchorCell.X].Frozen || (this.trackColumnEdge != -1 && !this.Columns[this.trackColumnEdge].Frozen)) && this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0 && (this.negOffset > 0 || this.Columns.GetPreviousColumn(this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol], DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen) != null))
					{
						if (this.RightToLeftInternal)
						{
							xOffset = rectangle.Right - mouseX;
						}
						else
						{
							xOffset = mouseX - rectangle.Left;
						}
						mouseY = rectangle.Top + 1;
					}
					else
					{
						hti = this.HitTest(mouseX, rectangle.Top);
					}
				}
				else if (this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0)
				{
					if (this.displayedBandsInfo.LastTotallyDisplayedScrollingCol != -1 && this.Columns.GetNextColumn(this.Columns[this.displayedBandsInfo.LastTotallyDisplayedScrollingCol], DataGridViewElementStates.Visible, DataGridViewElementStates.None) == null)
					{
						return true;
					}
					DataGridViewColumn nextColumn2 = this.Columns.GetNextColumn(this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					int num8 = 0;
					for (DataGridViewColumn dataGridViewColumn2 = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen); dataGridViewColumn2 != nextColumn2; dataGridViewColumn2 = this.Columns.GetNextColumn(dataGridViewColumn2, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
					{
						num8 += dataGridViewColumn2.Thickness;
					}
					if (this.HorizontalOffset != num8)
					{
						if (this.RightToLeftInternal)
						{
							xOffset = rectangle.Left - mouseX;
						}
						else
						{
							xOffset = mouseX - rectangle.Right;
						}
						mouseY = rectangle.Top + 1;
					}
				}
				return true;
			}
		}

		// Token: 0x06001AED RID: 6893 RVA: 0x00068FC8 File Offset: 0x000671C8
		internal override Size GetPreferredSizeCore(Size proposedConstraints)
		{
			int num = 2 * (this.BorderWidth + this.Padding.Size.Width);
			int num2 = 2 * (this.BorderWidth + this.Padding.Size.Height);
			bool flag = this.scrollBars == ScrollBars.Both || this.scrollBars == ScrollBars.Horizontal;
			bool flag2 = this.scrollBars == ScrollBars.Both || this.scrollBars == ScrollBars.Vertical;
			int num3 = 16 + num;
			if (flag2)
			{
				num3 += this.vertScrollBar.Width;
			}
			if (this.RowHeadersVisible)
			{
				num3 += this.RowHeadersWidth;
			}
			int num4 = Math.Min(num3 + this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible), proposedConstraints.Width);
			if (num4 < num3)
			{
				num4 = num3;
			}
			int num5 = 16 + num2;
			if (flag)
			{
				num5 += this.horizScrollBar.Height;
			}
			if (this.ColumnHeadersVisible)
			{
				num5 += this.ColumnHeadersHeight;
			}
			int num6 = Math.Min(num5 + this.Rows.GetRowsHeight(DataGridViewElementStates.Visible), proposedConstraints.Height);
			if (num6 < num5)
			{
				num6 = num5;
			}
			return new Size(num4, num6);
		}

		/// <summary>Returns the rectangle that represents the display area for a row, as determined by the row index.</summary>
		/// <param name="rowIndex">The row index for the desired cell.</param>
		/// <param name="cutOverflow">
		///   <see langword="true" /> to return the row rectangle visible in the <see cref="T:System.Windows.Forms.DataGridView" /> bounds; <see langword="false" /> to return the entire row rectangle.</param>
		/// <returns>The <see cref="T:System.Drawing.Rectangle" /> that represents the display rectangle of the row.</returns>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///   <paramref name="rowIndex" /> is not in the valid range of 0 to the number of rows minus 1.</exception>
		// Token: 0x06001AEE RID: 6894 RVA: 0x000690F6 File Offset: 0x000672F6
		public Rectangle GetRowDisplayRectangle(int rowIndex, bool cutOverflow)
		{
			if (rowIndex < 0 || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			return this.GetRowDisplayRectanglePrivate(rowIndex, cutOverflow);
		}

		// Token: 0x06001AEF RID: 6895 RVA: 0x00069120 File Offset: 0x00067320
		private Rectangle GetRowDisplayRectanglePrivate(int rowIndex, bool cutOverflow)
		{
			if ((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Displayed) == DataGridViewElementStates.None)
			{
				return Rectangle.Empty;
			}
			Rectangle data = this.layout.Data;
			int num = data.Y;
			bool flag = false;
			int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			while (num2 != -1 && !flag && num <= data.Bottom)
			{
				if (num2 == rowIndex)
				{
					flag = true;
				}
				else
				{
					num += this.Rows.SharedRow(num2).GetHeight(num2);
					num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				}
			}
			if (!flag && this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0)
			{
				num2 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
				while (num2 != -1 && !flag && num <= data.Bottom)
				{
					if (num2 == rowIndex)
					{
						flag = true;
					}
					else
					{
						num += this.Rows.SharedRow(num2).GetHeight(num2);
						num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
					}
				}
			}
			if (flag)
			{
				int num3;
				if (cutOverflow && num + this.Rows.SharedRow(num2).GetHeight(num2) > data.Bottom)
				{
					num3 = data.Bottom - num;
				}
				else
				{
					num3 = this.Rows.SharedRow(num2).GetHeight(num2);
				}
				Rectangle rectangle = new Rectangle(data.X, num, data.Width, num3);
				if (this.layout.RowHeadersVisible)
				{
					rectangle.Width += this.layout.RowHeaders.Width;
					if (!this.RightToLeftInternal)
					{
						rectangle.X -= this.layout.RowHeaders.Width;
					}
				}
				return rectangle;
			}
			return Rectangle.Empty;
		}

		// Token: 0x06001AF0 RID: 6896 RVA: 0x000692BC File Offset: 0x000674BC
		private int GetRowIndexFromY(int y, out int yRowTopEdge)
		{
			Rectangle data = this.layout.Data;
			if (y == data.Y - 1)
			{
				y++;
			}
			int num = data.Y;
			int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			while (num2 != -1 && num < data.Bottom)
			{
				int num3 = this.Rows.SharedRow(num2).GetHeight(num2);
				num += num3;
				if (num > y)
				{
					yRowTopEdge = num - num3;
					return num2;
				}
				num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			}
			if (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0)
			{
				num2 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
				while (num2 != -1 && num < data.Bottom)
				{
					int num3 = this.Rows.SharedRow(num2).GetHeight(num2);
					num += num3;
					if (num > y)
					{
						yRowTopEdge = num - num3;
						return num2;
					}
					num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
				}
			}
			yRowTopEdge = -1;
			return -1;
		}

		// Token: 0x06001AF1 RID: 6897 RVA: 0x0006939C File Offset: 0x0006759C
		private static int GetRowScrollRate(int yOffset)
		{
			if (yOffset <= 10)
			{
				return 90;
			}
			if (yOffset <= 15)
			{
				return 57;
			}
			if (yOffset <= 25)
			{
				return 30;
			}
			if (yOffset <= 35)
			{
				return 18;
			}
			return Math.Max(1, 600 / yOffset);
		}

		// Token: 0x06001AF2 RID: 6898 RVA: 0x000693CC File Offset: 0x000675CC
		internal int GetRowYFromIndex(int index)
		{
			int num = this.layout.Data.Y;
			int num2;
			for (num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible); num2 != -1; num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible))
			{
				if (index == num2)
				{
					return num;
				}
				num += this.Rows.SharedRow(num2).GetHeight(num2);
			}
			int num3 = num;
			if (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0)
			{
				if (index >= this.displayedBandsInfo.FirstDisplayedScrollingRow)
				{
					num2 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
				}
				else
				{
					num2 = -1;
				}
			}
			else
			{
				num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
			}
			if (num2 != -1)
			{
				while (num2 != -1)
				{
					if (index == num2)
					{
						return num;
					}
					num += this.Rows.SharedRow(num2).GetHeight(num2);
					num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
				}
			}
			num = num3;
			for (num2 = this.Rows.GetPreviousRow(this.displayedBandsInfo.FirstDisplayedScrollingRow, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen); num2 != -1; num2 = this.Rows.GetPreviousRow(num2, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen))
			{
				num -= this.Rows.SharedRow(num2).GetHeight(num2);
				if (index == num2)
				{
					return num;
				}
			}
			return 0;
		}

		// Token: 0x06001AF3 RID: 6899 RVA: 0x000694EC File Offset: 0x000676EC
		private bool GetTabKeyEffective(bool shift, bool ctrl)
		{
			if (this.StandardTab)
			{
				return ctrl && (shift || (this.VisibleCellExists && !this.CurrentCellIsLastVisibleCell)) && (!shift || (this.VisibleCellExists && !this.CurrentCellIsFirstVisibleCell));
			}
			return !ctrl && (shift || (this.VisibleCellExists && !this.CurrentCellIsLastVisibleCell)) && (!shift || (this.VisibleCellExists && !this.CurrentCellIsFirstVisibleCell));
		}

		/// <summary>Returns location information, such as row and column indices, given x- and y-coordinates.</summary>
		/// <param name="x">The x-coordinate.</param>
		/// <param name="y">The y-coordinate.</param>
		/// <returns>A <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" /> that contains the location information.</returns>
		// Token: 0x06001AF4 RID: 6900 RVA: 0x00069568 File Offset: 0x00067768
		public DataGridView.HitTestInfo HitTest(int x, int y)
		{
			DataGridView.HitTestInfo hitTestInfo = new DataGridView.HitTestInfo();
			if (!this.layout.Inside.Contains(x, y))
			{
				return hitTestInfo;
			}
			if (this.horizScrollBar != null && this.horizScrollBar.Visible && this.horizScrollBar.Bounds.Contains(x, y))
			{
				hitTestInfo.type = DataGridViewHitTestType.HorizontalScrollBar;
				return hitTestInfo;
			}
			if (this.vertScrollBar != null && this.vertScrollBar.Visible && this.vertScrollBar.Bounds.Contains(x, y))
			{
				hitTestInfo.type = DataGridViewHitTestType.VerticalScrollBar;
				return hitTestInfo;
			}
			if (this.layout.TopLeftHeader.Contains(x, y))
			{
				hitTestInfo.type = DataGridViewHitTestType.TopLeftHeader;
				hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeader;
				if (this.RightToLeftInternal)
				{
					hitTestInfo.colStart = this.layout.TopLeftHeader.Right - 1;
				}
				else
				{
					hitTestInfo.colStart = this.layout.TopLeftHeader.Left;
				}
				hitTestInfo.rowStart = this.layout.TopLeftHeader.Top;
				if ((!this.RightToLeftInternal && this.layout.TopLeftHeader.Right - x < 6) || (this.RightToLeftInternal && x - this.layout.TopLeftHeader.Left < 6))
				{
					if (this.RowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing)
					{
						hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeLeft;
						if (this.RightToLeftInternal)
						{
							hitTestInfo.mouseBarOffset = this.layout.TopLeftHeader.Left - x - 1;
						}
						else
						{
							hitTestInfo.mouseBarOffset = this.layout.TopLeftHeader.Right - x - 1;
						}
					}
				}
				else if (this.layout.TopLeftHeader.Top + this.layout.TopLeftHeader.Height - y < 5 && this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.EnableResizing)
				{
					hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeTop;
					hitTestInfo.mouseBarOffset = this.layout.TopLeftHeader.Top + this.layout.TopLeftHeader.Height - y - 1;
				}
				return hitTestInfo;
			}
			if (this.layout.ColumnHeaders.Contains(x, y))
			{
				int num;
				hitTestInfo.col = this.GetColumnIndexFromX(x, out num);
				if (hitTestInfo.col < 0)
				{
					return DataGridView.HitTestInfo.Nowhere;
				}
				hitTestInfo.type = DataGridViewHitTestType.ColumnHeader;
				hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.ColumnHeader;
				hitTestInfo.rowStart = this.layout.ColumnHeaders.Top;
				hitTestInfo.colStart = num;
				int thickness = this.Columns[hitTestInfo.col].Thickness;
				if ((!this.RightToLeftInternal && num + thickness - x < 6) || (this.RightToLeftInternal && x - num + thickness < 6))
				{
					if (this.RightToLeftInternal)
					{
						hitTestInfo.mouseBarOffset = num - thickness - x + 1;
					}
					else
					{
						hitTestInfo.mouseBarOffset = num + thickness - x - 1;
					}
					DataGridViewColumn dataGridViewColumn = this.Columns[hitTestInfo.col];
					if (dataGridViewColumn.Resizable == DataGridViewTriState.True && (dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.None || dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill))
					{
						hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeRight;
					}
					else
					{
						hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.ColumnHeaderRight;
					}
				}
				else if ((!this.RightToLeftInternal && x - num < 6) || (this.RightToLeftInternal && num - x < 6))
				{
					DataGridViewColumn previousColumn = this.Columns.GetPreviousColumn(this.Columns[hitTestInfo.col], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					if (previousColumn != null)
					{
						hitTestInfo.adjacentCol = previousColumn.Index;
						if (this.RightToLeftInternal)
						{
							hitTestInfo.mouseBarOffset = num - x + 1;
						}
						else
						{
							hitTestInfo.mouseBarOffset = num - x - 1;
						}
						if (previousColumn.Resizable == DataGridViewTriState.True && (previousColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.None || previousColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill))
						{
							hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeLeft;
						}
						else
						{
							hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.ColumnHeaderLeft;
						}
					}
					else if (this.RowHeadersVisible && this.RowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing)
					{
						hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeRight;
						if (this.RightToLeftInternal)
						{
							hitTestInfo.mouseBarOffset = num - x;
						}
						else
						{
							hitTestInfo.mouseBarOffset = num - x - 1;
						}
					}
					else
					{
						hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.FirstColumnHeaderLeft;
					}
				}
				else if (this.layout.ColumnHeaders.Bottom - y < 5 && this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.EnableResizing)
				{
					hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.ColumnHeadersResizeBottom;
					hitTestInfo.mouseBarOffset = this.layout.ColumnHeaders.Bottom - y - 1;
				}
			}
			if (this.layout.RowHeaders.Contains(x, y))
			{
				int num2;
				hitTestInfo.row = this.GetRowIndexFromY(y, out num2);
				if (hitTestInfo.row < 0)
				{
					return DataGridView.HitTestInfo.Nowhere;
				}
				hitTestInfo.type = DataGridViewHitTestType.RowHeader;
				hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.RowHeader;
				hitTestInfo.rowStart = num2;
				if (this.RightToLeftInternal)
				{
					hitTestInfo.colStart = this.layout.RowHeaders.Right - 1;
				}
				else
				{
					hitTestInfo.colStart = this.layout.RowHeaders.Left;
				}
				int height = this.Rows.SharedRow(hitTestInfo.row).GetHeight(hitTestInfo.row);
				if (num2 + height - y < 5)
				{
					if (this.RowIsResizable(hitTestInfo.row) && this.AutoSizeRowsMode == DataGridViewAutoSizeRowsMode.None)
					{
						hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.RowResizeBottom;
						hitTestInfo.mouseBarOffset = num2 + height - y - 1;
					}
				}
				else if (y - num2 < 5)
				{
					int num3 = -1;
					if (hitTestInfo.row != this.displayedBandsInfo.FirstDisplayedScrollingRow || this.displayedBandsInfo.NumDisplayedFrozenRows > 0)
					{
						num3 = this.Rows.GetPreviousRow(hitTestInfo.row, DataGridViewElementStates.Visible);
					}
					if (num3 != -1)
					{
						if (this.RowIsResizable(num3) && this.AutoSizeRowsMode == DataGridViewAutoSizeRowsMode.None)
						{
							hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.RowResizeTop;
							hitTestInfo.adjacentRow = num3;
							hitTestInfo.mouseBarOffset = num2 - y - 1;
						}
					}
					else if (this.ColumnHeadersVisible && this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.EnableResizing)
					{
						hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeBottom;
						hitTestInfo.mouseBarOffset = num2 - y - 1;
					}
				}
				else if (((!this.RightToLeftInternal && this.layout.RowHeaders.Right - x < 6) || (this.RightToLeftInternal && x - this.layout.RowHeaders.Left < 6)) && this.RowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing)
				{
					hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.RowHeadersResizeRight;
					if (this.RightToLeftInternal)
					{
						hitTestInfo.mouseBarOffset = this.layout.RowHeaders.Left - x - 1;
					}
					else
					{
						hitTestInfo.mouseBarOffset = this.layout.RowHeaders.Right - x - 1;
					}
				}
			}
			if (this.layout.Data.Contains(x, y))
			{
				int num4;
				hitTestInfo.col = this.GetColumnIndexFromX(x, out num4);
				int num5;
				hitTestInfo.row = this.GetRowIndexFromY(y, out num5);
				if (hitTestInfo.col < 0 || hitTestInfo.row < 0)
				{
					return DataGridView.HitTestInfo.Nowhere;
				}
				hitTestInfo.type = DataGridViewHitTestType.Cell;
				hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.Cell;
				hitTestInfo.rowStart = num5;
				hitTestInfo.colStart = num4;
				if (!this.ColumnHeadersVisible)
				{
					int thickness2 = this.Columns[hitTestInfo.col].Thickness;
					if ((!this.RightToLeftInternal && num4 + thickness2 - x < 6) || (this.RightToLeftInternal && x - num4 + thickness2 < 6))
					{
						if (this.RightToLeftInternal)
						{
							hitTestInfo.mouseBarOffset = num4 - thickness2 - x + 1;
						}
						else
						{
							hitTestInfo.mouseBarOffset = num4 + thickness2 - x - 1;
						}
						DataGridViewColumn dataGridViewColumn2 = this.Columns[hitTestInfo.col];
						if (dataGridViewColumn2.Resizable == DataGridViewTriState.True && (dataGridViewColumn2.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.None || dataGridViewColumn2.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill))
						{
							hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeRight;
						}
						return hitTestInfo;
					}
					if ((!this.RightToLeftInternal && x - num4 < 6) || (this.RightToLeftInternal && num4 - x < 6))
					{
						DataGridViewColumn dataGridViewColumn3 = null;
						if (hitTestInfo.col != this.displayedBandsInfo.FirstDisplayedScrollingCol || this.displayedBandsInfo.LastTotallyDisplayedScrollingCol >= 0)
						{
							dataGridViewColumn3 = this.Columns.GetPreviousColumn(this.Columns[hitTestInfo.col], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
						}
						if (dataGridViewColumn3 != null)
						{
							hitTestInfo.adjacentCol = dataGridViewColumn3.Index;
							if (this.RightToLeftInternal)
							{
								hitTestInfo.mouseBarOffset = num4 - x + 1;
							}
							else
							{
								hitTestInfo.mouseBarOffset = num4 - x - 1;
							}
							if (dataGridViewColumn3.Resizable == DataGridViewTriState.True && (dataGridViewColumn3.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.None || dataGridViewColumn3.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill))
							{
								hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeLeft;
							}
							return hitTestInfo;
						}
						if (this.RowHeadersVisible && this.RowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing)
						{
							hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.RowHeadersResizeLeft;
							if (this.RightToLeftInternal)
							{
								hitTestInfo.mouseBarOffset = num4 - x;
							}
							else
							{
								hitTestInfo.mouseBarOffset = num4 - x - 1;
							}
							return hitTestInfo;
						}
					}
				}
				else if ((!this.RightToLeftInternal && x - num4 < 6) || (this.RightToLeftInternal && num4 - x < 6))
				{
					DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
					if (hitTestInfo.col == firstColumn.Index && this.RowHeadersVisible && this.RowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing)
					{
						hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.RowHeadersResizeLeft;
						if (this.RightToLeftInternal)
						{
							hitTestInfo.mouseBarOffset = num4 - x;
						}
						else
						{
							hitTestInfo.mouseBarOffset = num4 - x - 1;
						}
						return hitTestInfo;
					}
				}
				if (!this.RowHeadersVisible)
				{
					int height2 = this.Rows.SharedRow(hitTestInfo.row).GetHeight(hitTestInfo.row);
					if (num5 + height2 - y < 5)
					{
						if (this.RowIsResizable(hitTestInfo.row) && this.AutoSizeRowsMode == DataGridViewAutoSizeRowsMode.None)
						{
							hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.RowResizeBottom;
							hitTestInfo.mouseBarOffset = num5 + height2 - y - 1;
						}
					}
					else if (y - num5 < 5)
					{
						int num6 = -1;
						if (hitTestInfo.row != this.displayedBandsInfo.FirstDisplayedScrollingRow || this.displayedBandsInfo.NumDisplayedFrozenRows > 0)
						{
							num6 = this.Rows.GetPreviousRow(hitTestInfo.row, DataGridViewElementStates.Visible);
						}
						if (num6 != -1)
						{
							if (this.RowIsResizable(num6) && this.AutoSizeRowsMode == DataGridViewAutoSizeRowsMode.None)
							{
								hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.RowResizeTop;
								hitTestInfo.adjacentRow = num6;
								hitTestInfo.mouseBarOffset = num5 - y - 1;
							}
						}
						else if (this.ColumnHeadersVisible && this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.EnableResizing)
						{
							hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.ColumnHeadersResizeTop;
							hitTestInfo.mouseBarOffset = num5 - y - 1;
						}
					}
				}
				else if (y - num5 < 5)
				{
					int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
					if (hitTestInfo.row == firstRow && this.ColumnHeadersVisible && this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.EnableResizing)
					{
						hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.ColumnHeadersResizeTop;
						hitTestInfo.mouseBarOffset = num5 - y - 1;
					}
				}
			}
			return hitTestInfo;
		}

		// Token: 0x06001AF5 RID: 6901 RVA: 0x00069F8E File Offset: 0x0006818E
		private void HorizScrollTimer_Tick(object sender, EventArgs e)
		{
			base.BeginInvoke(new MethodInvoker(this.HorizScrollTimerHandler));
		}

		// Token: 0x06001AF6 RID: 6902 RVA: 0x00069FA4 File Offset: 0x000681A4
		private void HorizScrollTimerHandler()
		{
			Point point = base.PointToClient(Control.MousePosition);
			DataGridView.HitTestInfo hitTestInfo = this.HitTest(point.X, point.Y);
			int x = point.X;
			int y = point.Y;
			int num;
			int num2;
			if (this.GetOutOfBoundCorrectedHitTestInfo(ref hitTestInfo, ref x, ref y, out num, out num2))
			{
				if (num != 0)
				{
					int num3 = Math.Abs(num);
					int num4 = num / num3;
					this.ScrollColumns(num4);
					this.horizScrollTimer.Interval = DataGridView.GetColumnScrollRate(num3);
					if (this.dataGridViewOper[4])
					{
						hitTestInfo = this.HitTest(point.X + (this.RightToLeftInternal ? 1 : (-1)) * (num + num4), y);
						if (hitTestInfo.col >= 0)
						{
							this.OnColumnSelectMouseMove(hitTestInfo);
							return;
						}
					}
					else if (this.dataGridViewOper[16])
					{
						if (num2 != 0)
						{
							hitTestInfo = this.HitTest(point.X + (this.RightToLeftInternal ? 1 : (-1)) * (num + num4), point.Y - num2 - num2 / Math.Abs(num2));
						}
						else
						{
							hitTestInfo = this.HitTest(point.X + (this.RightToLeftInternal ? 1 : (-1)) * (num + num4), y);
						}
						if (hitTestInfo.col >= 0 && hitTestInfo.row >= 0)
						{
							this.OnCellSelectMouseMove(hitTestInfo);
							return;
						}
					}
				}
				else
				{
					if (this.dataGridViewOper[4] && hitTestInfo.col >= 0)
					{
						this.OnColumnSelectMouseMove(hitTestInfo);
					}
					else if (this.dataGridViewOper[16] && hitTestInfo.col >= 0 && hitTestInfo.row >= 0)
					{
						this.OnCellSelectMouseMove(hitTestInfo);
					}
					this.HorizScrollTimer.Enabled = false;
				}
			}
		}

		// Token: 0x06001AF7 RID: 6903 RVA: 0x0006A144 File Offset: 0x00068344
		private bool InitializeEditingCellValue(ref DataGridViewCellStyle dataGridViewCellStyle, ref DataGridViewCell dataGridViewCell)
		{
			DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = null;
			this.uneditedFormattedValue = dataGridViewCell.GetFormattedValue(this.ptCurrentCell.Y, ref dataGridViewCellStyle, DataGridViewDataErrorContexts.Formatting);
			this.dataGridViewState1[512] = true;
			try
			{
				IDataGridViewEditingCell dataGridViewEditingCell = dataGridViewCell as IDataGridViewEditingCell;
				object editingCellFormattedValue = dataGridViewEditingCell.GetEditingCellFormattedValue(DataGridViewDataErrorContexts.Formatting);
				if ((editingCellFormattedValue == null && this.uneditedFormattedValue != null) || (editingCellFormattedValue != null && this.uneditedFormattedValue == null) || (editingCellFormattedValue != null && !this.uneditedFormattedValue.Equals(editingCellFormattedValue)))
				{
					dataGridViewCell = this.Rows[this.ptCurrentCell.Y].Cells[this.ptCurrentCell.X];
					dataGridViewEditingCell = dataGridViewCell as IDataGridViewEditingCell;
					dataGridViewEditingCell.EditingCellFormattedValue = this.uneditedFormattedValue;
					dataGridViewEditingCell.EditingCellValueChanged = false;
				}
			}
			catch (Exception ex)
			{
				if (ClientUtils.IsCriticalException(ex))
				{
					throw;
				}
				dataGridViewDataErrorEventArgs = new DataGridViewDataErrorEventArgs(ex, this.ptCurrentCell.X, this.ptCurrentCell.Y, DataGridViewDataErrorContexts.InitialValueRestoration);
				this.OnDataErrorInternal(dataGridViewDataErrorEventArgs);
			}
			finally
			{
				this.dataGridViewState1[512] = false;
			}
			if (dataGridViewDataErrorEventArgs == null)
			{
				return true;
			}
			if (dataGridViewDataErrorEventArgs.ThrowException)
			{
				throw dataGridViewDataErrorEventArgs.Exception;
			}
			return !dataGridViewDataErrorEventArgs.Cancel;
		}

		// Token: 0x06001AF8 RID: 6904 RVA: 0x0006A280 File Offset: 0x00068480
		private bool InitializeEditingControlValue(ref DataGridViewCellStyle dataGridViewCellStyle, DataGridViewCell dataGridViewCell)
		{
			DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = null;
			object formattedValue = dataGridViewCell.GetFormattedValue(this.ptCurrentCell.Y, ref dataGridViewCellStyle, DataGridViewDataErrorContexts.Formatting);
			this.dataGridViewState1[16384] = true;
			this.dataGridViewState1[512] = true;
			try
			{
				dataGridViewCell.InitializeEditingControl(this.ptCurrentCell.Y, formattedValue, dataGridViewCellStyle);
				((IDataGridViewEditingControl)this.editingControl).EditingControlValueChanged = false;
			}
			catch (Exception ex)
			{
				if (ClientUtils.IsCriticalException(ex))
				{
					throw;
				}
				dataGridViewDataErrorEventArgs = new DataGridViewDataErrorEventArgs(ex, this.ptCurrentCell.X, this.ptCurrentCell.Y, DataGridViewDataErrorContexts.InitialValueRestoration);
				this.OnDataErrorInternal(dataGridViewDataErrorEventArgs);
			}
			finally
			{
				this.dataGridViewState1[16384] = false;
				this.dataGridViewState1[512] = false;
			}
			if (dataGridViewDataErrorEventArgs == null)
			{
				this.uneditedFormattedValue = formattedValue;
				return true;
			}
			if (dataGridViewDataErrorEventArgs.ThrowException)
			{
				throw dataGridViewDataErrorEventArgs.Exception;
			}
			return !dataGridViewDataErrorEventArgs.Cancel;
		}

		/// <summary>Invalidates the specified cell of the <see cref="T:System.Windows.Forms.DataGridView" />, forcing it to be repainted.</summary>
		/// <param name="dataGridViewCell">The <see cref="T:System.Windows.Forms.DataGridViewCell" /> to invalidate.</param>
		/// <exception cref="T:System.ArgumentException">
		///   <paramref name="dataGridViewCell" /> does not belong to the <see cref="T:System.Windows.Forms.DataGridView" />.</exception>
		/// <exception cref="T:System.ArgumentNullException">
		///   <paramref name="dataGridViewCell" /> is <see langword="null" />.</exception>
		// Token: 0x06001AF9 RID: 6905 RVA: 0x0006A388 File Offset: 0x00068588
		public void InvalidateCell(DataGridViewCell dataGridViewCell)
		{
			if (dataGridViewCell == null)
			{
				throw new ArgumentNullException("dataGridViewCell");
			}
			if (dataGridViewCell.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_CellDoesNotBelongToDataGridView"));
			}
			this.InvalidateCellPrivate(dataGridViewCell);
		}

		// Token: 0x06001AFA RID: 6906 RVA: 0x0006A3B8 File Offset: 0x000685B8
		private void InvalidateCellPrivate(DataGridViewCell dataGridViewCell)
		{
			this.InvalidateCell(dataGridViewCell.ColumnIndex, dataGridViewCell.RowIndex);
		}

		/// <summary>Invalidates the cell with the specified row and column indexes, forcing it to be repainted.</summary>
		/// <param name="columnIndex">The column index of the cell to invalidate.</param>
		/// <param name="rowIndex">The row index of the cell to invalidate.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///   <paramref name="columnIndex" /> is less than -1 or greater than the number of columns in the control minus 1.  
		/// -or-  
		/// <paramref name="rowIndex" /> is less than -1 or greater than the number of rows in the control minus 1.</exception>
		// Token: 0x06001AFB RID: 6907 RVA: 0x0006A3CC File Offset: 0x000685CC
		public void InvalidateCell(int columnIndex, int rowIndex)
		{
			if (columnIndex < -1 || columnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("columnIndex");
			}
			if (rowIndex < -1 || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			this.InvalidateCellPrivate(columnIndex, rowIndex);
		}

		// Token: 0x06001AFC RID: 6908 RVA: 0x0006A41C File Offset: 0x0006861C
		private void InvalidateCellPrivate(int columnIndex, int rowIndex)
		{
			if (base.IsHandleCreated)
			{
				Rectangle cellAdjustedDisplayRectangle = this.GetCellAdjustedDisplayRectangle(columnIndex, rowIndex, true);
				if (!cellAdjustedDisplayRectangle.IsEmpty)
				{
					base.Invalidate(cellAdjustedDisplayRectangle);
				}
			}
		}

		/// <summary>Invalidates the specified column of the <see cref="T:System.Windows.Forms.DataGridView" />, forcing it to be repainted.</summary>
		/// <param name="columnIndex">The index of the column to invalidate.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///   <paramref name="columnIndex" /> is not in the valid range of 0 to the number of columns minus 1.</exception>
		// Token: 0x06001AFD RID: 6909 RVA: 0x0006A44B File Offset: 0x0006864B
		public void InvalidateColumn(int columnIndex)
		{
			if (columnIndex < 0 || columnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("columnIndex");
			}
			this.InvalidateColumnInternal(columnIndex);
		}

		// Token: 0x06001AFE RID: 6910 RVA: 0x0006A474 File Offset: 0x00068674
		internal void InvalidateColumnInternal(int columnIndex)
		{
			if (base.IsHandleCreated)
			{
				Rectangle columnDisplayRectanglePrivate = this.GetColumnDisplayRectanglePrivate(columnIndex, true);
				if (!columnDisplayRectanglePrivate.IsEmpty)
				{
					base.Invalidate(columnDisplayRectanglePrivate);
				}
			}
		}

		// Token: 0x06001AFF RID: 6911 RVA: 0x0006A4A2 File Offset: 0x000686A2
		private void InvalidateData()
		{
			if (base.IsHandleCreated)
			{
				base.Invalidate(this.layout.Data);
			}
		}

		// Token: 0x06001B00 RID: 6912 RVA: 0x0006A4BD File Offset: 0x000686BD
		private void InvalidateInside()
		{
			if (base.IsHandleCreated)
			{
				base.Invalidate(this.layout.Inside);
			}
		}

		/// <summary>Invalidates the specified row of the <see cref="T:System.Windows.Forms.DataGridView" />, forcing it to be repainted.</summary>
		/// <param name="rowIndex">The index of the row to invalidate.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///   <paramref name="rowIndex" /> is not in the valid range of 0 to the number of rows minus 1.</exception>
		// Token: 0x06001B01 RID: 6913 RVA: 0x0006A4D8 File Offset: 0x000686D8
		public void InvalidateRow(int rowIndex)
		{
			if (rowIndex < 0 || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			this.InvalidateRowPrivate(rowIndex);
		}

		// Token: 0x06001B02 RID: 6914 RVA: 0x0006A500 File Offset: 0x00068700
		private void InvalidateRowPrivate(int rowIndex)
		{
			if (base.IsHandleCreated)
			{
				Rectangle rowDisplayRectanglePrivate = this.GetRowDisplayRectanglePrivate(rowIndex, true);
				if (!rowDisplayRectanglePrivate.IsEmpty)
				{
					base.Invalidate(rowDisplayRectanglePrivate);
				}
			}
		}

		// Token: 0x06001B03 RID: 6915 RVA: 0x0006A52E File Offset: 0x0006872E
		private void InvalidateRowHeights()
		{
			this.Rows.InvalidateCachedRowsHeights();
			if (base.IsHandleCreated)
			{
				this.PerformLayoutPrivate(false, false, false, false);
				base.Invalidate();
			}
		}

		// Token: 0x06001B04 RID: 6916 RVA: 0x0006A554 File Offset: 0x00068754
		private void InvalidateRows(int lo, int hi)
		{
			if (this.Rows.GetRowCount(DataGridViewElementStates.Visible) == 0)
			{
				return;
			}
			Rectangle data = this.layout.Data;
			if ((this.Rows.GetRowState(lo) & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
			{
				lo = this.Rows.GetNextRow(lo, DataGridViewElementStates.Visible);
			}
			if (lo == -1)
			{
				return;
			}
			if ((this.Rows.GetRowState(hi) & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
			{
				hi = this.Rows.GetPreviousRow(hi, DataGridViewElementStates.Visible);
			}
			Rectangle rectangle = this.GetRowDisplayRectangle(lo, true);
			int num;
			if (rectangle.IsEmpty)
			{
				if ((this.Rows.GetRowState(lo) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None)
				{
					return;
				}
				if (this.displayedBandsInfo.NumDisplayedScrollingRows == 0)
				{
					return;
				}
				if (lo >= this.displayedBandsInfo.FirstDisplayedScrollingRow && this.Rows.GetRowCount(DataGridViewElementStates.Visible, this.displayedBandsInfo.FirstDisplayedScrollingRow, lo) >= this.displayedBandsInfo.NumDisplayedScrollingRows)
				{
					return;
				}
				num = this.GetRowDisplayRectangle(this.displayedBandsInfo.FirstDisplayedScrollingRow, true).Top;
			}
			else
			{
				num = rectangle.Top;
			}
			rectangle = this.GetRowDisplayRectangle(hi, true);
			int num2;
			if (rectangle.IsEmpty)
			{
				if ((this.Rows.GetRowState(hi) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.Frozen)
				{
					num2 = data.Bottom;
				}
				else if (hi > this.displayedBandsInfo.FirstDisplayedScrollingRow)
				{
					num2 = data.Bottom;
				}
				else
				{
					if (this.Rows.GetRowCount(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible) == 0)
					{
						return;
					}
					num2 = 0;
					int i = 0;
					while (i < this.displayedBandsInfo.NumDisplayedFrozenRows)
					{
						if ((this.Rows.GetRowState(i) & DataGridViewElementStates.Visible) != DataGridViewElementStates.None)
						{
							if (i == this.displayedBandsInfo.NumDisplayedFrozenRows - 1)
							{
								num2 = this.GetRowDisplayRectangle(i, true).Bottom;
								break;
							}
							i++;
						}
					}
					if (num2 <= num)
					{
						return;
					}
				}
			}
			else
			{
				num2 = rectangle.Bottom;
			}
			base.Invalidate(new Rectangle(data.X, num, data.Width, num2 - num));
		}

		// Token: 0x06001B05 RID: 6917 RVA: 0x0006A72C File Offset: 0x0006892C
		private void InvalidateScrollBars()
		{
			if (this.horizScrollBar != null && this.horizScrollBar.Visible)
			{
				this.horizScrollBar.Invalidate();
			}
			if (this.vertScrollBar != null && this.vertScrollBar.Visible)
			{
				this.vertScrollBar.Invalidate();
			}
		}

		// Token: 0x06001B06 RID: 6918 RVA: 0x0006A779 File Offset: 0x00068979
		private bool IsColumnOutOfBounds(int columnIndex)
		{
			return columnIndex >= this.Columns.Count || columnIndex == -1;
		}

		// Token: 0x06001B07 RID: 6919 RVA: 0x0006A78F File Offset: 0x0006898F
		private bool IsInnerCellOutOfBounds(int columnIndex, int rowIndex)
		{
			return columnIndex >= this.Columns.Count || rowIndex >= this.Rows.Count || columnIndex == -1 || rowIndex == -1;
		}

		// Token: 0x06001B08 RID: 6920 RVA: 0x0006A7B7 File Offset: 0x000689B7
		private bool IsRowOutOfBounds(int rowIndex)
		{
			return rowIndex >= this.Rows.Count || rowIndex == -1;
		}

		/// <summary>Determines whether a character is an input character that the <see cref="T:System.Windows.Forms.DataGridView" /> recognizes.</summary>
		/// <param name="charCode">The character to test.</param>
		/// <returns>
		///   <see langword="true" /> if the character is recognized as an input character; otherwise, <see langword="false" />.</returns>
		// Token: 0x06001B09 RID: 6921 RVA: 0x0006A7CD File Offset: 0x000689CD
		protected override bool IsInputChar(char charCode)
		{
			return (this.editingControl != null && this.dataGridViewState1[32]) || base.IsInputChar(charCode);
		}

		/// <summary>Determines whether the specified key is a regular input key or a special key that requires preprocessing.</summary>
		/// <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys" /> values.</param>
		/// <returns>
		///   <see langword="true" /> if the specified key is a regular input key; otherwise, <see langword="false" />.</returns>
		// Token: 0x06001B0A RID: 6922 RVA: 0x0006A7F0 File Offset: 0x000689F0
		protected override bool IsInputKey(Keys keyData)
		{
			if ((keyData & Keys.Alt) == Keys.Alt)
			{
				return false;
			}
			Keys keys = keyData & Keys.KeyCode;
			if (keys <= Keys.D0)
			{
				if (keys == Keys.Tab)
				{
					return this.GetTabKeyEffective((keyData & Keys.Shift) == Keys.Shift, (keyData & Keys.Control) == Keys.Control);
				}
				if (keys == Keys.Return)
				{
					return true;
				}
				switch (keys)
				{
				case Keys.Escape:
					return this.IsEscapeKeyEffective;
				case Keys.IMEConvert:
				case Keys.IMENonconvert:
				case Keys.IMEAccept:
				case Keys.IMEModeChange:
				case Keys.Select:
				case Keys.Print:
				case Keys.Execute:
				case Keys.Snapshot:
				case Keys.Help:
					goto IL_134;
				case Keys.Space:
					if ((keyData & (Keys.Shift | Keys.Control | Keys.Alt)) == Keys.Shift && (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect || this.SelectionMode == DataGridViewSelectionMode.RowHeaderSelect) && this.ptCurrentCell.X != -1)
					{
						return true;
					}
					goto IL_134;
				case Keys.Prior:
				case Keys.Next:
				case Keys.End:
				case Keys.Home:
				case Keys.Left:
				case Keys.Up:
				case Keys.Right:
				case Keys.Down:
				case Keys.Delete:
				case Keys.D0:
					return true;
				case Keys.Insert:
					break;
				default:
					goto IL_134;
				}
			}
			else if (keys <= Keys.C)
			{
				if (keys != Keys.A)
				{
					if (keys != Keys.C)
					{
						goto IL_134;
					}
				}
				else
				{
					if ((keyData & (Keys.Shift | Keys.Control | Keys.Alt)) == Keys.Control)
					{
						return true;
					}
					goto IL_134;
				}
			}
			else
			{
				if (keys != Keys.NumPad0 && keys - Keys.F2 > 1)
				{
					goto IL_134;
				}
				return true;
			}
			if ((keyData & (Keys.Shift | Keys.Control | Keys.Alt)) == Keys.Control)
			{
				return true;
			}
			IL_134:
			return base.IsInputKey(keyData);
		}

		// Token: 0x06001B0B RID: 6923 RVA: 0x0006A938 File Offset: 0x00068B38
		private void LayoutScrollBars()
		{
			base.SuspendLayout();
			try
			{
				bool flag = (this.scrollBars == ScrollBars.Both || this.scrollBars == ScrollBars.Horizontal) && this.dataGridViewState2[33554432];
				bool flag2 = this.scrollBars == ScrollBars.Both || this.scrollBars == ScrollBars.Vertical;
				bool flag3 = false;
				bool flag4 = false;
				bool flag5 = false;
				bool rightToLeftInternal = this.RightToLeftInternal;
				int columnCount = this.Columns.GetColumnCount(DataGridViewElementStates.Visible);
				int rowCount = this.Rows.GetRowCount(DataGridViewElementStates.Visible);
				int columnsWidth = this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible);
				int columnsWidth2 = this.Columns.GetColumnsWidth(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Visible);
				int rowsHeight2 = this.Rows.GetRowsHeight(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				int num = (this.horizScrollBar.Height = SystemInformation.HorizontalScrollBarHeight);
				int num2 = (this.vertScrollBar.Width = SystemInformation.VerticalScrollBarWidth);
				int num3;
				if (flag && columnsWidth > this.layout.Data.Width && columnsWidth2 < this.layout.Data.Width && num <= this.layout.Data.Height)
				{
					int height = this.layout.Data.Height;
					DataGridView.LayoutData layoutData = this.layout;
					layoutData.Data.Height = layoutData.Data.Height - num;
					flag4 = (flag3 = true);
					if (columnsWidth - this.layout.Data.Width <= num2 || this.layout.Data.Width - columnsWidth2 <= num2)
					{
						num3 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
						this.ComputeVisibleRows();
						if (this.displayedBandsInfo.NumTotallyDisplayedFrozenRows == this.Rows.GetRowCount(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible) && this.displayedBandsInfo.NumTotallyDisplayedScrollingRows != rowCount - this.Rows.GetRowCount(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible) && rowsHeight - rowsHeight2 != this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight2))
						{
							flag4 = columnsWidth2 < this.layout.Data.Width - num2;
						}
						this.displayedBandsInfo.FirstDisplayedScrollingRow = num3;
					}
					if (flag4)
					{
						if (this.layout.RowHeadersVisible)
						{
							DataGridView.LayoutData layoutData2 = this.layout;
							layoutData2.RowHeaders.Height = layoutData2.RowHeaders.Height - num;
						}
					}
					else
					{
						this.layout.Data.Height = height;
					}
				}
				num3 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
				this.ComputeVisibleRows();
				if (flag2 && this.displayedBandsInfo.NumTotallyDisplayedFrozenRows == this.Rows.GetRowCount(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible) && this.displayedBandsInfo.NumTotallyDisplayedScrollingRows != rowCount - this.Rows.GetRowCount(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible) && rowsHeight - rowsHeight2 != this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight2) && this.layout.Data.Height > rowsHeight2 && num2 <= this.layout.Data.Width)
				{
					DataGridView.LayoutData layoutData3 = this.layout;
					layoutData3.Data.Width = layoutData3.Data.Width - num2;
					if (rightToLeftInternal)
					{
						DataGridView.LayoutData layoutData4 = this.layout;
						layoutData4.Data.X = layoutData4.Data.X + num2;
					}
					if (this.layout.ColumnHeadersVisible)
					{
						DataGridView.LayoutData layoutData5 = this.layout;
						layoutData5.ColumnHeaders.Width = layoutData5.ColumnHeaders.Width - num2;
						if (rightToLeftInternal)
						{
							DataGridView.LayoutData layoutData6 = this.layout;
							layoutData6.ColumnHeaders.X = layoutData6.ColumnHeaders.X + num2;
						}
					}
					flag5 = true;
				}
				this.displayedBandsInfo.FirstDisplayedScrollingCol = this.ComputeFirstVisibleScrollingColumn();
				this.ComputeVisibleColumns();
				if (flag && flag5 && !flag4 && columnsWidth > this.layout.Data.Width && columnsWidth2 < this.layout.Data.Width && num <= this.layout.Data.Height)
				{
					this.displayedBandsInfo.FirstDisplayedScrollingRow = num3;
					if (this.layout.ColumnHeadersVisible)
					{
						DataGridView.LayoutData layoutData7 = this.layout;
						layoutData7.ColumnHeaders.Width = layoutData7.ColumnHeaders.Width + num2;
						if (rightToLeftInternal)
						{
							DataGridView.LayoutData layoutData8 = this.layout;
							layoutData8.ColumnHeaders.X = layoutData8.ColumnHeaders.X - num2;
						}
					}
					DataGridView.LayoutData layoutData9 = this.layout;
					layoutData9.Data.Width = layoutData9.Data.Width + num2;
					if (rightToLeftInternal)
					{
						DataGridView.LayoutData layoutData10 = this.layout;
						layoutData10.Data.X = layoutData10.Data.X - num2;
					}
					DataGridView.LayoutData layoutData11 = this.layout;
					layoutData11.Data.Height = layoutData11.Data.Height - num;
					flag5 = false;
					this.ComputeVisibleRows();
					if (this.displayedBandsInfo.NumTotallyDisplayedFrozenRows == this.Rows.GetRowCount(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible) && this.displayedBandsInfo.NumTotallyDisplayedScrollingRows != rowCount && rowsHeight - rowsHeight2 != this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight2) && this.layout.Data.Height > rowsHeight2 && num2 <= this.layout.Data.Width)
					{
						DataGridView.LayoutData layoutData12 = this.layout;
						layoutData12.Data.Width = layoutData12.Data.Width - num2;
						if (rightToLeftInternal)
						{
							DataGridView.LayoutData layoutData13 = this.layout;
							layoutData13.Data.X = layoutData13.Data.X + num2;
						}
						if (this.layout.ColumnHeadersVisible)
						{
							DataGridView.LayoutData layoutData14 = this.layout;
							layoutData14.ColumnHeaders.Width = layoutData14.ColumnHeaders.Width - num2;
							if (rightToLeftInternal)
							{
								DataGridView.LayoutData layoutData15 = this.layout;
								layoutData15.ColumnHeaders.X = layoutData15.ColumnHeaders.X + num2;
							}
						}
						flag5 = true;
					}
					flag4 = flag5 || flag3;
				}
				this.layout.ResizeBoxRect = default(Rectangle);
				if (flag5 && flag4)
				{
					this.layout.ResizeBoxRect = new Rectangle(rightToLeftInternal ? (this.layout.Data.X - this.vertScrollBar.Width) : this.layout.Data.Right, this.layout.Data.Bottom, this.vertScrollBar.Width, this.horizScrollBar.Height);
				}
				if (flag4 && columnCount > 0)
				{
					int num4 = columnsWidth - this.layout.Data.Width;
					this.horizScrollBar.Minimum = 0;
					this.horizScrollBar.Maximum = columnsWidth - columnsWidth2;
					this.horizScrollBar.SmallChange = 1;
					this.horizScrollBar.LargeChange = Math.Max(columnsWidth - columnsWidth2 - num4, 0);
					this.horizScrollBar.Enabled = base.Enabled;
					this.horizScrollBar.Bounds = new Rectangle(rightToLeftInternal ? (this.layout.Inside.X + this.layout.ResizeBoxRect.Width) : this.layout.Inside.X, this.layout.Data.Bottom, this.layout.Inside.Width - this.layout.ResizeBoxRect.Width, this.horizScrollBar.Height);
					this.horizScrollBar.Visible = true;
					this.horizScrollBar.Invalidate();
				}
				else
				{
					this.horizScrollBar.Visible = false;
					this.HorizontalOffset = 0;
					this.horizScrollBar.Enabled = false;
					this.horizScrollBar.Minimum = 0;
					this.horizScrollBar.Maximum = 1;
					this.horizScrollBar.SmallChange = 1;
					this.horizScrollBar.LargeChange = 1;
					this.horizScrollBar.Value = 0;
				}
				if (flag5)
				{
					int num5 = this.layout.Data.Y;
					int num6 = this.layout.Data.Height;
					if (this.layout.ColumnHeadersVisible)
					{
						num5 = this.layout.ColumnHeaders.Y;
						num6 += this.layout.ColumnHeaders.Height;
					}
					else if (this.SingleHorizontalBorderAdded)
					{
						num5--;
						num6++;
					}
					this.vertScrollBar.Minimum = 0;
					this.vertScrollBar.Maximum = rowsHeight - rowsHeight2;
					this.vertScrollBar.Value = this.ComputeHeightOfScrolledOffRows();
					this.vertScrollBar.LargeChange = this.layout.Data.Height - rowsHeight2;
					this.vertScrollBar.Bounds = new Rectangle(rightToLeftInternal ? (this.layout.Data.X - this.vertScrollBar.Width) : this.layout.Data.Right, num5, this.vertScrollBar.Width, num6);
					this.vertScrollBar.Enabled = base.Enabled;
					this.vertScrollBar.Visible = true;
					this.vertScrollBar.Invalidate();
					this.verticalOffset = this.vertScrollBar.Value;
				}
				else
				{
					this.vertScrollBar.Visible = false;
					this.verticalOffset = this.ComputeHeightOfScrolledOffRows();
					this.vertScrollBar.Enabled = false;
					this.vertScrollBar.Minimum = 0;
					this.vertScrollBar.Maximum = 1;
					this.vertScrollBar.LargeChange = 1;
					this.vertScrollBar.Value = 0;
				}
			}
			finally
			{
				base.ResumeLayout(false);
			}
		}

		// Token: 0x06001B0C RID: 6924 RVA: 0x0006B248 File Offset: 0x00069448
		private void MakeFirstDisplayedCellCurrentCell(bool includeNewRow)
		{
			Point firstDisplayedCellAddress = this.FirstDisplayedCellAddress;
			if (firstDisplayedCellAddress.X != -1 && (includeNewRow || !this.AllowUserToAddRowsInternal || firstDisplayedCellAddress.Y != this.Rows.Count - 1))
			{
				bool flag = this.SetAndSelectCurrentCellAddress(firstDisplayedCellAddress.X, firstDisplayedCellAddress.Y, true, false, false, true, false);
			}
		}

		// Token: 0x06001B0D RID: 6925 RVA: 0x0006B2A1 File Offset: 0x000694A1
		private static DataGridViewAutoSizeRowMode MapAutoSizeRowsModeToRowMode(DataGridViewAutoSizeRowsMode autoSizeRowsMode)
		{
			switch (autoSizeRowsMode)
			{
			case DataGridViewAutoSizeRowsMode.AllHeaders:
				return DataGridViewAutoSizeRowMode.RowHeader;
			case DataGridViewAutoSizeRowsMode.AllCellsExceptHeaders:
				return DataGridViewAutoSizeRowMode.AllCellsExceptHeader;
			case DataGridViewAutoSizeRowsMode.AllCells:
				return DataGridViewAutoSizeRowMode.AllCells;
			case DataGridViewAutoSizeRowsMode.DisplayedHeaders:
				return DataGridViewAutoSizeRowMode.RowHeader;
			case DataGridViewAutoSizeRowsMode.DisplayedCellsExceptHeaders:
				return DataGridViewAutoSizeRowMode.AllCellsExceptHeader;
			case DataGridViewAutoSizeRowsMode.DisplayedCells:
				return DataGridViewAutoSizeRowMode.AllCells;
			}
			return DataGridViewAutoSizeRowMode.RowHeader;
		}

		// Token: 0x06001B0E RID: 6926 RVA: 0x0006B2D8 File Offset: 0x000694D8
		private void MoveColumnHeadersOrRowResize(MouseEventArgs e)
		{
			this.lastRowSplitBar = this.currentRowSplitBar;
			this.currentRowSplitBar = e.Y;
			Rectangle rectangle = this.CalcRowResizeFeedbackRect(this.lastRowSplitBar);
			if (this.editingControl != null && !this.dataGridViewState1[4096] && this.editingPanel.Bounds.IntersectsWith(rectangle))
			{
				this.editingPanel.Invalidate();
				this.editingPanel.Update();
				this.editingControl.Invalidate();
				this.editingControl.Update();
			}
			base.Invalidate(rectangle);
			base.Invalidate(this.CalcRowResizeFeedbackRect(this.currentRowSplitBar));
		}

		// Token: 0x06001B0F RID: 6927 RVA: 0x0006B380 File Offset: 0x00069580
		private void MapDataGridViewColumnToDataBoundField(DataGridViewColumn dataGridViewColumn)
		{
			DataGridView.DataGridViewDataConnection dataGridViewDataConnection = this.DataConnection;
			int num = ((dataGridViewDataConnection == null) ? (-1) : dataGridViewDataConnection.BoundColumnIndex(dataGridViewColumn.DataPropertyName));
			if (num != -1)
			{
				dataGridViewColumn.IsDataBoundInternal = true;
				dataGridViewColumn.BoundColumnIndex = num;
				dataGridViewColumn.BoundColumnConverter = dataGridViewDataConnection.BoundColumnConverter(num);
				dataGridViewColumn.ValueType = dataGridViewDataConnection.BoundColumnValueType(num);
				dataGridViewColumn.ReadOnly = dataGridViewDataConnection.DataFieldIsReadOnly(dataGridViewColumn.BoundColumnIndex) || dataGridViewColumn.ReadOnly;
				this.InvalidateColumnInternal(dataGridViewColumn.Index);
				if (dataGridViewColumn.SortMode != DataGridViewColumnSortMode.NotSortable && !this.dataGridViewOper[1024])
				{
					dataGridViewColumn.HeaderCell.SortGlyphDirection = dataGridViewDataConnection.BoundColumnSortOrder(num);
					if (this.sortedColumn == null && dataGridViewColumn.HeaderCell.SortGlyphDirection != SortOrder.None)
					{
						this.sortedColumn = dataGridViewColumn;
						this.sortOrder = dataGridViewColumn.HeaderCell.SortGlyphDirection;
						return;
					}
				}
			}
			else
			{
				dataGridViewColumn.IsDataBoundInternal = false;
				dataGridViewColumn.BoundColumnIndex = -1;
				dataGridViewColumn.BoundColumnConverter = null;
				this.InvalidateColumnInternal(dataGridViewColumn.Index);
			}
		}

		// Token: 0x06001B10 RID: 6928 RVA: 0x0006B47C File Offset: 0x0006967C
		private void MoveColumnRelocation(MouseEventArgs e, DataGridView.HitTestInfo hti)
		{
			this.lastHeaderShadow = e.X;
			this.dataGridViewState2[1024] = this.ColumnRelocationTarget(e, hti, out this.trackColumnEdge);
			base.Invalidate(Rectangle.Union(this.layout.TopLeftHeader, this.layout.ColumnHeaders));
		}

		// Token: 0x06001B11 RID: 6929 RVA: 0x0006B4D4 File Offset: 0x000696D4
		private void MoveRowHeadersOrColumnResize(int x)
		{
			this.lastColSplitBar = this.currentColSplitBar;
			this.currentColSplitBar = x;
			Rectangle rectangle = this.CalcColResizeFeedbackRect(this.lastColSplitBar);
			if (this.editingControl != null && !this.dataGridViewState1[4096] && this.editingPanel.Bounds.IntersectsWith(rectangle))
			{
				this.editingPanel.Invalidate();
				this.editingPanel.Update();
				this.editingControl.Invalidate();
				this.editingControl.Update();
			}
			base.Invalidate(rectangle);
			base.Invalidate(this.CalcColResizeFeedbackRect(this.currentColSplitBar));
		}

		/// <summary>Notifies the <see cref="T:System.Windows.Forms.DataGridView" /> that the current cell has uncommitted changes.</summary>
		/// <param name="dirty">
		///   <see langword="true" /> to indicate the cell has uncommitted changes; otherwise, <see langword="false" />.</param>
		// Token: 0x06001B12 RID: 6930 RVA: 0x0006B578 File Offset: 0x00069778
		public virtual void NotifyCurrentCellDirty(bool dirty)
		{
			if (!this.dataGridViewState1[512])
			{
				this.IsCurrentCellDirtyInternal = dirty;
				if (dirty && this.editingControl != null && ((IDataGridViewEditingControl)this.editingControl).RepositionEditingControlOnValueChange)
				{
					this.PositionEditingControl(true, true, false);
				}
			}
		}

		// Token: 0x06001B13 RID: 6931 RVA: 0x0006B5C4 File Offset: 0x000697C4
		internal void OnAddedColumn(DataGridViewColumn dataGridViewColumn)
		{
			if (dataGridViewColumn.DisplayIndex == -1 || dataGridViewColumn.DisplayIndex >= this.Columns.Count)
			{
				dataGridViewColumn.DisplayIndexInternal = dataGridViewColumn.Index;
				this.Columns.InvalidateCachedColumnsOrder();
			}
			this.CorrectColumnDisplayIndexesAfterInsertion(dataGridViewColumn);
			if (dataGridViewColumn.HasHeaderCell)
			{
				dataGridViewColumn.HeaderCell.DataGridViewInternal = this;
			}
			this.AdjustExpandingRows(dataGridViewColumn.Index, false);
			DataGridViewAutoSizeColumnMode inheritedAutoSizeMode = dataGridViewColumn.InheritedAutoSizeMode;
			bool flag = inheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.None || inheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill;
			if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
			{
				this.AutoResizeColumnHeadersHeight(dataGridViewColumn.Index, true, flag);
			}
			if (!flag)
			{
				dataGridViewColumn.CachedThickness = dataGridViewColumn.Thickness;
				this.AutoResizeColumnInternal(dataGridViewColumn.Index, (DataGridViewAutoSizeColumnCriteriaInternal)inheritedAutoSizeMode, true);
				if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
				{
					this.AutoResizeColumnHeadersHeight(dataGridViewColumn.Index, true, true);
				}
			}
			this.OnColumnAdded(new DataGridViewColumnEventArgs(dataGridViewColumn));
		}

		// Token: 0x06001B14 RID: 6932 RVA: 0x0006B698 File Offset: 0x00069898
		internal void OnAddedRow_PreNotification(int rowIndex)
		{
			if (this.AllowUserToAddRowsInternal && this.newRowIndex == -1)
			{
				this.newRowIndex = rowIndex;
			}
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			if ((rowState & DataGridViewElementStates.ReadOnly) == DataGridViewElementStates.None && !this.ReadOnly)
			{
				DataGridViewRow dataGridViewRow = this.Rows.SharedRow(rowIndex);
				foreach (object obj in dataGridViewRow.Cells)
				{
					DataGridViewCell dataGridViewCell = (DataGridViewCell)obj;
					if (!dataGridViewCell.OwningColumn.ReadOnly && this.IsSharedCellReadOnly(dataGridViewCell, rowIndex))
					{
						this.individualReadOnlyCells.Add(dataGridViewCell);
					}
				}
			}
		}

		// Token: 0x06001B15 RID: 6933 RVA: 0x0006B750 File Offset: 0x00069950
		internal void OnAddedRow_PostNotification(int rowIndex)
		{
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			if ((rowState & DataGridViewElementStates.Visible) != DataGridViewElementStates.None)
			{
				bool flag = (rowState & DataGridViewElementStates.Displayed) > DataGridViewElementStates.None;
				DataGridViewAutoSizeRowsModeInternal dataGridViewAutoSizeRowsModeInternal = (DataGridViewAutoSizeRowsModeInternal)this.autoSizeRowsMode;
				bool flag2 = false;
				if (dataGridViewAutoSizeRowsModeInternal != DataGridViewAutoSizeRowsModeInternal.None && ((dataGridViewAutoSizeRowsModeInternal & DataGridViewAutoSizeRowsModeInternal.DisplayedRows) == DataGridViewAutoSizeRowsModeInternal.None || flag))
				{
					int height = this.Rows.SharedRow(rowIndex).GetHeight(rowIndex);
					this.Rows.SharedRow(rowIndex).CachedThickness = height;
					this.AutoResizeRowInternal(rowIndex, DataGridView.MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), false, true);
					flag2 = true;
				}
				DataGridViewAutoSizeColumnCriteriaInternal dataGridViewAutoSizeColumnCriteriaInternal = DataGridViewAutoSizeColumnCriteriaInternal.AllRows;
				if (flag)
				{
					dataGridViewAutoSizeColumnCriteriaInternal |= DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows;
				}
				bool flag3;
				if (this.Rows.GetRowCount(DataGridViewElementStates.Visible) > 1)
				{
					flag3 = this.AdjustExpandingColumns(dataGridViewAutoSizeColumnCriteriaInternal, rowIndex);
				}
				else
				{
					flag3 = this.AutoResizeAllVisibleColumnsInternal(dataGridViewAutoSizeColumnCriteriaInternal, true);
				}
				bool flag4 = this.ColumnHeadersHeightSizeMode != DataGridViewColumnHeadersHeightSizeMode.AutoSize;
				bool flag5 = this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.EnableResizing && this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.DisableResizing;
				if (!flag5 && !flag3)
				{
					flag4 = true;
				}
				if (flag5)
				{
					this.AutoResizeRowHeadersWidth(rowIndex, this.rowHeadersWidthSizeMode, flag4, true);
				}
				if (!flag4)
				{
					this.AutoResizeColumnHeadersHeight(true, true);
				}
				if (flag2)
				{
					this.AutoResizeRowInternal(rowIndex, DataGridView.MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), true, true);
				}
				if (flag5 && !flag4)
				{
					this.AutoResizeRowHeadersWidth(rowIndex, this.rowHeadersWidthSizeMode, true, true);
				}
			}
		}

		// Token: 0x06001B16 RID: 6934 RVA: 0x0006B880 File Offset: 0x00069A80
		internal void OnAddedRows_PreNotification(DataGridViewRow[] dataGridViewRows)
		{
			foreach (DataGridViewRow dataGridViewRow in dataGridViewRows)
			{
				this.OnAddedRow_PreNotification(dataGridViewRow.Index);
			}
		}

		// Token: 0x06001B17 RID: 6935 RVA: 0x0006B8B0 File Offset: 0x00069AB0
		internal void OnAddedRows_PostNotification(DataGridViewRow[] dataGridViewRows)
		{
			foreach (DataGridViewRow dataGridViewRow in dataGridViewRows)
			{
				this.OnAddedRow_PostNotification(dataGridViewRow.Index);
			}
		}

		// Token: 0x06001B18 RID: 6936 RVA: 0x0006B8E0 File Offset: 0x00069AE0
		internal void OnAddingColumn(DataGridViewColumn dataGridViewColumn)
		{
			if (dataGridViewColumn == null)
			{
				throw new ArgumentNullException("dataGridViewColumn");
			}
			if (dataGridViewColumn.DataGridView != null)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_ColumnAlreadyBelongsToDataGridView"));
			}
			if (!this.InInitialization && dataGridViewColumn.SortMode == DataGridViewColumnSortMode.Automatic && (this.SelectionMode == DataGridViewSelectionMode.FullColumnSelect || this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect))
			{
				throw new InvalidOperationException(SR.GetString("DataGridViewColumn_SortModeAndSelectionModeClash", new object[]
				{
					DataGridViewColumnSortMode.Automatic.ToString(),
					this.SelectionMode.ToString()
				}));
			}
			if (dataGridViewColumn.Visible)
			{
				if (!this.ColumnHeadersVisible && (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.ColumnHeader || (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.NotSet && this.AutoSizeColumnsMode == DataGridViewAutoSizeColumnsMode.ColumnHeader)))
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddAutoSizedColumn"));
				}
				if (dataGridViewColumn.Frozen && (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.Fill || (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.NotSet && this.AutoSizeColumnsMode == DataGridViewAutoSizeColumnsMode.Fill)))
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddAutoFillColumn"));
				}
				this.dataGridViewState2[67108864] = true;
			}
			float num = this.Columns.GetColumnsFillWeight(DataGridViewElementStates.None) + dataGridViewColumn.FillWeight;
			if (num > 65535f)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_WeightSumCannotExceedLongMaxValue", new object[] { ushort.MaxValue.ToString(CultureInfo.CurrentCulture) }));
			}
			this.CorrectColumnFrozenState(dataGridViewColumn, this.Columns.Count);
			if (this.Rows.Count > 0)
			{
				if (dataGridViewColumn.CellType == null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddUntypedColumn"));
				}
				if (dataGridViewColumn.CellTemplate.DefaultNewRowValue != null && this.newRowIndex != -1)
				{
					DataGridViewRow dataGridViewRow = this.Rows[this.newRowIndex];
				}
				int num2 = this.Columns.Count + 1;
				try
				{
					for (int i = 0; i < this.Rows.Count; i++)
					{
						DataGridViewRow dataGridViewRow2 = this.Rows.SharedRow(i);
						if (dataGridViewRow2.Cells.Count < num2)
						{
							DataGridViewCell dataGridViewCell = (DataGridViewCell)dataGridViewColumn.CellTemplate.Clone();
							dataGridViewRow2.Cells.AddInternal(dataGridViewCell);
							if (i == this.newRowIndex)
							{
								dataGridViewCell.SetValueInternal(i, dataGridViewCell.DefaultNewRowValue);
							}
							dataGridViewCell.DataGridViewInternal = this;
							dataGridViewCell.OwningRowInternal = dataGridViewRow2;
							dataGridViewCell.OwningColumnInternal = dataGridViewColumn;
						}
					}
				}
				catch
				{
					for (int j = 0; j < this.Rows.Count; j++)
					{
						DataGridViewRow dataGridViewRow3 = this.Rows.SharedRow(j);
						if (dataGridViewRow3.Cells.Count != num2)
						{
							break;
						}
						dataGridViewRow3.Cells.RemoveAtInternal(num2 - 1);
					}
					throw;
				}
			}
		}

		// Token: 0x06001B19 RID: 6937 RVA: 0x0006BBA4 File Offset: 0x00069DA4
		internal void OnAddingColumns(DataGridViewColumn[] dataGridViewColumns)
		{
			float num = this.Columns.GetColumnsFillWeight(DataGridViewElementStates.None);
			foreach (DataGridViewColumn dataGridViewColumn in dataGridViewColumns)
			{
				if (dataGridViewColumn == null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_AtLeastOneColumnIsNull"));
				}
				if (dataGridViewColumn.DataGridView != null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_ColumnAlreadyBelongsToDataGridView"));
				}
				if (this.Rows.Count > 0 && dataGridViewColumn.CellType == null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddUntypedColumn"));
				}
				if (!this.InInitialization && dataGridViewColumn.SortMode == DataGridViewColumnSortMode.Automatic && (this.SelectionMode == DataGridViewSelectionMode.FullColumnSelect || this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect))
				{
					throw new InvalidOperationException(SR.GetString("DataGridViewColumn_SortModeAndSelectionModeClash", new object[]
					{
						DataGridViewColumnSortMode.Automatic.ToString(),
						this.SelectionMode.ToString()
					}));
				}
				if (dataGridViewColumn.Visible)
				{
					if (!this.ColumnHeadersVisible && (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.ColumnHeader || (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.NotSet && this.AutoSizeColumnsMode == DataGridViewAutoSizeColumnsMode.ColumnHeader)))
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddAutoSizedColumn"));
					}
					if (dataGridViewColumn.Frozen && (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.Fill || (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.NotSet && this.AutoSizeColumnsMode == DataGridViewAutoSizeColumnsMode.Fill)))
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddAutoFillColumn"));
					}
					this.dataGridViewState2[67108864] = true;
				}
				num += dataGridViewColumn.FillWeight;
				if (num > 65535f)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_WeightSumCannotExceedLongMaxValue", new object[] { ushort.MaxValue.ToString(CultureInfo.CurrentCulture) }));
				}
			}
			int num2 = dataGridViewColumns.Length;
			for (int j = 0; j < num2 - 1; j++)
			{
				for (int k = j + 1; k < num2; k++)
				{
					if (dataGridViewColumns[j] == dataGridViewColumns[k])
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddIdenticalColumns"));
					}
				}
			}
			this.CorrectColumnFrozenStates(dataGridViewColumns);
			if (this.Rows.Count > 0)
			{
				foreach (DataGridViewColumn dataGridViewColumn2 in dataGridViewColumns)
				{
					if (dataGridViewColumn2.CellTemplate.DefaultNewRowValue != null && this.newRowIndex != -1)
					{
						DataGridViewRow dataGridViewRow = this.Rows[this.newRowIndex];
						break;
					}
				}
				int count = this.Columns.Count;
				int num3 = 0;
				try
				{
					foreach (DataGridViewColumn dataGridViewColumn3 in dataGridViewColumns)
					{
						num3++;
						for (int n = 0; n < this.Rows.Count; n++)
						{
							DataGridViewRow dataGridViewRow2 = this.Rows.SharedRow(n);
							if (dataGridViewRow2.Cells.Count < count + num3)
							{
								DataGridViewCell dataGridViewCell = (DataGridViewCell)dataGridViewColumn3.CellTemplate.Clone();
								int num4 = dataGridViewRow2.Cells.AddInternal(dataGridViewCell);
								if (n == this.newRowIndex)
								{
									dataGridViewCell.Value = dataGridViewCell.DefaultNewRowValue;
								}
								dataGridViewCell.DataGridViewInternal = this;
								dataGridViewCell.OwningRowInternal = dataGridViewRow2;
								dataGridViewCell.OwningColumnInternal = dataGridViewColumn3;
							}
						}
					}
				}
				catch
				{
					for (int num5 = 0; num5 < this.Rows.Count; num5++)
					{
						DataGridViewRow dataGridViewRow3 = this.Rows.SharedRow(num5);
						while (dataGridViewRow3.Cells.Count > count)
						{
							dataGridViewRow3.Cells.RemoveAtInternal(dataGridViewRow3.Cells.Count - 1);
						}
					}
					throw;
				}
			}
		}

		// Token: 0x06001B1A RID: 6938 RVA: 0x0006BF38 File Offset: 0x0006A138
		internal void OnAddingRow(DataGridViewRow dataGridViewRow, DataGridViewElementStates rowState, bool checkFrozenState)
		{
			if (dataGridViewRow == null)
			{
				throw new ArgumentNullException("dataGridViewRow");
			}
			if (checkFrozenState)
			{
				this.CorrectRowFrozenState(dataGridViewRow, rowState, this.Rows.Count);
			}
			if (this.ReadOnly && dataGridViewRow.DataGridView == null && dataGridViewRow.ReadOnly)
			{
				dataGridViewRow.ReadOnly = false;
			}
			int num = 0;
			foreach (object obj in this.Columns)
			{
				DataGridViewColumn dataGridViewColumn = (DataGridViewColumn)obj;
				DataGridViewCell dataGridViewCell = dataGridViewRow.Cells[num];
				if ((this.ReadOnly || dataGridViewColumn.ReadOnly) && dataGridViewCell.StateIncludes(DataGridViewElementStates.ReadOnly))
				{
					dataGridViewCell.ReadOnlyInternal = false;
				}
				num++;
			}
		}

		// Token: 0x06001B1B RID: 6939 RVA: 0x0006C004 File Offset: 0x0006A204
		internal void OnAddingRows(DataGridViewRow[] dataGridViewRows, bool checkFrozenStates)
		{
			foreach (DataGridViewRow dataGridViewRow in dataGridViewRows)
			{
				if (dataGridViewRow == null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_AtLeastOneRowIsNull"));
				}
				if (dataGridViewRow.DataGridView != null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_RowAlreadyBelongsToDataGridView"));
				}
				if (dataGridViewRow.Selected)
				{
					throw new InvalidOperationException(SR.GetString("DataGridViewRowCollection_CannotAddOrInsertSelectedRow"));
				}
				if (dataGridViewRow.Cells.Count > this.Columns.Count)
				{
					throw new InvalidOperationException(SR.GetString("DataGridViewRowCollection_TooManyCells"));
				}
			}
			int num = dataGridViewRows.Length;
			for (int j = 0; j < num - 1; j++)
			{
				for (int k = j + 1; k < num; k++)
				{
					if (dataGridViewRows[j] == dataGridViewRows[k])
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddIdenticalRows"));
					}
				}
			}
			if (checkFrozenStates)
			{
				this.CorrectRowFrozenStates(dataGridViewRows, this.Rows.Count);
			}
			foreach (DataGridViewRow dataGridViewRow2 in dataGridViewRows)
			{
				this.CompleteCellsCollection(dataGridViewRow2);
				this.OnAddingRow(dataGridViewRow2, dataGridViewRow2.State, false);
			}
		}

		// Token: 0x06001B1C RID: 6940 RVA: 0x0006C120 File Offset: 0x0006A320
		internal void OnAdvancedBorderStyleChanged(DataGridViewAdvancedBorderStyle dgvabs)
		{
			if (!this.dataGridViewOper[65536])
			{
				if (dgvabs == this.advancedCellBorderStyle)
				{
					this.OnCellBorderStyleChanged(EventArgs.Empty);
					return;
				}
				if (dgvabs == this.advancedColumnHeadersBorderStyle)
				{
					this.OnColumnHeadersBorderStyleChanged(EventArgs.Empty);
					return;
				}
				if (dgvabs == this.advancedRowHeadersBorderStyle)
				{
					this.OnRowHeadersBorderStyleChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.AllowUserToAddRowsChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001B1D RID: 6941 RVA: 0x0006C180 File Offset: 0x0006A380
		protected virtual void OnAllowUserToAddRowsChanged(EventArgs e)
		{
			this.PushAllowUserToAddRows();
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTOADDROWSCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.AllowUserToDeleteRowsChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001B1E RID: 6942 RVA: 0x0006C1D0 File Offset: 0x0006A3D0
		protected virtual void OnAllowUserToDeleteRowsChanged(EventArgs e)
		{
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTODELETEROWSCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.AllowUserToOrderColumnsChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001B1F RID: 6943 RVA: 0x0006C218 File Offset: 0x0006A418
		protected virtual void OnAllowUserToOrderColumnsChanged(EventArgs e)
		{
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTOORDERCOLUMNSCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.AllowUserToResizeColumnsChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001B20 RID: 6944 RVA: 0x0006C260 File Offset: 0x0006A460
		protected virtual void OnAllowUserToResizeColumnsChanged(EventArgs e)
		{
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTORESIZECOLUMNSCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.AllowUserToResizeRowsChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001B21 RID: 6945 RVA: 0x0006C2A8 File Offset: 0x0006A4A8
		protected virtual void OnAllowUserToResizeRowsChanged(EventArgs e)
		{
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTORESIZEROWSCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyleChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001B22 RID: 6946 RVA: 0x0006C2F0 File Offset: 0x0006A4F0
		protected virtual void OnAlternatingRowsDefaultCellStyleChanged(EventArgs e)
		{
			DataGridViewCellStyleChangedEventArgs dataGridViewCellStyleChangedEventArgs = e as DataGridViewCellStyleChangedEventArgs;
			if (dataGridViewCellStyleChangedEventArgs != null && !dataGridViewCellStyleChangedEventArgs.ChangeAffectsPreferredSize)
			{
				this.InvalidateData();
			}
			else
			{
				this.OnRowsGlobalAutoSize();
				if (this.editingControl != null)
				{
					this.PositionEditingControl(true, true, false);
				}
			}
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWALTERNATINGROWSDEFAULTCELLSTYLECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.AutoGenerateColumnsChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001B23 RID: 6947 RVA: 0x0006C36C File Offset: 0x0006A56C
		protected virtual void OnAutoGenerateColumnsChanged(EventArgs e)
		{
			if (this.AutoGenerateColumns && this.DataSource != null)
			{
				this.RefreshColumnsAndRows();
			}
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWAUTOGENERATECOLUMNSCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x06001B24 RID: 6948 RVA: 0x0006C3CC File Offset: 0x0006A5CC
		internal void OnAutoSizeColumnModeChanged(DataGridViewColumn dataGridViewColumn, DataGridViewAutoSizeColumnMode previousInheritedMode)
		{
			DataGridViewAutoSizeColumnModeEventArgs dataGridViewAutoSizeColumnModeEventArgs = new DataGridViewAutoSizeColumnModeEventArgs(dataGridViewColumn, previousInheritedMode);
			this.OnAutoSizeColumnModeChanged(dataGridViewAutoSizeColumnModeEventArgs);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.AutoSizeColumnModeChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.InvalidOperationException">The value of the <see cref="P:System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs.Column" /> property of <paramref name="e" /> is null.</exception>
		// Token: 0x06001B25 RID: 6949 RVA: 0x0006C3E8 File Offset: 0x0006A5E8
		protected virtual void OnAutoSizeColumnModeChanged(DataGridViewAutoSizeColumnModeEventArgs e)
		{
			DataGridViewColumn column = e.Column;
			if (e.Column == null)
			{
				throw new InvalidOperationException(SR.GetString("InvalidNullArgument", new object[] { "e.Column" }));
			}
			DataGridViewAutoSizeColumnMode inheritedAutoSizeMode = column.InheritedAutoSizeMode;
			DataGridViewAutoSizeColumnMode previousMode = e.PreviousMode;
			bool flag = previousMode != DataGridViewAutoSizeColumnMode.Fill && previousMode != DataGridViewAutoSizeColumnMode.None && previousMode > DataGridViewAutoSizeColumnMode.NotSet;
			if (inheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill || previousMode == DataGridViewAutoSizeColumnMode.Fill)
			{
				this.dataGridViewState2[67108864] = true;
			}
			bool flag2 = (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) == DataGridViewAutoSizeRowsMode.None;
			if (inheritedAutoSizeMode != DataGridViewAutoSizeColumnMode.None)
			{
				if (inheritedAutoSizeMode != DataGridViewAutoSizeColumnMode.Fill)
				{
					if (!flag)
					{
						column.CachedThickness = column.Thickness;
					}
					this.AutoResizeColumnInternal(column.Index, (DataGridViewAutoSizeColumnCriteriaInternal)inheritedAutoSizeMode, flag2);
				}
			}
			else if (column.Thickness != column.CachedThickness && flag)
			{
				column.ThicknessInternal = Math.Max(column.MinimumWidth, column.CachedThickness);
			}
			this.PerformLayoutPrivate(false, true, true, false);
			if (!flag2)
			{
				this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
				if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
				{
					this.AutoResizeColumnHeadersHeight(column.Index, true, true);
				}
				if (inheritedAutoSizeMode != DataGridViewAutoSizeColumnMode.None && inheritedAutoSizeMode != DataGridViewAutoSizeColumnMode.Fill)
				{
					this.AutoResizeColumnInternal(column.Index, (DataGridViewAutoSizeColumnCriteriaInternal)inheritedAutoSizeMode, true);
				}
			}
			DataGridViewAutoSizeColumnModeEventHandler dataGridViewAutoSizeColumnModeEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWAUTOSIZECOLUMNMODECHANGED] as DataGridViewAutoSizeColumnModeEventHandler;
			if (dataGridViewAutoSizeColumnModeEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewAutoSizeColumnModeEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.AutoSizeColumnsModeChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentNullException">The value of the <see cref="P:System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs.PreviousModes" /> property of <paramref name="e" /> is <see langword="null" />.</exception>
		/// <exception cref="T:System.ArgumentException">The number of entries in the array returned by the <see cref="P:System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs.PreviousModes" /> property of <paramref name="e" /> is not equal to the number of columns in the control.</exception>
		// Token: 0x06001B26 RID: 6950 RVA: 0x0006C548 File Offset: 0x0006A748
		protected virtual void OnAutoSizeColumnsModeChanged(DataGridViewAutoSizeColumnsModeEventArgs e)
		{
			DataGridViewAutoSizeColumnMode[] previousModes = e.PreviousModes;
			if (previousModes == null)
			{
				throw new ArgumentNullException("e.PreviousModes");
			}
			if (previousModes.Length != this.Columns.Count)
			{
				throw new ArgumentException(SR.GetString("DataGridView_PreviousModesHasWrongLength"));
			}
			foreach (object obj in this.Columns)
			{
				DataGridViewColumn dataGridViewColumn = (DataGridViewColumn)obj;
				if (dataGridViewColumn.Visible)
				{
					DataGridViewAutoSizeColumnMode inheritedAutoSizeMode = dataGridViewColumn.InheritedAutoSizeMode;
					DataGridViewAutoSizeColumnMode dataGridViewAutoSizeColumnMode = previousModes[dataGridViewColumn.Index];
					bool flag = dataGridViewAutoSizeColumnMode != DataGridViewAutoSizeColumnMode.Fill && dataGridViewAutoSizeColumnMode != DataGridViewAutoSizeColumnMode.None && dataGridViewAutoSizeColumnMode > DataGridViewAutoSizeColumnMode.NotSet;
					if (inheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill || dataGridViewAutoSizeColumnMode == DataGridViewAutoSizeColumnMode.Fill)
					{
						this.dataGridViewState2[67108864] = true;
					}
					if (inheritedAutoSizeMode != DataGridViewAutoSizeColumnMode.None)
					{
						if (inheritedAutoSizeMode != DataGridViewAutoSizeColumnMode.Fill)
						{
							if (!flag)
							{
								dataGridViewColumn.CachedThickness = dataGridViewColumn.Thickness;
							}
							this.AutoResizeColumnInternal(dataGridViewColumn.Index, (DataGridViewAutoSizeColumnCriteriaInternal)inheritedAutoSizeMode, (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) == DataGridViewAutoSizeRowsMode.None);
						}
					}
					else if (dataGridViewColumn.Thickness != dataGridViewColumn.CachedThickness && flag)
					{
						dataGridViewColumn.ThicknessInternal = Math.Max(dataGridViewColumn.MinimumWidth, dataGridViewColumn.CachedThickness);
					}
				}
			}
			this.PerformLayoutPrivate(false, true, true, false);
			if ((this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) != DataGridViewAutoSizeRowsMode.None)
			{
				this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
				if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
				{
					this.AutoResizeColumnHeadersHeight(true, true);
				}
				foreach (object obj2 in this.Columns)
				{
					DataGridViewColumn dataGridViewColumn2 = (DataGridViewColumn)obj2;
					DataGridViewAutoSizeColumnMode inheritedAutoSizeMode2 = dataGridViewColumn2.InheritedAutoSizeMode;
					if (inheritedAutoSizeMode2 != DataGridViewAutoSizeColumnMode.None && inheritedAutoSizeMode2 != DataGridViewAutoSizeColumnMode.Fill)
					{
						this.AutoResizeColumnInternal(dataGridViewColumn2.Index, (DataGridViewAutoSizeColumnCriteriaInternal)inheritedAutoSizeMode2, true);
					}
				}
			}
			DataGridViewAutoSizeColumnsModeEventHandler dataGridViewAutoSizeColumnsModeEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWAUTOSIZECOLUMNSMODECHANGED] as DataGridViewAutoSizeColumnsModeEventHandler;
			if (dataGridViewAutoSizeColumnsModeEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewAutoSizeColumnsModeEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.AutoSizeRowsModeChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewAutoSizeModeEventArgs" /> that contains the event data.</param>
		// Token: 0x06001B27 RID: 6951 RVA: 0x0006C76C File Offset: 0x0006A96C
		protected virtual void OnAutoSizeRowsModeChanged(DataGridViewAutoSizeModeEventArgs e)
		{
			if (this.autoSizeRowsMode == DataGridViewAutoSizeRowsMode.None)
			{
				this.RestoreRowsCachedThickness();
			}
			else
			{
				if (!e.PreviousModeAutoSized)
				{
					for (int num = this.Rows.GetFirstRow(DataGridViewElementStates.Visible); num != -1; num = this.Rows.GetNextRow(num, DataGridViewElementStates.Visible))
					{
						int height = this.Rows.SharedRow(num).GetHeight(num);
						this.Rows.SharedRow(num).CachedThickness = height;
					}
				}
				this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
			}
			DataGridViewAutoSizeModeEventHandler dataGridViewAutoSizeModeEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWAUTOSIZEROWSMODECHANGED] as DataGridViewAutoSizeModeEventHandler;
			if (dataGridViewAutoSizeModeEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewAutoSizeModeEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.BackgroundColorChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001B28 RID: 6952 RVA: 0x0006C824 File Offset: 0x0006AA24
		protected virtual void OnBackgroundColorChanged(EventArgs e)
		{
			this.InvalidateInside();
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWBACKGROUNDCOLORCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x06001B29 RID: 6953 RVA: 0x0006C874 File Offset: 0x0006AA74
		internal void OnBandContextMenuStripChanged(DataGridViewBand dataGridViewBand)
		{
			DataGridViewColumn dataGridViewColumn = dataGridViewBand as DataGridViewColumn;
			if (dataGridViewColumn != null)
			{
				DataGridViewColumnEventArgs dataGridViewColumnEventArgs = new DataGridViewColumnEventArgs(dataGridViewColumn);
				this.OnColumnContextMenuStripChanged(dataGridViewColumnEventArgs);
				return;
			}
			DataGridViewRowEventArgs dataGridViewRowEventArgs = new DataGridViewRowEventArgs((DataGridViewRow)dataGridViewBand);
			this.OnRowContextMenuStripChanged(dataGridViewRowEventArgs);
		}

		// Token: 0x06001B2A RID: 6954 RVA: 0x0006C8B0 File Offset: 0x0006AAB0
		internal void OnBandDefaultCellStyleChanged(DataGridViewBand dataGridViewBand)
		{
			DataGridViewColumn dataGridViewColumn = dataGridViewBand as DataGridViewColumn;
			if (dataGridViewColumn != null)
			{
				DataGridViewColumnEventArgs dataGridViewColumnEventArgs = new DataGridViewColumnEventArgs(dataGridViewColumn);
				this.OnColumnDefaultCellStyleChanged(dataGridViewColumnEventArgs);
				return;
			}
			DataGridViewRowEventArgs dataGridViewRowEventArgs = new DataGridViewRowEventArgs((DataGridViewRow)dataGridViewBand);
			this.OnRowDefaultCellStyleChanged(dataGridViewRowEventArgs);
		}

		// Token: 0x06001B2B RID: 6955 RVA: 0x0006C8EC File Offset: 0x0006AAEC
		internal void OnBandDividerThicknessChanged(DataGridViewBand dataGridViewBand)
		{
			DataGridViewColumn dataGridViewColumn = dataGridViewBand as DataGridViewColumn;
			if (dataGridViewColumn != null)
			{
				DataGridViewColumnEventArgs dataGridViewColumnEventArgs = new DataGridViewColumnEventArgs(dataGridViewColumn);
				this.OnColumnDividerWidthChanged(dataGridViewColumnEventArgs);
				return;
			}
			DataGridViewRowEventArgs dataGridViewRowEventArgs = new DataGridViewRowEventArgs((DataGridViewRow)dataGridViewBand);
			this.OnRowDividerHeightChanged(dataGridViewRowEventArgs);
		}

		// Token: 0x06001B2C RID: 6956 RVA: 0x0006C928 File Offset: 0x0006AB28
		internal void OnBandHeaderCellChanged(DataGridViewBand dataGridViewBand)
		{
			DataGridViewColumn dataGridViewColumn = dataGridViewBand as DataGridViewColumn;
			if (dataGridViewColumn != null)
			{
				DataGridViewColumnEventArgs dataGridViewColumnEventArgs = new DataGridViewColumnEventArgs(dataGridViewColumn);
				this.OnColumnHeaderCellChanged(dataGridViewColumnEventArgs);
				return;
			}
			DataGridViewRowEventArgs dataGridViewRowEventArgs = new DataGridViewRowEventArgs((DataGridViewRow)dataGridViewBand);
			this.OnRowHeaderCellChanged(dataGridViewRowEventArgs);
		}

		// Token: 0x06001B2D RID: 6957 RVA: 0x0006C964 File Offset: 0x0006AB64
		internal void OnBandMinimumThicknessChanged(DataGridViewBand dataGridViewBand)
		{
			DataGridViewColumn dataGridViewColumn = dataGridViewBand as DataGridViewColumn;
			if (dataGridViewColumn != null)
			{
				DataGridViewColumnEventArgs dataGridViewColumnEventArgs = new DataGridViewColumnEventArgs(dataGridViewColumn);
				this.OnColumnMinimumWidthChanged(dataGridViewColumnEventArgs);
				return;
			}
			DataGridViewRowEventArgs dataGridViewRowEventArgs = new DataGridViewRowEventArgs((DataGridViewRow)dataGridViewBand);
			this.OnRowMinimumHeightChanged(dataGridViewRowEventArgs);
		}

		// Token: 0x06001B2E RID: 6958 RVA: 0x0006C9A0 File Offset: 0x0006ABA0
		internal void OnBandThicknessChanged(DataGridViewBand dataGridViewBand)
		{
			DataGridViewColumn dataGridViewColumn = dataGridViewBand as DataGridViewColumn;
			if (dataGridViewColumn != null)
			{
				DataGridViewColumnEventArgs dataGridViewColumnEventArgs = new DataGridViewColumnEventArgs(dataGridViewColumn);
				this.OnColumnWidthChanged(dataGridViewColumnEventArgs);
				return;
			}
			DataGridViewRowEventArgs dataGridViewRowEventArgs = new DataGridViewRowEventArgs((DataGridViewRow)dataGridViewBand);
			this.OnRowHeightChanged(dataGridViewRowEventArgs);
		}

		// Token: 0x06001B2F RID: 6959 RVA: 0x0006C9D9 File Offset: 0x0006ABD9
		internal void OnBandThicknessChanging()
		{
			if (this.InAdjustFillingColumns)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotAlterAutoFillColumnParameter"));
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.BindingContextChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001B30 RID: 6960 RVA: 0x0006C9F4 File Offset: 0x0006ABF4
		protected override void OnBindingContextChanged(EventArgs e)
		{
			if (this.dataGridViewState2[16777216])
			{
				return;
			}
			this.dataGridViewState2[16777216] = true;
			try
			{
				if (this.dataConnection != null)
				{
					this.CurrentCell = null;
					try
					{
						this.dataConnection.SetDataConnection(this.DataSource, this.DataMember);
					}
					catch (ArgumentException)
					{
						if (base.DesignMode)
						{
							this.DataMember = string.Empty;
							this.RefreshColumnsAndRows();
							return;
						}
						throw;
					}
					this.RefreshColumnsAndRows();
					base.OnBindingContextChanged(e);
					if (this.dataConnection.CurrencyManager != null)
					{
						this.OnDataBindingComplete(ListChangedType.Reset);
					}
				}
				else
				{
					base.OnBindingContextChanged(e);
				}
			}
			finally
			{
				this.dataGridViewState2[16777216] = false;
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.BorderStyleChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001B31 RID: 6961 RVA: 0x0006CAC8 File Offset: 0x0006ACC8
		protected virtual void OnBorderStyleChanged(EventArgs e)
		{
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWBORDERSTYLECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CancelRowEdit" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.QuestionEventArgs" /> that contains the event data.</param>
		// Token: 0x06001B32 RID: 6962 RVA: 0x0006CB10 File Offset: 0x0006AD10
		protected virtual void OnCancelRowEdit(QuestionEventArgs e)
		{
			QuestionEventHandler questionEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCANCELROWEDIT] as QuestionEventHandler;
			if (questionEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				questionEventHandler(this, e);
				this.CorrectFocus(true);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellBeginEdit" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellCancelEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellCancelEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
		///  -or-  
		///  The value of the <see cref="P:System.Windows.Forms.DataGridViewCellCancelEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001B33 RID: 6963 RVA: 0x0006CB60 File Offset: 0x0006AD60
		protected virtual void OnCellBeginEdit(DataGridViewCellCancelEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellCancelEventHandler dataGridViewCellCancelEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLBEGINEDIT] as DataGridViewCellCancelEventHandler;
			if (dataGridViewCellCancelEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellCancelEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellBorderStyleChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001B34 RID: 6964 RVA: 0x0006CBE4 File Offset: 0x0006ADE4
		protected virtual void OnCellBorderStyleChanged(EventArgs e)
		{
			this.PerformLayoutPrivate(false, false, true, false);
			base.Invalidate();
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLBORDERSTYLECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x06001B35 RID: 6965 RVA: 0x0006CC3C File Offset: 0x0006AE3C
		internal void OnCellClickInternal(DataGridViewCellEventArgs e)
		{
			this.OnCellClick(e);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellClick" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
		///  -or-  
		///  The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001B36 RID: 6966 RVA: 0x0006CC48 File Offset: 0x0006AE48
		protected virtual void OnCellClick(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
			if (e.RowIndex >= 0 && cellInternal.ClickUnsharesRowInternal(e))
			{
				DataGridViewRow dataGridViewRow = this.Rows[e.RowIndex];
				this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnClickInternal(e);
			}
			else
			{
				cellInternal.OnClickInternal(e);
			}
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLCLICK] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		// Token: 0x06001B37 RID: 6967 RVA: 0x0006CD24 File Offset: 0x0006AF24
		internal void OnCellCommonChange(int columnIndex, int rowIndex)
		{
			if (columnIndex == -1)
			{
				this.OnRowHeaderGlobalAutoSize(rowIndex);
				return;
			}
			if (rowIndex == -1)
			{
				this.OnColumnHeaderGlobalAutoSize(columnIndex);
				return;
			}
			this.InvalidateCellPrivate(columnIndex, rowIndex);
			bool flag = false;
			if (rowIndex != -1)
			{
				flag = (this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Displayed) > DataGridViewElementStates.None;
			}
			DataGridViewAutoSizeColumnCriteriaInternal inheritedAutoSizeMode = (DataGridViewAutoSizeColumnCriteriaInternal)this.Columns[columnIndex].InheritedAutoSizeMode;
			bool flag2 = (inheritedAutoSizeMode & DataGridViewAutoSizeColumnCriteriaInternal.AllRows) > DataGridViewAutoSizeColumnCriteriaInternal.NotSet;
			if (flag)
			{
				flag2 |= (inheritedAutoSizeMode & DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows) > DataGridViewAutoSizeColumnCriteriaInternal.NotSet;
			}
			bool flag3 = (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) > DataGridViewAutoSizeRowsMode.None;
			if (flag3)
			{
				this.AutoResizeRowInternal(rowIndex, DataGridView.MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), !flag2, true);
			}
			if (flag2)
			{
				this.AutoResizeColumnInternal(columnIndex, inheritedAutoSizeMode, true);
				if (flag3)
				{
					this.AutoResizeRowInternal(rowIndex, DataGridView.MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), true, true);
				}
			}
		}

		// Token: 0x06001B38 RID: 6968 RVA: 0x0006CDD8 File Offset: 0x0006AFD8
		internal void OnCellContentClickInternal(DataGridViewCellEventArgs e)
		{
			this.OnCellContentClick(e);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellContentClick" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains information regarding the cell whose content was clicked.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
		///  -or-  
		///  The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001B39 RID: 6969 RVA: 0x0006CDE4 File Offset: 0x0006AFE4
		protected virtual void OnCellContentClick(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
			if (e.RowIndex >= 0 && cellInternal.ContentClickUnsharesRowInternal(e))
			{
				DataGridViewRow dataGridViewRow = this.Rows[e.RowIndex];
				this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnContentClickInternal(e);
			}
			else
			{
				cellInternal.OnContentClickInternal(e);
			}
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLCONTENTCLICK] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		// Token: 0x06001B3A RID: 6970 RVA: 0x0006CEC0 File Offset: 0x0006B0C0
		internal void OnCellContentDoubleClickInternal(DataGridViewCellEventArgs e)
		{
			this.OnCellContentDoubleClick(e);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellContentDoubleClick" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
		///  -or-  
		///  The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001B3B RID: 6971 RVA: 0x0006CECC File Offset: 0x0006B0CC
		protected virtual void OnCellContentDoubleClick(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
			if (e.RowIndex >= 0 && cellInternal.ContentDoubleClickUnsharesRowInternal(e))
			{
				DataGridViewRow dataGridViewRow = this.Rows[e.RowIndex];
				this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnContentDoubleClickInternal(e);
			}
			else
			{
				cellInternal.OnContentDoubleClickInternal(e);
			}
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLCONTENTDOUBLECLICK] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		// Token: 0x06001B3C RID: 6972 RVA: 0x0006CFA8 File Offset: 0x0006B1A8
		internal void OnCellContextMenuStripChanged(DataGridViewCell dataGridViewCell)
		{
			DataGridViewCellEventArgs dataGridViewCellEventArgs = new DataGridViewCellEventArgs(dataGridViewCell);
			this.OnCellContextMenuStripChanged(dataGridViewCellEventArgs);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellContextMenuStripChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
		///  -or-  
		///  The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001B3D RID: 6973 RVA: 0x0006CFC4 File Offset: 0x0006B1C4
		protected virtual void OnCellContextMenuStripChanged(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLCONTEXTMENUSTRIPCHANGED] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		// Token: 0x06001B3E RID: 6974 RVA: 0x0006D048 File Offset: 0x0006B248
		internal ContextMenuStrip OnCellContextMenuStripNeeded(int columnIndex, int rowIndex, ContextMenuStrip contextMenuStrip)
		{
			DataGridViewCellContextMenuStripNeededEventArgs dataGridViewCellContextMenuStripNeededEventArgs = new DataGridViewCellContextMenuStripNeededEventArgs(columnIndex, rowIndex, contextMenuStrip);
			this.OnCellContextMenuStripNeeded(dataGridViewCellContextMenuStripNeededEventArgs);
			return dataGridViewCellContextMenuStripNeededEventArgs.ContextMenuStrip;
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellContextMenuStripNeeded" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
		///  -or-  
		///  The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001B3F RID: 6975 RVA: 0x0006D06C File Offset: 0x0006B26C
		protected virtual void OnCellContextMenuStripNeeded(DataGridViewCellContextMenuStripNeededEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellContextMenuStripNeededEventHandler dataGridViewCellContextMenuStripNeededEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLCONTEXTMENUSTRIPNEEDED] as DataGridViewCellContextMenuStripNeededEventHandler;
			if (dataGridViewCellContextMenuStripNeededEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellContextMenuStripNeededEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellDoubleClick" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
		///  -or-  
		///  The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001B40 RID: 6976 RVA: 0x0006D0F0 File Offset: 0x0006B2F0
		protected virtual void OnCellDoubleClick(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
			if (e.RowIndex >= 0 && cellInternal.DoubleClickUnsharesRowInternal(e))
			{
				DataGridViewRow dataGridViewRow = this.Rows[e.RowIndex];
				this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnDoubleClickInternal(e);
			}
			else
			{
				cellInternal.OnDoubleClickInternal(e);
			}
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLDOUBLECLICK] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellEndEdit" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
		///  -or-  
		///  The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001B41 RID: 6977 RVA: 0x0006D1CC File Offset: 0x0006B3CC
		protected virtual void OnCellEndEdit(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLENDEDIT] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		// Token: 0x06001B42 RID: 6978 RVA: 0x0006D250 File Offset: 0x0006B450
		internal void OnCellEnter(ref DataGridViewCell dataGridViewCell, int columnIndex, int rowIndex)
		{
			this.OnCellEnter(new DataGridViewCellEventArgs(columnIndex, rowIndex));
			if (dataGridViewCell != null)
			{
				if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
				{
					dataGridViewCell = null;
					return;
				}
				dataGridViewCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellEnter" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
		///  -or-  
		///  The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001B43 RID: 6979 RVA: 0x0006D28C File Offset: 0x0006B48C
		protected virtual void OnCellEnter(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			try
			{
				this.noDimensionChangeCount++;
				DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLENTER] as DataGridViewCellEventHandler;
				if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
				{
					dataGridViewCellEventHandler(this, e);
				}
			}
			finally
			{
				this.noDimensionChangeCount--;
			}
		}

		// Token: 0x06001B44 RID: 6980 RVA: 0x0006D340 File Offset: 0x0006B540
		internal void OnCellErrorTextChanged(DataGridViewCell dataGridViewCell)
		{
			DataGridViewCellEventArgs dataGridViewCellEventArgs = new DataGridViewCellEventArgs(dataGridViewCell);
			this.OnCellErrorTextChanged(dataGridViewCellEventArgs);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellErrorTextChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is less than -1 or greater than the number of columns in the control minus one.  
		///  -or-  
		///  The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is less than -1 or greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001B45 RID: 6981 RVA: 0x0006D35C File Offset: 0x0006B55C
		protected virtual void OnCellErrorTextChanged(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			this.UpdateCellErrorText(e.ColumnIndex, e.RowIndex);
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLERRORTEXTCHANGED] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		// Token: 0x06001B46 RID: 6982 RVA: 0x0006D3F4 File Offset: 0x0006B5F4
		internal string OnCellErrorTextNeeded(int columnIndex, int rowIndex, string errorText)
		{
			DataGridViewCellErrorTextNeededEventArgs dataGridViewCellErrorTextNeededEventArgs = new DataGridViewCellErrorTextNeededEventArgs(columnIndex, rowIndex, errorText);
			this.OnCellErrorTextNeeded(dataGridViewCellErrorTextNeededEventArgs);
			return dataGridViewCellErrorTextNeededEventArgs.ErrorText;
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellErrorTextNeeded" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
		///  -or-  
		///  The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001B47 RID: 6983 RVA: 0x0006D418 File Offset: 0x0006B618
		protected virtual void OnCellErrorTextNeeded(DataGridViewCellErrorTextNeededEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellErrorTextNeededEventHandler dataGridViewCellErrorTextNeededEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLERRORTEXTNEEDED] as DataGridViewCellErrorTextNeededEventHandler;
			if (dataGridViewCellErrorTextNeededEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellErrorTextNeededEventHandler(this, e);
			}
		}

		// Token: 0x06001B48 RID: 6984 RVA: 0x0006D49C File Offset: 0x0006B69C
		internal DataGridViewCellFormattingEventArgs OnCellFormatting(int columnIndex, int rowIndex, object val, Type formattedValueType, DataGridViewCellStyle cellStyle)
		{
			DataGridViewCellFormattingEventArgs dataGridViewCellFormattingEventArgs = new DataGridViewCellFormattingEventArgs(columnIndex, rowIndex, val, formattedValueType, cellStyle);
			this.OnCellFormatting(dataGridViewCellFormattingEventArgs);
			return dataGridViewCellFormattingEventArgs;
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellFormatting" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellFormattingEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellFormattingEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
		///  -or-  
		///  The value of the <see cref="P:System.Windows.Forms.DataGridViewCellFormattingEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001B49 RID: 6985 RVA: 0x0006D4C0 File Offset: 0x0006B6C0
		protected virtual void OnCellFormatting(DataGridViewCellFormattingEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellFormattingEventHandler dataGridViewCellFormattingEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLFORMATTING] as DataGridViewCellFormattingEventHandler;
			if (dataGridViewCellFormattingEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellFormattingEventHandler(this, e);
			}
		}

		// Token: 0x06001B4A RID: 6986 RVA: 0x0006D544 File Offset: 0x0006B744
		internal void OnCellLeave(ref DataGridViewCell dataGridViewCell, int columnIndex, int rowIndex)
		{
			this.OnCellLeave(new DataGridViewCellEventArgs(columnIndex, rowIndex));
			if (dataGridViewCell != null)
			{
				if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
				{
					dataGridViewCell = null;
					return;
				}
				dataGridViewCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellLeave" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
		///  -or-  
		///  The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001B4B RID: 6987 RVA: 0x0006D580 File Offset: 0x0006B780
		protected virtual void OnCellLeave(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			try
			{
				this.noDimensionChangeCount++;
				DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLLEAVE] as DataGridViewCellEventHandler;
				if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
				{
					dataGridViewCellEventHandler(this, e);
				}
			}
			finally
			{
				this.noDimensionChangeCount--;
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellMouseClick" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
		///  -or-  
		///  The value of the <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001B4C RID: 6988 RVA: 0x0006D634 File Offset: 0x0006B834
		protected virtual void OnCellMouseClick(DataGridViewCellMouseEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
			if (e.RowIndex >= 0 && cellInternal.MouseClickUnsharesRowInternal(e))
			{
				DataGridViewRow dataGridViewRow = this.Rows[e.RowIndex];
				this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnMouseClickInternal(e);
			}
			else
			{
				cellInternal.OnMouseClickInternal(e);
			}
			this.dataGridViewState2[8388608] = false;
			DataGridViewCellMouseEventHandler dataGridViewCellMouseEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLMOUSECLICK] as DataGridViewCellMouseEventHandler;
			if (dataGridViewCellMouseEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellMouseEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellMouseDoubleClick" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
		///  -or-  
		///  The value of the <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001B4D RID: 6989 RVA: 0x0006D724 File Offset: 0x0006B924
		protected virtual void OnCellMouseDoubleClick(DataGridViewCellMouseEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
			if (e.RowIndex >= 0 && cellInternal.MouseDoubleClickUnsharesRowInternal(e))
			{
				DataGridViewRow dataGridViewRow = this.Rows[e.RowIndex];
				this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnMouseDoubleClickInternal(e);
			}
			else
			{
				cellInternal.OnMouseDoubleClickInternal(e);
			}
			this.dataGridViewState2[8388608] = true;
			DataGridViewCellMouseEventHandler dataGridViewCellMouseEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEDOUBLECLICK] as DataGridViewCellMouseEventHandler;
			if (dataGridViewCellMouseEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellMouseEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellMouseDown" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
		///  -or-  
		///  The value of the <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		/// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />.</exception>
		// Token: 0x06001B4E RID: 6990 RVA: 0x0006D814 File Offset: 0x0006BA14
		protected virtual void OnCellMouseDown(DataGridViewCellMouseEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
			Keys modifierKeys = Control.ModifierKeys;
			bool flag = (modifierKeys & Keys.Control) == Keys.Control && (modifierKeys & Keys.Alt) == Keys.None;
			bool flag2 = (modifierKeys & Keys.Shift) == Keys.Shift;
			bool flag3 = (modifierKeys & Keys.Alt) == Keys.Alt;
			Point point = this.ConvertCellToGridCoord(e.ColumnIndex, e.RowIndex, e.X, e.Y);
			DataGridView.HitTestInfo hitTestInfo = this.HitTest(point.X, point.Y);
			if (!this.dataGridViewState2[134217728] && e.Button == MouseButtons.Left)
			{
				DataGridView.DataGridViewHitTestTypeInternal typeInternal = hitTestInfo.typeInternal;
				if (typeInternal - DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeLeft <= 3 || typeInternal - DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeLeft <= 7)
				{
					this.dataGridViewOper[8388608] = e.Clicks == 1;
				}
			}
			try
			{
				if (e.RowIndex >= 0 && cellInternal.MouseDownUnsharesRowInternal(e))
				{
					DataGridViewRow dataGridViewRow = this.Rows[e.RowIndex];
					this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnMouseDownInternal(e);
				}
				else
				{
					cellInternal.OnMouseDownInternal(e);
				}
				DataGridViewCellMouseEventHandler dataGridViewCellMouseEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEDOWN] as DataGridViewCellMouseEventHandler;
				if (dataGridViewCellMouseEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
				{
					dataGridViewCellMouseEventHandler(this, e);
				}
				if (!this.dataGridViewState2[134217728] && e.Button == MouseButtons.Left)
				{
					switch (hitTestInfo.typeInternal)
					{
					case DataGridView.DataGridViewHitTestTypeInternal.Cell:
						this.OnCellMouseDown(hitTestInfo, flag2, flag);
						break;
					case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeader:
					case DataGridView.DataGridViewHitTestTypeInternal.FirstColumnHeaderLeft:
					case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeaderLeft:
					case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeaderRight:
						if (flag3 && this.AllowUserToOrderColumns && (this.SelectionMode == DataGridViewSelectionMode.FullColumnSelect || this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect))
						{
							this.BeginColumnRelocation(point.X, hitTestInfo.col);
						}
						else
						{
							this.OnColumnHeaderMouseDown(hitTestInfo, flag2, flag);
						}
						break;
					case DataGridView.DataGridViewHitTestTypeInternal.RowHeader:
						this.OnRowHeaderMouseDown(hitTestInfo, flag2, flag);
						break;
					case DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeLeft:
					case DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeRight:
					{
						int num = ((hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeRight) ? hitTestInfo.col : hitTestInfo.adjacentCol);
						if (e.Clicks == 1)
						{
							this.BeginMouseColumnResize(point.X, hitTestInfo.mouseBarOffset, num);
						}
						break;
					}
					case DataGridView.DataGridViewHitTestTypeInternal.RowResizeTop:
					case DataGridView.DataGridViewHitTestTypeInternal.RowResizeBottom:
					{
						int num2 = ((hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.RowResizeBottom) ? hitTestInfo.row : hitTestInfo.adjacentRow);
						if (e.Clicks == 1)
						{
							this.BeginRowResize(point.Y, hitTestInfo.mouseBarOffset, num2);
						}
						break;
					}
					case DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeader:
						this.OnTopLeftHeaderMouseDown();
						break;
					case DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeLeft:
					case DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeRight:
					case DataGridView.DataGridViewHitTestTypeInternal.RowHeadersResizeRight:
					case DataGridView.DataGridViewHitTestTypeInternal.RowHeadersResizeLeft:
						if (e.Clicks == 1)
						{
							this.BeginRowHeadersResize(point.X, hitTestInfo.mouseBarOffset);
						}
						break;
					case DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeTop:
					case DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeBottom:
					case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeadersResizeBottom:
					case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeadersResizeTop:
						if (e.Clicks == 1)
						{
							this.BeginColumnHeadersResize(point.Y, hitTestInfo.mouseBarOffset);
						}
						break;
					}
					if (this.ptCurrentCell.X == -1)
					{
						this.MakeFirstDisplayedCellCurrentCell(true);
					}
				}
			}
			finally
			{
				this.dataGridViewOper[8388608] = false;
			}
		}

		// Token: 0x06001B4F RID: 6991 RVA: 0x0006DBAC File Offset: 0x0006BDAC
		private void OnCellMouseDown(DataGridView.HitTestInfo hti, bool isShiftDown, bool isControlDown)
		{
			if (this.ptCurrentCell.X >= 0 && (this.ptCurrentCell.X != hti.col || this.ptCurrentCell.Y != hti.row))
			{
				Point point = this.ptCurrentCell;
				if (!this.CommitEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit, this.ptCurrentCell.X != hti.col || this.ptCurrentCell.Y != hti.row, this.ptCurrentCell.Y != hti.row))
				{
					return;
				}
				if (this.ptCurrentCell != point)
				{
					isControlDown = (isShiftDown = false);
				}
			}
			if (hti.col >= this.Columns.Count)
			{
				DataGridViewColumn lastColumn = this.Columns.GetLastColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				if (this.ptCurrentCell.X != -1 || lastColumn == null)
				{
					return;
				}
				hti.col = lastColumn.Index;
			}
			if (hti.row >= this.Rows.Count)
			{
				int lastRow = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
				if (this.ptCurrentCell.X != -1 || lastRow == -1)
				{
					return;
				}
				hti.row = lastRow;
			}
			bool flag = true;
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
				{
					if (isControlDown && this.IsSharedCellSelected(this.Rows.SharedRow(hti.row).Cells[hti.col], hti.row) && (!isShiftDown || !this.MultiSelect))
					{
						flag = false;
					}
					if (flag)
					{
						if ((!this.MultiSelect || !isControlDown) && (!this.MultiSelect || !isShiftDown))
						{
							this.RemoveIndividuallySelectedCells(hti.col, hti.row);
						}
						if (this.MultiSelect)
						{
							if (this.dataGridViewOper[512])
							{
								this.dataGridViewOper[16] = true;
							}
							if (isShiftDown)
							{
								int x = this.ptCurrentCell.X;
								int y = this.ptCurrentCell.Y;
								if (this.ptAnchorCell.X == -1)
								{
									break;
								}
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, hti.col, this.ptAnchorCell.Y, ref y, hti.row);
							}
							else
							{
								this.SetSelectedCellCore(hti.col, hti.row, true);
							}
						}
						else
						{
							this.SetSelectedCellCore(hti.col, hti.row, true);
						}
					}
					else
					{
						this.SetSelectedCellCore(hti.col, hti.row, false);
					}
					bool flag2 = this.SetCurrentCellAddressCore(hti.col, hti.row, !isShiftDown, false, true);
					break;
				}
				case DataGridViewSelectionMode.FullRowSelect:
				{
					if (isControlDown && (this.Rows.GetRowState(hti.row) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
					{
						flag = false;
					}
					if (flag)
					{
						bool flag3 = false;
						this.trackRow = hti.row;
						this.trackRowEdge = -1;
						if (this.MultiSelect && isShiftDown && this.ptAnchorCell.Y > -1 && (this.Rows.GetRowState(this.ptAnchorCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
						{
							flag3 = true;
						}
						if (!this.MultiSelect || !isControlDown || isShiftDown)
						{
							int i = 0;
							bool flag4 = false;
							if (this.selectedBandIndexes.Count > 8)
							{
								this.inBulkPaintCount++;
								flag4 = true;
							}
							try
							{
								while (i < this.selectedBandIndexes.Count)
								{
									if (this.selectedBandIndexes[i] != hti.row)
									{
										this.SetSelectedRowCore(this.selectedBandIndexes[i], false);
									}
									else
									{
										i++;
									}
								}
							}
							finally
							{
								if (flag4)
								{
									this.ExitBulkPaint(-1, -1);
								}
							}
						}
						if (this.MultiSelect && this.dataGridViewOper[512])
						{
							this.dataGridViewOper[8] = true;
						}
						if (flag3)
						{
							if (hti.row >= this.ptAnchorCell.Y)
							{
								this.SelectRowRange(this.ptAnchorCell.Y, hti.row, true);
							}
							else
							{
								this.SelectRowRange(hti.row, this.ptAnchorCell.Y, true);
							}
						}
						else if ((this.Rows.GetRowState(hti.row) & DataGridViewElementStates.Selected) == DataGridViewElementStates.None)
						{
							this.SetSelectedRowCore(hti.row, true);
						}
					}
					else
					{
						this.SetSelectedRowCore(hti.row, false);
					}
					bool flag5 = this.SetCurrentCellAddressCore(hti.col, hti.row, !isShiftDown, false, true);
					break;
				}
				case DataGridViewSelectionMode.FullColumnSelect:
				{
					if (isControlDown && this.Columns[hti.col].Selected)
					{
						flag = false;
					}
					if (flag)
					{
						bool flag6 = false;
						this.trackColumn = hti.col;
						this.trackColumnEdge = -1;
						if (this.MultiSelect && isShiftDown && this.ptAnchorCell.X > -1 && this.Columns[this.ptAnchorCell.X].Selected)
						{
							flag6 = true;
						}
						if (!this.MultiSelect || !isControlDown || isShiftDown)
						{
							int j = 0;
							bool flag7 = false;
							if (this.selectedBandIndexes.Count > 8)
							{
								this.inBulkPaintCount++;
								flag7 = true;
							}
							try
							{
								while (j < this.selectedBandIndexes.Count)
								{
									if (this.selectedBandIndexes[j] != hti.col)
									{
										this.SetSelectedColumnCore(this.selectedBandIndexes[j], false);
									}
									else
									{
										j++;
									}
								}
							}
							finally
							{
								if (flag7)
								{
									this.ExitBulkPaint(-1, -1);
								}
							}
						}
						if (this.MultiSelect && this.dataGridViewOper[512])
						{
							this.dataGridViewOper[4] = true;
						}
						if (flag6)
						{
							if (this.Columns.DisplayInOrder(this.ptAnchorCell.X, hti.col))
							{
								this.SelectColumnRange(this.ptAnchorCell.X, hti.col, true);
							}
							else
							{
								this.SelectColumnRange(hti.col, this.ptAnchorCell.X, true);
							}
						}
						else if (!this.selectedBandIndexes.Contains(hti.col))
						{
							this.SetSelectedColumnCore(hti.col, true);
						}
					}
					else
					{
						this.SetSelectedColumnCore(hti.col, false);
					}
					bool flag8 = this.SetCurrentCellAddressCore(hti.col, hti.row, !isShiftDown, false, true);
					break;
				}
				case DataGridViewSelectionMode.RowHeaderSelect:
				{
					if (isControlDown && ((this.Rows.GetRowState(hti.row) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None || this.IsSharedCellSelected(this.Rows.SharedRow(hti.row).Cells[hti.col], hti.row)) && (!isShiftDown || !this.MultiSelect))
					{
						flag = false;
					}
					if (flag)
					{
						if (!this.MultiSelect)
						{
							if (this.selectedBandIndexes.Count > 0)
							{
								this.SetSelectedRowCore(this.selectedBandIndexes.HeadInt, false);
							}
							else
							{
								this.RemoveIndividuallySelectedCells();
							}
							this.SetSelectedCellCore(hti.col, hti.row, true);
						}
						else
						{
							if (!isControlDown && !isShiftDown)
							{
								bool flag9 = false;
								if (this.selectedBandIndexes.Count > 8)
								{
									this.inBulkPaintCount++;
									flag9 = true;
								}
								try
								{
									while (this.selectedBandIndexes.Count > 0)
									{
										this.SetSelectedRowCore(this.selectedBandIndexes.HeadInt, false);
									}
									this.RemoveIndividuallySelectedCells(hti.col, hti.row);
								}
								finally
								{
									if (flag9)
									{
										this.ExitBulkPaint(-1, -1);
									}
								}
							}
							if (this.dataGridViewOper[512])
							{
								this.dataGridViewOper[16] = true;
							}
							if (isShiftDown)
							{
								int x2 = this.ptCurrentCell.X;
								int y2 = this.ptCurrentCell.Y;
								if (this.ptAnchorCell.X == -1)
								{
									break;
								}
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x2, hti.col, this.ptAnchorCell.Y, ref y2, hti.row);
							}
							else
							{
								this.SetSelectedCellCore(hti.col, hti.row, true);
							}
						}
					}
					else if (!this.MultiSelect)
					{
						if (this.selectedBandIndexes.Count > 0)
						{
							this.SetSelectedRowCore(this.selectedBandIndexes.HeadInt, false);
						}
						else
						{
							this.SetSelectedCellCore(hti.col, hti.row, false);
						}
					}
					else
					{
						this.SetSelectedCellCore(hti.col, hti.row, false);
					}
					bool flag10 = this.SetCurrentCellAddressCore(hti.col, hti.row, !isShiftDown, false, true);
					break;
				}
				case DataGridViewSelectionMode.ColumnHeaderSelect:
				{
					if (isControlDown && (this.Columns[hti.col].Selected || this.IsSharedCellSelected(this.Rows.SharedRow(hti.row).Cells[hti.col], hti.row)) && (!isShiftDown || !this.MultiSelect))
					{
						flag = false;
					}
					if (flag)
					{
						if (!this.MultiSelect)
						{
							if (this.selectedBandIndexes.Count > 0)
							{
								this.SetSelectedColumnCore(this.selectedBandIndexes.HeadInt, false);
							}
							else
							{
								this.RemoveIndividuallySelectedCells();
							}
							this.SetSelectedCellCore(hti.col, hti.row, true);
						}
						else
						{
							if (!isControlDown && !isShiftDown)
							{
								bool flag11 = false;
								if (this.selectedBandIndexes.Count > 8)
								{
									this.inBulkPaintCount++;
									flag11 = true;
								}
								try
								{
									while (this.selectedBandIndexes.Count > 0)
									{
										this.SetSelectedColumnCore(this.selectedBandIndexes.HeadInt, false);
									}
									this.RemoveIndividuallySelectedCells(hti.col, hti.row);
								}
								finally
								{
									if (flag11)
									{
										this.ExitBulkPaint(-1, -1);
									}
								}
							}
							if (this.dataGridViewOper[512])
							{
								this.dataGridViewOper[16] = true;
							}
							if (isShiftDown)
							{
								int x3 = this.ptCurrentCell.X;
								int y3 = this.ptCurrentCell.Y;
								if (this.ptAnchorCell.X == -1)
								{
									break;
								}
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x3, hti.col, this.ptAnchorCell.Y, ref y3, hti.row);
							}
							else
							{
								this.SetSelectedCellCore(hti.col, hti.row, true);
							}
						}
					}
					else if (!this.MultiSelect)
					{
						if (this.selectedBandIndexes.Count > 0)
						{
							this.SetSelectedColumnCore(this.selectedBandIndexes.HeadInt, false);
						}
						else
						{
							this.SetSelectedCellCore(hti.col, hti.row, false);
						}
					}
					else
					{
						this.SetSelectedCellCore(hti.col, hti.row, false);
					}
					bool flag12 = this.SetCurrentCellAddressCore(hti.col, hti.row, !isShiftDown, false, true);
					break;
				}
				}
			}
			finally
			{
				int num = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num - 1;
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellMouseEnter" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
		///  -or-  
		///  The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001B50 RID: 6992 RVA: 0x0006E698 File Offset: 0x0006C898
		protected virtual void OnCellMouseEnter(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			this.ptMouseEnteredCell.X = e.ColumnIndex;
			this.ptMouseEnteredCell.Y = e.RowIndex;
			DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
			if (e.RowIndex >= 0 && cellInternal.MouseEnterUnsharesRowInternal(e.RowIndex))
			{
				DataGridViewRow dataGridViewRow = this.Rows[e.RowIndex];
				this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnMouseEnterInternal(e.RowIndex);
			}
			else
			{
				cellInternal.OnMouseEnterInternal(e.RowIndex);
			}
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEENTER] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellMouseLeave" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
		///  -or-  
		///  The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001B51 RID: 6993 RVA: 0x0006E7A8 File Offset: 0x0006C9A8
		protected virtual void OnCellMouseLeave(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			this.ptMouseEnteredCell.X = -2;
			this.ptMouseEnteredCell.Y = -2;
			DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
			if (e.RowIndex >= 0 && cellInternal.MouseLeaveUnsharesRowInternal(e.RowIndex))
			{
				DataGridViewRow dataGridViewRow = this.Rows[e.RowIndex];
				this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnMouseLeaveInternal(e.RowIndex);
			}
			else
			{
				cellInternal.OnMouseLeaveInternal(e.RowIndex);
			}
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLMOUSELEAVE] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellMouseMove" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
		///  -or-  
		///  The value of the <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001B52 RID: 6994 RVA: 0x0006E8B0 File Offset: 0x0006CAB0
		protected virtual void OnCellMouseMove(DataGridViewCellMouseEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
			if (e.RowIndex >= 0 && cellInternal.MouseMoveUnsharesRowInternal(e))
			{
				DataGridViewRow dataGridViewRow = this.Rows[e.RowIndex];
				this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnMouseMoveInternal(e);
			}
			else
			{
				cellInternal.OnMouseMoveInternal(e);
			}
			DataGridViewCellMouseEventHandler dataGridViewCellMouseEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEMOVE] as DataGridViewCellMouseEventHandler;
			if (dataGridViewCellMouseEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellMouseEventHandler(this, e);
			}
			if (!this.dataGridViewState1[2048] && !this.IsMouseOperationActive() && this.AllowUserToOrderColumns && this.SelectionMode != DataGridViewSelectionMode.FullColumnSelect && this.SelectionMode != DataGridViewSelectionMode.ColumnHeaderSelect && e.Button == MouseButtons.Left && this.ptMouseDownCell.Y == -1 && this.ptMouseDownCell.X >= 0 && this.ptMouseDownCell.X < this.Columns.Count)
			{
				Point point = this.ConvertCellToGridCoord(e.ColumnIndex, e.RowIndex, e.X, e.Y);
				DataGridView.HitTestInfo hitTestInfo = this.HitTest(point.X, point.Y);
				DataGridView.DataGridViewHitTestTypeInternal typeInternal = hitTestInfo.typeInternal;
				if ((typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnHeader || typeInternal == DataGridView.DataGridViewHitTestTypeInternal.FirstColumnHeaderLeft || typeInternal - DataGridView.DataGridViewHitTestTypeInternal.ColumnHeaderLeft <= 1) && (Math.Abs(this.ptMouseDownGridCoord.X - point.X) >= DataGridView.DragSize.Width || Math.Abs(this.ptMouseDownGridCoord.Y - point.Y) >= DataGridView.DragSize.Height))
				{
					this.BeginColumnRelocation(this.ptMouseDownGridCoord.X, this.ptMouseDownCell.X);
				}
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellMouseUp" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
		///  -or-  
		///  The value of the <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001B53 RID: 6995 RVA: 0x0006EAD0 File Offset: 0x0006CCD0
		protected virtual void OnCellMouseUp(DataGridViewCellMouseEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
			if (e.RowIndex >= 0 && cellInternal.MouseUpUnsharesRowInternal(e))
			{
				DataGridViewRow dataGridViewRow = this.Rows[e.RowIndex];
				this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnMouseUpInternal(e);
			}
			else
			{
				cellInternal.OnMouseUpInternal(e);
			}
			DataGridViewCellMouseEventHandler dataGridViewCellMouseEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEUP] as DataGridViewCellMouseEventHandler;
			if (dataGridViewCellMouseEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellMouseEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellPainting" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellPaintingEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellPaintingEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
		///  -or-  
		///  The value of the <see cref="P:System.Windows.Forms.DataGridViewCellPaintingEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001B54 RID: 6996 RVA: 0x0006EBAC File Offset: 0x0006CDAC
		protected internal virtual void OnCellPainting(DataGridViewCellPaintingEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellPaintingEventHandler dataGridViewCellPaintingEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLPAINTING] as DataGridViewCellPaintingEventHandler;
			if (dataGridViewCellPaintingEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellPaintingEventHandler(this, e);
			}
		}

		// Token: 0x06001B55 RID: 6997 RVA: 0x0006EC30 File Offset: 0x0006CE30
		internal DataGridViewCellParsingEventArgs OnCellParsing(int rowIndex, int columnIndex, object formattedValue, Type valueType, DataGridViewCellStyle cellStyle)
		{
			DataGridViewCellParsingEventArgs dataGridViewCellParsingEventArgs = new DataGridViewCellParsingEventArgs(rowIndex, columnIndex, formattedValue, valueType, cellStyle);
			this.OnCellParsing(dataGridViewCellParsingEventArgs);
			return dataGridViewCellParsingEventArgs;
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellParsing" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellParsingEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellParsingEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
		///  -or-  
		///  The value of the <see cref="P:System.Windows.Forms.DataGridViewCellParsingEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001B56 RID: 6998 RVA: 0x0006EC54 File Offset: 0x0006CE54
		protected virtual void OnCellParsing(DataGridViewCellParsingEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellParsingEventHandler dataGridViewCellParsingEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLPARSING] as DataGridViewCellParsingEventHandler;
			if (dataGridViewCellParsingEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellParsingEventHandler(this, e);
			}
		}

		// Token: 0x06001B57 RID: 6999 RVA: 0x0006ECD8 File Offset: 0x0006CED8
		private void OnCellSelectMouseMove(DataGridView.HitTestInfo hti)
		{
			int x = this.ptCurrentCell.X;
			int y = this.ptCurrentCell.Y;
			if ((hti.col != this.ptCurrentCell.X || hti.row != this.ptCurrentCell.Y) && !this.CommitEditForOperation(hti.col, hti.row, true))
			{
				return;
			}
			this.noSelectionChangeCount++;
			try
			{
				if (this.ptAnchorCell.X != -1 && !this.IsInnerCellOutOfBounds(hti.col, hti.row))
				{
					this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, hti.col, this.ptAnchorCell.Y, ref y, hti.row);
					if (hti.col != this.ptCurrentCell.X || hti.row != this.ptCurrentCell.Y)
					{
						bool flag = this.SetCurrentCellAddressCore(hti.col, hti.row, false, false, false);
					}
				}
			}
			finally
			{
				int num = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num - 1;
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellStateChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellStateChangedEventArgs" /> that contains the event data.</param>
		// Token: 0x06001B58 RID: 7000 RVA: 0x0006EDF8 File Offset: 0x0006CFF8
		protected virtual void OnCellStateChanged(DataGridViewCellStateChangedEventArgs e)
		{
			DataGridViewCell cell = e.Cell;
			if (e.StateChanged == DataGridViewElementStates.Selected && this.inBulkPaintCount == 0)
			{
				this.InvalidateCellPrivate(cell);
			}
			DataGridViewCellStateChangedEventHandler dataGridViewCellStateChangedEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLSTATECHANGED] as DataGridViewCellStateChangedEventHandler;
			if (dataGridViewCellStateChangedEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellStateChangedEventHandler(this, e);
			}
			if (e.StateChanged == DataGridViewElementStates.ReadOnly && this.ptCurrentCell.X == cell.ColumnIndex && this.ptCurrentCell.Y == cell.RowIndex && cell.RowIndex > -1 && !this.dataGridViewOper[16384])
			{
				base.VerifyImeRestrictedModeChanged();
				if (!cell.ReadOnly && this.ColumnEditable(this.ptCurrentCell.X) && !this.IsCurrentCellInEditMode && (this.EditMode == DataGridViewEditMode.EditOnEnter || (this.EditMode != DataGridViewEditMode.EditProgrammatically && this.CurrentCellInternal.EditType == null)))
				{
					this.BeginEditInternal(true);
				}
			}
		}

		// Token: 0x06001B59 RID: 7001 RVA: 0x0006EF08 File Offset: 0x0006D108
		internal void OnCellStyleChanged(DataGridViewCell dataGridViewCell)
		{
			DataGridViewCellEventArgs dataGridViewCellEventArgs = new DataGridViewCellEventArgs(dataGridViewCell);
			this.OnCellStyleChanged(dataGridViewCellEventArgs);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellStyleChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
		///  -or-  
		///  The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001B5A RID: 7002 RVA: 0x0006EF24 File Offset: 0x0006D124
		protected virtual void OnCellStyleChanged(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			this.OnCellCommonChange(e.ColumnIndex, e.RowIndex);
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLSTYLECHANGED] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		// Token: 0x06001B5B RID: 7003 RVA: 0x0006EFBC File Offset: 0x0006D1BC
		internal void OnCellStyleContentChanged(DataGridViewCellStyle dataGridViewCellStyle, DataGridViewCellStyle.DataGridViewCellStylePropertyInternal property)
		{
			if (property != DataGridViewCellStyle.DataGridViewCellStylePropertyInternal.Font)
			{
				if (property == DataGridViewCellStyle.DataGridViewCellStylePropertyInternal.ForeColor)
				{
					if ((dataGridViewCellStyle.Scope & DataGridViewCellStyleScopes.DataGridView) != DataGridViewCellStyleScopes.None && this.dataGridViewState1[1024])
					{
						this.dataGridViewState1[1024] = false;
					}
				}
			}
			else
			{
				if ((dataGridViewCellStyle.Scope & DataGridViewCellStyleScopes.DataGridView) != DataGridViewCellStyleScopes.None && this.dataGridViewState1[33554432])
				{
					this.dataGridViewState1[33554432] = false;
				}
				if ((dataGridViewCellStyle.Scope & DataGridViewCellStyleScopes.ColumnHeaders) != DataGridViewCellStyleScopes.None && this.dataGridViewState1[67108864])
				{
					this.dataGridViewState1[67108864] = false;
				}
				if ((dataGridViewCellStyle.Scope & DataGridViewCellStyleScopes.RowHeaders) != DataGridViewCellStyleScopes.None && this.dataGridViewState1[134217728])
				{
					this.dataGridViewState1[134217728] = false;
				}
			}
			DataGridViewCellStyleContentChangedEventArgs dataGridViewCellStyleContentChangedEventArgs = new DataGridViewCellStyleContentChangedEventArgs(dataGridViewCellStyle, property != DataGridViewCellStyle.DataGridViewCellStylePropertyInternal.Color && property != DataGridViewCellStyle.DataGridViewCellStylePropertyInternal.ForeColor);
			this.OnCellStyleContentChanged(dataGridViewCellStyleContentChangedEventArgs);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellStyleContentChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs" /> that contains the event data.</param>
		// Token: 0x06001B5C RID: 7004 RVA: 0x0006F0AC File Offset: 0x0006D2AC
		protected virtual void OnCellStyleContentChanged(DataGridViewCellStyleContentChangedEventArgs e)
		{
			bool flag = false;
			if ((e.CellStyleScope & DataGridViewCellStyleScopes.Cell) == DataGridViewCellStyleScopes.Cell && (e.CellStyleScope & DataGridViewCellStyleScopes.DataGridView) == DataGridViewCellStyleScopes.None)
			{
				if (e.ChangeAffectsPreferredSize)
				{
					flag = true;
					this.OnGlobalAutoSize();
				}
				else
				{
					base.Invalidate();
				}
			}
			if ((e.CellStyleScope & DataGridViewCellStyleScopes.Column) == DataGridViewCellStyleScopes.Column)
			{
				if (e.ChangeAffectsPreferredSize)
				{
					flag = true;
					this.OnColumnsGlobalAutoSize();
				}
				else
				{
					this.InvalidateData();
				}
			}
			if ((e.CellStyleScope & DataGridViewCellStyleScopes.Row) == DataGridViewCellStyleScopes.Row && (e.CellStyleScope & DataGridViewCellStyleScopes.Rows) == DataGridViewCellStyleScopes.None && (e.CellStyleScope & DataGridViewCellStyleScopes.AlternatingRows) == DataGridViewCellStyleScopes.None)
			{
				this.InvalidateData();
				if (e.ChangeAffectsPreferredSize)
				{
					flag = true;
					if ((this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) != DataGridViewAutoSizeRowsMode.None)
					{
						this.AdjustShrinkingRows(this.autoSizeRowsMode, false, true);
					}
					this.AutoResizeAllVisibleColumnsInternal(DataGridViewAutoSizeColumnCriteriaInternal.AllRows | DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows, true);
					if ((this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) != DataGridViewAutoSizeRowsMode.None)
					{
						this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
					}
				}
			}
			if ((e.CellStyleScope & DataGridViewCellStyleScopes.DataGridView) == DataGridViewCellStyleScopes.DataGridView)
			{
				this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = e.ChangeAffectsPreferredSize;
				if (e.ChangeAffectsPreferredSize)
				{
					flag = false;
				}
				this.OnDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
			}
			if ((e.CellStyleScope & DataGridViewCellStyleScopes.ColumnHeaders) == DataGridViewCellStyleScopes.ColumnHeaders)
			{
				this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = e.ChangeAffectsPreferredSize;
				if (e.ChangeAffectsPreferredSize)
				{
					flag = false;
				}
				this.OnColumnHeadersDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
			}
			if ((e.CellStyleScope & DataGridViewCellStyleScopes.RowHeaders) == DataGridViewCellStyleScopes.RowHeaders)
			{
				this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = e.ChangeAffectsPreferredSize;
				if (e.ChangeAffectsPreferredSize)
				{
					flag = false;
				}
				this.OnRowHeadersDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
			}
			if ((e.CellStyleScope & DataGridViewCellStyleScopes.Rows) == DataGridViewCellStyleScopes.Rows)
			{
				this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = e.ChangeAffectsPreferredSize;
				if (e.ChangeAffectsPreferredSize)
				{
					flag = false;
				}
				this.OnRowsDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
			}
			if ((e.CellStyleScope & DataGridViewCellStyleScopes.AlternatingRows) == DataGridViewCellStyleScopes.AlternatingRows)
			{
				this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = e.ChangeAffectsPreferredSize;
				if (e.ChangeAffectsPreferredSize)
				{
					flag = false;
				}
				this.OnAlternatingRowsDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
			}
			if (flag && this.editingControl != null)
			{
				this.PositionEditingControl(true, true, false);
			}
			DataGridViewCellStyleContentChangedEventHandler dataGridViewCellStyleContentChangedEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLSTYLECONTENTCHANGED] as DataGridViewCellStyleContentChangedEventHandler;
			if (dataGridViewCellStyleContentChangedEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellStyleContentChangedEventHandler(this, e);
			}
		}

		// Token: 0x06001B5D RID: 7005 RVA: 0x0006F2D0 File Offset: 0x0006D4D0
		internal void OnCellToolTipTextChanged(DataGridViewCell dataGridViewCell)
		{
			DataGridViewCellEventArgs dataGridViewCellEventArgs = new DataGridViewCellEventArgs(dataGridViewCell);
			this.OnCellToolTipTextChanged(dataGridViewCellEventArgs);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellToolTipTextChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains information about the cell.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
		///  -or-  
		///  The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001B5E RID: 7006 RVA: 0x0006F2EC File Offset: 0x0006D4EC
		protected virtual void OnCellToolTipTextChanged(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLTOOLTIPTEXTCHANGED] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		// Token: 0x06001B5F RID: 7007 RVA: 0x0006F370 File Offset: 0x0006D570
		internal string OnCellToolTipTextNeeded(int columnIndex, int rowIndex, string toolTipText)
		{
			DataGridViewCellToolTipTextNeededEventArgs dataGridViewCellToolTipTextNeededEventArgs = new DataGridViewCellToolTipTextNeededEventArgs(columnIndex, rowIndex, toolTipText);
			this.OnCellToolTipTextNeeded(dataGridViewCellToolTipTextNeededEventArgs);
			return dataGridViewCellToolTipTextNeededEventArgs.ToolTipText;
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellToolTipTextNeeded" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
		///  -or-  
		///  The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001B60 RID: 7008 RVA: 0x0006F394 File Offset: 0x0006D594
		protected virtual void OnCellToolTipTextNeeded(DataGridViewCellToolTipTextNeededEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellToolTipTextNeededEventHandler dataGridViewCellToolTipTextNeededEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLTOOLTIPTEXTNEEDED] as DataGridViewCellToolTipTextNeededEventHandler;
			if (dataGridViewCellToolTipTextNeededEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellToolTipTextNeededEventHandler(this, e);
			}
		}

		// Token: 0x06001B61 RID: 7009 RVA: 0x0006F418 File Offset: 0x0006D618
		internal void OnCellValidated(ref DataGridViewCell dataGridViewCell, int columnIndex, int rowIndex)
		{
			this.OnCellValidated(new DataGridViewCellEventArgs(columnIndex, rowIndex));
			if (dataGridViewCell != null)
			{
				if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
				{
					dataGridViewCell = null;
					return;
				}
				dataGridViewCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellValidated" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
		///  -or-  
		///  The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001B62 RID: 7010 RVA: 0x0006F454 File Offset: 0x0006D654
		protected virtual void OnCellValidated(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			try
			{
				this.noDimensionChangeCount++;
				DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLVALIDATED] as DataGridViewCellEventHandler;
				if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
				{
					dataGridViewCellEventHandler(this, e);
					this.CorrectFocus(true);
				}
			}
			finally
			{
				this.noDimensionChangeCount--;
			}
		}

		// Token: 0x06001B63 RID: 7011 RVA: 0x0006F510 File Offset: 0x0006D710
		internal bool OnCellValidating(ref DataGridViewCell dataGridViewCell, int columnIndex, int rowIndex, DataGridViewDataErrorContexts context)
		{
			DataGridViewCell dataGridViewCell2 = ((dataGridViewCell == null) ? this.CurrentCellInternal : dataGridViewCell);
			DataGridViewCellStyle inheritedStyle = dataGridViewCell2.GetInheritedStyle(null, rowIndex, false);
			object valueInternal = dataGridViewCell2.GetValueInternal(rowIndex);
			object editedFormattedValue = dataGridViewCell2.GetEditedFormattedValue(valueInternal, rowIndex, ref inheritedStyle, context);
			DataGridViewCellValidatingEventArgs dataGridViewCellValidatingEventArgs = new DataGridViewCellValidatingEventArgs(columnIndex, rowIndex, editedFormattedValue);
			this.OnCellValidating(dataGridViewCellValidatingEventArgs);
			if (dataGridViewCell != null)
			{
				if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
				{
					dataGridViewCell = null;
				}
				else
				{
					dataGridViewCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
				}
			}
			return dataGridViewCellValidatingEventArgs.Cancel;
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellValidating" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellValidatingEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellValidatingEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
		///  -or-  
		///  The value of the <see cref="P:System.Windows.Forms.DataGridViewCellValidatingEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001B64 RID: 7012 RVA: 0x0006F590 File Offset: 0x0006D790
		protected virtual void OnCellValidating(DataGridViewCellValidatingEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			try
			{
				this.noDimensionChangeCount++;
				this.dataGridViewOper[32768] = true;
				DataGridViewCellValidatingEventHandler dataGridViewCellValidatingEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLVALIDATING] as DataGridViewCellValidatingEventHandler;
				if (dataGridViewCellValidatingEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
				{
					dataGridViewCellValidatingEventHandler(this, e);
					this.CorrectFocus(true);
				}
			}
			finally
			{
				this.noDimensionChangeCount--;
				this.dataGridViewOper[32768] = false;
			}
		}

		// Token: 0x06001B65 RID: 7013 RVA: 0x0006F670 File Offset: 0x0006D870
		internal void OnCellValueChangedInternal(DataGridViewCellEventArgs e)
		{
			this.OnCellValueChanged(e);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellValueChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
		///  -or-  
		///  The value of the <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001B66 RID: 7014 RVA: 0x0006F67C File Offset: 0x0006D87C
		protected virtual void OnCellValueChanged(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			this.OnCellCommonChange(e.ColumnIndex, e.RowIndex);
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLVALUECHANGED] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		// Token: 0x06001B67 RID: 7015 RVA: 0x0006F714 File Offset: 0x0006D914
		internal object OnCellValueNeeded(int columnIndex, int rowIndex)
		{
			DataGridViewCellValueEventArgs cellValueEventArgs = this.CellValueEventArgs;
			cellValueEventArgs.SetProperties(columnIndex, rowIndex, null);
			this.OnCellValueNeeded(cellValueEventArgs);
			return cellValueEventArgs.Value;
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellValueNeeded" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellValueEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellValueEventArgs.ColumnIndex" /> property of <paramref name="e" /> is less than zero or greater than the number of columns in the control minus one.  
		///  -or-  
		///  The value of the <see cref="P:System.Windows.Forms.DataGridViewCellValueEventArgs.RowIndex" /> property of <paramref name="e" /> is less than zero or greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001B68 RID: 7016 RVA: 0x0006F740 File Offset: 0x0006D940
		protected virtual void OnCellValueNeeded(DataGridViewCellValueEventArgs e)
		{
			if (e.ColumnIndex < 0 || e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex < 0 || e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellValueEventHandler dataGridViewCellValueEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLVALUENEEDED] as DataGridViewCellValueEventHandler;
			if (dataGridViewCellValueEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellValueEventHandler(this, e);
			}
		}

		// Token: 0x06001B69 RID: 7017 RVA: 0x0006F7D8 File Offset: 0x0006D9D8
		internal void OnCellValuePushed(int columnIndex, int rowIndex, object value)
		{
			DataGridViewCellValueEventArgs cellValueEventArgs = this.CellValueEventArgs;
			cellValueEventArgs.SetProperties(columnIndex, rowIndex, value);
			this.OnCellValuePushed(cellValueEventArgs);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellValuePushed" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellValueEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellValueEventArgs.ColumnIndex" /> property of <paramref name="e" /> is less than zero or greater than the number of columns in the control minus one.  
		///  -or-  
		///  The value of the <see cref="P:System.Windows.Forms.DataGridViewCellValueEventArgs.RowIndex" /> property of <paramref name="e" /> is less than zero or greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001B6A RID: 7018 RVA: 0x0006F7FC File Offset: 0x0006D9FC
		protected virtual void OnCellValuePushed(DataGridViewCellValueEventArgs e)
		{
			if (e.ColumnIndex < 0 || e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex < 0 || e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellValueEventHandler dataGridViewCellValueEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLVALUEPUSHED] as DataGridViewCellValueEventHandler;
			if (dataGridViewCellValueEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellValueEventHandler(this, e);
			}
		}

		// Token: 0x06001B6B RID: 7019 RVA: 0x0006F894 File Offset: 0x0006DA94
		internal void OnClearedRows()
		{
			foreach (object obj in this.lstRows)
			{
				DataGridViewRow dataGridViewRow = (DataGridViewRow)obj;
				if (dataGridViewRow.Displayed)
				{
					dataGridViewRow.DisplayedInternal = false;
					DataGridViewRowStateChangedEventArgs dataGridViewRowStateChangedEventArgs = new DataGridViewRowStateChangedEventArgs(dataGridViewRow, DataGridViewElementStates.Displayed);
					this.OnRowStateChanged(-1, dataGridViewRowStateChangedEventArgs);
				}
			}
			this.lstRows.Clear();
		}

		// Token: 0x06001B6C RID: 7020 RVA: 0x0006F910 File Offset: 0x0006DB10
		internal void OnClearingColumns()
		{
			this.CurrentCell = null;
			this.Rows.ClearInternal(false);
			this.sortedColumn = null;
			this.sortOrder = SortOrder.None;
		}

		// Token: 0x06001B6D RID: 7021 RVA: 0x0006F934 File Offset: 0x0006DB34
		internal void OnClearingRows()
		{
			this.lstRows.Clear();
			int num = this.displayedBandsInfo.NumDisplayedFrozenRows + this.displayedBandsInfo.NumDisplayedScrollingRows;
			if (num > 0)
			{
				this.lstRows.Capacity = num;
				int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Displayed);
				while (num > 0 && num2 != -1)
				{
					this.lstRows.Add(this.Rows[num2]);
					num--;
					if (num > 0)
					{
						num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Displayed);
					}
				}
			}
			this.CurrentCell = null;
			this.newRowIndex = -1;
			this.dataGridViewState2[262144] = this.selectedBandIndexes.Count > 0 || this.individualSelectedCells.Count > 0;
			this.selectedBandIndexes.Clear();
			if (this.selectedBandSnapshotIndexes != null)
			{
				this.selectedBandSnapshotIndexes.Clear();
			}
			this.individualSelectedCells.Clear();
			this.individualReadOnlyCells.Clear();
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnAdded" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x06001B6E RID: 7022 RVA: 0x0006FA2C File Offset: 0x0006DC2C
		protected virtual void OnColumnAdded(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNADDED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		// Token: 0x06001B6F RID: 7023 RVA: 0x0006FA94 File Offset: 0x0006DC94
		internal void OnColumnCollectionChanged_PreNotification(CollectionChangeEventArgs ccea)
		{
			if (this.DataSource != null && !this.dataGridViewOper[1024])
			{
				if (ccea.Action == CollectionChangeAction.Add)
				{
					DataGridViewColumn dataGridViewColumn = (DataGridViewColumn)ccea.Element;
					if (dataGridViewColumn.DataPropertyName.Length != 0)
					{
						this.MapDataGridViewColumnToDataBoundField(dataGridViewColumn);
					}
				}
				else if (ccea.Action == CollectionChangeAction.Refresh)
				{
					for (int i = 0; i < this.Columns.Count; i++)
					{
						if (this.Columns[i].DataPropertyName.Length != 0)
						{
							this.MapDataGridViewColumnToDataBoundField(this.Columns[i]);
						}
					}
				}
			}
			this.ResetUIState(false, false);
		}

		// Token: 0x06001B70 RID: 7024 RVA: 0x0006FB3C File Offset: 0x0006DD3C
		internal void OnColumnCollectionChanged_PostNotification(DataGridViewColumn dataGridViewColumn)
		{
			if (this.Columns.Count != 0 && this.Rows.Count == 0)
			{
				if (this.DataSource != null && !this.dataGridViewOper[1024])
				{
					this.RefreshRows(true);
				}
				else if (this.AllowUserToAddRowsInternal)
				{
					this.AddNewRow(false);
				}
			}
			if (this.AutoSize && (dataGridViewColumn == null || dataGridViewColumn.Visible))
			{
				LayoutTransaction.DoLayout(this.ParentInternal, this, PropertyNames.Columns);
			}
		}

		// Token: 0x06001B71 RID: 7025 RVA: 0x0006FBB9 File Offset: 0x0006DDB9
		internal void OnColumnCommonChange(int columnIndex)
		{
			this.OnColumnGlobalAutoSize(columnIndex);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnContextMenuStripChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x06001B72 RID: 7026 RVA: 0x0006FBC4 File Offset: 0x0006DDC4
		protected virtual void OnColumnContextMenuStripChanged(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNCONTEXTMENUSTRIPCHANGED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		// Token: 0x06001B73 RID: 7027 RVA: 0x0006FC2A File Offset: 0x0006DE2A
		internal void OnColumnDataPropertyNameChanged(DataGridViewColumn dataGridViewColumn)
		{
			this.OnColumnDataPropertyNameChanged(new DataGridViewColumnEventArgs(dataGridViewColumn));
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnDataPropertyNameChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x06001B74 RID: 7028 RVA: 0x0006FC38 File Offset: 0x0006DE38
		protected virtual void OnColumnDataPropertyNameChanged(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			if (this.DataSource != null && e.Column.DataPropertyName.Length != 0 && !this.dataGridViewOper[1024])
			{
				this.MapDataGridViewColumnToDataBoundField(e.Column);
			}
			else if (this.DataSource != null && e.Column.DataPropertyName.Length == 0 && e.Column.IsDataBound)
			{
				e.Column.IsDataBoundInternal = false;
				e.Column.BoundColumnIndex = -1;
				e.Column.BoundColumnConverter = null;
				this.InvalidateColumnInternal(e.Column.Index);
			}
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNDATAPROPERTYNAMECHANGED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnDefaultCellStyleChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x06001B75 RID: 7029 RVA: 0x0006FD34 File Offset: 0x0006DF34
		protected virtual void OnColumnDefaultCellStyleChanged(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			this.OnColumnGlobalAutoSize(e.Column.Index);
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNDEFAULTCELLSTYLECHANGED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		// Token: 0x06001B76 RID: 7030 RVA: 0x0006FDAC File Offset: 0x0006DFAC
		internal void OnColumnDisplayIndexChanged(DataGridViewColumn dataGridViewColumn)
		{
			DataGridViewColumnEventArgs dataGridViewColumnEventArgs = new DataGridViewColumnEventArgs(dataGridViewColumn);
			this.OnColumnDisplayIndexChanged(dataGridViewColumnEventArgs);
		}

		// Token: 0x06001B77 RID: 7031 RVA: 0x0006FDC8 File Offset: 0x0006DFC8
		internal void OnColumnDisplayIndexChanging(DataGridViewColumn dataGridViewColumn, int newDisplayIndex)
		{
			if (this.dataGridViewOper[2048])
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotAlterDisplayIndexWithinAdjustments"));
			}
			this.CorrectColumnFrozenStatesForMove(dataGridViewColumn, newDisplayIndex);
			try
			{
				this.dataGridViewOper[2048] = true;
				if (newDisplayIndex < dataGridViewColumn.DisplayIndex)
				{
					using (IEnumerator enumerator = this.Columns.GetEnumerator())
					{
						while (enumerator.MoveNext())
						{
							object obj = enumerator.Current;
							DataGridViewColumn dataGridViewColumn2 = (DataGridViewColumn)obj;
							if (newDisplayIndex <= dataGridViewColumn2.DisplayIndex && dataGridViewColumn2.DisplayIndex < dataGridViewColumn.DisplayIndex)
							{
								dataGridViewColumn2.DisplayIndexInternal = dataGridViewColumn2.DisplayIndex + 1;
								dataGridViewColumn2.DisplayIndexHasChanged = true;
							}
						}
						return;
					}
				}
				foreach (object obj2 in this.Columns)
				{
					DataGridViewColumn dataGridViewColumn3 = (DataGridViewColumn)obj2;
					if (dataGridViewColumn.DisplayIndex < dataGridViewColumn3.DisplayIndex && dataGridViewColumn3.DisplayIndex <= newDisplayIndex)
					{
						dataGridViewColumn3.DisplayIndexInternal = dataGridViewColumn3.DisplayIndex - 1;
						dataGridViewColumn3.DisplayIndexHasChanged = true;
					}
				}
			}
			finally
			{
				this.dataGridViewOper[2048] = false;
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnDisplayIndexChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x06001B78 RID: 7032 RVA: 0x0006FF20 File Offset: 0x0006E120
		protected virtual void OnColumnDisplayIndexChanged(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNDISPLAYINDEXCHANGED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		// Token: 0x06001B79 RID: 7033 RVA: 0x0006FF88 File Offset: 0x0006E188
		internal void OnColumnDisplayIndexChanged_PreNotification()
		{
			this.Columns.InvalidateCachedColumnsOrder();
			this.PerformLayoutPrivate(false, false, true, false);
			if (this.editingControl != null)
			{
				this.PositionEditingControl(true, true, false);
			}
			base.Invalidate(Rectangle.Union(this.layout.ColumnHeaders, this.layout.Data));
		}

		// Token: 0x06001B7A RID: 7034 RVA: 0x0006FFDC File Offset: 0x0006E1DC
		internal void OnColumnDisplayIndexChanged_PostNotification()
		{
			this.FlushDisplayIndexChanged(true);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnDividerDoubleClick" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventArgs" /> that contains the event data.</param>
		// Token: 0x06001B7B RID: 7035 RVA: 0x0006FFE8 File Offset: 0x0006E1E8
		protected virtual void OnColumnDividerDoubleClick(DataGridViewColumnDividerDoubleClickEventArgs e)
		{
			DataGridViewColumnDividerDoubleClickEventHandler dataGridViewColumnDividerDoubleClickEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNDIVIDERDOUBLECLICK] as DataGridViewColumnDividerDoubleClickEventHandler;
			if (dataGridViewColumnDividerDoubleClickEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnDividerDoubleClickEventHandler(this, e);
			}
			if (!e.Handled && e.Button == MouseButtons.Left && e.ColumnIndex < this.Columns.Count)
			{
				if (e.ColumnIndex == -1)
				{
					this.AutoResizeRowHeadersWidth(DataGridViewRowHeadersWidthSizeMode.AutoSizeToDisplayedHeaders, true, true);
					return;
				}
				DataGridViewAutoSizeColumnMode inheritedAutoSizeMode = this.Columns[e.ColumnIndex].InheritedAutoSizeMode;
				if (inheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.None || inheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
				{
					this.AutoResizeColumnInternal(e.ColumnIndex, DataGridViewAutoSizeColumnCriteriaInternal.Header | DataGridViewAutoSizeColumnCriteriaInternal.AllRows, true);
					return;
				}
				this.AutoResizeColumnInternal(e.ColumnIndex, (DataGridViewAutoSizeColumnCriteriaInternal)inheritedAutoSizeMode, true);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnDividerWidthChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x06001B7C RID: 7036 RVA: 0x000700AC File Offset: 0x0006E2AC
		protected virtual void OnColumnDividerWidthChanged(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			this.OnColumnGlobalAutoSize(e.Column.Index);
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNDIVIDERWIDTHCHANGED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		// Token: 0x06001B7D RID: 7037 RVA: 0x00070123 File Offset: 0x0006E323
		internal void OnColumnFillWeightChanged(DataGridViewColumn dataGridViewColumn)
		{
			if (dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
			{
				this.dataGridViewState2[67108864] = true;
				this.PerformLayoutPrivate(false, true, false, false);
			}
		}

		// Token: 0x06001B7E RID: 7038 RVA: 0x0007014C File Offset: 0x0006E34C
		internal void OnColumnFillWeightChanging(DataGridViewColumn dataGridViewColumn, float fillWeight)
		{
			if (this.InAdjustFillingColumns)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotAlterAutoFillColumnParameter"));
			}
			float num = this.Columns.GetColumnsFillWeight(DataGridViewElementStates.None) - dataGridViewColumn.FillWeight + fillWeight;
			if (num > 65535f)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_WeightSumCannotExceedLongMaxValue", new object[] { ushort.MaxValue.ToString(CultureInfo.CurrentCulture) }));
			}
		}

		// Token: 0x06001B7F RID: 7039 RVA: 0x000701BC File Offset: 0x0006E3BC
		private void OnColumnGlobalAutoSize(int columnIndex)
		{
			if (!this.Columns[columnIndex].Visible)
			{
				return;
			}
			this.InvalidateColumnInternal(columnIndex);
			if (this.noAutoSizeCount > 0)
			{
				return;
			}
			bool flag = (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) == DataGridViewAutoSizeRowsMode.None;
			DataGridViewAutoSizeColumnCriteriaInternal inheritedAutoSizeMode = (DataGridViewAutoSizeColumnCriteriaInternal)this.Columns[columnIndex].InheritedAutoSizeMode;
			if (inheritedAutoSizeMode != DataGridViewAutoSizeColumnCriteriaInternal.None && inheritedAutoSizeMode != DataGridViewAutoSizeColumnCriteriaInternal.Fill)
			{
				this.AutoResizeColumnInternal(columnIndex, inheritedAutoSizeMode, flag);
			}
			if (!flag)
			{
				this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
			}
			if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
			{
				this.AutoResizeColumnHeadersHeight(columnIndex, true, true);
			}
			if (!flag && inheritedAutoSizeMode != DataGridViewAutoSizeColumnCriteriaInternal.None && inheritedAutoSizeMode != DataGridViewAutoSizeColumnCriteriaInternal.Fill)
			{
				this.AutoResizeColumnInternal(columnIndex, inheritedAutoSizeMode, true);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnHeaderCellChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x06001B80 RID: 7040 RVA: 0x00070258 File Offset: 0x0006E458
		protected virtual void OnColumnHeaderCellChanged(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			this.OnColumnHeaderGlobalAutoSize(e.Column.Index);
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERCELLCHANGED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		// Token: 0x06001B81 RID: 7041 RVA: 0x000702D0 File Offset: 0x0006E4D0
		private void OnColumnHeaderGlobalAutoSize(int columnIndex)
		{
			if (!this.ColumnHeadersVisible)
			{
				return;
			}
			this.InvalidateCellPrivate(columnIndex, -1);
			if (this.noAutoSizeCount > 0)
			{
				return;
			}
			DataGridViewAutoSizeColumnCriteriaInternal inheritedAutoSizeMode = (DataGridViewAutoSizeColumnCriteriaInternal)this.Columns[columnIndex].InheritedAutoSizeMode;
			DataGridViewAutoSizeColumnCriteriaInternal dataGridViewAutoSizeColumnCriteriaInternal = inheritedAutoSizeMode & DataGridViewAutoSizeColumnCriteriaInternal.Header;
			bool flag = dataGridViewAutoSizeColumnCriteriaInternal == DataGridViewAutoSizeColumnCriteriaInternal.NotSet;
			if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
			{
				this.AutoResizeColumnHeadersHeight(columnIndex, true, flag);
			}
			if (!flag)
			{
				bool flag2 = (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) == DataGridViewAutoSizeRowsMode.None;
				this.AutoResizeColumnInternal(columnIndex, inheritedAutoSizeMode, flag2);
				if (!flag2)
				{
					this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
					this.AutoResizeColumnInternal(columnIndex, inheritedAutoSizeMode, true);
				}
				if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
				{
					this.AutoResizeColumnHeadersHeight(columnIndex, true, true);
				}
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnHeaderMouseClick" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.ColumnIndex" /> property of <paramref name="e" /> is less than zero or greater than the number of columns in the control minus one.</exception>
		// Token: 0x06001B82 RID: 7042 RVA: 0x0007036C File Offset: 0x0006E56C
		protected virtual void OnColumnHeaderMouseClick(DataGridViewCellMouseEventArgs e)
		{
			if (e.Button == MouseButtons.Left && this.SelectionMode != DataGridViewSelectionMode.FullColumnSelect && this.SelectionMode != DataGridViewSelectionMode.ColumnHeaderSelect)
			{
				DataGridViewColumn dataGridViewColumn = this.Columns[e.ColumnIndex];
				if (this.CanSort(dataGridViewColumn))
				{
					ListSortDirection listSortDirection = ListSortDirection.Ascending;
					if (this.sortedColumn == dataGridViewColumn && this.sortOrder == SortOrder.Ascending)
					{
						listSortDirection = ListSortDirection.Descending;
					}
					if (this.DataSource == null || (this.DataSource != null && this.dataConnection.List is IBindingList && ((IBindingList)this.dataConnection.List).SupportsSorting && dataGridViewColumn.IsDataBound))
					{
						this.Sort(dataGridViewColumn, listSortDirection);
					}
				}
			}
			DataGridViewCellMouseEventHandler dataGridViewCellMouseEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERMOUSECLICK] as DataGridViewCellMouseEventHandler;
			if (dataGridViewCellMouseEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellMouseEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnHeaderMouseDoubleClick" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains information about the cell and the position of the mouse pointer.</param>
		// Token: 0x06001B83 RID: 7043 RVA: 0x00070454 File Offset: 0x0006E654
		protected virtual void OnColumnHeaderMouseDoubleClick(DataGridViewCellMouseEventArgs e)
		{
			DataGridViewCellMouseEventHandler dataGridViewCellMouseEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERMOUSEDOUBLECLICK] as DataGridViewCellMouseEventHandler;
			if (dataGridViewCellMouseEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellMouseEventHandler(this, e);
			}
		}

		// Token: 0x06001B84 RID: 7044 RVA: 0x0007049C File Offset: 0x0006E69C
		private void OnColumnHeaderMouseDown(DataGridView.HitTestInfo hti, bool isShiftDown, bool isControlDown)
		{
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.FullColumnSelect:
				case DataGridViewSelectionMode.ColumnHeaderSelect:
				{
					bool flag = true;
					if (isControlDown && this.Columns[hti.col].Selected)
					{
						flag = false;
					}
					if (flag)
					{
						int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
						if (firstRow > -1 && hti.col != this.ptCurrentCell.X)
						{
							int x = this.ptCurrentCell.X;
							int y = this.ptCurrentCell.Y;
							if (!this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.CurrentCellChange, DataGridView.DataGridViewValidateCellInternal.Always, true, true, firstRow != this.ptCurrentCell.Y, firstRow != this.ptCurrentCell.Y, false, this.EditMode > DataGridViewEditMode.EditOnEnter, true, false))
							{
								break;
							}
							if (firstRow != y && y != -1)
							{
								DataGridViewCell dataGridViewCell = null;
								if (this.IsInnerCellOutOfBounds(x, y))
								{
									break;
								}
								if (this.OnRowValidating(ref dataGridViewCell, x, y))
								{
									if (this.IsInnerCellOutOfBounds(x, y))
									{
										break;
									}
									this.OnRowEnter(ref dataGridViewCell, x, y, true, true);
									if (this.IsInnerCellOutOfBounds(x, y))
									{
										break;
									}
									this.OnCellEnter(ref dataGridViewCell, x, y);
									break;
								}
								else
								{
									if (this.IsInnerCellOutOfBounds(x, y))
									{
										break;
									}
									this.OnRowValidated(ref dataGridViewCell, x, y);
								}
							}
						}
						if (!this.IsColumnOutOfBounds(hti.col))
						{
							bool flag2 = false;
							this.trackColumn = hti.col;
							this.trackColumnEdge = -1;
							if (this.MultiSelect && isShiftDown && this.ptAnchorCell.X > -1 && this.Columns[this.ptAnchorCell.X].Selected)
							{
								flag2 = true;
							}
							if (!this.MultiSelect || !isControlDown || isShiftDown)
							{
								int i = 0;
								bool flag3 = false;
								if (this.selectedBandIndexes.Count > 8)
								{
									this.inBulkPaintCount++;
									flag3 = true;
								}
								try
								{
									while (i < this.selectedBandIndexes.Count)
									{
										if (this.selectedBandIndexes[i] != hti.col)
										{
											this.SetSelectedColumnCore(this.selectedBandIndexes[i], false);
										}
										else
										{
											i++;
										}
									}
									if (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)
									{
										this.RemoveIndividuallySelectedCells();
									}
								}
								finally
								{
									if (flag3)
									{
										this.ExitBulkPaint(-1, -1);
									}
								}
							}
							if (this.MultiSelect && this.dataGridViewOper[512])
							{
								this.dataGridViewOper[4] = true;
							}
							if (flag2)
							{
								if (this.Columns.DisplayInOrder(this.ptAnchorCell.X, hti.col))
								{
									this.SelectColumnRange(this.ptAnchorCell.X, hti.col, true);
								}
								else
								{
									this.SelectColumnRange(hti.col, this.ptAnchorCell.X, true);
								}
							}
							else if (!this.selectedBandIndexes.Contains(hti.col))
							{
								this.SetSelectedColumnCore(hti.col, true);
							}
							if (firstRow != -1)
							{
								if (hti.col != this.ptCurrentCell.X)
								{
									if (!this.IsInnerCellOutOfBounds(hti.col, firstRow))
									{
										bool flag4 = this.ScrollIntoView(hti.col, firstRow, false);
										if (!this.IsInnerCellOutOfBounds(hti.col, firstRow))
										{
											flag4 = this.SetCurrentCellAddressCore(hti.col, firstRow, !isShiftDown, false, true);
										}
									}
								}
								else if (-1 != this.ptCurrentCell.X)
								{
									bool flag5 = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, this.ptCurrentCell.Y, false, false, false);
								}
							}
						}
					}
					else
					{
						this.SetSelectedColumnCore(hti.col, false);
					}
					break;
				}
				}
			}
			finally
			{
				int num = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num - 1;
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyleChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001B85 RID: 7045 RVA: 0x000708A0 File Offset: 0x0006EAA0
		protected virtual void OnColumnHeadersBorderStyleChanged(EventArgs e)
		{
			this.PerformLayoutPrivate(false, false, true, false);
			base.Invalidate();
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSBORDERSTYLECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyleChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001B86 RID: 7046 RVA: 0x000708F8 File Offset: 0x0006EAF8
		protected virtual void OnColumnHeadersDefaultCellStyleChanged(EventArgs e)
		{
			if (this.ColumnHeadersVisible)
			{
				base.Invalidate(Rectangle.Union(this.layout.TopLeftHeader, this.layout.ColumnHeaders));
				DataGridViewCellStyleChangedEventArgs dataGridViewCellStyleChangedEventArgs = e as DataGridViewCellStyleChangedEventArgs;
				if (dataGridViewCellStyleChangedEventArgs == null || dataGridViewCellStyleChangedEventArgs.ChangeAffectsPreferredSize)
				{
					this.OnColumnHeadersGlobalAutoSize();
					if (this.editingControl != null)
					{
						this.PositionEditingControl(true, true, false);
					}
				}
			}
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSDEFAULTCELLSTYLECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x06001B87 RID: 7047 RVA: 0x00070994 File Offset: 0x0006EB94
		private void OnColumnHeadersGlobalAutoSize()
		{
			if (this.noAutoSizeCount > 0)
			{
				return;
			}
			bool flag = this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing || this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.DisableResizing;
			bool flag2 = this.ColumnHeadersHeightSizeMode != DataGridViewColumnHeadersHeightSizeMode.AutoSize;
			if (!flag2)
			{
				this.AutoResizeColumnHeadersHeight(flag, false);
			}
			if (!flag)
			{
				this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, false);
			}
			bool flag3 = this.AutoResizeAllVisibleColumnsInternal(DataGridViewAutoSizeColumnCriteriaInternal.Header, false);
			if (!flag || flag3)
			{
				this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
			}
			if (!flag2)
			{
				this.AutoResizeColumnHeadersHeight(true, true);
			}
			if (!flag)
			{
				this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, true);
			}
			this.AutoResizeAllVisibleColumnsInternal(DataGridViewAutoSizeColumnCriteriaInternal.Header, true);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnHeadersHeightChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001B88 RID: 7048 RVA: 0x00070A30 File Offset: 0x0006EC30
		protected virtual void OnColumnHeadersHeightChanged(EventArgs e)
		{
			if (this.editingControl != null)
			{
				this.PositionEditingControl(true, false, false);
			}
			this.UpdateMouseEnteredCell(null, null);
			this.OnColumnHeadersGlobalAutoSize();
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSHEIGHTCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeModeChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewAutoSizeModeEventArgs" /> that contains the event data.</param>
		// Token: 0x06001B89 RID: 7049 RVA: 0x00070A98 File Offset: 0x0006EC98
		protected virtual void OnColumnHeadersHeightSizeModeChanged(DataGridViewAutoSizeModeEventArgs e)
		{
			if (this.columnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
			{
				if (!e.PreviousModeAutoSized)
				{
					this.cachedColumnHeadersHeight = this.ColumnHeadersHeight;
				}
				this.AutoResizeColumnHeadersHeight(true, true);
			}
			else if (e.PreviousModeAutoSized)
			{
				this.ColumnHeadersHeight = this.cachedColumnHeadersHeight;
			}
			DataGridViewAutoSizeModeEventHandler dataGridViewAutoSizeModeEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSHEIGHTSIZEMODECHANGED] as DataGridViewAutoSizeModeEventHandler;
			if (dataGridViewAutoSizeModeEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewAutoSizeModeEventHandler(this, e);
			}
		}

		// Token: 0x06001B8A RID: 7050 RVA: 0x00070B1C File Offset: 0x0006ED1C
		internal void OnColumnHidden(DataGridViewColumn dataGridViewColumn)
		{
			if (dataGridViewColumn.Displayed)
			{
				dataGridViewColumn.DisplayedInternal = false;
				DataGridViewColumnStateChangedEventArgs dataGridViewColumnStateChangedEventArgs = new DataGridViewColumnStateChangedEventArgs(dataGridViewColumn, DataGridViewElementStates.Displayed);
				this.OnColumnStateChanged(dataGridViewColumnStateChangedEventArgs);
			}
		}

		// Token: 0x06001B8B RID: 7051 RVA: 0x00070B48 File Offset: 0x0006ED48
		internal void OnColumnMinimumWidthChanging(DataGridViewColumn dataGridViewColumn, int minimumWidth)
		{
			if (dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill && dataGridViewColumn.Width < minimumWidth)
			{
				try
				{
					this.dataGridViewState2[67108864] = true;
					dataGridViewColumn.DesiredMinimumWidth = minimumWidth;
					this.PerformLayoutPrivate(false, true, true, false);
				}
				finally
				{
					dataGridViewColumn.DesiredMinimumWidth = 0;
				}
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnMinimumWidthChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x06001B8C RID: 7052 RVA: 0x00070BA4 File Offset: 0x0006EDA4
		protected virtual void OnColumnMinimumWidthChanged(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			if (e.Column.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
			{
				this.PerformLayoutPrivate(false, true, false, false);
			}
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNMINIMUMWIDTHCHANGED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		// Token: 0x06001B8D RID: 7053 RVA: 0x00070C24 File Offset: 0x0006EE24
		internal void OnColumnNameChanged(DataGridViewColumn dataGridViewColumn)
		{
			DataGridViewColumnEventArgs dataGridViewColumnEventArgs = new DataGridViewColumnEventArgs(dataGridViewColumn);
			this.OnColumnNameChanged(dataGridViewColumnEventArgs);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnNameChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x06001B8E RID: 7054 RVA: 0x00070C40 File Offset: 0x0006EE40
		protected virtual void OnColumnNameChanged(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			DataGridViewColumn column = e.Column;
			if (column.HasHeaderCell && column.HeaderCell.Value is string && string.Compare((string)column.HeaderCell.Value, column.Name, false, CultureInfo.InvariantCulture) == 0)
			{
				this.InvalidateCellPrivate(column.Index, -1);
				DataGridViewAutoSizeColumnCriteriaInternal inheritedAutoSizeMode = (DataGridViewAutoSizeColumnCriteriaInternal)column.InheritedAutoSizeMode;
				DataGridViewAutoSizeColumnCriteriaInternal dataGridViewAutoSizeColumnCriteriaInternal = inheritedAutoSizeMode & DataGridViewAutoSizeColumnCriteriaInternal.Header;
				bool flag = dataGridViewAutoSizeColumnCriteriaInternal == DataGridViewAutoSizeColumnCriteriaInternal.NotSet || !this.ColumnHeadersVisible;
				if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
				{
					this.AutoResizeColumnHeadersHeight(column.Index, true, flag);
				}
				if (!flag)
				{
					bool flag2 = (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) == DataGridViewAutoSizeRowsMode.None;
					this.AutoResizeColumnInternal(column.Index, inheritedAutoSizeMode, flag2);
					if (!flag2)
					{
						this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
						this.AutoResizeColumnInternal(column.Index, inheritedAutoSizeMode, true);
					}
					if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
					{
						this.AutoResizeColumnHeadersHeight(column.Index, true, true);
					}
				}
			}
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNNAMECHANGED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		// Token: 0x06001B8F RID: 7055 RVA: 0x00070D8D File Offset: 0x0006EF8D
		internal void OnColumnRemoved(DataGridViewColumn dataGridViewColumn)
		{
			this.OnColumnRemoved(new DataGridViewColumnEventArgs(dataGridViewColumn));
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnRemoved" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data.</param>
		// Token: 0x06001B90 RID: 7056 RVA: 0x00070D9C File Offset: 0x0006EF9C
		protected virtual void OnColumnRemoved(DataGridViewColumnEventArgs e)
		{
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNREMOVED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		// Token: 0x06001B91 RID: 7057 RVA: 0x00070DE4 File Offset: 0x0006EFE4
		private void OnColumnSelectMouseMove(DataGridView.HitTestInfo hti)
		{
			if (this.ptCurrentCell.X != -1 && hti.col != this.ptCurrentCell.X && !this.CommitEditForOperation(hti.col, this.ptCurrentCell.Y, true))
			{
				return;
			}
			if (this.IsColumnOutOfBounds(hti.col))
			{
				return;
			}
			this.noSelectionChangeCount++;
			try
			{
				if (this.trackColumnEdge >= 0 && (this.Columns.DisplayInOrder(this.trackColumn, this.trackColumnEdge) || this.trackColumnEdge == this.trackColumn) && this.Columns.DisplayInOrder(this.trackColumnEdge, hti.col))
				{
					DataGridViewColumn nextColumn = this.Columns.GetNextColumn(this.Columns[this.trackColumnEdge], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectColumnRange(nextColumn.Index, hti.col, true);
					this.trackColumnEdge = hti.col;
				}
				else if (this.trackColumnEdge >= 0 && this.Columns.DisplayInOrder(this.trackColumn, this.trackColumnEdge) && this.Columns.DisplayInOrder(hti.col, this.trackColumnEdge) && (this.Columns.DisplayInOrder(this.trackColumn, hti.col) || hti.col == this.trackColumn))
				{
					DataGridViewColumn nextColumn2 = this.Columns.GetNextColumn(this.Columns[hti.col], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectColumnRange(nextColumn2.Index, this.trackColumnEdge, false);
					this.trackColumnEdge = hti.col;
				}
				else if (this.trackColumnEdge == -1 && this.Columns.DisplayInOrder(this.trackColumn, hti.col))
				{
					DataGridViewColumn nextColumn3 = this.Columns.GetNextColumn(this.Columns[this.trackColumn], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectColumnRange(nextColumn3.Index, hti.col, true);
					this.trackColumnEdge = hti.col;
				}
				else if (this.trackColumnEdge >= 0 && (this.Columns.DisplayInOrder(this.trackColumnEdge, this.trackColumn) || this.trackColumnEdge == this.trackColumn) && this.Columns.DisplayInOrder(hti.col, this.trackColumnEdge))
				{
					DataGridViewColumn previousColumn = this.Columns.GetPreviousColumn(this.Columns[this.trackColumnEdge], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectColumnRange(hti.col, previousColumn.Index, true);
					this.trackColumnEdge = hti.col;
				}
				else if (this.trackColumnEdge >= 0 && this.Columns.DisplayInOrder(this.trackColumnEdge, this.trackColumn) && this.Columns.DisplayInOrder(this.trackColumnEdge, hti.col) && (this.Columns.DisplayInOrder(hti.col, this.trackColumn) || hti.col == this.trackColumn))
				{
					DataGridViewColumn previousColumn2 = this.Columns.GetPreviousColumn(this.Columns[hti.col], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectColumnRange(this.trackColumnEdge, previousColumn2.Index, false);
					this.trackColumnEdge = hti.col;
				}
				else if (this.trackColumnEdge == -1 && this.Columns.DisplayInOrder(hti.col, this.trackColumn))
				{
					DataGridViewColumn previousColumn3 = this.Columns.GetPreviousColumn(this.Columns[this.trackColumn], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectColumnRange(hti.col, previousColumn3.Index, true);
					this.trackColumnEdge = hti.col;
				}
				else if (this.trackColumnEdge >= 0 && this.Columns.DisplayInOrder(this.trackColumn, this.trackColumnEdge) && this.Columns.DisplayInOrder(hti.col, this.trackColumn))
				{
					DataGridViewColumn dataGridViewColumn = this.Columns.GetNextColumn(this.Columns[this.trackColumn], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectColumnRange(dataGridViewColumn.Index, this.trackColumnEdge, false);
					dataGridViewColumn = this.Columns.GetPreviousColumn(this.Columns[this.trackColumn], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectColumnRange(hti.col, dataGridViewColumn.Index, true);
					this.trackColumnEdge = hti.col;
				}
				else if (this.trackColumnEdge >= 0 && this.Columns.DisplayInOrder(this.trackColumn, hti.col) && this.Columns.DisplayInOrder(this.trackColumnEdge, this.trackColumn))
				{
					DataGridViewColumn dataGridViewColumn2 = this.Columns.GetPreviousColumn(this.Columns[this.trackColumn], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectColumnRange(this.trackColumnEdge, dataGridViewColumn2.Index, false);
					dataGridViewColumn2 = this.Columns.GetNextColumn(this.Columns[this.trackColumn], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectColumnRange(dataGridViewColumn2.Index, hti.col, true);
					this.trackColumnEdge = hti.col;
				}
			}
			finally
			{
				int num = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num - 1;
			}
			if (this.ptCurrentCell.X != -1 && hti.col != this.ptCurrentCell.X)
			{
				if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(hti.col))
				{
					return;
				}
				bool flag = this.SetCurrentCellAddressCore(hti.col, this.ptCurrentCell.Y, false, false, false);
			}
		}

		// Token: 0x06001B92 RID: 7058 RVA: 0x00071390 File Offset: 0x0006F590
		private void OnColumnsGlobalAutoSize()
		{
			this.InvalidateData();
			if (this.noAutoSizeCount > 0)
			{
				return;
			}
			bool flag = (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) == DataGridViewAutoSizeRowsMode.None;
			bool flag2 = this.AutoResizeAllVisibleColumnsInternal(DataGridViewAutoSizeColumnCriteriaInternal.AllRows | DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows, flag);
			if (!flag)
			{
				if (flag2)
				{
					this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
				}
				this.AutoResizeAllVisibleColumnsInternal(DataGridViewAutoSizeColumnCriteriaInternal.AllRows | DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows, true);
			}
		}

		// Token: 0x06001B93 RID: 7059 RVA: 0x000713E4 File Offset: 0x0006F5E4
		internal void OnColumnSortModeChanged(DataGridViewColumn dataGridViewColumn)
		{
			DataGridViewColumnEventArgs dataGridViewColumnEventArgs = new DataGridViewColumnEventArgs(dataGridViewColumn);
			this.OnColumnSortModeChanged(dataGridViewColumnEventArgs);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnSortModeChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x06001B94 RID: 7060 RVA: 0x00071400 File Offset: 0x0006F600
		protected virtual void OnColumnSortModeChanged(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			DataGridViewColumn column = e.Column;
			if (column.HasHeaderCell)
			{
				if (column.SortMode == DataGridViewColumnSortMode.NotSortable || (column.SortMode == DataGridViewColumnSortMode.Programmatic && this.SortedColumn == column))
				{
					column.HeaderCell.SortGlyphDirection = SortOrder.None;
				}
				DataGridViewAutoSizeColumnCriteriaInternal inheritedAutoSizeMode = (DataGridViewAutoSizeColumnCriteriaInternal)column.InheritedAutoSizeMode;
				DataGridViewAutoSizeColumnCriteriaInternal dataGridViewAutoSizeColumnCriteriaInternal = inheritedAutoSizeMode & DataGridViewAutoSizeColumnCriteriaInternal.Header;
				bool flag = dataGridViewAutoSizeColumnCriteriaInternal == DataGridViewAutoSizeColumnCriteriaInternal.NotSet || !this.ColumnHeadersVisible;
				if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
				{
					this.AutoResizeColumnHeadersHeight(column.Index, true, flag);
				}
				if (!flag)
				{
					bool flag2 = (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) == DataGridViewAutoSizeRowsMode.None;
					this.AutoResizeColumnInternal(column.Index, inheritedAutoSizeMode, flag2);
					if (!flag2)
					{
						this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
						this.AutoResizeColumnInternal(column.Index, inheritedAutoSizeMode, true);
					}
					if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
					{
						this.AutoResizeColumnHeadersHeight(column.Index, true, true);
					}
				}
			}
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNSORTMODECHANGED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnStateChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnStateChangedEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.InvalidCastException">The column changed from read-only to read/write, enabling the current cell to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		// Token: 0x06001B95 RID: 7061 RVA: 0x0007152C File Offset: 0x0006F72C
		protected virtual void OnColumnStateChanged(DataGridViewColumnStateChangedEventArgs e)
		{
			DataGridViewColumn column = e.Column;
			DataGridViewElementStates stateChanged = e.StateChanged;
			if (stateChanged != DataGridViewElementStates.Frozen)
			{
				if (stateChanged != DataGridViewElementStates.Selected)
				{
					if (stateChanged == DataGridViewElementStates.Visible)
					{
						if (!column.Visible && column.Displayed)
						{
							column.DisplayedInternal = false;
						}
						this.dataGridViewState2[67108864] = true;
						this.PerformLayoutPrivate(false, false, true, true);
						bool flag = (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) != DataGridViewAutoSizeRowsMode.None || ((this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)1) != DataGridViewAutoSizeRowsMode.None && this.RowHeadersVisible);
						bool flag2 = false;
						DataGridViewAutoSizeColumnMode inheritedAutoSizeMode = column.InheritedAutoSizeMode;
						if (inheritedAutoSizeMode != DataGridViewAutoSizeColumnMode.None && inheritedAutoSizeMode != DataGridViewAutoSizeColumnMode.Fill)
						{
							int thicknessInternal = column.ThicknessInternal;
							if (column.Visible)
							{
								column.CachedThickness = thicknessInternal;
								this.AutoResizeColumnInternal(column.Index, (DataGridViewAutoSizeColumnCriteriaInternal)inheritedAutoSizeMode, !flag);
								flag2 = true;
							}
							else if (thicknessInternal != column.CachedThickness)
							{
								column.ThicknessInternal = Math.Max(column.MinimumWidth, column.CachedThickness);
							}
						}
						if (flag)
						{
							if (column.Visible)
							{
								this.AdjustExpandingRows(column.Index, true);
							}
							else
							{
								this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
							}
							if (flag2)
							{
								this.AutoResizeColumnInternal(column.Index, (DataGridViewAutoSizeColumnCriteriaInternal)inheritedAutoSizeMode, true);
							}
						}
						else
						{
							base.Invalidate();
						}
					}
				}
				else if (column.Visible && this.inBulkPaintCount == 0)
				{
					this.InvalidateColumnInternal(column.Index);
				}
			}
			else if (column.Visible)
			{
				if (column.Frozen)
				{
					if (this.horizontalOffset >= column.Thickness)
					{
						this.horizontalOffset -= column.Thickness;
					}
					else
					{
						this.horizontalOffset = (this.negOffset = 0);
					}
				}
				else
				{
					this.horizontalOffset = (this.negOffset = 0);
				}
				if (this.horizScrollBar.Enabled)
				{
					this.horizScrollBar.Value = this.horizontalOffset;
				}
				this.dataGridViewState2[67108864] = true;
				this.PerformLayoutPrivate(false, false, true, true);
				base.Invalidate();
			}
			DataGridViewColumnStateChangedEventHandler dataGridViewColumnStateChangedEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNSTATECHANGED] as DataGridViewColumnStateChangedEventHandler;
			if (dataGridViewColumnStateChangedEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnStateChangedEventHandler(this, e);
			}
			if (e.StateChanged == DataGridViewElementStates.ReadOnly && column.Index == this.ptCurrentCell.X && !this.dataGridViewOper[16384])
			{
				base.VerifyImeRestrictedModeChanged();
				if (!column.ReadOnly && this.ColumnEditable(this.ptCurrentCell.X) && (this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.ReadOnly) == DataGridViewElementStates.None && !this.IsCurrentCellInEditMode && (this.EditMode == DataGridViewEditMode.EditOnEnter || (this.EditMode != DataGridViewEditMode.EditProgrammatically && this.CurrentCellInternal.EditType == null)))
				{
					this.BeginEditInternal(true);
				}
			}
		}

		// Token: 0x06001B96 RID: 7062 RVA: 0x00071801 File Offset: 0x0006FA01
		internal void OnColumnToolTipTextChanged(DataGridViewColumn dataGridViewColumn)
		{
			this.OnColumnToolTipTextChanged(new DataGridViewColumnEventArgs(dataGridViewColumn));
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnToolTipTextChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains information about the column.</param>
		/// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x06001B97 RID: 7063 RVA: 0x00071810 File Offset: 0x0006FA10
		protected virtual void OnColumnToolTipTextChanged(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNTOOLTIPTEXTCHANGED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnWidthChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x06001B98 RID: 7064 RVA: 0x00071878 File Offset: 0x0006FA78
		protected virtual void OnColumnWidthChanged(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			this.Columns.InvalidateCachedColumnsWidths();
			if (e.Column.Visible && base.IsHandleCreated)
			{
				this.PerformLayoutPrivate(false, false, false, false);
				Rectangle rectangle = this.layout.Data;
				if (this.layout.ColumnHeadersVisible)
				{
					rectangle = Rectangle.Union(rectangle, this.layout.ColumnHeaders);
				}
				else if (this.SingleHorizontalBorderAdded)
				{
					int num = rectangle.Y;
					rectangle.Y = num - 1;
					num = rectangle.Height;
					rectangle.Height = num + 1;
				}
				if (rectangle.Width > 0 && rectangle.Height > 0)
				{
					int columnXFromIndex = this.GetColumnXFromIndex(e.Column.Index);
					if (this.RightToLeftInternal)
					{
						rectangle.Width -= rectangle.Right - columnXFromIndex;
					}
					else
					{
						rectangle.Width -= columnXFromIndex - rectangle.X;
						rectangle.X = columnXFromIndex;
					}
					if (rectangle.Width > 0 && rectangle.Height > 0)
					{
						base.Invalidate(rectangle);
					}
				}
				if (this.editingControl != null)
				{
					this.PositionEditingControl(this.ptCurrentCell.X != e.Column.Index, true, false);
				}
				this.UpdateMouseEnteredCell(null, null);
				if (this.AutoSize)
				{
					LayoutTransaction.DoLayout(this.ParentInternal, this, PropertyNames.Columns);
				}
			}
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNWIDTHCHANGED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
			if (!this.InAdjustFillingColumns)
			{
				this.OnColumnGlobalAutoSize(e.Column.Index);
			}
		}

		// Token: 0x06001B99 RID: 7065 RVA: 0x00071A4C File Offset: 0x0006FC4C
		internal void OnCommonCellContentClick(int columnIndex, int rowIndex, bool doubleClick)
		{
			if (this.ptMouseDownCell.X == -2 || (this.dataGridViewState2[268435456] && this.ptMouseDownCell.X == columnIndex && this.ptMouseDownCell.Y == rowIndex && (this.ptMouseDownCell.X == -1 || this.ptMouseDownCell.Y == -1 || (columnIndex == this.ptCurrentCell.X && rowIndex == this.ptCurrentCell.Y))))
			{
				DataGridViewCellEventArgs dataGridViewCellEventArgs = new DataGridViewCellEventArgs(columnIndex, rowIndex);
				if (doubleClick)
				{
					this.OnCellContentDoubleClick(dataGridViewCellEventArgs);
					return;
				}
				this.OnCellContentClick(dataGridViewCellEventArgs);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CurrentCellChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001B9A RID: 7066 RVA: 0x00071AE8 File Offset: 0x0006FCE8
		protected virtual void OnCurrentCellChanged(EventArgs e)
		{
			base.VerifyImeRestrictedModeChanged();
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCURRENTCELLCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CurrentCellDirtyStateChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001B9B RID: 7067 RVA: 0x00071B38 File Offset: 0x0006FD38
		protected virtual void OnCurrentCellDirtyStateChanged(EventArgs e)
		{
			if (this.RowHeadersVisible && this.ShowEditingIcon)
			{
				this.InvalidateCellPrivate(-1, this.ptCurrentCell.Y);
			}
			if (this.IsCurrentCellDirty && this.newRowIndex == this.ptCurrentCell.Y)
			{
				this.newRowIndex = -1;
				this.AddNewRow(true);
			}
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCURRENTCELLDIRTYSTATECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.CursorChanged" /> event and updates the <see cref="P:System.Windows.Forms.DataGridView.UserSetCursor" /> property if the cursor was changed in user code.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001B9C RID: 7068 RVA: 0x00071BCB File Offset: 0x0006FDCB
		protected override void OnCursorChanged(EventArgs e)
		{
			base.OnCursorChanged(e);
			if (!this.dataGridViewState2[2097152])
			{
				this.oldCursor = this.Cursor;
			}
		}

		// Token: 0x06001B9D RID: 7069 RVA: 0x00071BF2 File Offset: 0x0006FDF2
		internal void OnDataBindingComplete(ListChangedType listChangedType)
		{
			this.OnDataBindingComplete(new DataGridViewBindingCompleteEventArgs(listChangedType));
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.DataBindingComplete" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewBindingCompleteEventArgs" /> that contains the event data.</param>
		// Token: 0x06001B9E RID: 7070 RVA: 0x00071C00 File Offset: 0x0006FE00
		protected virtual void OnDataBindingComplete(DataGridViewBindingCompleteEventArgs e)
		{
			DataGridViewBindingCompleteEventHandler dataGridViewBindingCompleteEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWDATABINDINGCOMPLETE] as DataGridViewBindingCompleteEventHandler;
			if (dataGridViewBindingCompleteEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewBindingCompleteEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event.</summary>
		/// <param name="displayErrorDialogIfNoHandler">
		///   <see langword="true" /> to display an error dialog box if there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event.</param>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewDataErrorEventArgs" /> that contains the event data.</param>
		// Token: 0x06001B9F RID: 7071 RVA: 0x00071C48 File Offset: 0x0006FE48
		protected virtual void OnDataError(bool displayErrorDialogIfNoHandler, DataGridViewDataErrorEventArgs e)
		{
			DataGridViewDataErrorEventHandler dataGridViewDataErrorEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWDATAERROR] as DataGridViewDataErrorEventHandler;
			if (!this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				if (dataGridViewDataErrorEventHandler == null)
				{
					if (displayErrorDialogIfNoHandler)
					{
						string text;
						if (e.Exception == null)
						{
							text = SR.GetString("DataGridView_ErrorMessageText_NoException");
						}
						else
						{
							text = SR.GetString("DataGridView_ErrorMessageText_WithException", new object[] { e.Exception });
						}
						if (this.RightToLeftInternal)
						{
							MessageBox.Show(text, SR.GetString("DataGridView_ErrorMessageCaption"), MessageBoxButtons.OK, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
						}
						else
						{
							MessageBox.Show(text, SR.GetString("DataGridView_ErrorMessageCaption"), MessageBoxButtons.OK, MessageBoxIcon.Hand);
						}
						this.CorrectFocus(true);
						return;
					}
				}
				else
				{
					dataGridViewDataErrorEventHandler(this, e);
					this.CorrectFocus(true);
				}
			}
		}

		// Token: 0x06001BA0 RID: 7072 RVA: 0x00071D0F File Offset: 0x0006FF0F
		internal void OnDataErrorInternal(DataGridViewDataErrorEventArgs e)
		{
			this.OnDataError(!base.DesignMode, e);
		}

		// Token: 0x06001BA1 RID: 7073 RVA: 0x00071D24 File Offset: 0x0006FF24
		internal void OnDataGridViewElementStateChanged(DataGridViewElement element, int index, DataGridViewElementStates elementState)
		{
			DataGridViewColumn dataGridViewColumn = element as DataGridViewColumn;
			if (dataGridViewColumn != null)
			{
				DataGridViewColumnStateChangedEventArgs dataGridViewColumnStateChangedEventArgs = new DataGridViewColumnStateChangedEventArgs(dataGridViewColumn, elementState);
				this.OnColumnStateChanged(dataGridViewColumnStateChangedEventArgs);
			}
			else
			{
				DataGridViewRow dataGridViewRow = element as DataGridViewRow;
				if (dataGridViewRow != null)
				{
					DataGridViewRowStateChangedEventHandler dataGridViewRowStateChangedEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWSTATECHANGED] as DataGridViewRowStateChangedEventHandler;
					if (dataGridViewRowStateChangedEventHandler != null && dataGridViewRow.DataGridView != null && dataGridViewRow.Index == -1)
					{
						dataGridViewRow = this.Rows[index];
					}
					DataGridViewRowStateChangedEventArgs dataGridViewRowStateChangedEventArgs = new DataGridViewRowStateChangedEventArgs(dataGridViewRow, elementState);
					this.OnRowStateChanged((dataGridViewRow.Index == -1) ? index : dataGridViewRow.Index, dataGridViewRowStateChangedEventArgs);
				}
				else
				{
					DataGridViewCell dataGridViewCell = element as DataGridViewCell;
					if (dataGridViewCell != null)
					{
						DataGridViewCellStateChangedEventArgs dataGridViewCellStateChangedEventArgs = new DataGridViewCellStateChangedEventArgs(dataGridViewCell, elementState);
						this.OnCellStateChanged(dataGridViewCellStateChangedEventArgs);
					}
				}
			}
			if ((elementState & DataGridViewElementStates.Selected) == DataGridViewElementStates.Selected)
			{
				if (this.noSelectionChangeCount > 0)
				{
					this.dataGridViewState2[262144] = true;
					return;
				}
				this.OnSelectionChanged(EventArgs.Empty);
			}
		}

		// Token: 0x06001BA2 RID: 7074 RVA: 0x00071E04 File Offset: 0x00070004
		internal void OnDataGridViewElementStateChanging(DataGridViewElement element, int index, DataGridViewElementStates elementState)
		{
			DataGridViewColumn dataGridViewColumn = element as DataGridViewColumn;
			if (dataGridViewColumn != null)
			{
				if (elementState != DataGridViewElementStates.Frozen)
				{
					if (elementState != DataGridViewElementStates.ReadOnly)
					{
						if (elementState != DataGridViewElementStates.Visible)
						{
							return;
						}
					}
					else
					{
						if (this.ptCurrentCell.X == dataGridViewColumn.Index && this.IsCurrentCellInEditMode && !dataGridViewColumn.ReadOnly && !this.dataGridViewOper[16384] && !this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit, DataGridView.DataGridViewValidateCellInternal.Always, false, false, false, false, false, true, false, false))
						{
							throw new InvalidOperationException(SR.GetString("DataGridView_CommitFailedCannotCompleteOperation"));
						}
						return;
					}
				}
				if (elementState == DataGridViewElementStates.Visible)
				{
					if (!dataGridViewColumn.Visible && dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.ColumnHeader && !this.ColumnHeadersVisible)
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_CannotMakeAutoSizedColumnVisible"));
					}
					if (!dataGridViewColumn.Visible && dataGridViewColumn.Frozen && dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
					{
						dataGridViewColumn.AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
					}
					else if (dataGridViewColumn.Visible && this.ptCurrentCell.X == dataGridViewColumn.Index)
					{
						this.ResetCurrentCell();
					}
				}
				if (elementState == DataGridViewElementStates.Frozen && !dataGridViewColumn.Frozen && dataGridViewColumn.Visible && dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
				{
					dataGridViewColumn.AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
				}
				this.CorrectColumnFrozenStates(dataGridViewColumn, elementState == DataGridViewElementStates.Frozen);
				return;
			}
			DataGridViewRow dataGridViewRow = element as DataGridViewRow;
			if (dataGridViewRow != null)
			{
				int num = ((dataGridViewRow.Index > -1) ? dataGridViewRow.Index : index);
				if (elementState != DataGridViewElementStates.Frozen)
				{
					if (elementState != DataGridViewElementStates.ReadOnly)
					{
						if (elementState != DataGridViewElementStates.Visible)
						{
							return;
						}
					}
					else
					{
						if (this.ptCurrentCell.Y == num && (this.Rows.GetRowState(num) & DataGridViewElementStates.ReadOnly) == DataGridViewElementStates.None && !this.ReadOnly && this.IsCurrentCellInEditMode && !this.dataGridViewOper[16384] && !this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit, DataGridView.DataGridViewValidateCellInternal.Always, false, false, false, false, false, true, false, false))
						{
							throw new InvalidOperationException(SR.GetString("DataGridView_CommitFailedCannotCompleteOperation"));
						}
						return;
					}
				}
				if (elementState == DataGridViewElementStates.Visible && this.ptCurrentCell.Y == num)
				{
					if (this.DataSource != null)
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_CurrencyManagerRowCannotBeInvisible"));
					}
					this.ResetCurrentCell();
				}
				this.CorrectRowFrozenStates(dataGridViewRow, num, elementState == DataGridViewElementStates.Frozen);
				return;
			}
			DataGridViewCell dataGridViewCell = element as DataGridViewCell;
			if (dataGridViewCell != null && elementState == DataGridViewElementStates.ReadOnly && this.ptCurrentCell.X == dataGridViewCell.ColumnIndex && this.ptCurrentCell.Y == dataGridViewCell.RowIndex && this.IsCurrentCellInEditMode && !dataGridViewCell.ReadOnly && !this.dataGridViewOper[16384] && !this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit, DataGridView.DataGridViewValidateCellInternal.Always, false, false, false, false, false, true, false, false))
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CommitFailedCannotCompleteOperation"));
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.DataMemberChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001BA3 RID: 7075 RVA: 0x000720A0 File Offset: 0x000702A0
		protected virtual void OnDataMemberChanged(EventArgs e)
		{
			this.RefreshColumnsAndRows();
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWDATAMEMBERCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
			if (this.dataConnection != null && this.dataConnection.CurrencyManager != null)
			{
				this.OnDataBindingComplete(ListChangedType.Reset);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.DataSourceChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001BA4 RID: 7076 RVA: 0x0007210C File Offset: 0x0007030C
		protected virtual void OnDataSourceChanged(EventArgs e)
		{
			this.RefreshColumnsAndRows();
			this.InvalidateRowHeights();
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWDATASOURCECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
			if (this.dataConnection != null && this.dataConnection.CurrencyManager != null)
			{
				this.OnDataBindingComplete(ListChangedType.Reset);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.DefaultCellStyleChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001BA5 RID: 7077 RVA: 0x0007217C File Offset: 0x0007037C
		protected virtual void OnDefaultCellStyleChanged(EventArgs e)
		{
			DataGridViewCellStyleChangedEventArgs dataGridViewCellStyleChangedEventArgs = e as DataGridViewCellStyleChangedEventArgs;
			if (dataGridViewCellStyleChangedEventArgs != null && !dataGridViewCellStyleChangedEventArgs.ChangeAffectsPreferredSize)
			{
				base.Invalidate();
			}
			else
			{
				this.OnGlobalAutoSize();
				if (this.editingControl != null)
				{
					this.PositionEditingControl(true, true, false);
				}
			}
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWDEFAULTCELLSTYLECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.DefaultValuesNeeded" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data.</param>
		// Token: 0x06001BA6 RID: 7078 RVA: 0x000721F8 File Offset: 0x000703F8
		protected virtual void OnDefaultValuesNeeded(DataGridViewRowEventArgs e)
		{
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWDEFAULTVALUESNEEDED] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.DoubleClick" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001BA7 RID: 7079 RVA: 0x00072240 File Offset: 0x00070440
		protected override void OnDoubleClick(EventArgs e)
		{
			base.OnDoubleClick(e);
			if (!this.dataGridViewState2[134217728] && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				MouseEventArgs mouseEventArgs = e as MouseEventArgs;
				if (mouseEventArgs != null)
				{
					DataGridView.HitTestInfo hitTestInfo = this.HitTest(mouseEventArgs.X, mouseEventArgs.Y);
					if (hitTestInfo.Type != DataGridViewHitTestType.None && hitTestInfo.Type != DataGridViewHitTestType.HorizontalScrollBar && hitTestInfo.Type != DataGridViewHitTestType.VerticalScrollBar && mouseEventArgs.Button == MouseButtons.Left)
					{
						this.OnCellDoubleClick(new DataGridViewCellEventArgs(hitTestInfo.col, hitTestInfo.row));
					}
				}
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.EditingControlShowing" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewEditingControlShowingEventArgs" /> that contains information about the editing control.</param>
		// Token: 0x06001BA8 RID: 7080 RVA: 0x000722DC File Offset: 0x000704DC
		protected virtual void OnEditingControlShowing(DataGridViewEditingControlShowingEventArgs e)
		{
			DataGridViewEditingControlShowingEventHandler dataGridViewEditingControlShowingEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWEDITINGCONTROLSHOWING] as DataGridViewEditingControlShowingEventHandler;
			if (dataGridViewEditingControlShowingEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewEditingControlShowingEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.EditModeChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.InvalidCastException">When entering edit mode, the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		// Token: 0x06001BA9 RID: 7081 RVA: 0x00072324 File Offset: 0x00070524
		protected virtual void OnEditModeChanged(EventArgs e)
		{
			if (this.Focused && this.EditMode == DataGridViewEditMode.EditOnEnter && this.ptCurrentCell.X > -1 && !this.IsCurrentCellInEditMode)
			{
				this.BeginEditInternal(true);
			}
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWEDITMODECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.EnabledChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001BAA RID: 7082 RVA: 0x0007239C File Offset: 0x0007059C
		protected override void OnEnabledChanged(EventArgs e)
		{
			base.OnEnabledChanged(e);
			if (base.GetAnyDisposingInHierarchy())
			{
				return;
			}
			if (base.IsHandleCreated && base.Enabled)
			{
				if (this.vertScrollBar != null && this.vertScrollBar.Visible)
				{
					int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Visible);
					int rowsHeight2 = this.Rows.GetRowsHeight(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					this.vertScrollBar.Maximum = rowsHeight - rowsHeight2;
					this.vertScrollBar.Enabled = true;
				}
				if (this.horizScrollBar != null && this.horizScrollBar.Visible)
				{
					this.horizScrollBar.Enabled = true;
				}
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.Enter" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.InvalidCastException">The control is configured to enter edit mode when it receives focus, but upon entering focus, the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		/// <exception cref="T:System.Exception">The control is configured to enter edit mode when it receives focus, but initialization of the editing cell value failed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. The exception object can typically be cast to type <see cref="T:System.FormatException" />.</exception>
		// Token: 0x06001BAB RID: 7083 RVA: 0x00072438 File Offset: 0x00070638
		protected override void OnEnter(EventArgs e)
		{
			if (this.editingControl != null && this.editingControl.ContainsFocus)
			{
				return;
			}
			base.OnEnter(e);
			if (base.DesignMode)
			{
				return;
			}
			this.dataGridViewState1[64] = false;
			if (this.ptCurrentCell.X > -1)
			{
				DataGridViewCell dataGridViewCell = null;
				this.OnRowEnter(ref dataGridViewCell, this.ptCurrentCell.X, this.ptCurrentCell.Y, false, false);
				if (this.ptCurrentCell.X == -1)
				{
					return;
				}
				this.OnCellEnter(ref dataGridViewCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
				if (this.SelectionMode == DataGridViewSelectionMode.FullRowSelect && AccessibilityImprovements.Level2)
				{
					this.InvalidateCellPrivate(this.ptCurrentCell.X, -1);
				}
			}
			else if (!this.dataGridViewOper[8192])
			{
				this.MakeFirstDisplayedCellCurrentCell(true);
			}
			if (this.ptCurrentCell.X > -1 && !this.IsCurrentCellInEditMode)
			{
				if (this.EditMode == DataGridViewEditMode.EditOnEnter || (this.EditMode != DataGridViewEditMode.EditProgrammatically && this.CurrentCellInternal.EditType == null))
				{
					this.BeginEditInternal(true);
					if (this.ptCurrentCell.X > -1 && this.CurrentCellInternal.EditType == null && !this.dataGridViewOper[8192])
					{
						this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
					}
				}
				else if (!this.dataGridViewOper[8192])
				{
					this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
				}
			}
			if (this.IsGridFocusRectangleEnabled())
			{
				this.InvalidateRectangleEdges(this.GetGridFocusRectangle());
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.FontChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001BAC RID: 7084 RVA: 0x000725F0 File Offset: 0x000707F0
		protected override void OnFontChanged(EventArgs e)
		{
			base.OnFontChanged(e);
			if (base.GetAnyDisposingInHierarchy())
			{
				return;
			}
			if (this.dataGridViewState1[67108864] && this.ColumnHeadersDefaultCellStyle.Font != base.Font)
			{
				this.ColumnHeadersDefaultCellStyle.Font = base.Font;
				this.dataGridViewState1[67108864] = true;
				this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = true;
				this.OnColumnHeadersDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
			}
			if (this.dataGridViewState1[134217728] && this.RowHeadersDefaultCellStyle.Font != base.Font)
			{
				this.RowHeadersDefaultCellStyle.Font = base.Font;
				this.dataGridViewState1[134217728] = true;
				this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = true;
				this.OnRowHeadersDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
			}
			if (this.dataGridViewState1[33554432] && this.DefaultCellStyle.Font != base.Font)
			{
				this.DefaultCellStyle.Font = base.Font;
				this.dataGridViewState1[33554432] = true;
				this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = true;
				this.OnDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ForeColorChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001BAD RID: 7085 RVA: 0x0007272C File Offset: 0x0007092C
		protected override void OnForeColorChanged(EventArgs e)
		{
			base.OnForeColorChanged(e);
			if (base.GetAnyDisposingInHierarchy())
			{
				return;
			}
			if (this.dataGridViewState1[1024] && this.DefaultCellStyle.ForeColor != base.ForeColor)
			{
				this.DefaultCellStyle.ForeColor = base.ForeColor;
				this.dataGridViewState1[1024] = true;
				this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = false;
				this.OnDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
			}
		}

		// Token: 0x06001BAE RID: 7086 RVA: 0x000727B0 File Offset: 0x000709B0
		private void OnGlobalAutoSize()
		{
			base.Invalidate();
			if (this.noAutoSizeCount > 0)
			{
				return;
			}
			bool flag = this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.EnableResizing && this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.DisableResizing;
			if (flag)
			{
				this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, this.ColumnHeadersHeightSizeMode != DataGridViewColumnHeadersHeightSizeMode.AutoSize, this.autoSizeRowsMode == DataGridViewAutoSizeRowsMode.None);
			}
			if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
			{
				this.AutoResizeColumnHeadersHeight(true, false);
			}
			if (this.autoSizeRowsMode != DataGridViewAutoSizeRowsMode.None)
			{
				this.AdjustShrinkingRows(this.autoSizeRowsMode, false, true);
			}
			this.AutoResizeAllVisibleColumnsInternal(DataGridViewAutoSizeColumnCriteriaInternal.Header | DataGridViewAutoSizeColumnCriteriaInternal.AllRows | DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows, true);
			if (flag && (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize || this.autoSizeRowsMode != DataGridViewAutoSizeRowsMode.None))
			{
				this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, true);
			}
			if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
			{
				this.AutoResizeColumnHeadersHeight(true, true);
			}
			if (this.autoSizeRowsMode != DataGridViewAutoSizeRowsMode.None)
			{
				this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.GotFocus" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001BAF RID: 7087 RVA: 0x00072884 File Offset: 0x00070A84
		protected override void OnGotFocus(EventArgs e)
		{
			base.OnGotFocus(e);
			if (this.ptCurrentCell.X != -1)
			{
				this.InvalidateCell(this.ptCurrentCell.X, this.ptCurrentCell.Y);
			}
			if (!this.dataGridViewOper[131072] && (!this.dataGridViewOper[4194304] || this.EditMode != DataGridViewEditMode.EditOnEnter) && (!this.dataGridViewOper[8192] || this.EditMode != DataGridViewEditMode.EditOnEnter) && this.ptCurrentCell.X > -1)
			{
				this.AccessibilityNotifyCurrentCellChanged(this.ptCurrentCell);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.GridColorChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001BB0 RID: 7088 RVA: 0x00072924 File Offset: 0x00070B24
		protected virtual void OnGridColorChanged(EventArgs e)
		{
			this.InvalidateInside();
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWGRIDCOLORCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.HandleCreated" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001BB1 RID: 7089 RVA: 0x00072974 File Offset: 0x00070B74
		protected override void OnHandleCreated(EventArgs e)
		{
			base.OnHandleCreated(e);
			if (this.layout.dirty)
			{
				this.PerformLayoutPrivate(false, true, false, false);
			}
			if (this.ptCurrentCell.X == -1)
			{
				this.MakeFirstDisplayedCellCurrentCell(false);
			}
			else
			{
				this.ScrollIntoView(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
			}
			if (this.dataGridViewState2[1048576])
			{
				this.dataGridViewState2[1048576] = false;
				this.OnGlobalAutoSize();
			}
			SystemEvents.UserPreferenceChanged += this.OnUserPreferenceChanged;
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.HandleDestroyed" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001BB2 RID: 7090 RVA: 0x00072A0E File Offset: 0x00070C0E
		protected override void OnHandleDestroyed(EventArgs e)
		{
			SystemEvents.UserPreferenceChanged -= this.OnUserPreferenceChanged;
			base.OnHandleDestroyed(e);
		}

		// Token: 0x06001BB3 RID: 7091 RVA: 0x00072A28 File Offset: 0x00070C28
		internal void OnInsertedColumn_PreNotification(DataGridViewColumn dataGridViewColumn)
		{
			this.displayedBandsInfo.CorrectColumnIndexAfterInsertion(dataGridViewColumn.Index, 1);
			this.CorrectColumnIndexesAfterInsertion(dataGridViewColumn, 1);
			this.OnAddedColumn(dataGridViewColumn);
		}

		// Token: 0x06001BB4 RID: 7092 RVA: 0x00072A4C File Offset: 0x00070C4C
		internal void OnInsertedColumn_PostNotification(Point newCurrentCell)
		{
			if (newCurrentCell.X != -1)
			{
				bool flag = this.SetAndSelectCurrentCellAddress(newCurrentCell.X, newCurrentCell.Y, true, false, false, false, this.Columns.GetColumnCount(DataGridViewElementStates.Visible) == 1);
			}
		}

		// Token: 0x06001BB5 RID: 7093 RVA: 0x00072A8C File Offset: 0x00070C8C
		internal void OnInsertedRow_PreNotification(int rowIndex, int insertionCount)
		{
			this.displayedBandsInfo.CorrectRowIndexAfterInsertion(rowIndex, insertionCount);
			this.CorrectRowIndexesAfterInsertion(rowIndex, insertionCount);
			this.OnAddedRow_PreNotification(rowIndex);
		}

		// Token: 0x06001BB6 RID: 7094 RVA: 0x00072AAC File Offset: 0x00070CAC
		internal void OnInsertedRow_PostNotification(int rowIndex, Point newCurrentCell, bool lastInsertion)
		{
			this.OnAddedRow_PostNotification(rowIndex);
			if (lastInsertion && newCurrentCell.Y != -1)
			{
				bool flag = this.SetAndSelectCurrentCellAddress(newCurrentCell.X, newCurrentCell.Y, true, false, false, false, this.Rows.GetRowCount(DataGridViewElementStates.Visible) == 1);
			}
		}

		// Token: 0x06001BB7 RID: 7095 RVA: 0x00072AF6 File Offset: 0x00070CF6
		internal void OnInsertedRows_PreNotification(int rowIndex, DataGridViewRow[] dataGridViewRows)
		{
			this.displayedBandsInfo.CorrectRowIndexAfterInsertion(rowIndex, dataGridViewRows.Length);
			this.CorrectRowIndexesAfterInsertion(rowIndex, dataGridViewRows.Length);
			this.OnAddedRows_PreNotification(dataGridViewRows);
		}

		// Token: 0x06001BB8 RID: 7096 RVA: 0x00072B18 File Offset: 0x00070D18
		internal void OnInsertedRows_PostNotification(DataGridViewRow[] dataGridViewRows, Point newCurrentCell)
		{
			this.OnAddedRows_PostNotification(dataGridViewRows);
			if (newCurrentCell.Y != -1)
			{
				bool flag = this.SetAndSelectCurrentCellAddress(newCurrentCell.X, newCurrentCell.Y, true, false, false, false, false);
			}
		}

		// Token: 0x06001BB9 RID: 7097 RVA: 0x00072B50 File Offset: 0x00070D50
		internal void OnInsertingColumn(int columnIndexInserted, DataGridViewColumn dataGridViewColumn, out Point newCurrentCell)
		{
			if (dataGridViewColumn.DataGridView != null)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_ColumnAlreadyBelongsToDataGridView"));
			}
			if (!this.InInitialization && dataGridViewColumn.SortMode == DataGridViewColumnSortMode.Automatic && (this.SelectionMode == DataGridViewSelectionMode.FullColumnSelect || this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect))
			{
				throw new InvalidOperationException(SR.GetString("DataGridViewColumn_SortModeAndSelectionModeClash", new object[]
				{
					DataGridViewColumnSortMode.Automatic.ToString(),
					this.SelectionMode.ToString()
				}));
			}
			if (dataGridViewColumn.Visible)
			{
				if (!this.ColumnHeadersVisible && (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.ColumnHeader || (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.NotSet && this.AutoSizeColumnsMode == DataGridViewAutoSizeColumnsMode.ColumnHeader)))
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddAutoSizedColumn"));
				}
				if (dataGridViewColumn.Frozen && (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.Fill || (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.NotSet && this.AutoSizeColumnsMode == DataGridViewAutoSizeColumnsMode.Fill)))
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddAutoFillColumn"));
				}
			}
			this.CorrectColumnFrozenState(dataGridViewColumn, columnIndexInserted);
			if (this.ptCurrentCell.X != -1)
			{
				newCurrentCell = new Point((columnIndexInserted <= this.ptCurrentCell.X) ? (this.ptCurrentCell.X + 1) : this.ptCurrentCell.X, this.ptCurrentCell.Y);
				this.ResetCurrentCell();
			}
			else
			{
				newCurrentCell = new Point(-1, -1);
			}
			if (this.Rows.Count > 0)
			{
				if (dataGridViewColumn.CellType == null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddUntypedColumn"));
				}
				if (dataGridViewColumn.CellTemplate.DefaultNewRowValue != null && this.newRowIndex != -1)
				{
					DataGridViewRow dataGridViewRow = this.Rows[this.newRowIndex];
				}
				int num = this.Columns.Count + 1;
				try
				{
					for (int i = 0; i < this.Rows.Count; i++)
					{
						DataGridViewRow dataGridViewRow2 = this.Rows.SharedRow(i);
						if (dataGridViewRow2.Cells.Count < num)
						{
							DataGridViewCell dataGridViewCell = (DataGridViewCell)dataGridViewColumn.CellTemplate.Clone();
							dataGridViewRow2.Cells.InsertInternal(columnIndexInserted, dataGridViewCell);
							if (i == this.newRowIndex)
							{
								dataGridViewCell.Value = dataGridViewCell.DefaultNewRowValue;
							}
							dataGridViewCell.DataGridViewInternal = this;
							dataGridViewCell.OwningRowInternal = dataGridViewRow2;
							dataGridViewCell.OwningColumnInternal = dataGridViewColumn;
						}
					}
				}
				catch
				{
					for (int j = 0; j < this.Rows.Count; j++)
					{
						DataGridViewRow dataGridViewRow3 = this.Rows.SharedRow(j);
						if (dataGridViewRow3.Cells.Count != num)
						{
							break;
						}
						dataGridViewRow3.Cells.RemoveAtInternal(columnIndexInserted);
					}
					throw;
				}
			}
			DataGridViewSelectionMode dataGridViewSelectionMode = this.SelectionMode;
			if (dataGridViewSelectionMode == DataGridViewSelectionMode.FullColumnSelect || dataGridViewSelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)
			{
				int num2 = this.selectedBandIndexes.Count;
				for (int k = 0; k < num2; k++)
				{
					int num3 = this.selectedBandIndexes[k];
					if (columnIndexInserted <= num3)
					{
						this.selectedBandIndexes[k] = num3 + 1;
					}
				}
				if (this.selectedBandSnapshotIndexes != null)
				{
					num2 = this.selectedBandSnapshotIndexes.Count;
					for (int k = 0; k < num2; k++)
					{
						int num4 = this.selectedBandSnapshotIndexes[k];
						if (columnIndexInserted <= num4)
						{
							this.selectedBandSnapshotIndexes[k] = num4 + 1;
						}
					}
				}
			}
		}

		// Token: 0x06001BBA RID: 7098 RVA: 0x00072EA0 File Offset: 0x000710A0
		internal void OnInsertingRow(int rowIndexInserted, DataGridViewRow dataGridViewRow, DataGridViewElementStates rowState, ref Point newCurrentCell, bool firstInsertion, int insertionCount, bool force)
		{
			if (firstInsertion)
			{
				if (this.ptCurrentCell.Y != -1 && rowIndexInserted <= this.ptCurrentCell.Y)
				{
					newCurrentCell = new Point(this.ptCurrentCell.X, this.ptCurrentCell.Y + insertionCount);
					if (force)
					{
						this.dataGridViewState1[4194304] = true;
						bool flag = this.SetCurrentCellAddressCore(-1, -1, true, false, false);
					}
					else
					{
						this.ResetCurrentCell();
					}
				}
				else
				{
					newCurrentCell = new Point(-1, -1);
				}
			}
			else if (newCurrentCell.Y != -1)
			{
				newCurrentCell.Y += insertionCount;
			}
			this.OnAddingRow(dataGridViewRow, rowState, false);
			this.CorrectRowFrozenState(dataGridViewRow, rowState, rowIndexInserted);
			DataGridViewSelectionMode dataGridViewSelectionMode = this.SelectionMode;
			if (dataGridViewSelectionMode == DataGridViewSelectionMode.FullRowSelect || dataGridViewSelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
			{
				int num = this.selectedBandIndexes.Count;
				for (int i = 0; i < num; i++)
				{
					int num2 = this.selectedBandIndexes[i];
					if (rowIndexInserted <= num2)
					{
						this.selectedBandIndexes[i] = num2 + insertionCount;
					}
				}
				if (this.selectedBandSnapshotIndexes != null)
				{
					num = this.selectedBandSnapshotIndexes.Count;
					for (int i = 0; i < num; i++)
					{
						int num3 = this.selectedBandSnapshotIndexes[i];
						if (rowIndexInserted <= num3)
						{
							this.selectedBandSnapshotIndexes[i] = num3 + insertionCount;
						}
					}
				}
			}
		}

		// Token: 0x06001BBB RID: 7099 RVA: 0x00072FEC File Offset: 0x000711EC
		internal void OnInsertingRows(int rowIndexInserted, DataGridViewRow[] dataGridViewRows, ref Point newCurrentCell)
		{
			if (this.ptCurrentCell.Y != -1 && rowIndexInserted <= this.ptCurrentCell.Y)
			{
				newCurrentCell = new Point(this.ptCurrentCell.X, this.ptCurrentCell.Y + dataGridViewRows.Length);
				this.ResetCurrentCell();
			}
			else
			{
				newCurrentCell = new Point(-1, -1);
			}
			this.OnAddingRows(dataGridViewRows, false);
			this.CorrectRowFrozenStates(dataGridViewRows, rowIndexInserted);
			DataGridViewSelectionMode dataGridViewSelectionMode = this.SelectionMode;
			if (dataGridViewSelectionMode == DataGridViewSelectionMode.FullRowSelect || dataGridViewSelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
			{
				int num = this.selectedBandIndexes.Count;
				for (int i = 0; i < num; i++)
				{
					int num2 = this.selectedBandIndexes[i];
					if (rowIndexInserted <= num2)
					{
						this.selectedBandIndexes[i] = num2 + dataGridViewRows.Length;
					}
				}
				if (this.selectedBandSnapshotIndexes != null)
				{
					num = this.selectedBandSnapshotIndexes.Count;
					for (int i = 0; i < num; i++)
					{
						int num3 = this.selectedBandSnapshotIndexes[i];
						if (rowIndexInserted <= num3)
						{
							this.selectedBandSnapshotIndexes[i] = num3 + dataGridViewRows.Length;
						}
					}
				}
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.KeyDown" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.Exception">This action would cause the control to enter edit mode but initialization of the editing cell value failed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. The exception object can typically be cast to type <see cref="T:System.FormatException" />.</exception>
		// Token: 0x06001BBC RID: 7100 RVA: 0x000730F0 File Offset: 0x000712F0
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		protected override void OnKeyDown(KeyEventArgs e)
		{
			base.OnKeyDown(e);
			if (e.Handled)
			{
				return;
			}
			if (this.ptCurrentCell.X != -1)
			{
				DataGridViewCell currentCellInternal = this.CurrentCellInternal;
				if (currentCellInternal.KeyDownUnsharesRowInternal(e, this.ptCurrentCell.Y))
				{
					DataGridViewRow dataGridViewRow = this.Rows[this.ptCurrentCell.Y];
					this.CurrentCellInternal.OnKeyDownInternal(e, this.ptCurrentCell.Y);
				}
				else
				{
					currentCellInternal.OnKeyDownInternal(e, this.ptCurrentCell.Y);
				}
			}
			if (!e.Handled)
			{
				Keys keys = e.KeyData & Keys.KeyCode;
				if (keys <= Keys.D0)
				{
					if (keys != Keys.Tab && keys != Keys.Return)
					{
						switch (keys)
						{
						case Keys.Escape:
						case Keys.Space:
						case Keys.Prior:
						case Keys.Next:
						case Keys.End:
						case Keys.Home:
						case Keys.Left:
						case Keys.Up:
						case Keys.Right:
						case Keys.Down:
						case Keys.Insert:
						case Keys.Delete:
						case Keys.D0:
							break;
						case Keys.IMEConvert:
						case Keys.IMENonconvert:
						case Keys.IMEAccept:
						case Keys.IMEModeChange:
						case Keys.Select:
						case Keys.Print:
						case Keys.Execute:
						case Keys.Snapshot:
						case Keys.Help:
							return;
						default:
							return;
						}
					}
				}
				else if (keys <= Keys.C)
				{
					if (keys != Keys.A && keys != Keys.C)
					{
						return;
					}
				}
				else if (keys != Keys.NumPad0 && keys - Keys.F2 > 1)
				{
					return;
				}
				e.Handled = this.ProcessDataGridViewKey(e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.KeyPress" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.KeyPressEventArgs" /> that contains the event data.</param>
		// Token: 0x06001BBD RID: 7101 RVA: 0x00073230 File Offset: 0x00071430
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		protected override void OnKeyPress(KeyPressEventArgs e)
		{
			base.OnKeyPress(e);
			if (e.Handled)
			{
				return;
			}
			if (this.ptCurrentCell.X != -1)
			{
				DataGridViewCell currentCellInternal = this.CurrentCellInternal;
				if (currentCellInternal.KeyPressUnsharesRowInternal(e, this.ptCurrentCell.Y))
				{
					DataGridViewRow dataGridViewRow = this.Rows[this.ptCurrentCell.Y];
					this.CurrentCellInternal.OnKeyPressInternal(e, this.ptCurrentCell.Y);
					return;
				}
				currentCellInternal.OnKeyPressInternal(e, this.ptCurrentCell.Y);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.KeyUp" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</param>
		// Token: 0x06001BBE RID: 7102 RVA: 0x000732B8 File Offset: 0x000714B8
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		protected override void OnKeyUp(KeyEventArgs e)
		{
			base.OnKeyUp(e);
			if (e.Handled)
			{
				return;
			}
			if (this.dataGridViewOper[16777216] && (e.KeyData & Keys.Alt) != Keys.Alt && AccessibilityImprovements.Level2)
			{
				this.EndColumnResize(this.currentColSplitBar);
				this.ResetKeyboardTrackingState();
				return;
			}
			if (this.ptCurrentCell.X != -1)
			{
				DataGridViewCell currentCellInternal = this.CurrentCellInternal;
				if (currentCellInternal.KeyUpUnsharesRowInternal(e, this.ptCurrentCell.Y))
				{
					DataGridViewRow dataGridViewRow = this.Rows[this.ptCurrentCell.Y];
					this.CurrentCellInternal.OnKeyUpInternal(e, this.ptCurrentCell.Y);
					return;
				}
				currentCellInternal.OnKeyUpInternal(e, this.ptCurrentCell.Y);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.Layout" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.LayoutEventArgs" /> that contains the event data.</param>
		// Token: 0x06001BBF RID: 7103 RVA: 0x00073380 File Offset: 0x00071580
		protected override void OnLayout(LayoutEventArgs e)
		{
			if (this.dataGridViewState1[16384])
			{
				return;
			}
			base.OnLayout(e);
			this.PerformLayoutPrivate(false, false, false, false);
			if (this.RightToLeftInternal)
			{
				base.Invalidate();
			}
			if (this.editingControl != null)
			{
				this.PositionEditingControl(true, true, false);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.Leave" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001BC0 RID: 7104 RVA: 0x000733D0 File Offset: 0x000715D0
		protected override void OnLeave(EventArgs e)
		{
			if (this.ptCurrentCell.X > -1 && !this.dataGridViewState1[64])
			{
				DataGridViewCell dataGridViewCell = null;
				this.OnCellLeave(ref dataGridViewCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
				if (this.ptCurrentCell.X == -1)
				{
					return;
				}
				this.OnRowLeave(ref dataGridViewCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
			}
			if (!this.dataGridViewState1[64])
			{
				base.OnLeave(e);
				if (this.ptCurrentCell.X > -1 && this.ptCurrentCell.Y > -1)
				{
					this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
				}
			}
			if (this.IsGridFocusRectangleEnabled())
			{
				this.InvalidateRectangleEdges(this.GetGridFocusRectangle());
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.LostFocus" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001BC1 RID: 7105 RVA: 0x000734A9 File Offset: 0x000716A9
		protected override void OnLostFocus(EventArgs e)
		{
			base.OnLostFocus(e);
			if (this.ptCurrentCell.X != -1)
			{
				this.InvalidateCell(this.ptCurrentCell.X, this.ptCurrentCell.Y);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseClick" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.Exception">The control is configured to enter edit mode when it receives focus, but initialization of the editing cell value failed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. The exception object can typically be cast to type <see cref="T:System.FormatException" />.</exception>
		// Token: 0x06001BC2 RID: 7106 RVA: 0x000734DC File Offset: 0x000716DC
		protected override void OnMouseClick(MouseEventArgs e)
		{
			bool flag = false;
			if (!this.dataGridViewState2[134217728] && !this.dataGridViewOper[1048576] && !base.IsDisposed && !this.dataGridViewOper[1] && !this.dataGridViewOper[2] && !this.dataGridViewOper[128] && !this.dataGridViewOper[256])
			{
				DataGridView.HitTestInfo hitTestInfo = this.HitTest(e.X, e.Y);
				if (this.ptMouseDownCell.X == hitTestInfo.col && this.ptMouseDownCell.Y == hitTestInfo.row && (e.Button != MouseButtons.Left || this.ptMouseDownCell.X == -1 || this.ptMouseDownCell.Y == -1 || (this.ptMouseDownCell.X == this.ptCurrentCell.X && this.ptMouseDownCell.Y == this.ptCurrentCell.Y)))
				{
					DataGridViewCellMouseEventArgs dataGridViewCellMouseEventArgs = null;
					if (hitTestInfo.Type != DataGridViewHitTestType.None && hitTestInfo.Type != DataGridViewHitTestType.HorizontalScrollBar && hitTestInfo.Type != DataGridViewHitTestType.VerticalScrollBar)
					{
						int num = e.X - hitTestInfo.ColumnX;
						if (this.RightToLeftInternal)
						{
							num += ((hitTestInfo.col == -1) ? this.RowHeadersWidth : this.Columns[hitTestInfo.col].Thickness);
						}
						dataGridViewCellMouseEventArgs = new DataGridViewCellMouseEventArgs(hitTestInfo.col, hitTestInfo.row, num, e.Y - hitTestInfo.RowY, e);
						this.RecordCellMouseClick(dataGridViewCellMouseEventArgs);
						if (e.Button == MouseButtons.Left)
						{
							this.OnCellClick(new DataGridViewCellEventArgs(hitTestInfo.col, hitTestInfo.row));
						}
						base.OnMouseClick(e);
						flag = true;
						if (dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
						{
							this.OnCellMouseClick(dataGridViewCellMouseEventArgs);
						}
					}
					else
					{
						base.OnMouseClick(e);
						flag = true;
					}
					if (!this.dataGridViewOper[32])
					{
						DataGridView.DataGridViewHitTestTypeInternal typeInternal = hitTestInfo.typeInternal;
						if (typeInternal <= DataGridView.DataGridViewHitTestTypeInternal.RowHeader)
						{
							if (typeInternal != DataGridView.DataGridViewHitTestTypeInternal.ColumnHeader)
							{
								if (typeInternal != DataGridView.DataGridViewHitTestTypeInternal.RowHeader)
								{
									goto IL_2A7;
								}
								if (dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
								{
									this.OnRowHeaderMouseClick(dataGridViewCellMouseEventArgs);
									goto IL_2A7;
								}
								goto IL_2A7;
							}
						}
						else if (typeInternal != DataGridView.DataGridViewHitTestTypeInternal.FirstColumnHeaderLeft && typeInternal - DataGridView.DataGridViewHitTestTypeInternal.ColumnHeaderLeft > 1)
						{
							goto IL_2A7;
						}
						if (dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
						{
							this.OnColumnHeaderMouseClick(dataGridViewCellMouseEventArgs);
						}
					}
				}
			}
			IL_2A7:
			if (!flag)
			{
				base.OnMouseClick(e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseDoubleClick" /> event.</summary>
		/// <param name="e">An <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
		// Token: 0x06001BC3 RID: 7107 RVA: 0x0007379C File Offset: 0x0007199C
		protected override void OnMouseDoubleClick(MouseEventArgs e)
		{
			base.OnMouseDoubleClick(e);
			if (!this.dataGridViewState2[134217728] && !this.dataGridViewOper[1] && !this.dataGridViewOper[2] && !this.dataGridViewOper[128] && !this.dataGridViewOper[256])
			{
				DataGridView.HitTestInfo hitTestInfo = this.HitTest(e.X, e.Y);
				if (this.ptMouseDownCell.X == hitTestInfo.col && this.ptMouseDownCell.Y == hitTestInfo.row)
				{
					DataGridViewCellMouseEventArgs dataGridViewCellMouseEventArgs = null;
					if (hitTestInfo.Type != DataGridViewHitTestType.None && hitTestInfo.Type != DataGridViewHitTestType.HorizontalScrollBar && hitTestInfo.Type != DataGridViewHitTestType.VerticalScrollBar)
					{
						int num = e.X - hitTestInfo.ColumnX;
						if (this.RightToLeftInternal)
						{
							num += ((hitTestInfo.col == -1) ? this.RowHeadersWidth : this.Columns[hitTestInfo.col].Thickness);
						}
						dataGridViewCellMouseEventArgs = new DataGridViewCellMouseEventArgs(hitTestInfo.col, hitTestInfo.row, num, e.Y - hitTestInfo.RowY, e);
						this.OnCellMouseDoubleClick(dataGridViewCellMouseEventArgs);
					}
					if (!this.dataGridViewOper[32])
					{
						switch (hitTestInfo.typeInternal)
						{
						case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeader:
						case DataGridView.DataGridViewHitTestTypeInternal.FirstColumnHeaderLeft:
						case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeaderLeft:
						case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeaderRight:
							if (dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
							{
								this.OnColumnHeaderMouseDoubleClick(dataGridViewCellMouseEventArgs);
								return;
							}
							break;
						case DataGridView.DataGridViewHitTestTypeInternal.RowHeader:
							if (dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
							{
								this.OnRowHeaderMouseDoubleClick(dataGridViewCellMouseEventArgs);
								return;
							}
							break;
						case DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeLeft:
						case DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeRight:
						{
							int num2 = ((hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeRight) ? hitTestInfo.col : hitTestInfo.adjacentCol);
							if (num2 < this.Columns.Count)
							{
								HandledMouseEventArgs handledMouseEventArgs = new HandledMouseEventArgs(e.Button, e.Clicks, e.X, e.Y, e.Delta, false);
								DataGridViewColumnDividerDoubleClickEventArgs dataGridViewColumnDividerDoubleClickEventArgs = new DataGridViewColumnDividerDoubleClickEventArgs(num2, handledMouseEventArgs);
								this.OnColumnDividerDoubleClick(dataGridViewColumnDividerDoubleClickEventArgs);
								return;
							}
							break;
						}
						case DataGridView.DataGridViewHitTestTypeInternal.RowResizeTop:
						case DataGridView.DataGridViewHitTestTypeInternal.RowResizeBottom:
						{
							int num3 = ((hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.RowResizeBottom) ? hitTestInfo.row : hitTestInfo.adjacentRow);
							if (num3 < this.Rows.Count)
							{
								HandledMouseEventArgs handledMouseEventArgs2 = new HandledMouseEventArgs(e.Button, e.Clicks, e.X, e.Y, e.Delta, false);
								DataGridViewRowDividerDoubleClickEventArgs dataGridViewRowDividerDoubleClickEventArgs = new DataGridViewRowDividerDoubleClickEventArgs(num3, handledMouseEventArgs2);
								this.OnRowDividerDoubleClick(dataGridViewRowDividerDoubleClickEventArgs);
								return;
							}
							break;
						}
						case DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeader:
							break;
						case DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeLeft:
						case DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeRight:
						case DataGridView.DataGridViewHitTestTypeInternal.RowHeadersResizeRight:
						case DataGridView.DataGridViewHitTestTypeInternal.RowHeadersResizeLeft:
						{
							HandledMouseEventArgs handledMouseEventArgs3 = new HandledMouseEventArgs(e.Button, e.Clicks, e.X, e.Y, e.Delta, false);
							DataGridViewColumnDividerDoubleClickEventArgs dataGridViewColumnDividerDoubleClickEventArgs2 = new DataGridViewColumnDividerDoubleClickEventArgs(-1, handledMouseEventArgs3);
							this.OnColumnDividerDoubleClick(dataGridViewColumnDividerDoubleClickEventArgs2);
							break;
						}
						case DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeTop:
						case DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeBottom:
						case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeadersResizeBottom:
						case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeadersResizeTop:
						{
							HandledMouseEventArgs handledMouseEventArgs4 = new HandledMouseEventArgs(e.Button, e.Clicks, e.X, e.Y, e.Delta, false);
							DataGridViewRowDividerDoubleClickEventArgs dataGridViewRowDividerDoubleClickEventArgs2 = new DataGridViewRowDividerDoubleClickEventArgs(-1, handledMouseEventArgs4);
							this.OnRowDividerDoubleClick(dataGridViewRowDividerDoubleClickEventArgs2);
							return;
						}
						default:
							return;
						}
					}
				}
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseDown" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.Exception">The control is configured to enter edit mode when it receives focus, but initialization of the editing cell value failed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. The exception object can typically be cast to type <see cref="T:System.FormatException" />.</exception>
		// Token: 0x06001BC4 RID: 7108 RVA: 0x00073AE0 File Offset: 0x00071CE0
		protected override void OnMouseDown(MouseEventArgs e)
		{
			if (!this.dataGridViewState2[134217728])
			{
				this.dataGridViewOper[512] = true;
			}
			base.OnMouseDown(e);
			if (this.dataGridViewState2[134217728])
			{
				return;
			}
			if (this.ptMouseDownCell.X != -2)
			{
				return;
			}
			DataGridView.HitTestInfo hitTestInfo = this.HitTest(e.X, e.Y);
			if (hitTestInfo.Type != DataGridViewHitTestType.None && hitTestInfo.Type != DataGridViewHitTestType.HorizontalScrollBar && hitTestInfo.Type != DataGridViewHitTestType.VerticalScrollBar)
			{
				this.ptMouseDownCell.X = hitTestInfo.col;
				this.ptMouseDownCell.Y = hitTestInfo.row;
				this.ptMouseDownGridCoord = new Point(e.X, e.Y);
				int num = e.X - hitTestInfo.ColumnX;
				if (this.RightToLeftInternal)
				{
					num += ((hitTestInfo.col == -1) ? this.RowHeadersWidth : this.Columns[hitTestInfo.col].Thickness);
				}
				DataGridViewCellMouseEventArgs dataGridViewCellMouseEventArgs = new DataGridViewCellMouseEventArgs(hitTestInfo.col, hitTestInfo.row, num, e.Y - hitTestInfo.RowY, e);
				this.OnCellMouseDown(dataGridViewCellMouseEventArgs);
			}
		}

		/// <summary>Raises the <see cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001BC5 RID: 7109 RVA: 0x00073C14 File Offset: 0x00071E14
		protected override void OnMouseEnter(EventArgs e)
		{
			if (!this.dataGridViewState2[8] && !this.dataGridViewState2[16] && this.dataGridViewState2[32] && !this.toolTipControl.Activated)
			{
				base.OnMouseEnter(e);
			}
			this.dataGridViewState2[8] = false;
			this.dataGridViewState2[16] = false;
			this.dataGridViewState2[32] = false;
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseLeave" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001BC6 RID: 7110 RVA: 0x00073C8C File Offset: 0x00071E8C
		protected override void OnMouseLeave(EventArgs e)
		{
			if (this.dataGridViewState1[16777216])
			{
				this.dataGridViewState1[16777216] = false;
				this.CursorInternal = this.oldCursor;
			}
			bool mouseOverEditingControl = this.MouseOverEditingControl;
			bool mouseOverEditingPanel = this.MouseOverEditingPanel;
			bool flag = this.toolTipControl.Activated && base.ClientRectangle.Contains(base.PointToClient(Control.MousePosition));
			if (!mouseOverEditingPanel && !mouseOverEditingControl && !flag && this.ptMouseEnteredCell.X != -2)
			{
				if (this.ptMouseEnteredCell.X >= -1 && this.ptMouseEnteredCell.X < this.Columns.Count && this.ptMouseEnteredCell.Y >= -1 && this.ptMouseEnteredCell.Y < this.Rows.Count)
				{
					DataGridViewCellEventArgs dataGridViewCellEventArgs = new DataGridViewCellEventArgs(this.ptMouseEnteredCell.X, this.ptMouseEnteredCell.Y);
					this.OnCellMouseLeave(dataGridViewCellEventArgs);
				}
				else
				{
					this.ptMouseEnteredCell.X = (this.ptMouseEnteredCell.Y = -2);
				}
			}
			this.ResetTrackingState();
			this.dataGridViewOper[512] = false;
			if (!mouseOverEditingPanel && !mouseOverEditingControl && !flag && !this.MouseOverScrollBar)
			{
				this.toolTipControl.Activate(false);
				base.OnMouseLeave(e);
				this.dataGridViewState2[32] = true;
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseMove" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
		// Token: 0x06001BC7 RID: 7111 RVA: 0x00073E00 File Offset: 0x00072000
		protected override void OnMouseMove(MouseEventArgs e)
		{
			base.OnMouseMove(e);
			DataGridView.HitTestInfo hitTestInfo = this.HitTest(e.X, e.Y);
			this.UpdateMouseEnteredCell(hitTestInfo, e);
			if (this.dataGridViewOper[1])
			{
				this.MoveRowHeadersOrColumnResize(e.X);
			}
			else if (this.dataGridViewOper[2])
			{
				this.MoveColumnHeadersOrRowResize(e);
			}
			else if (this.dataGridViewOper[32])
			{
				this.MoveColumnRelocation(e, hitTestInfo);
			}
			else if (this.dataGridViewOper[128])
			{
				this.MoveColumnHeadersOrRowResize(e);
			}
			else if (this.dataGridViewOper[256])
			{
				this.MoveRowHeadersOrColumnResize(e.X);
			}
			if (this.dataGridViewOper[1] || this.dataGridViewOper[256] || ((hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeLeft || hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeLeft || hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeRight || hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeRight || hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.RowHeadersResizeLeft || hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.RowHeadersResizeRight) && !this.dataGridViewOper[128] && !this.dataGridViewOper[32] && !this.dataGridViewOper[4] && !this.dataGridViewOper[8] && !this.dataGridViewOper[16]))
			{
				if (!this.dataGridViewState1[16777216])
				{
					this.dataGridViewState1[16777216] = true;
					this.oldCursor = this.Cursor;
				}
				this.CursorInternal = Cursors.SizeWE;
				return;
			}
			if (this.dataGridViewOper[2] || this.dataGridViewOper[128] || ((hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.RowResizeBottom || hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeTop || hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeBottom || hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.RowResizeTop || hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnHeadersResizeTop || hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnHeadersResizeBottom) && !this.dataGridViewOper[256] && !this.dataGridViewOper[32] && !this.dataGridViewOper[4] && !this.dataGridViewOper[8] && !this.dataGridViewOper[16]))
			{
				if (!this.dataGridViewState1[16777216])
				{
					this.dataGridViewState1[16777216] = true;
					this.oldCursor = this.Cursor;
				}
				this.CursorInternal = Cursors.SizeNS;
				return;
			}
			if (this.dataGridViewState1[16777216])
			{
				this.dataGridViewState1[16777216] = false;
				this.CursorInternal = this.oldCursor;
			}
			if (this.dataGridViewOper[4] || this.dataGridViewOper[8] || this.dataGridViewOper[16])
			{
				int x = e.X;
				int y = e.Y;
				int num;
				int num2;
				if (this.GetOutOfBoundCorrectedHitTestInfo(ref hitTestInfo, ref x, ref y, out num, out num2))
				{
					if (num == 0)
					{
						if (this.horizScrollTimer != null && this.horizScrollTimer.Enabled)
						{
							this.horizScrollTimer.Enabled = false;
						}
					}
					else if (this.horizScrollTimer == null || !this.horizScrollTimer.Enabled)
					{
						this.HorizScrollTimer.Interval = DataGridView.GetColumnScrollRate(Math.Abs(num));
						this.HorizScrollTimer.Enabled = true;
					}
					if (num2 == 0)
					{
						if (this.vertScrollTimer != null && this.vertScrollTimer.Enabled)
						{
							this.vertScrollTimer.Enabled = false;
						}
					}
					else if (this.vertScrollTimer == null || !this.vertScrollTimer.Enabled)
					{
						this.VertScrollTimer.Interval = DataGridView.GetRowScrollRate(Math.Abs(num2));
						this.VertScrollTimer.Enabled = true;
					}
					if (this.HorizScrollTimer.Enabled || this.VertScrollTimer.Enabled)
					{
						return;
					}
					if (hitTestInfo.Type != DataGridViewHitTestType.None && hitTestInfo.Type != DataGridViewHitTestType.HorizontalScrollBar && hitTestInfo.Type != DataGridViewHitTestType.VerticalScrollBar)
					{
						if (this.dataGridViewOper[4] && hitTestInfo.col >= 0)
						{
							this.OnColumnSelectMouseMove(hitTestInfo);
						}
						else if (this.dataGridViewOper[8] && hitTestInfo.row >= 0)
						{
							this.OnRowSelectMouseMove(hitTestInfo);
						}
						else if (this.dataGridViewOper[16] && hitTestInfo.col >= 0 && hitTestInfo.row >= 0)
						{
							this.OnCellSelectMouseMove(hitTestInfo);
						}
					}
				}
			}
			if (!this.toolTipControl.Activated)
			{
				this.ptToolTipCell = new Point(-1, -1);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseUp" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
		// Token: 0x06001BC8 RID: 7112 RVA: 0x0007427C File Offset: 0x0007247C
		protected override void OnMouseUp(MouseEventArgs e)
		{
			if (!this.dataGridViewState2[134217728])
			{
				this.dataGridViewState1[2048] = false;
				DataGridView.HitTestInfo hitTestInfo = this.HitTest(e.X, e.Y);
				if (!this.IsMouseOperationActive())
				{
					if (hitTestInfo.Type != DataGridViewHitTestType.None && hitTestInfo.Type != DataGridViewHitTestType.HorizontalScrollBar && hitTestInfo.Type != DataGridViewHitTestType.VerticalScrollBar)
					{
						int num = e.X - hitTestInfo.ColumnX;
						if (this.RightToLeftInternal)
						{
							num += ((hitTestInfo.col == -1) ? this.RowHeadersWidth : this.Columns[hitTestInfo.col].Thickness);
						}
						DataGridViewCellMouseEventArgs dataGridViewCellMouseEventArgs;
						if (this.dataGridViewState2[8388608])
						{
							MouseEventArgs mouseEventArgs = new MouseEventArgs(e.Button, 2, e.X, e.Y, e.Delta);
							dataGridViewCellMouseEventArgs = new DataGridViewCellMouseEventArgs(hitTestInfo.col, hitTestInfo.row, num, e.Y - hitTestInfo.RowY, mouseEventArgs);
						}
						else
						{
							dataGridViewCellMouseEventArgs = new DataGridViewCellMouseEventArgs(hitTestInfo.col, hitTestInfo.row, num, e.Y - hitTestInfo.RowY, e);
						}
						if (hitTestInfo.col >= 0 && this.ptMouseDownCell.X == hitTestInfo.col && hitTestInfo.row >= 0 && this.ptMouseDownCell.Y == hitTestInfo.row && this.EditMode == DataGridViewEditMode.EditOnEnter && this.editingControl != null)
						{
							this.OnClick(e);
							this.OnMouseClick(e);
						}
						this.CorrectFocus(true);
						if (dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
						{
							this.OnCellMouseUp(dataGridViewCellMouseEventArgs);
						}
					}
					else if (hitTestInfo.Type == DataGridViewHitTestType.None)
					{
						this.CorrectFocus(true);
					}
				}
				else
				{
					if (this.dataGridViewOper[1])
					{
						this.EndColumnResize(e);
					}
					if (this.dataGridViewOper[2])
					{
						this.EndRowResize(e);
					}
					if (this.dataGridViewOper[32])
					{
						this.EndColumnRelocation(e, hitTestInfo);
					}
					if (this.dataGridViewOper[128])
					{
						this.EndColumnHeadersResize(e);
					}
					if (this.dataGridViewOper[256])
					{
						this.EndRowHeadersResize(e);
					}
					this.CorrectFocus(true);
					hitTestInfo = this.HitTest(e.X, e.Y);
					if (hitTestInfo.Type != DataGridViewHitTestType.None && hitTestInfo.Type != DataGridViewHitTestType.HorizontalScrollBar && hitTestInfo.Type != DataGridViewHitTestType.VerticalScrollBar)
					{
						int num2 = e.X - hitTestInfo.ColumnX;
						if (this.RightToLeftInternal)
						{
							num2 += ((hitTestInfo.col == -1) ? this.RowHeadersWidth : this.Columns[hitTestInfo.col].Thickness);
						}
						this.OnCellMouseUp(new DataGridViewCellMouseEventArgs(hitTestInfo.col, hitTestInfo.row, num2, e.Y - hitTestInfo.RowY, e));
					}
				}
				this.ResetTrackingState();
			}
			base.OnMouseUp(e);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseWheel" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
		// Token: 0x06001BC9 RID: 7113 RVA: 0x00074570 File Offset: 0x00072770
		protected override void OnMouseWheel(MouseEventArgs e)
		{
			base.OnMouseWheel(e);
			HandledMouseEventArgs handledMouseEventArgs = e as HandledMouseEventArgs;
			if (handledMouseEventArgs != null && handledMouseEventArgs.Handled)
			{
				return;
			}
			if ((Control.ModifierKeys & (Keys.Shift | Keys.Alt)) != Keys.None || Control.MouseButtons != MouseButtons.None)
			{
				return;
			}
			bool flag = (Control.ModifierKeys & Keys.Control) == Keys.None;
			ScrollBar scrollBar = (flag ? this.vertScrollBar : this.horizScrollBar);
			if (!scrollBar.Visible || !scrollBar.Enabled)
			{
				return;
			}
			if (handledMouseEventArgs != null)
			{
				handledMouseEventArgs.Handled = true;
			}
			int mouseWheelScrollLines = SystemInformation.MouseWheelScrollLines;
			if (mouseWheelScrollLines == 0)
			{
				return;
			}
			float num;
			if (flag)
			{
				this.cumulativeVerticalWheelDelta += e.Delta;
				num = (float)this.cumulativeVerticalWheelDelta / 120f;
			}
			else
			{
				this.cumulativeHorizontalWheelDelta += e.Delta;
				num = (float)this.cumulativeHorizontalWheelDelta / 120f;
			}
			int num2 = (int)num;
			if (mouseWheelScrollLines == -1)
			{
				if (num2 != 0)
				{
					if (this.ptCurrentCell.X >= 0 && !this.CommitEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Scroll, false, false))
					{
						return;
					}
					if (flag)
					{
						int num3 = this.VerticalOffset;
						this.VerticalOffset -= num2 * this.vertScrollBar.LargeChange;
						if (Math.Abs(this.VerticalOffset - num3) >= Math.Abs(num2 * this.vertScrollBar.LargeChange))
						{
							this.cumulativeVerticalWheelDelta -= num2 * 120;
							return;
						}
						this.cumulativeVerticalWheelDelta = 0;
						return;
					}
					else
					{
						int num4 = this.HorizontalOffset;
						this.HorizontalOffset -= num2 * this.horizScrollBar.LargeChange;
						if (Math.Abs(this.HorizontalOffset - num4) >= Math.Abs(num2 * this.horizScrollBar.LargeChange))
						{
							this.cumulativeHorizontalWheelDelta -= num2 * 120;
							return;
						}
						this.cumulativeHorizontalWheelDelta = 0;
						return;
					}
				}
			}
			else
			{
				int num5 = (int)((float)mouseWheelScrollLines * num);
				if (num5 != 0)
				{
					if (this.ptCurrentCell.X >= 0 && !this.CommitEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Scroll, false, false))
					{
						return;
					}
					if (flag)
					{
						if (num5 > 0)
						{
							int num6 = num5;
							while (this.vertScrollBar.Value != this.vertScrollBar.Minimum && num6 > 0)
							{
								this.ScrollRowsByCount(-1, ScrollEventType.SmallDecrement);
								num6--;
							}
							if (this.vertScrollBar.Value == this.vertScrollBar.Minimum)
							{
								this.cumulativeVerticalWheelDelta = 0;
								return;
							}
							this.cumulativeVerticalWheelDelta -= (int)((float)num5 * (120f / (float)mouseWheelScrollLines));
							return;
						}
						else
						{
							int num6 = -num5;
							int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
							while (num6 > 0 && this.vertScrollBar.Value + this.Rows.SharedRow(this.displayedBandsInfo.FirstDisplayedScrollingRow).GetHeight(this.displayedBandsInfo.FirstDisplayedScrollingRow) <= this.vertScrollBar.Maximum - this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight))
							{
								this.ScrollRowsByCount(1, ScrollEventType.SmallIncrement);
								num6--;
							}
							if (this.vertScrollBar.Value + this.Rows.SharedRow(this.displayedBandsInfo.FirstDisplayedScrollingRow).GetHeight(this.displayedBandsInfo.FirstDisplayedScrollingRow) > this.vertScrollBar.Maximum - this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight))
							{
								this.cumulativeVerticalWheelDelta = 0;
								return;
							}
							this.cumulativeVerticalWheelDelta -= (int)((float)num5 * (120f / (float)mouseWheelScrollLines));
							return;
						}
					}
					else
					{
						int num7;
						int num8;
						if (num5 > 0)
						{
							num7 = this.horizScrollBar.Minimum;
							num8 = -1;
						}
						else
						{
							num7 = this.horizScrollBar.Maximum;
							num8 = 1;
						}
						int num6 = Math.Abs(num5);
						while (this.horizScrollBar.Value != num7 && num6 > 0)
						{
							this.ScrollColumns(num8);
							num6--;
						}
						if (this.horizScrollBar.Value == num7)
						{
							this.cumulativeHorizontalWheelDelta = 0;
							return;
						}
						this.cumulativeHorizontalWheelDelta -= (int)((float)num5 * (120f / (float)mouseWheelScrollLines));
					}
				}
			}
		}

		// Token: 0x06001BCA RID: 7114 RVA: 0x00047E32 File Offset: 0x00046032
		internal void OnMouseWheelInternal(MouseEventArgs e)
		{
			this.OnMouseWheel(e);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.MultiSelectChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001BCB RID: 7115 RVA: 0x00074938 File Offset: 0x00072B38
		protected virtual void OnMultiSelectChanged(EventArgs e)
		{
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWMULTISELECTCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.NewRowNeeded" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentException">The row indicated by the <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x06001BCC RID: 7116 RVA: 0x00074980 File Offset: 0x00072B80
		protected virtual void OnNewRowNeeded(DataGridViewRowEventArgs e)
		{
			if (e.Row.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
			}
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWNEWROWNEEDED] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.Paint" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.Exception">Any exceptions that occur during this method are ignored unless they are one of the following:  
		///
		/// <see cref="T:System.NullReferenceException" /><see cref="T:System.StackOverflowException" /><see cref="T:System.OutOfMemoryException" /><see cref="T:System.Threading.ThreadAbortException" /><see cref="T:System.ExecutionEngineException" /><see cref="T:System.IndexOutOfRangeException" /><see cref="T:System.AccessViolationException" /></exception>
		// Token: 0x06001BCD RID: 7117 RVA: 0x000749EC File Offset: 0x00072BEC
		protected override void OnPaint(PaintEventArgs e)
		{
			try
			{
				if (!this.dataGridViewOper[1048576] && !base.IsDisposed)
				{
					if (this.layout.dirty)
					{
						this.PerformLayoutPrivate(false, true, false, false);
					}
					Graphics graphics = e.Graphics;
					Rectangle rectangle = e.ClipRectangle;
					Rectangle gridRectangle = this.GetGridRectangle();
					if (this.currentRowSplitBar != -1)
					{
						rectangle = Rectangle.Union(rectangle, this.CalcRowResizeFeedbackRect(this.currentRowSplitBar));
					}
					else if (this.currentColSplitBar != -1)
					{
						rectangle = Rectangle.Union(rectangle, this.CalcColResizeFeedbackRect(this.currentColSplitBar));
					}
					if (rectangle.IntersectsWith(gridRectangle))
					{
						using (Region clip = graphics.Clip)
						{
							graphics.SetClip(gridRectangle);
							this.PaintBackground(graphics, rectangle, gridRectangle);
							this.PaintGrid(graphics, gridRectangle, rectangle, this.SingleVerticalBorderAdded, this.SingleHorizontalBorderAdded);
							graphics.Clip = clip;
						}
					}
					this.PaintBorder(graphics, rectangle, this.layout.ClientRectangle);
					if (rectangle.IntersectsWith(this.layout.ResizeBoxRect))
					{
						graphics.FillRectangle(SystemBrushes.Control, this.layout.ResizeBoxRect);
					}
					if (this.Focused && this.IsGridFocusRectangleEnabled())
					{
						if (SystemInformation.HighContrast)
						{
							ControlPaint.DrawHighContrastFocusRectangle(graphics, this.GetGridFocusRectangle(), SystemColors.ActiveCaptionText);
						}
						else
						{
							ControlPaint.DrawFocusRectangle(graphics, this.GetGridFocusRectangle());
						}
					}
					base.OnPaint(e);
				}
			}
			catch (Exception ex)
			{
				if (ClientUtils.IsCriticalException(ex))
				{
					throw;
				}
			}
		}

		// Token: 0x06001BCE RID: 7118 RVA: 0x00074B88 File Offset: 0x00072D88
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private bool IsGridFocusRectangleEnabled()
		{
			return this.ShowFocusCues && this.CurrentCell == null && AccessibilityImprovements.Level2;
		}

		// Token: 0x06001BCF RID: 7119 RVA: 0x00074BA4 File Offset: 0x00072DA4
		private Rectangle GetGridRectangle()
		{
			Rectangle rectangle = this.layout.Data;
			if (this.layout.RowHeadersVisible)
			{
				rectangle = Rectangle.Union(rectangle, this.layout.RowHeaders);
			}
			else if (this.SingleVerticalBorderAdded)
			{
				int num;
				if (!this.RightToLeftInternal)
				{
					num = rectangle.X;
					rectangle.X = num - 1;
				}
				num = rectangle.Width;
				rectangle.Width = num + 1;
			}
			if (this.layout.ColumnHeadersVisible)
			{
				rectangle = Rectangle.Union(rectangle, this.layout.ColumnHeaders);
			}
			else if (this.SingleHorizontalBorderAdded && rectangle.Y == this.layout.Data.Y)
			{
				int num = rectangle.Y;
				rectangle.Y = num - 1;
				num = rectangle.Height;
				rectangle.Height = num + 1;
			}
			return rectangle;
		}

		// Token: 0x06001BD0 RID: 7120 RVA: 0x00074C78 File Offset: 0x00072E78
		private Rectangle GetGridFocusRectangle()
		{
			Rectangle gridRectangle = this.GetGridRectangle();
			gridRectangle.Inflate(-1, -1);
			return gridRectangle;
		}

		// Token: 0x06001BD1 RID: 7121 RVA: 0x00074C98 File Offset: 0x00072E98
		private void InvalidateGridFocusOnScroll(int change, ScrollOrientation orientation)
		{
			if (change == 0)
			{
				return;
			}
			Rectangle gridFocusRectangle = this.GetGridFocusRectangle();
			if (orientation == ScrollOrientation.HorizontalScroll)
			{
				if (change > 0)
				{
					gridFocusRectangle.Width -= change;
				}
				else
				{
					gridFocusRectangle.X -= change;
					gridFocusRectangle.Width += change;
				}
			}
			else if (change > 0)
			{
				gridFocusRectangle.Height -= change;
			}
			else
			{
				gridFocusRectangle.Y -= change;
				gridFocusRectangle.Height += change;
			}
			this.InvalidateRectangleEdges(gridFocusRectangle);
		}

		// Token: 0x06001BD2 RID: 7122 RVA: 0x00074D24 File Offset: 0x00072F24
		private void InvalidateRectangleEdges(Rectangle rect)
		{
			Rectangle rectangle = rect;
			rectangle.Width = 1;
			base.Invalidate(rectangle);
			rectangle.X += rect.Width - 1;
			base.Invalidate(rectangle);
			rectangle = rect;
			rectangle.Height = 1;
			base.Invalidate(rectangle);
			rectangle.Y += rect.Height - 1;
			base.Invalidate(rectangle);
		}

		// Token: 0x06001BD3 RID: 7123 RVA: 0x00074D8F File Offset: 0x00072F8F
		internal override void OnParentBecameInvisible()
		{
			base.OnParentBecameInvisible();
			if (base.GetState(2))
			{
				this.OnVisibleChangedPrivate();
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ReadOnlyChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.InvalidCastException">The control changed from read-only to read/write, enabling the current cell to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		// Token: 0x06001BD4 RID: 7124 RVA: 0x00074DA8 File Offset: 0x00072FA8
		protected virtual void OnReadOnlyChanged(EventArgs e)
		{
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWREADONLYCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
			base.VerifyImeRestrictedModeChanged();
			if (!this.ReadOnly && this.ptCurrentCell.X != -1 && this.ColumnEditable(this.ptCurrentCell.X) && !this.IsCurrentCellInEditMode && (this.EditMode == DataGridViewEditMode.EditOnEnter || (this.EditMode != DataGridViewEditMode.EditProgrammatically && this.CurrentCellInternal.EditType == null)) && !this.Rows[this.ptCurrentCell.Y].Cells[this.ptCurrentCell.X].ReadOnly)
			{
				this.BeginEditInternal(true);
			}
		}

		// Token: 0x06001BD5 RID: 7125 RVA: 0x00074E88 File Offset: 0x00073088
		internal void OnRemovedColumn_PreNotification(DataGridViewColumn dataGridViewColumn)
		{
			if (dataGridViewColumn.HasHeaderCell)
			{
				dataGridViewColumn.HeaderCell.SortGlyphDirectionInternal = SortOrder.None;
			}
			this.CorrectColumnIndexesAfterDeletion(dataGridViewColumn);
			this.CorrectColumnDisplayIndexesAfterDeletion(dataGridViewColumn);
			this.displayedBandsInfo.CorrectRowIndexAfterDeletion(dataGridViewColumn.Index);
			this.OnColumnRemoved(dataGridViewColumn);
		}

		// Token: 0x06001BD6 RID: 7126 RVA: 0x00074EC4 File Offset: 0x000730C4
		internal void OnRemovedColumn_PostNotification(DataGridViewColumn dataGridViewColumn, Point newCurrentCell)
		{
			if (newCurrentCell.X != -1)
			{
				bool flag = this.SetAndSelectCurrentCellAddress(newCurrentCell.X, newCurrentCell.Y, true, false, false, false, false);
			}
			this.FlushSelectionChanged();
			this.OnColumnHidden(dataGridViewColumn);
			DataGridViewAutoSizeColumnMode inheritedAutoSizeMode = dataGridViewColumn.GetInheritedAutoSizeMode(this);
			if (inheritedAutoSizeMode != DataGridViewAutoSizeColumnMode.None && inheritedAutoSizeMode != DataGridViewAutoSizeColumnMode.Fill && dataGridViewColumn.ThicknessInternal != dataGridViewColumn.CachedThickness)
			{
				dataGridViewColumn.ThicknessInternal = Math.Max(dataGridViewColumn.MinimumWidth, dataGridViewColumn.CachedThickness);
			}
			this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
		}

		// Token: 0x06001BD7 RID: 7127 RVA: 0x00074F46 File Offset: 0x00073146
		internal void OnRemovedRow_PreNotification(int rowIndexDeleted)
		{
			this.displayedBandsInfo.CorrectRowIndexAfterDeletion(rowIndexDeleted);
			this.CorrectRowIndexesAfterDeletion(rowIndexDeleted);
			this.ComputeVisibleRows();
		}

		// Token: 0x06001BD8 RID: 7128 RVA: 0x00074F64 File Offset: 0x00073164
		internal void OnRemovedRow_PostNotification(DataGridViewRow dataGridViewRow, Point newCurrentCell)
		{
			if (newCurrentCell.Y != -1)
			{
				bool flag = this.SetAndSelectCurrentCellAddress(newCurrentCell.X, newCurrentCell.Y, true, false, false, false, false);
			}
			this.FlushSelectionChanged();
			bool flag2 = dataGridViewRow.DataGridView == null && dataGridViewRow.Displayed;
			if (flag2)
			{
				dataGridViewRow.DisplayedInternal = false;
				DataGridViewRowStateChangedEventArgs dataGridViewRowStateChangedEventArgs = new DataGridViewRowStateChangedEventArgs(dataGridViewRow, DataGridViewElementStates.Displayed);
				this.OnRowStateChanged(-1, dataGridViewRowStateChangedEventArgs);
			}
			if (this.autoSizeRowsMode != DataGridViewAutoSizeRowsMode.None && dataGridViewRow.ThicknessInternal != dataGridViewRow.CachedThickness)
			{
				dataGridViewRow.ThicknessInternal = Math.Max(dataGridViewRow.MinimumHeight, dataGridViewRow.CachedThickness);
			}
			DataGridViewAutoSizeColumnCriteriaInternal dataGridViewAutoSizeColumnCriteriaInternal = DataGridViewAutoSizeColumnCriteriaInternal.AllRows;
			if (flag2)
			{
				dataGridViewAutoSizeColumnCriteriaInternal |= DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows;
			}
			bool flag3 = this.AutoResizeAllVisibleColumnsInternal(dataGridViewAutoSizeColumnCriteriaInternal, true);
			bool flag4 = this.ColumnHeadersHeightSizeMode != DataGridViewColumnHeadersHeightSizeMode.AutoSize;
			bool flag5 = this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing || this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.DisableResizing;
			if (flag5 && !flag3)
			{
				flag4 = true;
			}
			if (!flag4)
			{
				this.AutoResizeColumnHeadersHeight(flag5, true);
			}
			if (!flag5)
			{
				this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, true);
			}
			if (!flag4 && !flag5)
			{
				this.AutoResizeColumnHeadersHeight(true, true);
			}
		}

		// Token: 0x06001BD9 RID: 7129 RVA: 0x00075064 File Offset: 0x00073264
		internal void OnRemovingColumn(DataGridViewColumn dataGridViewColumn, out Point newCurrentCell, bool force)
		{
			this.dataGridViewState1[4194304] = false;
			int index = dataGridViewColumn.Index;
			if (this.ptCurrentCell.X != -1)
			{
				int num = this.ptCurrentCell.X;
				if (index == this.ptCurrentCell.X)
				{
					DataGridViewColumn nextColumn = this.Columns.GetNextColumn(this.Columns[index], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					if (nextColumn != null)
					{
						if (nextColumn.Index > index)
						{
							num = nextColumn.Index - 1;
						}
						else
						{
							num = nextColumn.Index;
						}
					}
					else
					{
						DataGridViewColumn previousColumn = this.Columns.GetPreviousColumn(this.Columns[index], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
						if (previousColumn != null)
						{
							if (previousColumn.Index > index)
							{
								num = previousColumn.Index - 1;
							}
							else
							{
								num = previousColumn.Index;
							}
						}
						else
						{
							num = -1;
						}
					}
				}
				else if (index < this.ptCurrentCell.X)
				{
					num = this.ptCurrentCell.X - 1;
				}
				newCurrentCell = new Point(num, (num == -1) ? (-1) : this.ptCurrentCell.Y);
				if (index == this.ptCurrentCell.X)
				{
					bool flag = this.SetCurrentCellAddressCore(-1, -1, true, false, false);
				}
				else if (force)
				{
					this.dataGridViewState1[4194304] = true;
					bool flag2 = this.SetCurrentCellAddressCore(-1, -1, true, false, false);
				}
				else
				{
					this.ResetCurrentCell();
				}
			}
			else
			{
				newCurrentCell = new Point(-1, -1);
			}
			if (this.Columns.Count == 1)
			{
				this.Rows.ClearInternal(false);
			}
			int num2 = this.Columns.Count - 1;
			for (int i = 0; i < this.Rows.Count; i++)
			{
				DataGridViewRow dataGridViewRow = this.Rows.SharedRow(i);
				if (dataGridViewRow.Cells.Count > num2)
				{
					dataGridViewRow.Cells.RemoveAtInternal(index);
				}
			}
			if (dataGridViewColumn.HasHeaderCell)
			{
				dataGridViewColumn.HeaderCell.DataGridViewInternal = null;
			}
			if (dataGridViewColumn == this.sortedColumn)
			{
				this.sortedColumn = null;
				this.sortOrder = SortOrder.None;
				if (dataGridViewColumn.IsDataBound)
				{
					for (int j = 0; j < this.Columns.Count; j++)
					{
						if (dataGridViewColumn != this.Columns[j] && this.Columns[j].SortMode != DataGridViewColumnSortMode.NotSortable && string.Compare(dataGridViewColumn.DataPropertyName, this.Columns[j].DataPropertyName, true, CultureInfo.InvariantCulture) == 0)
						{
							this.sortedColumn = this.Columns[j];
							this.sortOrder = this.Columns[j].HeaderCell.SortGlyphDirection;
							break;
						}
					}
				}
			}
			if (dataGridViewColumn.Visible && !dataGridViewColumn.Frozen && this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0)
			{
				if (this.displayedBandsInfo.FirstDisplayedScrollingCol == dataGridViewColumn.Index)
				{
					this.horizontalOffset -= this.negOffset;
					this.negOffset = 0;
				}
				else if (this.Columns.DisplayInOrder(this.displayedBandsInfo.FirstDisplayedScrollingCol, dataGridViewColumn.Index))
				{
					if (this.horizScrollBar.Enabled)
					{
						int num3 = this.horizScrollBar.Maximum - this.horizScrollBar.LargeChange - dataGridViewColumn.Thickness;
						if (num3 >= 0 && num3 < this.horizScrollBar.Value)
						{
							this.horizontalOffset = num3;
							this.negOffset = this.GetNegOffsetFromHorizontalOffset(this.horizontalOffset);
						}
					}
					else
					{
						this.horizontalOffset = (this.negOffset = 0);
					}
				}
				else
				{
					this.horizontalOffset -= dataGridViewColumn.Thickness;
				}
				if (this.horizScrollBar.Enabled)
				{
					this.horizScrollBar.Value = this.horizontalOffset;
				}
			}
			bool flag3 = false;
			DataGridViewSelectionMode dataGridViewSelectionMode = this.SelectionMode;
			if (dataGridViewSelectionMode == DataGridViewSelectionMode.FullColumnSelect || dataGridViewSelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)
			{
				int num4 = this.selectedBandIndexes.Count;
				int k = 0;
				while (k < num4)
				{
					int num5 = this.selectedBandIndexes[k];
					if (index == num5)
					{
						this.selectedBandIndexes.RemoveAt(k);
						num4--;
						flag3 = true;
					}
					else
					{
						if (index < num5)
						{
							this.selectedBandIndexes[k] = num5 - 1;
						}
						k++;
					}
				}
			}
			ref BitVector32 ptr = ref this.dataGridViewState2;
			ptr[262144] = ptr[262144] | (this.individualSelectedCells.RemoveAllCellsAtBand(true, index) > 0 || flag3);
			this.individualReadOnlyCells.RemoveAllCellsAtBand(true, index);
		}

		// Token: 0x06001BDA RID: 7130 RVA: 0x000754D8 File Offset: 0x000736D8
		internal void OnRemovingRow(int rowIndexDeleted, out Point newCurrentCell, bool force)
		{
			this.dataGridViewState1[4194304] = false;
			newCurrentCell = new Point(-1, -1);
			if (this.ptCurrentCell.Y != -1 && rowIndexDeleted <= this.ptCurrentCell.Y)
			{
				int num;
				if (rowIndexDeleted == this.ptCurrentCell.Y)
				{
					int previousRow = this.Rows.GetPreviousRow(rowIndexDeleted, DataGridViewElementStates.Visible);
					int nextRow = this.Rows.GetNextRow(rowIndexDeleted, DataGridViewElementStates.Visible);
					if (previousRow > -1 && this.AllowUserToAddRowsInternal)
					{
						if (nextRow > -1 && nextRow < this.Rows.Count - 1)
						{
							num = nextRow - 1;
						}
						else
						{
							num = previousRow;
						}
					}
					else if (nextRow > -1)
					{
						num = nextRow - 1;
					}
					else
					{
						num = previousRow;
					}
					this.IsCurrentCellDirtyInternal = false;
					this.IsCurrentRowDirtyInternal = false;
				}
				else
				{
					num = this.ptCurrentCell.Y - 1;
				}
				newCurrentCell = new Point(this.ptCurrentCell.X, num);
				if (rowIndexDeleted == this.ptCurrentCell.Y)
				{
					bool flag = this.SetCurrentCellAddressCore(-1, -1, true, false, false);
				}
				else if (force)
				{
					this.dataGridViewState1[4194304] = true;
					bool flag2 = this.SetCurrentCellAddressCore(-1, -1, true, false, false);
				}
				else
				{
					this.ResetCurrentCell();
				}
			}
			bool flag3 = false;
			DataGridViewSelectionMode dataGridViewSelectionMode = this.SelectionMode;
			if (dataGridViewSelectionMode == DataGridViewSelectionMode.FullRowSelect || dataGridViewSelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
			{
				int num2 = this.selectedBandIndexes.Count;
				int i = 0;
				while (i < num2)
				{
					int num3 = this.selectedBandIndexes[i];
					if (rowIndexDeleted == num3)
					{
						flag3 = true;
						this.selectedBandIndexes.RemoveAt(i);
						num2--;
					}
					else
					{
						if (rowIndexDeleted < num3)
						{
							this.selectedBandIndexes[i] = num3 - 1;
						}
						i++;
					}
				}
				if (this.selectedBandSnapshotIndexes != null)
				{
					num2 = this.selectedBandSnapshotIndexes.Count;
					i = 0;
					while (i < num2)
					{
						int num4 = this.selectedBandSnapshotIndexes[i];
						if (rowIndexDeleted == num4)
						{
							this.selectedBandSnapshotIndexes.RemoveAt(i);
							num2--;
						}
						else
						{
							if (rowIndexDeleted < num4)
							{
								this.selectedBandSnapshotIndexes[i] = num4 - 1;
							}
							i++;
						}
					}
				}
			}
			ref BitVector32 ptr = ref this.dataGridViewState2;
			ptr[262144] = ptr[262144] | (this.individualSelectedCells.RemoveAllCellsAtBand(false, rowIndexDeleted) > 0 || flag3);
			this.individualReadOnlyCells.RemoveAllCellsAtBand(false, rowIndexDeleted);
		}

		// Token: 0x06001BDB RID: 7131 RVA: 0x00075720 File Offset: 0x00073920
		internal void OnReplacedCell(DataGridViewRow dataGridViewRow, int columnIndex)
		{
			DataGridViewCell dataGridViewCell = dataGridViewRow.Cells[columnIndex];
			if (this.dataGridViewState2[65536])
			{
				this.individualSelectedCells.Add(dataGridViewCell);
			}
			if (this.dataGridViewState2[131072])
			{
				this.individualReadOnlyCells.Add(dataGridViewCell);
			}
			this.OnCellCommonChange(columnIndex, dataGridViewRow.Index);
			if (this.ptCurrentCellCache.X != -1)
			{
				if (!this.IsInnerCellOutOfBounds(this.ptCurrentCellCache.X, this.ptCurrentCellCache.Y))
				{
					this.SetCurrentCellAddressCore(this.ptCurrentCellCache.X, this.ptCurrentCellCache.Y, false, false, false);
				}
				this.ptCurrentCellCache.X = -1;
				this.ptCurrentCellCache.Y = -1;
			}
		}

		// Token: 0x06001BDC RID: 7132 RVA: 0x000757E8 File Offset: 0x000739E8
		internal void OnReplacingCell(DataGridViewRow dataGridViewRow, int columnIndex)
		{
			if (this.ptCurrentCell.X == dataGridViewRow.Index && this.ptCurrentCell.Y == columnIndex)
			{
				this.ptCurrentCellCache.X = this.ptCurrentCell.X;
				this.ptCurrentCellCache.Y = this.ptCurrentCell.Y;
				this.ResetCurrentCell();
			}
			else
			{
				this.ptCurrentCellCache.X = -1;
				this.ptCurrentCellCache.Y = -1;
			}
			DataGridViewCell dataGridViewCell = dataGridViewRow.Cells[columnIndex];
			this.dataGridViewState2[65536] = this.individualSelectedCells.Contains(dataGridViewCell);
			if (this.dataGridViewState2[65536])
			{
				this.individualSelectedCells.Remove(dataGridViewCell);
			}
			this.dataGridViewState2[131072] = this.individualReadOnlyCells.Contains(dataGridViewCell);
			if (this.dataGridViewState2[131072])
			{
				this.individualReadOnlyCells.Remove(dataGridViewCell);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.Resize" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001BDD RID: 7133 RVA: 0x000758E8 File Offset: 0x00073AE8
		protected override void OnResize(EventArgs e)
		{
			int borderWidth = this.BorderWidth;
			Rectangle clientRectangle = this.layout.ClientRectangle;
			Rectangle gridFocusRectangle = this.GetGridFocusRectangle();
			Rectangle rectangle = new Rectangle(clientRectangle.X + clientRectangle.Width - borderWidth, clientRectangle.Y, borderWidth, clientRectangle.Height);
			Rectangle rectangle2 = new Rectangle(clientRectangle.X, clientRectangle.Y + clientRectangle.Height - borderWidth, clientRectangle.Width, borderWidth);
			if (!this.IsMinimized)
			{
				this.normalClientRectangle = base.ClientRectangle;
			}
			Rectangle rectangle3 = this.normalClientRectangle;
			Rectangle displayRectangle = this.DisplayRectangle;
			displayRectangle.Inflate(1 - borderWidth - 2, 1 - borderWidth - 2);
			if (rectangle3.Width != clientRectangle.Width)
			{
				base.Invalidate(rectangle);
				rectangle = new Rectangle(rectangle3.X + rectangle3.Width - borderWidth, rectangle3.Y, borderWidth, rectangle3.Height);
				base.Invalidate(rectangle);
			}
			if (rectangle3.Height != clientRectangle.Height)
			{
				base.Invalidate(rectangle2);
				rectangle2 = new Rectangle(rectangle3.X, rectangle3.Y + rectangle3.Height - borderWidth, rectangle3.Width, borderWidth);
				base.Invalidate(rectangle2);
			}
			if (this.Focused && this.IsGridFocusRectangleEnabled() && gridFocusRectangle != displayRectangle)
			{
				rectangle = new Rectangle(gridFocusRectangle.X + gridFocusRectangle.Width - 1, gridFocusRectangle.Y, 1, gridFocusRectangle.Height);
				base.Invalidate(rectangle);
				rectangle2 = new Rectangle(gridFocusRectangle.X, gridFocusRectangle.Y + gridFocusRectangle.Height - 1, gridFocusRectangle.Width, 1);
				base.Invalidate(rectangle2);
				this.InvalidateRectangleEdges(displayRectangle);
			}
			if (!this.layout.ResizeBoxRect.IsEmpty)
			{
				base.Invalidate(this.layout.ResizeBoxRect);
			}
			this.layout.ClientRectangle = rectangle3;
			int firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
			base.OnResize(e);
			if (firstDisplayedScrollingRow != this.displayedBandsInfo.FirstDisplayedScrollingRow)
			{
				base.Invalidate();
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.RightToLeftChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001BDE RID: 7134 RVA: 0x00075AF5 File Offset: 0x00073CF5
		protected override void OnRightToLeftChanged(EventArgs e)
		{
			this.dataGridViewState2[4096] = false;
			base.OnRightToLeftChanged(e);
			this.CorrectFocus(true);
			this.PerformLayoutPrivate(false, false, true, false);
		}

		// Token: 0x06001BDF RID: 7135 RVA: 0x00075B20 File Offset: 0x00073D20
		internal void OnRowCollectionChanged_PostNotification(bool recreateNewRow, bool allowSettingCurrentCell, CollectionChangeAction cca, DataGridViewRow dataGridViewRow, int rowIndex)
		{
			if (recreateNewRow && cca == CollectionChangeAction.Refresh && this.Columns.Count != 0 && this.Rows.Count == 0 && this.AllowUserToAddRowsInternal)
			{
				this.AddNewRow(false);
			}
			if (cca == CollectionChangeAction.Refresh)
			{
				this.FlushSelectionChanged();
			}
			if ((cca == CollectionChangeAction.Refresh || cca == CollectionChangeAction.Add) && this.ptCurrentCell.X == -1 && allowSettingCurrentCell && !this.InSortOperation)
			{
				this.MakeFirstDisplayedCellCurrentCell(false);
			}
			if (this.AutoSize)
			{
				bool flag = true;
				if (cca != CollectionChangeAction.Add)
				{
					if (cca == CollectionChangeAction.Remove)
					{
						flag = dataGridViewRow.DataGridView == null && dataGridViewRow.Visible;
					}
				}
				else
				{
					DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
					flag = (rowState & DataGridViewElementStates.Visible) > DataGridViewElementStates.None;
				}
				if (flag)
				{
					LayoutTransaction.DoLayout(this.ParentInternal, this, PropertyNames.Rows);
				}
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowContextMenuStripChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentException">The row indicated by the <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x06001BE0 RID: 7136 RVA: 0x00075BE8 File Offset: 0x00073DE8
		protected virtual void OnRowContextMenuStripChanged(DataGridViewRowEventArgs e)
		{
			if (e.Row.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
			}
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWCONTEXTMENUSTRIPCHANGED] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
		}

		// Token: 0x06001BE1 RID: 7137 RVA: 0x00075C54 File Offset: 0x00073E54
		internal ContextMenuStrip OnRowContextMenuStripNeeded(int rowIndex, ContextMenuStrip contextMenuStrip)
		{
			DataGridViewRowContextMenuStripNeededEventArgs dataGridViewRowContextMenuStripNeededEventArgs = new DataGridViewRowContextMenuStripNeededEventArgs(rowIndex, contextMenuStrip);
			this.OnRowContextMenuStripNeeded(dataGridViewRowContextMenuStripNeededEventArgs);
			return dataGridViewRowContextMenuStripNeededEventArgs.ContextMenuStrip;
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowContextMenuStripNeeded" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs" /> that contains the event data.</param>
		// Token: 0x06001BE2 RID: 7138 RVA: 0x00075C78 File Offset: 0x00073E78
		protected virtual void OnRowContextMenuStripNeeded(DataGridViewRowContextMenuStripNeededEventArgs e)
		{
			DataGridViewRowContextMenuStripNeededEventHandler dataGridViewRowContextMenuStripNeededEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWCONTEXTMENUSTRIPNEEDED] as DataGridViewRowContextMenuStripNeededEventHandler;
			if (dataGridViewRowContextMenuStripNeededEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowContextMenuStripNeededEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowDefaultCellStyleChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentException">The row indicated by the <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x06001BE3 RID: 7139 RVA: 0x00075CC0 File Offset: 0x00073EC0
		protected virtual void OnRowDefaultCellStyleChanged(DataGridViewRowEventArgs e)
		{
			if (e.Row.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
			}
			this.OnRowGlobalAutoSize(e.Row.Index);
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWDEFAULTCELLSTYLECHANGED] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowDirtyStateNeeded" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.QuestionEventArgs" /> that contains the event data.</param>
		// Token: 0x06001BE4 RID: 7140 RVA: 0x00075D3C File Offset: 0x00073F3C
		protected virtual void OnRowDirtyStateNeeded(QuestionEventArgs e)
		{
			QuestionEventHandler questionEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWDIRTYSTATENEEDED] as QuestionEventHandler;
			if (questionEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				questionEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowDividerDoubleClick" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowDividerDoubleClickEventArgs" /> that contains the event data.</param>
		// Token: 0x06001BE5 RID: 7141 RVA: 0x00075D84 File Offset: 0x00073F84
		protected virtual void OnRowDividerDoubleClick(DataGridViewRowDividerDoubleClickEventArgs e)
		{
			DataGridViewRowDividerDoubleClickEventHandler dataGridViewRowDividerDoubleClickEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWDIVIDERDOUBLECLICK] as DataGridViewRowDividerDoubleClickEventHandler;
			if (dataGridViewRowDividerDoubleClickEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowDividerDoubleClickEventHandler(this, e);
			}
			if (!e.Handled && e.Button == MouseButtons.Left && e.RowIndex < this.Rows.Count)
			{
				if (e.RowIndex == -1)
				{
					this.AutoResizeColumnHeadersHeight(true, true);
					return;
				}
				if (this.autoSizeRowsMode == DataGridViewAutoSizeRowsMode.None)
				{
					this.AutoResizeRowInternal(e.RowIndex, DataGridViewAutoSizeRowMode.AllCells, true, true);
					return;
				}
				this.AutoResizeRowInternal(e.RowIndex, DataGridView.MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), true, true);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowDividerHeightChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentException">The row indicated by the <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x06001BE6 RID: 7142 RVA: 0x00075E38 File Offset: 0x00074038
		protected virtual void OnRowDividerHeightChanged(DataGridViewRowEventArgs e)
		{
			if (e.Row.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
			}
			this.OnRowGlobalAutoSize(e.Row.Index);
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWDIVIDERHEIGHTCHANGED] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
		}

		// Token: 0x06001BE7 RID: 7143 RVA: 0x00075EB4 File Offset: 0x000740B4
		private void OnRowEnter(ref DataGridViewCell dataGridViewCell, int columnIndex, int rowIndex, bool canCreateNewRow, bool validationFailureOccurred)
		{
			if (!validationFailureOccurred)
			{
				this.dataGridViewState1[524288] = false;
			}
			if (rowIndex < this.Rows.Count && columnIndex < this.Columns.Count)
			{
				bool flag = false;
				if (!validationFailureOccurred && this.AllowUserToAddRowsInternal && this.newRowIndex == rowIndex)
				{
					this.dataGridViewState1[524288] = true;
					if (canCreateNewRow)
					{
						DataGridViewRowEventArgs dataGridViewRowEventArgs = new DataGridViewRowEventArgs(this.Rows[this.newRowIndex]);
						if (this.VirtualMode || this.DataSource != null)
						{
							if (this.dataConnection != null && this.dataConnection.InterestedInRowEvents)
							{
								this.dataConnection.OnNewRowNeeded();
								flag = true;
							}
							if (this.VirtualMode)
							{
								this.OnNewRowNeeded(dataGridViewRowEventArgs);
							}
						}
						if (this.AllowUserToAddRowsInternal)
						{
							this.OnDefaultValuesNeeded(dataGridViewRowEventArgs);
							this.InvalidateRowPrivate(this.newRowIndex);
						}
					}
				}
				if (flag && rowIndex > this.Rows.Count - 1)
				{
					rowIndex = Math.Min(rowIndex, this.Rows.Count - 1);
				}
				DataGridViewCellEventArgs dataGridViewCellEventArgs = new DataGridViewCellEventArgs(columnIndex, rowIndex);
				this.OnRowEnter(dataGridViewCellEventArgs);
				if (this.dataConnection != null && this.dataConnection.InterestedInRowEvents && !this.dataConnection.PositionChangingOutsideDataGridView && !this.dataConnection.ListWasReset && (!flag || this.dataConnection.List.Count > 0))
				{
					this.dataConnection.OnRowEnter(dataGridViewCellEventArgs);
				}
				if (dataGridViewCell != null)
				{
					if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
					{
						dataGridViewCell = null;
						return;
					}
					dataGridViewCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
				}
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowEnter" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
		// Token: 0x06001BE8 RID: 7144 RVA: 0x00076054 File Offset: 0x00074254
		protected virtual void OnRowEnter(DataGridViewCellEventArgs e)
		{
			try
			{
				this.noDimensionChangeCount++;
				DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWENTER] as DataGridViewCellEventHandler;
				if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
				{
					dataGridViewCellEventHandler(this, e);
					this.CorrectFocus(true);
				}
			}
			finally
			{
				this.noDimensionChangeCount--;
			}
		}

		// Token: 0x06001BE9 RID: 7145 RVA: 0x000760D4 File Offset: 0x000742D4
		internal void OnRowErrorTextChanged(DataGridViewRow dataGridViewRow)
		{
			DataGridViewRowEventArgs dataGridViewRowEventArgs = new DataGridViewRowEventArgs(dataGridViewRow);
			this.OnRowErrorTextChanged(dataGridViewRowEventArgs);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowErrorTextChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentException">The row indicated by the <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x06001BEA RID: 7146 RVA: 0x000760F0 File Offset: 0x000742F0
		protected virtual void OnRowErrorTextChanged(DataGridViewRowEventArgs e)
		{
			if (e.Row.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
			}
			this.UpdateRowErrorText(e.Row.Index);
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWERRORTEXTCHANGED] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
		}

		// Token: 0x06001BEB RID: 7147 RVA: 0x0007616C File Offset: 0x0007436C
		internal string OnRowErrorTextNeeded(int rowIndex, string errorText)
		{
			DataGridViewRowErrorTextNeededEventArgs dataGridViewRowErrorTextNeededEventArgs = new DataGridViewRowErrorTextNeededEventArgs(rowIndex, errorText);
			this.OnRowErrorTextNeeded(dataGridViewRowErrorTextNeededEventArgs);
			return dataGridViewRowErrorTextNeededEventArgs.ErrorText;
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowErrorTextNeeded" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs" /> that contains the event data.</param>
		// Token: 0x06001BEC RID: 7148 RVA: 0x00076190 File Offset: 0x00074390
		protected virtual void OnRowErrorTextNeeded(DataGridViewRowErrorTextNeededEventArgs e)
		{
			DataGridViewRowErrorTextNeededEventHandler dataGridViewRowErrorTextNeededEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWERRORTEXTNEEDED] as DataGridViewRowErrorTextNeededEventHandler;
			if (dataGridViewRowErrorTextNeededEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowErrorTextNeededEventHandler(this, e);
			}
		}

		// Token: 0x06001BED RID: 7149 RVA: 0x000761D8 File Offset: 0x000743D8
		private void OnRowGlobalAutoSize(int rowIndex)
		{
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			if ((rowState & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
			{
				return;
			}
			this.InvalidateRowPrivate(rowIndex);
			if (this.noAutoSizeCount > 0)
			{
				return;
			}
			DataGridViewAutoSizeRowsModeInternal dataGridViewAutoSizeRowsModeInternal = (DataGridViewAutoSizeRowsModeInternal)this.autoSizeRowsMode;
			bool flag = false;
			bool flag2 = (rowState & DataGridViewElementStates.Displayed) > DataGridViewElementStates.None;
			if (dataGridViewAutoSizeRowsModeInternal != DataGridViewAutoSizeRowsModeInternal.None && ((dataGridViewAutoSizeRowsModeInternal & DataGridViewAutoSizeRowsModeInternal.DisplayedRows) == DataGridViewAutoSizeRowsModeInternal.None || flag2))
			{
				this.AutoResizeRowInternal(rowIndex, DataGridView.MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), false, true);
				flag = true;
			}
			DataGridViewAutoSizeColumnCriteriaInternal dataGridViewAutoSizeColumnCriteriaInternal = DataGridViewAutoSizeColumnCriteriaInternal.AllRows;
			if (flag2)
			{
				dataGridViewAutoSizeColumnCriteriaInternal |= DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows;
			}
			this.AutoResizeAllVisibleColumnsInternal(dataGridViewAutoSizeColumnCriteriaInternal, true);
			bool flag3 = this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing || this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.DisableResizing;
			if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
			{
				this.AutoResizeColumnHeadersHeight(flag3, true);
			}
			if (!flag3)
			{
				this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, true);
			}
			if (flag)
			{
				this.AutoResizeRowInternal(rowIndex, DataGridView.MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), true, true);
			}
			if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize && !flag3)
			{
				this.AutoResizeColumnHeadersHeight(true, true);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowHeaderCellChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentException">The row indicated by the <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x06001BEE RID: 7150 RVA: 0x000762B8 File Offset: 0x000744B8
		protected virtual void OnRowHeaderCellChanged(DataGridViewRowEventArgs e)
		{
			if (e.Row.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
			}
			this.OnRowHeaderGlobalAutoSize(e.Row.Index);
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWHEADERCELLCHANGED] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
		}

		// Token: 0x06001BEF RID: 7151 RVA: 0x00076334 File Offset: 0x00074534
		private void OnRowHeaderGlobalAutoSize(int rowIndex)
		{
			if (!this.RowHeadersVisible)
			{
				return;
			}
			this.InvalidateCellPrivate(-1, rowIndex);
			if (this.noAutoSizeCount > 0)
			{
				return;
			}
			bool flag = false;
			if (rowIndex != -1)
			{
				flag = (this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Displayed) > DataGridViewElementStates.None;
			}
			bool flag2 = rowIndex != -1 || this.ColumnHeadersHeightSizeMode != DataGridViewColumnHeadersHeightSizeMode.AutoSize;
			bool flag3 = rowIndex == -1 || (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)1) == DataGridViewAutoSizeRowsMode.None || ((this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)8) != DataGridViewAutoSizeRowsMode.None && rowIndex != -1 && !flag);
			bool flag4 = false;
			if (this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders || ((this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.AutoSizeToDisplayedHeaders && rowIndex != -1 && flag) || (this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.EnableResizing && this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.DisableResizing && rowIndex == -1)) || (this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.AutoSizeToFirstHeader && rowIndex != -1 && rowIndex == this.Rows.GetFirstRow(DataGridViewElementStates.Visible)))
			{
				this.AutoResizeRowHeadersWidth(rowIndex, this.rowHeadersWidthSizeMode, flag2, flag3);
				flag4 = true;
			}
			if (!flag2)
			{
				this.AutoResizeColumnHeadersHeight(-1, true, true);
			}
			if (!flag3)
			{
				this.AutoResizeRowInternal(rowIndex, DataGridView.MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), true, true);
			}
			if (flag4 && (!flag2 || !flag3))
			{
				this.AutoResizeRowHeadersWidth(rowIndex, this.rowHeadersWidthSizeMode, true, true);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowHeaderMouseClick" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains information about the mouse and the header cell that was clicked.</param>
		// Token: 0x06001BF0 RID: 7152 RVA: 0x00076450 File Offset: 0x00074650
		protected virtual void OnRowHeaderMouseClick(DataGridViewCellMouseEventArgs e)
		{
			DataGridViewCellMouseEventHandler dataGridViewCellMouseEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWHEADERMOUSECLICK] as DataGridViewCellMouseEventHandler;
			if (dataGridViewCellMouseEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellMouseEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowHeaderMouseDoubleClick" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains information about the mouse and the header cell that was double-clicked.</param>
		// Token: 0x06001BF1 RID: 7153 RVA: 0x00076498 File Offset: 0x00074698
		protected virtual void OnRowHeaderMouseDoubleClick(DataGridViewCellMouseEventArgs e)
		{
			DataGridViewCellMouseEventHandler dataGridViewCellMouseEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWHEADERMOUSEDOUBLECLICK] as DataGridViewCellMouseEventHandler;
			if (dataGridViewCellMouseEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellMouseEventHandler(this, e);
			}
		}

		// Token: 0x06001BF2 RID: 7154 RVA: 0x000764E0 File Offset: 0x000746E0
		private void OnRowHeaderMouseDown(DataGridView.HitTestInfo hti, bool isShiftDown, bool isControlDown)
		{
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.FullRowSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
				{
					bool flag = true;
					if (isControlDown && (this.Rows.GetRowState(hti.row) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
					{
						flag = false;
					}
					if (flag)
					{
						DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
						if (firstColumn != null && hti.row != this.ptCurrentCell.Y)
						{
							int x = this.ptCurrentCell.X;
							int y = this.ptCurrentCell.Y;
							if (!this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.CurrentCellChange, DataGridView.DataGridViewValidateCellInternal.Always, true, true, hti.row != this.ptCurrentCell.Y, hti.row != this.ptCurrentCell.Y, false, this.EditMode > DataGridViewEditMode.EditOnEnter, true, false))
							{
								break;
							}
							if (y != -1)
							{
								DataGridViewCell dataGridViewCell = null;
								if (this.IsInnerCellOutOfBounds(x, y))
								{
									break;
								}
								if (this.OnRowValidating(ref dataGridViewCell, x, y))
								{
									if (this.IsInnerCellOutOfBounds(x, y))
									{
										break;
									}
									this.OnRowEnter(ref dataGridViewCell, x, y, true, true);
									if (this.IsInnerCellOutOfBounds(x, y))
									{
										break;
									}
									this.OnCellEnter(ref dataGridViewCell, x, y);
									break;
								}
								else
								{
									if (this.IsInnerCellOutOfBounds(x, y))
									{
										break;
									}
									this.OnRowValidated(ref dataGridViewCell, x, y);
									if (hti.row >= this.Rows.Count)
									{
										int lastRow = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
										if (this.ptCurrentCell.X == -1 && lastRow != -1)
										{
											if (!this.IsColumnOutOfBounds(x))
											{
												bool flag2 = this.SetAndSelectCurrentCellAddress(x, lastRow, true, false, false, false, false);
											}
										}
										break;
									}
									if ((this.Rows.GetRowState(hti.row) & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
									{
										break;
									}
								}
							}
						}
						bool flag3 = false;
						this.trackRow = hti.row;
						this.trackRowEdge = -1;
						if (this.MultiSelect && isShiftDown && this.ptAnchorCell.Y > -1 && (this.Rows.GetRowState(this.ptAnchorCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
						{
							flag3 = true;
						}
						if (!this.MultiSelect || !isControlDown || isShiftDown)
						{
							int i = 0;
							bool flag4 = false;
							if (this.selectedBandIndexes.Count > 8)
							{
								this.inBulkPaintCount++;
								flag4 = true;
							}
							try
							{
								while (i < this.selectedBandIndexes.Count)
								{
									if (this.selectedBandIndexes[i] != hti.row)
									{
										this.SetSelectedRowCore(this.selectedBandIndexes[i], false);
									}
									else
									{
										i++;
									}
								}
								if (this.SelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
								{
									this.RemoveIndividuallySelectedCells();
								}
							}
							finally
							{
								if (flag4)
								{
									this.ExitBulkPaint(-1, -1);
								}
							}
						}
						if (this.MultiSelect && this.dataGridViewOper[512])
						{
							this.dataGridViewOper[8] = true;
						}
						if (flag3)
						{
							if (hti.row >= this.ptAnchorCell.Y)
							{
								this.SelectRowRange(this.ptAnchorCell.Y, hti.row, true);
							}
							else
							{
								this.SelectRowRange(hti.row, this.ptAnchorCell.Y, true);
							}
						}
						else if ((this.Rows.GetRowState(hti.row) & DataGridViewElementStates.Selected) == DataGridViewElementStates.None)
						{
							this.SetSelectedRowCore(hti.row, true);
						}
						if (firstColumn != null)
						{
							if (hti.row != this.ptCurrentCell.Y)
							{
								if (!this.IsInnerCellOutOfBounds(firstColumn.Index, hti.row))
								{
									bool flag5 = this.ScrollIntoView(firstColumn.Index, hti.row, false);
									if (!this.IsInnerCellOutOfBounds(firstColumn.Index, hti.row))
									{
										flag5 = this.SetCurrentCellAddressCore(firstColumn.Index, hti.row, !flag3, false, true);
									}
								}
							}
							else if (-1 != this.ptCurrentCell.Y)
							{
								bool flag6 = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, this.ptCurrentCell.Y, false, false, false);
							}
						}
					}
					else
					{
						this.SetSelectedRowCore(hti.row, false);
					}
					break;
				}
				}
			}
			finally
			{
				int num = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num - 1;
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowHeadersBorderStyleChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001BF3 RID: 7155 RVA: 0x0007694C File Offset: 0x00074B4C
		protected virtual void OnRowHeadersBorderStyleChanged(EventArgs e)
		{
			this.PerformLayoutPrivate(false, false, true, false);
			base.Invalidate();
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWHEADERSBORDERSTYLECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyleChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001BF4 RID: 7156 RVA: 0x000769A4 File Offset: 0x00074BA4
		protected virtual void OnRowHeadersDefaultCellStyleChanged(EventArgs e)
		{
			if (this.RowHeadersVisible)
			{
				base.Invalidate(Rectangle.Union(this.layout.TopLeftHeader, this.layout.RowHeaders));
				DataGridViewCellStyleChangedEventArgs dataGridViewCellStyleChangedEventArgs = e as DataGridViewCellStyleChangedEventArgs;
				if (dataGridViewCellStyleChangedEventArgs == null || dataGridViewCellStyleChangedEventArgs.ChangeAffectsPreferredSize)
				{
					this.OnRowHeadersGlobalAutoSize(false);
					if (this.editingControl != null)
					{
						this.PositionEditingControl(true, true, false);
					}
				}
			}
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWHEADERSDEFAULTCELLSTYLECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x06001BF5 RID: 7157 RVA: 0x00076A40 File Offset: 0x00074C40
		private void OnRowHeadersGlobalAutoSize(bool expandingRows)
		{
			if (this.noAutoSizeCount > 0)
			{
				return;
			}
			bool flag = (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)1) == DataGridViewAutoSizeRowsMode.None || !this.RowHeadersVisible;
			bool flag2 = this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.EnableResizing && this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.DisableResizing;
			if (flag2)
			{
				this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, flag);
			}
			if (!flag)
			{
				if (expandingRows)
				{
					this.AdjustExpandingRows(-1, true);
				}
				else
				{
					this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
				}
				if (flag2)
				{
					this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, true);
				}
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowHeadersWidthChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001BF6 RID: 7158 RVA: 0x00076AC8 File Offset: 0x00074CC8
		protected virtual void OnRowHeadersWidthChanged(EventArgs e)
		{
			if (this.RowHeadersVisible)
			{
				if (this.editingControl != null)
				{
					this.PositionEditingControl(true, false, false);
				}
				if (base.IsHandleCreated)
				{
					this.UpdateMouseEnteredCell(null, null);
				}
				this.OnRowHeadersGlobalAutoSize(false);
			}
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWHEADERSWIDTHCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowHeadersWidthSizeModeChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewAutoSizeModeEventArgs" /> that contains the event data.</param>
		// Token: 0x06001BF7 RID: 7159 RVA: 0x00076B40 File Offset: 0x00074D40
		protected virtual void OnRowHeadersWidthSizeModeChanged(DataGridViewAutoSizeModeEventArgs e)
		{
			if (this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.EnableResizing && this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.DisableResizing)
			{
				if (!e.PreviousModeAutoSized)
				{
					this.cachedRowHeadersWidth = this.RowHeadersWidth;
				}
				this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, true);
			}
			else if (e.PreviousModeAutoSized)
			{
				this.RowHeadersWidth = this.cachedRowHeadersWidth;
			}
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWHEADERSWIDTHSIZEMODECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowHeightChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentException">The row indicated by the <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x06001BF8 RID: 7160 RVA: 0x00076BD4 File Offset: 0x00074DD4
		protected virtual void OnRowHeightChanged(DataGridViewRowEventArgs e)
		{
			if (e.Row.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
			}
			this.UpdateRowHeightInfoPrivate(e.Row.Index, false, false);
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWHEIGHTCHANGED] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
			this.OnRowGlobalAutoSize(e.Row.Index);
		}

		// Token: 0x06001BF9 RID: 7161 RVA: 0x00076C64 File Offset: 0x00074E64
		internal DataGridViewRowHeightInfoNeededEventArgs OnRowHeightInfoNeeded(int rowIndex, int height, int minimumHeight)
		{
			DataGridViewRowHeightInfoNeededEventArgs rowHeightInfoNeededEventArgs = this.RowHeightInfoNeededEventArgs;
			rowHeightInfoNeededEventArgs.SetProperties(rowIndex, height, minimumHeight);
			this.OnRowHeightInfoNeeded(rowHeightInfoNeededEventArgs);
			return rowHeightInfoNeededEventArgs;
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowHeightInfoNeeded" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowHeightInfoNeededEventArgs" /> that contains the event data.</param>
		// Token: 0x06001BFA RID: 7162 RVA: 0x00076C8C File Offset: 0x00074E8C
		protected virtual void OnRowHeightInfoNeeded(DataGridViewRowHeightInfoNeededEventArgs e)
		{
			DataGridViewRowHeightInfoNeededEventHandler dataGridViewRowHeightInfoNeededEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWHEIGHTINFONEEDED] as DataGridViewRowHeightInfoNeededEventHandler;
			if (dataGridViewRowHeightInfoNeededEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowHeightInfoNeededEventHandler(this, e);
			}
		}

		// Token: 0x06001BFB RID: 7163 RVA: 0x00076CD4 File Offset: 0x00074ED4
		private bool OnRowHeightInfoPushed(int rowIndex, int height, int minimumHeight)
		{
			if (this.VirtualMode || this.DataSource != null)
			{
				DataGridViewRowHeightInfoPushedEventArgs dataGridViewRowHeightInfoPushedEventArgs = new DataGridViewRowHeightInfoPushedEventArgs(rowIndex, height, minimumHeight);
				this.OnRowHeightInfoPushed(dataGridViewRowHeightInfoPushedEventArgs);
				if (dataGridViewRowHeightInfoPushedEventArgs.Handled)
				{
					this.UpdateRowHeightInfoPrivate(rowIndex, false, true);
					return true;
				}
			}
			return false;
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowHeightInfoPushed" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowHeightInfoPushedEventArgs" /> that contains the event data.</param>
		// Token: 0x06001BFC RID: 7164 RVA: 0x00076D18 File Offset: 0x00074F18
		protected virtual void OnRowHeightInfoPushed(DataGridViewRowHeightInfoPushedEventArgs e)
		{
			DataGridViewRowHeightInfoPushedEventHandler dataGridViewRowHeightInfoPushedEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWHEIGHTINFOPUSHED] as DataGridViewRowHeightInfoPushedEventHandler;
			if (dataGridViewRowHeightInfoPushedEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowHeightInfoPushedEventHandler(this, e);
			}
		}

		// Token: 0x06001BFD RID: 7165 RVA: 0x00076D60 File Offset: 0x00074F60
		private void OnRowLeave(ref DataGridViewCell dataGridViewCell, int columnIndex, int rowIndex)
		{
			if (rowIndex < this.Rows.Count && columnIndex < this.Columns.Count)
			{
				DataGridViewCellEventArgs dataGridViewCellEventArgs = new DataGridViewCellEventArgs(columnIndex, rowIndex);
				this.OnRowLeave(dataGridViewCellEventArgs);
				if (dataGridViewCell != null)
				{
					if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
					{
						dataGridViewCell = null;
						return;
					}
					dataGridViewCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
				}
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowLeave" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
		// Token: 0x06001BFE RID: 7166 RVA: 0x00076DC4 File Offset: 0x00074FC4
		protected virtual void OnRowLeave(DataGridViewCellEventArgs e)
		{
			try
			{
				this.noDimensionChangeCount++;
				DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWLEAVE] as DataGridViewCellEventHandler;
				if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
				{
					dataGridViewCellEventHandler(this, e);
					this.CorrectFocus(true);
				}
			}
			finally
			{
				this.noDimensionChangeCount--;
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowMinimumHeightChanged" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentException">The row indicated by the <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x06001BFF RID: 7167 RVA: 0x00076E44 File Offset: 0x00075044
		protected virtual void OnRowMinimumHeightChanged(DataGridViewRowEventArgs e)
		{
			if (e.Row.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
			}
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWMINIMUMHEIGHTCHANGED] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowPostPaint" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowPostPaintEventArgs" /> that contains the event data.</param>
		// Token: 0x06001C00 RID: 7168 RVA: 0x00076EB0 File Offset: 0x000750B0
		protected internal virtual void OnRowPostPaint(DataGridViewRowPostPaintEventArgs e)
		{
			DataGridViewRowPostPaintEventHandler dataGridViewRowPostPaintEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWPOSTPAINT] as DataGridViewRowPostPaintEventHandler;
			if (dataGridViewRowPostPaintEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowPostPaintEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowPrePaint" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowPrePaintEventArgs" /> that contains the event data.</param>
		// Token: 0x06001C01 RID: 7169 RVA: 0x00076EF8 File Offset: 0x000750F8
		protected internal virtual void OnRowPrePaint(DataGridViewRowPrePaintEventArgs e)
		{
			DataGridViewRowPrePaintEventHandler dataGridViewRowPrePaintEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWPREPAINT] as DataGridViewRowPrePaintEventHandler;
			if (dataGridViewRowPrePaintEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowPrePaintEventHandler(this, e);
			}
		}

		// Token: 0x06001C02 RID: 7170 RVA: 0x00076F40 File Offset: 0x00075140
		internal void OnRowsAddedInternal(int rowIndex, int rowCount)
		{
			this.OnRowsAdded(new DataGridViewRowsAddedEventArgs(rowIndex, rowCount));
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowsAdded" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowsAddedEventArgs" /> that contains information about the added rows.</param>
		// Token: 0x06001C03 RID: 7171 RVA: 0x00076F50 File Offset: 0x00075150
		protected virtual void OnRowsAdded(DataGridViewRowsAddedEventArgs e)
		{
			DataGridViewRowsAddedEventHandler dataGridViewRowsAddedEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWSADDED] as DataGridViewRowsAddedEventHandler;
			if (dataGridViewRowsAddedEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowsAddedEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowsDefaultCellStyleChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001C04 RID: 7172 RVA: 0x00076F98 File Offset: 0x00075198
		protected virtual void OnRowsDefaultCellStyleChanged(EventArgs e)
		{
			DataGridViewCellStyleChangedEventArgs dataGridViewCellStyleChangedEventArgs = e as DataGridViewCellStyleChangedEventArgs;
			if (dataGridViewCellStyleChangedEventArgs != null && !dataGridViewCellStyleChangedEventArgs.ChangeAffectsPreferredSize)
			{
				this.InvalidateData();
			}
			else
			{
				this.OnRowsGlobalAutoSize();
				if (this.editingControl != null)
				{
					this.PositionEditingControl(true, true, false);
				}
			}
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWSDEFAULTCELLSTYLECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x06001C05 RID: 7173 RVA: 0x00077014 File Offset: 0x00075214
		private void OnRowSelectMouseMove(DataGridView.HitTestInfo hti)
		{
			if (this.ptCurrentCell.Y != -1 && hti.row != this.ptCurrentCell.Y && !this.CommitEditForOperation(this.ptCurrentCell.X, hti.row, true))
			{
				return;
			}
			if (this.IsRowOutOfBounds(hti.row))
			{
				return;
			}
			this.noSelectionChangeCount++;
			try
			{
				if (this.trackRowEdge >= this.trackRow && hti.row > this.trackRowEdge && this.trackRowEdge >= 0)
				{
					this.SelectRowRange(this.Rows.GetNextRow(this.trackRowEdge, DataGridViewElementStates.Visible), hti.row, true);
					this.trackRowEdge = hti.row;
				}
				else if (this.trackRowEdge > this.trackRow && hti.row < this.trackRowEdge && hti.row >= this.trackRow && this.trackRowEdge >= 0)
				{
					this.SelectRowRange(this.Rows.GetNextRow(hti.row, DataGridViewElementStates.Visible), this.trackRowEdge, false);
					this.trackRowEdge = hti.row;
				}
				else if (hti.row > this.trackRow && this.trackRowEdge == -1)
				{
					this.SelectRowRange(this.Rows.GetNextRow(this.trackRow, DataGridViewElementStates.Visible), hti.row, true);
					this.trackRowEdge = hti.row;
				}
				else if (this.trackRowEdge <= this.trackRow && hti.row < this.trackRowEdge && this.trackRowEdge >= 0)
				{
					this.SelectRowRange(hti.row, this.Rows.GetPreviousRow(this.trackRowEdge, DataGridViewElementStates.Visible), true);
					this.trackRowEdge = hti.row;
				}
				else if (this.trackRowEdge < this.trackRow && hti.row > this.trackRowEdge && hti.row <= this.trackRow && this.trackRowEdge >= 0)
				{
					this.SelectRowRange(this.trackRowEdge, this.Rows.GetPreviousRow(hti.row, DataGridViewElementStates.Visible), false);
					this.trackRowEdge = hti.row;
				}
				else if (hti.row < this.trackRow && this.trackRowEdge == -1)
				{
					this.SelectRowRange(hti.row, this.Rows.GetPreviousRow(this.trackRow, DataGridViewElementStates.Visible), true);
					this.trackRowEdge = hti.row;
				}
				else if (this.trackRowEdge > this.trackRow && hti.row < this.trackRow)
				{
					this.SelectRowRange(this.Rows.GetNextRow(this.trackRow, DataGridViewElementStates.Visible), this.trackRowEdge, false);
					this.SelectRowRange(hti.row, this.Rows.GetPreviousRow(this.trackRow, DataGridViewElementStates.Visible), true);
					this.trackRowEdge = hti.row;
				}
				else if (hti.row > this.trackRow && this.trackRowEdge < this.trackRow && this.trackRowEdge >= 0)
				{
					this.SelectRowRange(this.trackRowEdge, this.Rows.GetPreviousRow(this.trackRow, DataGridViewElementStates.Visible), false);
					this.SelectRowRange(this.Rows.GetNextRow(this.trackRow, DataGridViewElementStates.Visible), hti.row, true);
					this.trackRowEdge = hti.row;
				}
			}
			finally
			{
				int num = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num - 1;
			}
			if (this.ptCurrentCell.Y != -1 && hti.row != this.ptCurrentCell.Y)
			{
				if (this.IsRowOutOfBounds(hti.row))
				{
					return;
				}
				bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, hti.row, false, false, false);
			}
		}

		// Token: 0x06001C06 RID: 7174 RVA: 0x000773D8 File Offset: 0x000755D8
		private void OnRowsGlobalAutoSize()
		{
			this.InvalidateData();
			if (this.noAutoSizeCount > 0)
			{
				return;
			}
			if ((this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) != DataGridViewAutoSizeRowsMode.None)
			{
				this.AdjustShrinkingRows(this.autoSizeRowsMode, false, true);
			}
			this.AutoResizeAllVisibleColumnsInternal(DataGridViewAutoSizeColumnCriteriaInternal.AllRows | DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows, true);
			bool flag = this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing || this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.DisableResizing;
			if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
			{
				this.AutoResizeColumnHeadersHeight(flag, true);
			}
			if (!flag)
			{
				this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, true);
			}
			if ((this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) != DataGridViewAutoSizeRowsMode.None)
			{
				this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
			}
			if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize && !flag)
			{
				this.AutoResizeColumnHeadersHeight(true, true);
			}
		}

		// Token: 0x06001C07 RID: 7175 RVA: 0x0007747A File Offset: 0x0007567A
		internal void OnRowsRemovedInternal(int rowIndex, int rowCount)
		{
			this.OnRowsRemoved(new DataGridViewRowsRemovedEventArgs(rowIndex, rowCount));
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowsRemoved" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowsRemovedEventArgs" /> that contains information about the deleted rows.</param>
		// Token: 0x06001C08 RID: 7176 RVA: 0x0007748C File Offset: 0x0007568C
		protected virtual void OnRowsRemoved(DataGridViewRowsRemovedEventArgs e)
		{
			DataGridViewRowsRemovedEventHandler dataGridViewRowsRemovedEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWSREMOVED] as DataGridViewRowsRemovedEventHandler;
			if (dataGridViewRowsRemovedEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowsRemovedEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowStateChanged" /> event.</summary>
		/// <param name="rowIndex">The index of the row that is changing state.</param>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowStateChangedEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.InvalidCastException">The row changed from read-only to read/write, enabling the current cell to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		// Token: 0x06001C09 RID: 7177 RVA: 0x000774D4 File Offset: 0x000756D4
		protected virtual void OnRowStateChanged(int rowIndex, DataGridViewRowStateChangedEventArgs e)
		{
			DataGridViewRow dataGridViewRow = e.Row;
			DataGridViewElementStates dataGridViewElementStates = DataGridViewElementStates.None;
			bool flag = false;
			if (rowIndex >= 0)
			{
				dataGridViewElementStates = this.Rows.GetRowState(rowIndex);
				flag = (dataGridViewElementStates & DataGridViewElementStates.Visible) > DataGridViewElementStates.None;
			}
			DataGridViewElementStates stateChanged = e.StateChanged;
			if (stateChanged != DataGridViewElementStates.Frozen)
			{
				if (stateChanged != DataGridViewElementStates.Selected)
				{
					if (stateChanged == DataGridViewElementStates.Visible)
					{
						if (!flag && (dataGridViewElementStates & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None)
						{
							this.Rows.SetRowState(rowIndex, DataGridViewElementStates.Displayed, false);
						}
						this.PerformLayoutPrivate(false, false, true, true);
						base.Invalidate();
						bool flag2 = (this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Displayed) > DataGridViewElementStates.None;
						DataGridViewAutoSizeRowsModeInternal dataGridViewAutoSizeRowsModeInternal = (DataGridViewAutoSizeRowsModeInternal)this.autoSizeRowsMode;
						bool flag3 = false;
						if (dataGridViewAutoSizeRowsModeInternal != DataGridViewAutoSizeRowsModeInternal.None)
						{
							int thicknessInternal = dataGridViewRow.ThicknessInternal;
							if (flag)
							{
								dataGridViewRow.CachedThickness = thicknessInternal;
								if ((dataGridViewAutoSizeRowsModeInternal & DataGridViewAutoSizeRowsModeInternal.DisplayedRows) == DataGridViewAutoSizeRowsModeInternal.None || flag2)
								{
									this.AutoResizeRowInternal(rowIndex, DataGridView.MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), false, true);
									flag3 = true;
								}
							}
							else if (thicknessInternal != dataGridViewRow.CachedThickness)
							{
								if (dataGridViewRow.Index == -1)
								{
									dataGridViewRow = this.Rows[rowIndex];
								}
								dataGridViewRow.ThicknessInternal = Math.Max(dataGridViewRow.MinimumHeight, dataGridViewRow.CachedThickness);
							}
						}
						DataGridViewAutoSizeColumnCriteriaInternal dataGridViewAutoSizeColumnCriteriaInternal = DataGridViewAutoSizeColumnCriteriaInternal.AllRows;
						if (flag2)
						{
							dataGridViewAutoSizeColumnCriteriaInternal |= DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows;
						}
						if (flag && this.Rows.GetRowCount(DataGridViewElementStates.Visible) > 1)
						{
							this.AdjustExpandingColumns(dataGridViewAutoSizeColumnCriteriaInternal, rowIndex);
						}
						else
						{
							this.AutoResizeAllVisibleColumnsInternal(dataGridViewAutoSizeColumnCriteriaInternal, true);
						}
						if (flag3)
						{
							this.AutoResizeRowInternal(rowIndex, DataGridView.MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), true, true);
						}
					}
				}
				else if (flag && this.inBulkPaintCount == 0)
				{
					this.InvalidateRowPrivate(rowIndex);
				}
			}
			else if (flag)
			{
				if ((dataGridViewElementStates & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None)
				{
					this.FirstVisibleScrollingRowTempted(rowIndex);
				}
				this.PerformLayoutPrivate(false, false, true, true);
				base.Invalidate();
			}
			DataGridViewRowStateChangedEventHandler dataGridViewRowStateChangedEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWSTATECHANGED] as DataGridViewRowStateChangedEventHandler;
			if (dataGridViewRowStateChangedEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowStateChangedEventHandler(this, e);
			}
			if (e.StateChanged == DataGridViewElementStates.ReadOnly && rowIndex == this.ptCurrentCell.Y && !this.dataGridViewOper[16384])
			{
				base.VerifyImeRestrictedModeChanged();
				if ((dataGridViewElementStates & DataGridViewElementStates.ReadOnly) == DataGridViewElementStates.None && !this.ReadOnly && !this.Columns[this.ptCurrentCell.X].ReadOnly && this.ColumnEditable(this.ptCurrentCell.X) && !this.IsCurrentCellInEditMode && (this.EditMode == DataGridViewEditMode.EditOnEnter || (this.EditMode != DataGridViewEditMode.EditProgrammatically && this.CurrentCellInternal.EditType == null)))
				{
					this.BeginEditInternal(true);
				}
			}
		}

		// Token: 0x06001C0A RID: 7178 RVA: 0x0007774C File Offset: 0x0007594C
		internal void OnRowUnshared(DataGridViewRow dataGridViewRow)
		{
			if (-1 != this.ptCurrentCell.X && dataGridViewRow.Index == this.ptCurrentCell.Y && this.editingControl != null)
			{
				this.CurrentCellInternal.CacheEditingControl();
			}
			DataGridViewRowEventArgs dataGridViewRowEventArgs = new DataGridViewRowEventArgs(dataGridViewRow);
			this.OnRowUnshared(dataGridViewRowEventArgs);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowUnshared" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentException">The row indicated by the <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x06001C0B RID: 7179 RVA: 0x0007779C File Offset: 0x0007599C
		protected virtual void OnRowUnshared(DataGridViewRowEventArgs e)
		{
			if (e.Row.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
			}
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWUNSHARED] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
		}

		// Token: 0x06001C0C RID: 7180 RVA: 0x00077808 File Offset: 0x00075A08
		private bool OnRowValidating(ref DataGridViewCell dataGridViewCell, int columnIndex, int rowIndex)
		{
			DataGridViewCellCancelEventArgs dataGridViewCellCancelEventArgs = new DataGridViewCellCancelEventArgs(columnIndex, rowIndex);
			this.OnRowValidating(dataGridViewCellCancelEventArgs);
			if (!dataGridViewCellCancelEventArgs.Cancel && this.dataConnection != null && this.dataConnection.InterestedInRowEvents && !this.dataConnection.PositionChangingOutsideDataGridView && !this.dataConnection.ListWasReset)
			{
				this.dataConnection.OnRowValidating(dataGridViewCellCancelEventArgs);
			}
			if (dataGridViewCell != null && rowIndex < this.Rows.Count && columnIndex < this.Columns.Count)
			{
				dataGridViewCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
			}
			return dataGridViewCellCancelEventArgs.Cancel;
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowValidating" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellCancelEventArgs" /> that contains the event data.</param>
		// Token: 0x06001C0D RID: 7181 RVA: 0x000778A8 File Offset: 0x00075AA8
		protected virtual void OnRowValidating(DataGridViewCellCancelEventArgs e)
		{
			try
			{
				this.noDimensionChangeCount++;
				DataGridViewCellCancelEventHandler dataGridViewCellCancelEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWVALIDATING] as DataGridViewCellCancelEventHandler;
				if (dataGridViewCellCancelEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
				{
					dataGridViewCellCancelEventHandler(this, e);
					this.CorrectFocus(true);
				}
			}
			finally
			{
				this.noDimensionChangeCount--;
			}
		}

		// Token: 0x06001C0E RID: 7182 RVA: 0x00077928 File Offset: 0x00075B28
		private void OnRowValidated(ref DataGridViewCell dataGridViewCell, int columnIndex, int rowIndex)
		{
			this.IsCurrentRowDirtyInternal = false;
			this.dataGridViewState1[2097152] = false;
			if (rowIndex == this.newRowIndex)
			{
				this.InvalidateRowPrivate(rowIndex);
			}
			DataGridViewCellEventArgs dataGridViewCellEventArgs = new DataGridViewCellEventArgs(columnIndex, rowIndex);
			this.OnRowValidated(dataGridViewCellEventArgs);
			if (dataGridViewCell != null)
			{
				if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
				{
					dataGridViewCell = null;
					return;
				}
				dataGridViewCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowValidated" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
		// Token: 0x06001C0F RID: 7183 RVA: 0x00077998 File Offset: 0x00075B98
		protected virtual void OnRowValidated(DataGridViewCellEventArgs e)
		{
			try
			{
				this.noDimensionChangeCount++;
				DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWVALIDATED] as DataGridViewCellEventHandler;
				if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
				{
					dataGridViewCellEventHandler(this, e);
					this.CorrectFocus(true);
				}
			}
			finally
			{
				this.noDimensionChangeCount--;
			}
		}

		// Token: 0x06001C10 RID: 7184 RVA: 0x00077A18 File Offset: 0x00075C18
		private void RefreshByCurrentPos(int oldValue, int newValue)
		{
			Point point = base.PointToScreen(base.Location);
			int num = newValue - oldValue;
			if (point.X < 0 && num < 0)
			{
				base.Invalidate(new Rectangle(new Point(-point.X, this.ColumnHeadersHeight), new Size(-num, base.ClientSize.Height)));
			}
			point.X += base.Width;
			point.Y += base.Height;
			Rectangle bounds = Screen.GetBounds(point);
			if (point.X > bounds.Right && num > 0)
			{
				base.Invalidate(new Rectangle(new Point(base.ClientSize.Width - (point.X - bounds.Right) - num, this.ColumnHeadersHeight), new Size(num, base.ClientSize.Height)));
			}
			if (point.Y < 0 && num < 0)
			{
				base.Invalidate(new Rectangle(new Point(0, -point.Y), new Size(-num, base.ClientSize.Width)));
			}
			if (point.Y > bounds.Bottom && num > 0)
			{
				base.Invalidate(new Rectangle(new Point(0, this.ColumnHeadersHeight), new Size(base.ClientSize.Width, base.ClientSize.Height - (point.Y - bounds.Bottom) - num)));
			}
		}

		// Token: 0x06001C11 RID: 7185 RVA: 0x00077BA0 File Offset: 0x00075DA0
		private void OnScroll(ScrollEventType scrollEventType, int oldValue, int newValue, ScrollOrientation orientation)
		{
			ScrollEventArgs scrollEventArgs = new ScrollEventArgs(scrollEventType, oldValue, newValue, orientation);
			this.OnScroll(scrollEventArgs);
			this.RefreshByCurrentPos(oldValue, newValue);
			if (this.Focused && this.IsGridFocusRectangleEnabled())
			{
				this.InvalidateGridFocusOnScroll(newValue - oldValue, orientation);
			}
			if (ScrollOrientation.VerticalScroll == orientation)
			{
				if (scrollEventArgs.NewValue == newValue)
				{
					return;
				}
				try
				{
					this.dataGridViewState2[16384] = true;
					int num = this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
					int num2 = num;
					newValue = scrollEventArgs.NewValue;
					while (num != -1 && newValue > 0)
					{
						num2 = num;
						num = this.Rows.GetNextRow(num, DataGridViewElementStates.Visible);
						newValue--;
					}
					if (num != -1)
					{
						num2 = num;
					}
					if (num2 != -1)
					{
						this.FirstDisplayedScrollingRowIndex = num2;
					}
					return;
				}
				finally
				{
					this.dataGridViewState2[16384] = false;
				}
			}
			if (scrollEventArgs.NewValue != newValue)
			{
				try
				{
					this.dataGridViewState2[32768] = true;
					this.HorizontalOffset = scrollEventArgs.NewValue;
				}
				finally
				{
					this.dataGridViewState2[32768] = false;
				}
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.Scroll" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.ScrollEventArgs" /> that contains the event data.</param>
		// Token: 0x06001C12 RID: 7186 RVA: 0x00077CB8 File Offset: 0x00075EB8
		protected virtual void OnScroll(ScrollEventArgs e)
		{
			ScrollEventHandler scrollEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWSCROLL] as ScrollEventHandler;
			if (scrollEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				scrollEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.SelectionChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains information about the event.</param>
		// Token: 0x06001C13 RID: 7187 RVA: 0x00077D00 File Offset: 0x00075F00
		protected virtual void OnSelectionChanged(EventArgs e)
		{
			this.dataGridViewState2[262144] = false;
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWSELECTIONCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x06001C14 RID: 7188 RVA: 0x00077D5C File Offset: 0x00075F5C
		internal bool OnSortCompare(DataGridViewColumn dataGridViewSortedColumn, object value1, object value2, int rowIndex1, int rowIndex2, out int sortResult)
		{
			DataGridViewSortCompareEventArgs dataGridViewSortCompareEventArgs = new DataGridViewSortCompareEventArgs(dataGridViewSortedColumn, value1, value2, rowIndex1, rowIndex2);
			this.OnSortCompare(dataGridViewSortCompareEventArgs);
			sortResult = dataGridViewSortCompareEventArgs.SortResult;
			return dataGridViewSortCompareEventArgs.Handled;
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.SortCompare" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewSortCompareEventArgs" /> that contains the event data.</param>
		// Token: 0x06001C15 RID: 7189 RVA: 0x00077D8C File Offset: 0x00075F8C
		protected virtual void OnSortCompare(DataGridViewSortCompareEventArgs e)
		{
			DataGridViewSortCompareEventHandler dataGridViewSortCompareEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWSORTCOMPARE] as DataGridViewSortCompareEventHandler;
			if (dataGridViewSortCompareEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewSortCompareEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.Sorted" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06001C16 RID: 7190 RVA: 0x00077DD4 File Offset: 0x00075FD4
		protected virtual void OnSorted(EventArgs e)
		{
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWSORTED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x06001C17 RID: 7191 RVA: 0x00077E1C File Offset: 0x0007601C
		internal void OnSortGlyphDirectionChanged(DataGridViewColumnHeaderCell dataGridViewColumnHeaderCell)
		{
			if (dataGridViewColumnHeaderCell.OwningColumn == this.SortedColumn)
			{
				if (dataGridViewColumnHeaderCell.SortGlyphDirection == SortOrder.None)
				{
					this.sortedColumn = null;
					DataGridViewColumn owningColumn = dataGridViewColumnHeaderCell.OwningColumn;
					if (owningColumn.IsDataBound)
					{
						for (int i = 0; i < this.Columns.Count; i++)
						{
							if (owningColumn != this.Columns[i] && this.Columns[i].SortMode != DataGridViewColumnSortMode.NotSortable && string.Compare(owningColumn.DataPropertyName, this.Columns[i].DataPropertyName, true, CultureInfo.InvariantCulture) == 0)
							{
								this.sortedColumn = this.Columns[i];
								break;
							}
						}
					}
				}
				this.sortOrder = ((this.sortedColumn != null) ? this.sortedColumn.HeaderCell.SortGlyphDirection : SortOrder.None);
			}
			this.InvalidateCellPrivate(dataGridViewColumnHeaderCell);
		}

		// Token: 0x06001C18 RID: 7192 RVA: 0x00077EF4 File Offset: 0x000760F4
		private void OnTopLeftHeaderMouseDown()
		{
			if (this.MultiSelect)
			{
				this.SelectAll();
				if (-1 != this.ptCurrentCell.X)
				{
					bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, this.ptCurrentCell.Y, false, false, false);
				}
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.UserAddedRow" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.ArgumentException">The row indicated by the <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
		// Token: 0x06001C19 RID: 7193 RVA: 0x00077F40 File Offset: 0x00076140
		protected virtual void OnUserAddedRow(DataGridViewRowEventArgs e)
		{
			if (e.Row.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
			}
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWUSERADDEDROW] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.UserDeletedRow" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data.</param>
		// Token: 0x06001C1A RID: 7194 RVA: 0x00077FAC File Offset: 0x000761AC
		protected virtual void OnUserDeletedRow(DataGridViewRowEventArgs e)
		{
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWUSERDELETEDROW] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.UserDeletingRow" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowCancelEventArgs" /> that contains the event data.</param>
		// Token: 0x06001C1B RID: 7195 RVA: 0x00077FF4 File Offset: 0x000761F4
		protected virtual void OnUserDeletingRow(DataGridViewRowCancelEventArgs e)
		{
			DataGridViewRowCancelEventHandler dataGridViewRowCancelEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWUSERDELETINGROW] as DataGridViewRowCancelEventHandler;
			if (dataGridViewRowCancelEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowCancelEventHandler(this, e);
			}
		}

		// Token: 0x06001C1C RID: 7196 RVA: 0x0007803C File Offset: 0x0007623C
		private void OnUserPreferenceChanged(object sender, UserPreferenceChangedEventArgs e)
		{
			if (e.Category == UserPreferenceCategory.Color || e.Category == UserPreferenceCategory.Locale || e.Category == UserPreferenceCategory.General || e.Category == UserPreferenceCategory.Window || e.Category == UserPreferenceCategory.VisualStyle)
			{
				this.OnGlobalAutoSize();
				if (e.Category == UserPreferenceCategory.Window)
				{
					this.cachedEditingControl = null;
					if (this.editingControl != null)
					{
						this.dataGridViewState2[536870912] = true;
					}
					this.PerformLayoutPrivate(false, false, false, true);
				}
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.Validating" /> event.</summary>
		/// <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs" /> that contains the event data.</param>
		/// <exception cref="T:System.Exception">Validation failed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />. The exception object can typically be cast to type <see cref="T:System.FormatException" />.</exception>
		// Token: 0x06001C1D RID: 7197 RVA: 0x000780B4 File Offset: 0x000762B4
		protected override void OnValidating(CancelEventArgs e)
		{
			if (!base.BecomingActiveControl && (this.editingControl == null || !this.editingControl.BecomingActiveControl))
			{
				if (!this.dataGridViewState1[64] && !this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.LeaveControl, DataGridView.DataGridViewValidateCellInternal.Always, false, false, false, false, false, false, false, false))
				{
					e.Cancel = true;
					return;
				}
				if (this.ptCurrentCell.X >= 0)
				{
					DataGridViewCell dataGridViewCell = null;
					if (this.OnRowValidating(ref dataGridViewCell, this.ptCurrentCell.X, this.ptCurrentCell.Y))
					{
						e.Cancel = true;
						return;
					}
					if (this.ptCurrentCell.X == -1)
					{
						return;
					}
					this.OnRowValidated(ref dataGridViewCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
					if (this.DataSource != null && this.ptCurrentCell.X >= 0 && this.AllowUserToAddRowsInternal && this.newRowIndex == this.ptCurrentCell.Y)
					{
						int previousRow = this.Rows.GetPreviousRow(this.ptCurrentCell.Y, DataGridViewElementStates.Visible);
						if (previousRow > -1)
						{
							bool flag = this.SetAndSelectCurrentCellAddress(this.ptCurrentCell.X, previousRow, true, false, false, false, false);
						}
						else
						{
							bool flag2 = this.SetCurrentCellAddressCore(-1, -1, true, false, false);
						}
					}
				}
			}
			base.OnValidating(e);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.VisibleChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
		// Token: 0x06001C1E RID: 7198 RVA: 0x000781F4 File Offset: 0x000763F4
		protected override void OnVisibleChanged(EventArgs e)
		{
			base.OnVisibleChanged(e);
			this.OnVisibleChangedPrivate();
		}

		// Token: 0x06001C1F RID: 7199 RVA: 0x00078204 File Offset: 0x00076404
		private void OnVisibleChangedPrivate()
		{
			if (base.Visible)
			{
				int i = this.displayedBandsInfo.NumDisplayedFrozenRows;
				int num;
				if (i > 0)
				{
					num = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					while (i > 0)
					{
						if ((this.Rows.GetRowState(num) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None)
						{
							return;
						}
						this.Rows.SetRowState(num, DataGridViewElementStates.Displayed, true);
						num = this.Rows.GetNextRow(num, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
						i--;
					}
				}
				num = this.displayedBandsInfo.FirstDisplayedScrollingRow;
				if (num > -1)
				{
					for (int j = this.displayedBandsInfo.NumDisplayedScrollingRows; j > 0; j--)
					{
						if ((this.Rows.GetRowState(num) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None)
						{
							return;
						}
						this.Rows.SetRowState(num, DataGridViewElementStates.Displayed, true);
						num = this.Rows.GetNextRow(num, DataGridViewElementStates.Visible);
					}
				}
			}
			else
			{
				this.UpdateRowsDisplayedState(false);
			}
			this.UpdateColumnsDisplayedState(base.Visible);
		}

		/// <summary>Paints the background of the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> used to paint the background.</param>
		/// <param name="clipBounds">A <see cref="T:System.Drawing.Rectangle" /> that represents the area of the <see cref="T:System.Windows.Forms.DataGridView" /> that needs to be painted.</param>
		/// <param name="gridBounds">A <see cref="T:System.Drawing.Rectangle" /> that represents the area in which cells are drawn.</param>
		// Token: 0x06001C20 RID: 7200 RVA: 0x000782DC File Offset: 0x000764DC
		protected virtual void PaintBackground(Graphics graphics, Rectangle clipBounds, Rectangle gridBounds)
		{
			Rectangle rectangle = gridBounds;
			int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Displayed);
			if (this.layout.ColumnHeadersVisible)
			{
				rectangle.Y += this.layout.ColumnHeaders.Height;
				rectangle.Height -= this.layout.ColumnHeaders.Height;
			}
			else if (this.SingleHorizontalBorderAdded && rowsHeight > 0)
			{
				int num = rectangle.Y;
				rectangle.Y = num + 1;
				num = rectangle.Height;
				rectangle.Height = num - 1;
			}
			rectangle.Y += rowsHeight;
			rectangle.Height -= rowsHeight;
			if (rectangle.Width > 0 && rectangle.Height > 0)
			{
				graphics.FillRectangle(this.backgroundBrush, rectangle);
			}
			int columnsWidth = this.Columns.GetColumnsWidth(DataGridViewElementStates.Displayed);
			Rectangle rectangle2 = gridBounds;
			if (this.Columns.Count > 0)
			{
				if (this.layout.RowHeadersVisible)
				{
					if (!this.RightToLeftInternal)
					{
						rectangle2.X += this.layout.RowHeaders.Width;
					}
					rectangle2.Width -= this.layout.RowHeaders.Width;
				}
				else if (this.SingleVerticalBorderAdded && columnsWidth > 0)
				{
					int num;
					if (!this.RightToLeftInternal)
					{
						num = rectangle2.X;
						rectangle2.X = num + 1;
					}
					num = rectangle2.Width;
					rectangle2.Width = num - 1;
				}
			}
			int num2 = columnsWidth - this.horizontalOffset;
			if (!this.RightToLeftInternal)
			{
				rectangle2.X += num2;
			}
			rectangle2.Width -= num2;
			if (rectangle.Height > 0)
			{
				rectangle2.Height = gridBounds.Height - rectangle.Height;
			}
			if (rectangle2.Width > 0 && rectangle2.Height > 0)
			{
				graphics.FillRectangle(this.backgroundBrush, rectangle2);
			}
		}

		// Token: 0x06001C21 RID: 7201 RVA: 0x000784D4 File Offset: 0x000766D4
		private void PaintBorder(Graphics g, Rectangle clipRect, Rectangle bounds)
		{
			if (this.BorderStyle == BorderStyle.None)
			{
				return;
			}
			int borderWidth = this.BorderWidth;
			Rectangle rectangle = new Rectangle(0, 0, bounds.Width, borderWidth);
			bool flag = clipRect.IntersectsWith(rectangle);
			if (!flag)
			{
				rectangle.Y = bounds.Height - borderWidth;
				flag = clipRect.IntersectsWith(rectangle);
				if (!flag)
				{
					rectangle.Y = 0;
					rectangle.Height = bounds.Height;
					rectangle.Width = borderWidth;
					flag = clipRect.IntersectsWith(rectangle);
					if (!flag)
					{
						rectangle.X = bounds.Width - borderWidth;
						flag = clipRect.IntersectsWith(rectangle);
					}
				}
			}
			if (flag)
			{
				if (this.BorderStyle == BorderStyle.Fixed3D)
				{
					if (Application.RenderWithVisualStyles)
					{
						Pen cachedPen = this.GetCachedPen(VisualStyleInformation.TextControlBorder);
						g.DrawRectangle(cachedPen, new Rectangle(0, 0, bounds.Width - 1, bounds.Height - 1));
						return;
					}
					ControlPaint.DrawBorder3D(g, bounds, Border3DStyle.Sunken);
					return;
				}
				else if (this.BorderStyle == BorderStyle.FixedSingle)
				{
					Pen cachedPen2 = this.GetCachedPen(SystemColors.ControlText);
					g.DrawRectangle(cachedPen2, new Rectangle(0, 0, bounds.Width - 1, bounds.Height - 1));
				}
			}
		}

		// Token: 0x06001C22 RID: 7202 RVA: 0x000785F0 File Offset: 0x000767F0
		private void PaintColumnHeaders(Graphics g, Rectangle clipBounds, bool singleBorderAdded)
		{
			if (g.IsVisible(this.layout.ColumnHeaders))
			{
				Rectangle columnHeaders;
				Rectangle rectangle = (columnHeaders = this.layout.ColumnHeaders);
				columnHeaders.Height = (rectangle.Height = this.columnHeadersHeight);
				int num = 0;
				bool flag = true;
				bool flag2 = false;
				DataGridViewCellStyle dataGridViewCellStyle = new DataGridViewCellStyle();
				DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyle = new DataGridViewAdvancedBorderStyle();
				DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				while (dataGridViewColumn != null)
				{
					DataGridViewCell dataGridViewCell = dataGridViewColumn.HeaderCell;
					rectangle.Width = dataGridViewColumn.Thickness;
					if (singleBorderAdded && flag)
					{
						int num2 = rectangle.Width;
						rectangle.Width = num2 + 1;
					}
					if (this.RightToLeftInternal)
					{
						rectangle.X = columnHeaders.Right - num - rectangle.Width;
					}
					else
					{
						rectangle.X = columnHeaders.X + num;
					}
					this.BuildInheritedColumnHeaderCellStyle(dataGridViewCellStyle, dataGridViewCell);
					DataGridViewColumn dataGridViewColumn2 = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					if (dataGridViewColumn2 == null)
					{
						flag2 = this.displayedBandsInfo.FirstDisplayedScrollingCol < 0;
					}
					DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyle2 = this.AdjustColumnHeaderBorderStyle(this.AdvancedColumnHeadersBorderStyle, dataGridViewAdvancedBorderStyle, flag, flag2);
					dataGridViewCell.PaintWork(g, clipBounds, rectangle, -1, dataGridViewColumn.State, dataGridViewCellStyle, dataGridViewAdvancedBorderStyle2, DataGridViewPaintParts.Background | DataGridViewPaintParts.Border | DataGridViewPaintParts.ContentBackground | DataGridViewPaintParts.ContentForeground | DataGridViewPaintParts.ErrorIcon | DataGridViewPaintParts.SelectionBackground);
					num += rectangle.Width;
					if (num >= columnHeaders.Width)
					{
						break;
					}
					dataGridViewColumn = dataGridViewColumn2;
					flag = false;
				}
				Rectangle rectangle2 = columnHeaders;
				if (!this.RightToLeftInternal)
				{
					rectangle2.X -= this.negOffset;
				}
				rectangle2.Width += this.negOffset;
				if (this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0 && num < rectangle2.Width)
				{
					Region region = null;
					if (this.negOffset > 0)
					{
						region = g.Clip;
						Rectangle rectangle3 = columnHeaders;
						if (!this.RightToLeftInternal)
						{
							rectangle3.X += num;
						}
						rectangle3.Width -= num;
						g.SetClip(rectangle3);
					}
					dataGridViewColumn = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
					while (dataGridViewColumn != null)
					{
						DataGridViewCell dataGridViewCell = dataGridViewColumn.HeaderCell;
						rectangle.Width = dataGridViewColumn.Thickness;
						if (singleBorderAdded && flag)
						{
							int num2 = rectangle.Width;
							rectangle.Width = num2 + 1;
						}
						if (this.RightToLeftInternal)
						{
							rectangle.X = rectangle2.Right - num - rectangle.Width;
						}
						else
						{
							rectangle.X = rectangle2.X + num;
						}
						this.BuildInheritedColumnHeaderCellStyle(dataGridViewCellStyle, dataGridViewCell);
						DataGridViewColumn dataGridViewColumn2 = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
						flag2 = dataGridViewColumn2 == null;
						DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyle2 = this.AdjustColumnHeaderBorderStyle(this.AdvancedColumnHeadersBorderStyle, dataGridViewAdvancedBorderStyle, flag, flag2);
						dataGridViewCell.PaintWork(g, clipBounds, rectangle, -1, dataGridViewColumn.State, dataGridViewCellStyle, dataGridViewAdvancedBorderStyle2, DataGridViewPaintParts.Background | DataGridViewPaintParts.Border | DataGridViewPaintParts.ContentBackground | DataGridViewPaintParts.ContentForeground | DataGridViewPaintParts.ErrorIcon | DataGridViewPaintParts.SelectionBackground);
						num += rectangle.Width;
						if (num >= rectangle2.Width)
						{
							break;
						}
						dataGridViewColumn = dataGridViewColumn2;
						flag = false;
					}
					if (this.negOffset > 0)
					{
						g.Clip = region;
						region.Dispose();
					}
				}
			}
		}

		// Token: 0x06001C23 RID: 7203 RVA: 0x000788E0 File Offset: 0x00076AE0
		private void PaintGrid(Graphics g, Rectangle gridBounds, Rectangle clipRect, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded)
		{
			Rectangle rectangle = gridBounds;
			if (this.layout.TopLeftHeader.Width > 0 && (clipRect.IntersectsWith(this.layout.TopLeftHeader) || this.lastHeaderShadow != -1) && (this.Columns.Count > 0 || this.Rows.Count > 0))
			{
				using (Region clip = g.Clip)
				{
					g.SetClip(this.layout.TopLeftHeader);
					this.PaintTopLeftHeaderCell(g);
					g.Clip = clip;
				}
			}
			if (this.layout.ColumnHeadersVisible)
			{
				Rectangle rectangle2 = default(Rectangle);
				rectangle2 = this.layout.ColumnHeaders;
				if (singleVerticalBorderAdded)
				{
					int width = rectangle2.Width;
					rectangle2.Width = width + 1;
				}
				if (clipRect.IntersectsWith(rectangle2) || this.lastHeaderShadow != -1)
				{
					using (Region clip2 = g.Clip)
					{
						g.SetClip(rectangle2);
						this.PaintColumnHeaders(g, rectangle2, singleVerticalBorderAdded);
						g.Clip = clip2;
					}
				}
				int height = this.layout.ColumnHeaders.Height;
				rectangle.Y += height;
				rectangle.Height -= height;
				if (this.lastHeaderShadow != -1)
				{
					this.DrawColHeaderShadow(g, this.lastHeaderShadow);
				}
			}
			if (rectangle.Height > 0)
			{
				this.PaintRows(g, rectangle, clipRect, singleHorizontalBorderAdded);
			}
			if (this.currentRowSplitBar != -1)
			{
				this.DrawRowSplitBar(this.currentRowSplitBar);
				return;
			}
			if (this.currentColSplitBar != -1)
			{
				this.DrawColSplitBar(this.currentColSplitBar);
			}
		}

		// Token: 0x06001C24 RID: 7204 RVA: 0x00078A8C File Offset: 0x00076C8C
		private void PaintRows(Graphics g, Rectangle boundingRect, Rectangle clipRect, bool singleHorizontalBorderAdded)
		{
			int num = 0;
			bool flag = true;
			int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			while (num2 != -1)
			{
				Rectangle rectangle = boundingRect;
				DataGridViewAutoSizeRowsModeInternal dataGridViewAutoSizeRowsModeInternal = (DataGridViewAutoSizeRowsModeInternal)this.autoSizeRowsMode;
				if (dataGridViewAutoSizeRowsModeInternal != DataGridViewAutoSizeRowsModeInternal.None)
				{
					int height = this.Rows.SharedRow(num2).GetHeight(num2);
					this.Rows.SharedRow(num2).CachedThickness = height;
					this.AutoResizeRowInternal(num2, DataGridView.MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), false, true);
				}
				rectangle.Height = this.Rows.SharedRow(num2).GetHeight(num2);
				if (flag && singleHorizontalBorderAdded)
				{
					int num3 = rectangle.Height;
					rectangle.Height = num3 + 1;
				}
				rectangle.Y = boundingRect.Y + num;
				int num4 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				if (clipRect.IntersectsWith(rectangle))
				{
					DataGridViewRow dataGridViewRow = this.Rows.SharedRow(num2);
					dataGridViewRow.Paint(g, clipRect, rectangle, num2, this.Rows.GetRowState(num2), flag, num4 == -1 && this.displayedBandsInfo.FirstDisplayedScrollingRow == -1);
				}
				num += rectangle.Height;
				if (num >= boundingRect.Height)
				{
					break;
				}
				num2 = num4;
				flag = false;
			}
			if (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0 && num < boundingRect.Height)
			{
				num2 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
				while (num2 != -1)
				{
					Rectangle rectangle = boundingRect;
					DataGridViewAutoSizeRowsModeInternal dataGridViewAutoSizeRowsModeInternal2 = (DataGridViewAutoSizeRowsModeInternal)this.autoSizeRowsMode;
					if (dataGridViewAutoSizeRowsModeInternal2 != DataGridViewAutoSizeRowsModeInternal.None)
					{
						int height2 = this.Rows.SharedRow(num2).GetHeight(num2);
						this.Rows.SharedRow(num2).CachedThickness = height2;
						this.AutoResizeRowInternal(num2, DataGridView.MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), false, true);
					}
					rectangle.Height = this.Rows.SharedRow(num2).GetHeight(num2);
					if (flag && singleHorizontalBorderAdded)
					{
						int num3 = rectangle.Height;
						rectangle.Height = num3 + 1;
					}
					rectangle.Y = boundingRect.Y + num;
					int num4 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
					if (clipRect.IntersectsWith(rectangle))
					{
						DataGridViewRow dataGridViewRow = this.Rows.SharedRow(num2);
						dataGridViewRow.Paint(g, clipRect, rectangle, num2, this.Rows.GetRowState(num2), flag, num4 == -1);
					}
					num += rectangle.Height;
					if (num >= boundingRect.Height)
					{
						break;
					}
					num2 = num4;
					flag = false;
				}
			}
		}

		// Token: 0x06001C25 RID: 7205 RVA: 0x00078CE8 File Offset: 0x00076EE8
		private void PaintTopLeftHeaderCell(Graphics g)
		{
			if (g.IsVisible(this.layout.TopLeftHeader))
			{
				DataGridViewCell dataGridViewCell = this.TopLeftHeaderCell;
				DataGridViewCellStyle dataGridViewCellStyle = new DataGridViewCellStyle();
				this.BuildInheritedColumnHeaderCellStyle(dataGridViewCellStyle, dataGridViewCell);
				Rectangle topLeftHeader = this.layout.TopLeftHeader;
				topLeftHeader.Width = this.rowHeadersWidth;
				topLeftHeader.Height = this.columnHeadersHeight;
				dataGridViewCell.PaintWork(g, this.layout.TopLeftHeader, topLeftHeader, -1, dataGridViewCell.State, dataGridViewCellStyle, this.AdjustedTopLeftHeaderBorderStyle, DataGridViewPaintParts.Background | DataGridViewPaintParts.Border | DataGridViewPaintParts.ContentBackground | DataGridViewPaintParts.ContentForeground | DataGridViewPaintParts.ErrorIcon | DataGridViewPaintParts.SelectionBackground);
			}
		}

		// Token: 0x06001C26 RID: 7206 RVA: 0x00078D68 File Offset: 0x00076F68
		private void PerformLayoutPrivate(bool useRowShortcut, bool computeVisibleRows, bool invalidInAdjustFillingColumns, bool repositionEditingControl)
		{
			this.inPerformLayoutCount++;
			try
			{
				if (invalidInAdjustFillingColumns && this.InAdjustFillingColumns)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotAlterAutoFillColumnParameter"));
				}
				if (base.IsHandleCreated)
				{
					bool flag = false;
					if (useRowShortcut)
					{
						this.ComputeLayoutShortcut(computeVisibleRows);
					}
					else
					{
						flag = this.ComputeLayout();
					}
					this.FlushDisplayedChanged();
					if (flag && this.inPerformLayoutCount < 3)
					{
						if ((this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) != DataGridViewAutoSizeRowsMode.None)
						{
							this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
						}
						if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
						{
							this.AutoResizeColumnHeadersHeight(true, true);
						}
					}
					if (repositionEditingControl && this.editingControl != null)
					{
						this.PositionEditingControl(true, false, false);
					}
				}
				else
				{
					this.displayedBandsInfo.FirstDisplayedFrozenCol = -1;
					this.displayedBandsInfo.FirstDisplayedFrozenRow = -1;
					this.displayedBandsInfo.FirstDisplayedScrollingRow = -1;
					this.displayedBandsInfo.FirstDisplayedScrollingCol = -1;
					this.displayedBandsInfo.NumDisplayedFrozenRows = 0;
					this.displayedBandsInfo.NumDisplayedFrozenCols = 0;
					this.displayedBandsInfo.NumDisplayedScrollingRows = 0;
					this.displayedBandsInfo.NumDisplayedScrollingCols = 0;
					this.displayedBandsInfo.NumTotallyDisplayedFrozenRows = 0;
					this.displayedBandsInfo.NumTotallyDisplayedScrollingRows = 0;
					this.displayedBandsInfo.LastDisplayedScrollingRow = -1;
					this.displayedBandsInfo.LastTotallyDisplayedScrollingCol = -1;
					if (this.layout != null)
					{
						this.layout.dirty = true;
					}
				}
			}
			finally
			{
				this.inPerformLayoutCount--;
			}
		}

		// Token: 0x06001C27 RID: 7207 RVA: 0x00078EE8 File Offset: 0x000770E8
		private void PopulateNewRowWithDefaultValues()
		{
			if (this.newRowIndex != -1)
			{
				DataGridViewRow dataGridViewRow = this.Rows.SharedRow(this.newRowIndex);
				DataGridViewCellCollection dataGridViewCellCollection = dataGridViewRow.Cells;
				foreach (object obj in dataGridViewCellCollection)
				{
					DataGridViewCell dataGridViewCell = (DataGridViewCell)obj;
					if (dataGridViewCell.DefaultNewRowValue != null)
					{
						dataGridViewRow = this.Rows[this.newRowIndex];
						dataGridViewCellCollection = dataGridViewRow.Cells;
						break;
					}
				}
				foreach (object obj2 in dataGridViewCellCollection)
				{
					DataGridViewCell dataGridViewCell2 = (DataGridViewCell)obj2;
					dataGridViewCell2.SetValueInternal(this.newRowIndex, dataGridViewCell2.DefaultNewRowValue);
				}
			}
		}

		// Token: 0x06001C28 RID: 7208 RVA: 0x00078FDC File Offset: 0x000771DC
		private void PositionEditingControl(bool setLocation, bool setSize, bool setFocus)
		{
			if (!base.IsHandleCreated)
			{
				return;
			}
			Rectangle data = this.layout.Data;
			if (data.Width == 0 || data.Height == 0)
			{
				return;
			}
			this.dataGridViewState1[16384] = true;
			try
			{
				int num = this.GetColumnXFromIndex(this.ptCurrentCell.X);
				if (this.RightToLeftInternal)
				{
					num -= this.Columns[this.ptCurrentCell.X].Width - 1;
				}
				Rectangle rectangle = new Rectangle(num, this.GetRowYFromIndex(this.ptCurrentCell.Y), this.Columns[this.ptCurrentCell.X].Width, this.Rows.SharedRow(this.ptCurrentCell.Y).GetHeight(this.ptCurrentCell.Y));
				Rectangle rectangle2 = rectangle;
				if (!this.Columns[this.ptCurrentCell.X].Frozen)
				{
					int columnsWidth = this.Columns.GetColumnsWidth(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					if (!this.RightToLeftInternal)
					{
						data.X += columnsWidth;
					}
					data.Width = Math.Max(0, data.Width - columnsWidth);
				}
				if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None)
				{
					int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					data.Y += rowsHeight;
				}
				rectangle2.Intersect(data);
				if (rectangle2.Width == 0 || rectangle2.Height == 0)
				{
					this.editingPanel.Location = new Point(base.Width + 1, 0);
					this.dataGridViewState1[4096] = true;
				}
				else
				{
					bool singleVerticalBorderAdded = this.SingleVerticalBorderAdded;
					bool singleHorizontalBorderAdded = this.SingleHorizontalBorderAdded;
					bool flag = this.FirstDisplayedColumnIndex == this.ptCurrentCell.X;
					bool flag2 = this.FirstDisplayedRowIndex == this.ptCurrentCell.Y;
					if (singleVerticalBorderAdded && flag)
					{
						int num2;
						if (!this.RightToLeftInternal)
						{
							num2 = rectangle.X;
							rectangle.X = num2 - 1;
							num2 = rectangle2.X;
							rectangle2.X = num2 - 1;
						}
						num2 = rectangle.Width;
						rectangle.Width = num2 + 1;
						num2 = rectangle2.Width;
						rectangle2.Width = num2 + 1;
					}
					if (singleHorizontalBorderAdded && flag2)
					{
						int num2 = rectangle.Y;
						rectangle.Y = num2 - 1;
						num2 = rectangle2.Y;
						rectangle2.Y = num2 - 1;
						num2 = rectangle.Height;
						rectangle.Height = num2 + 1;
						num2 = rectangle2.Height;
						rectangle2.Height = num2 + 1;
					}
					this.CurrentCellInternal.PositionEditingControl(setLocation || this.dataGridViewState1[4096], setSize || this.dataGridViewState1[4096], rectangle, rectangle2, this.InheritedEditingCellStyle, singleVerticalBorderAdded, singleHorizontalBorderAdded, flag, flag2);
					this.dataGridViewState1[4096] = false;
				}
				this.editingPanel.Visible = true;
				if (setFocus)
				{
					this.CorrectFocus(false);
				}
			}
			finally
			{
				this.dataGridViewState1[16384] = false;
			}
		}

		/// <summary>Processes the A key.</summary>
		/// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
		/// <returns>
		///   <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		// Token: 0x06001C29 RID: 7209 RVA: 0x0007931C File Offset: 0x0007751C
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessAKey(Keys keyData)
		{
			if ((keyData & (Keys.Shift | Keys.Control | Keys.Alt)) == Keys.Control && this.MultiSelect)
			{
				this.SelectAll();
				return true;
			}
			return false;
		}

		/// <summary>Processes the DELETE key.</summary>
		/// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
		/// <returns>
		///   <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.Exception">The DELETE key would delete one or more rows, but an error in the data source prevents the deletion and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />.</exception>
		// Token: 0x06001C2A RID: 7210 RVA: 0x00079340 File Offset: 0x00077540
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessDeleteKey(Keys keyData)
		{
			if (this.AllowUserToDeleteRowsInternal)
			{
				if (this.editingControl != null)
				{
					return false;
				}
				DataGridViewSelectionMode dataGridViewSelectionMode = this.SelectionMode;
				if (dataGridViewSelectionMode == DataGridViewSelectionMode.FullRowSelect || dataGridViewSelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
				{
					int num = 0;
					try
					{
						this.selectedBandSnapshotIndexes = new DataGridViewIntLinkedList(this.selectedBandIndexes);
						while (this.selectedBandSnapshotIndexes.Count > num)
						{
							int num2 = this.selectedBandSnapshotIndexes[num];
							if (num2 == this.newRowIndex || num2 >= this.Rows.Count)
							{
								num++;
							}
							else
							{
								DataGridViewRowCancelEventArgs dataGridViewRowCancelEventArgs = new DataGridViewRowCancelEventArgs(this.Rows[num2]);
								this.OnUserDeletingRow(dataGridViewRowCancelEventArgs);
								if (!dataGridViewRowCancelEventArgs.Cancel)
								{
									DataGridViewRow dataGridViewRow = this.Rows[num2];
									if (this.DataSource != null)
									{
										int count = this.Rows.Count;
										DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = null;
										try
										{
											this.DataConnection.DeleteRow(num2);
										}
										catch (Exception ex)
										{
											if (ClientUtils.IsCriticalException(ex))
											{
												throw;
											}
											dataGridViewDataErrorEventArgs = new DataGridViewDataErrorEventArgs(ex, -1, num2, DataGridViewDataErrorContexts.RowDeletion);
											this.OnDataErrorInternal(dataGridViewDataErrorEventArgs);
											if (dataGridViewDataErrorEventArgs.ThrowException)
											{
												throw dataGridViewDataErrorEventArgs.Exception;
											}
											num++;
										}
										if (count != this.Rows.Count)
										{
											DataGridViewRowEventArgs dataGridViewRowEventArgs = new DataGridViewRowEventArgs(dataGridViewRow);
											this.OnUserDeletedRow(dataGridViewRowEventArgs);
										}
										else if (dataGridViewDataErrorEventArgs == null)
										{
											num++;
										}
									}
									else
									{
										this.Rows.RemoveAtInternal(num2, false);
										DataGridViewRowEventArgs dataGridViewRowEventArgs2 = new DataGridViewRowEventArgs(dataGridViewRow);
										this.OnUserDeletedRow(dataGridViewRowEventArgs2);
									}
								}
								else
								{
									num++;
								}
							}
						}
					}
					finally
					{
						this.selectedBandSnapshotIndexes = null;
					}
					return true;
				}
			}
			return false;
		}

		/// <summary>Processes keys, such as the TAB, ESCAPE, ENTER, and ARROW keys, used to control dialog boxes.</summary>
		/// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
		/// <returns>
		///   <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.InvalidCastException">The key pressed would cause the control to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		/// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />.</exception>
		// Token: 0x06001C2B RID: 7211 RVA: 0x000794F0 File Offset: 0x000776F0
		[UIPermission(SecurityAction.LinkDemand, Window = UIPermissionWindow.AllWindows)]
		protected override bool ProcessDialogKey(Keys keyData)
		{
			Keys keys = keyData & Keys.KeyCode;
			if (keys == Keys.Return)
			{
				if (this.ProcessEnterKey(keyData))
				{
					return true;
				}
			}
			else
			{
				if (keys == Keys.Escape)
				{
					bool isEscapeKeyEffective = this.IsEscapeKeyEffective;
					bool flag = base.ProcessDialogKey(keyData);
					if (!isEscapeKeyEffective && this.Focused && this.ptCurrentCell.X > -1 && !this.IsCurrentCellInEditMode && (this.EditMode == DataGridViewEditMode.EditOnEnter || (this.EditMode != DataGridViewEditMode.EditProgrammatically && this.CurrentCellInternal.EditType == null)))
					{
						this.BeginEditInternal(true);
					}
					return flag;
				}
				if (keys == Keys.D0 || keys == Keys.NumPad0)
				{
					if (this.ProcessZeroKey(keyData))
					{
						return true;
					}
				}
				else if (keys == Keys.C || keys == Keys.Insert)
				{
					if (this.ProcessInsertKey(keyData))
					{
						return true;
					}
				}
				else if (keys == Keys.Tab)
				{
					IntSecurity.AllWindows.Demand();
					if (this.ProcessTabKey(keyData))
					{
						return true;
					}
					if (this.editingControl != null)
					{
						this.dataGridViewState1[64] = true;
						if (!this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.LeaveControl, DataGridView.DataGridViewValidateCellInternal.Always, true, true, true, true, true, false, false, false))
						{
							return true;
						}
					}
					keyData &= ~Keys.Control;
					bool flag2 = false;
					IntSecurity.ModifyFocus.Assert();
					try
					{
						flag2 = base.ProcessDialogKey(keyData);
					}
					finally
					{
						CodeAccessPermission.RevertAssert();
					}
					if (this.dataGridViewState1[64] && this.Focused)
					{
						this.OnEnter(EventArgs.Empty);
					}
					return flag2;
				}
			}
			return base.ProcessDialogKey(keyData);
		}

		/// <summary>Processes the DOWN ARROW key.</summary>
		/// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
		/// <returns>
		///   <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.InvalidCastException">The DOWN ARROW key would cause the control to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		/// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />.</exception>
		// Token: 0x06001C2C RID: 7212 RVA: 0x00079658 File Offset: 0x00077858
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessDownKey(Keys keyData)
		{
			bool flag;
			return this.ProcessDownKeyInternal(keyData, out flag);
		}

		// Token: 0x06001C2D RID: 7213 RVA: 0x00079670 File Offset: 0x00077870
		private bool ProcessDownKeyInternal(Keys keyData, out bool moved)
		{
			DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
			int num = ((firstColumn == null) ? (-1) : firstColumn.Index);
			int lastRow = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
			if (num == -1 || lastRow == -1)
			{
				moved = false;
				return false;
			}
			int num2 = -1;
			if (this.ptCurrentCell.Y != -1)
			{
				num2 = this.Rows.GetNextRow(this.ptCurrentCell.Y, DataGridViewElementStates.Visible);
			}
			moved = true;
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						if ((keyData & Keys.Shift) == Keys.Shift)
						{
							if (this.ptCurrentCell.X == -1)
							{
								this.ClearSelection();
								this.SetSelectedCellCore(num, lastRow, true);
								bool flag = this.ScrollIntoView(num, lastRow, false);
								if (this.IsInnerCellOutOfBounds(num, lastRow))
								{
									moved = false;
									return true;
								}
								if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
								{
									moved = false;
								}
							}
							else if (this.MultiSelect)
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
								{
									return true;
								}
								int x = this.ptCurrentCell.X;
								int y = this.ptCurrentCell.Y;
								if (this.ptCurrentCell.X == -1 || this.ptAnchorCell.X == -1 || this.IsRowOutOfBounds(lastRow))
								{
									moved = false;
									return true;
								}
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, x, this.ptAnchorCell.Y, ref y, lastRow);
								if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, false, false, false))
								{
									moved = false;
								}
							}
							else
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
								{
									return true;
								}
								if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(lastRow))
								{
									moved = false;
									return true;
								}
								this.ClearSelection();
								this.SetSelectedCellCore(this.ptCurrentCell.X, lastRow, true);
								if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, true, false, false))
								{
									moved = false;
								}
							}
						}
						else if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, lastRow, true);
							bool flag = this.ScrollIntoView(num, lastRow, false);
							if (this.IsInnerCellOutOfBounds(num, lastRow))
							{
								moved = false;
								return true;
							}
							if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
							{
								moved = false;
							}
						}
						else
						{
							if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(lastRow))
							{
								moved = false;
								return true;
							}
							this.ClearSelection();
							this.SetSelectedCellCore(this.ptCurrentCell.X, lastRow, true);
							if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, true, false, false))
							{
								moved = false;
							}
						}
					}
					else if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, lastRow, true);
							bool flag = this.ScrollIntoView(num, lastRow, false);
							if (this.IsInnerCellOutOfBounds(num, lastRow))
							{
								moved = false;
								return true;
							}
							if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
							{
								moved = false;
							}
						}
						else
						{
							if (num2 == -1)
							{
								moved = false;
								return true;
							}
							if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
							{
								moved = false;
								return true;
							}
							if (this.MultiSelect)
							{
								int x2 = this.ptCurrentCell.X;
								int y2 = this.ptCurrentCell.Y;
								if (this.ptAnchorCell.X == -1)
								{
									moved = false;
									return true;
								}
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x2, x2, this.ptAnchorCell.Y, ref y2, num2);
							}
							else
							{
								this.ClearSelection();
								this.SetSelectedCellCore(this.ptCurrentCell.X, num2, true);
							}
							if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, !this.MultiSelect, false, false))
							{
								moved = false;
							}
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(num, lastRow, true);
						bool flag = this.ScrollIntoView(num, lastRow, false);
						if (this.IsInnerCellOutOfBounds(num, lastRow))
						{
							moved = false;
							return true;
						}
						if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
						{
							moved = false;
						}
					}
					else
					{
						if (num2 == -1)
						{
							moved = false;
							return true;
						}
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
						{
							moved = false;
							return true;
						}
						this.ClearSelection();
						this.SetSelectedCellCore(this.ptCurrentCell.X, num2, true);
						if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, true, false, false))
						{
							moved = false;
						}
					}
					return true;
				case DataGridViewSelectionMode.FullRowSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						if ((keyData & Keys.Shift) == Keys.Shift)
						{
							if (this.ptCurrentCell.X == -1)
							{
								this.ClearSelection();
								this.SetSelectedRowCore(lastRow, true);
								bool flag = this.ScrollIntoView(num, lastRow, false);
								if (this.IsInnerCellOutOfBounds(num, lastRow))
								{
									moved = false;
									return true;
								}
								if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
								{
									moved = false;
								}
							}
							else if (this.MultiSelect)
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
								{
									return true;
								}
								if (this.ptAnchorCell.Y == -1 || this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(lastRow))
								{
									moved = false;
									return true;
								}
								this.ClearSelection();
								this.SelectRowRange(this.ptAnchorCell.Y, lastRow, true);
								if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, false, false, false))
								{
									moved = false;
								}
							}
							else
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
								{
									return true;
								}
								if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(lastRow))
								{
									moved = false;
									return true;
								}
								this.SetSelectedRowCore(this.ptCurrentCell.Y, false);
								this.SetSelectedRowCore(lastRow, true);
								if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, true, false, false))
								{
									moved = false;
								}
							}
						}
						else if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(lastRow, true);
							bool flag = this.ScrollIntoView(num, lastRow, false);
							if (this.IsInnerCellOutOfBounds(num, lastRow))
							{
								moved = false;
								return true;
							}
							if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
							{
								moved = false;
							}
						}
						else
						{
							if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(lastRow))
							{
								moved = false;
								return true;
							}
							this.ClearSelection();
							this.SetSelectedRowCore(lastRow, true);
							if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, true, false, false))
							{
								moved = false;
							}
						}
					}
					else if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(lastRow, true);
							bool flag = this.ScrollIntoView(num, lastRow, false);
							if (this.IsInnerCellOutOfBounds(num, lastRow))
							{
								moved = false;
								return true;
							}
							if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
							{
								moved = false;
							}
						}
						else
						{
							if (num2 == -1)
							{
								moved = false;
								return true;
							}
							if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
							{
								moved = false;
								return true;
							}
							this.ClearSelection();
							if (this.MultiSelect)
							{
								if (this.ptAnchorCell.X == -1)
								{
									moved = false;
									return true;
								}
								if (num2 >= this.ptAnchorCell.Y)
								{
									this.SelectRowRange(this.ptAnchorCell.Y, num2, true);
								}
								else
								{
									this.SelectRowRange(num2, this.ptAnchorCell.Y, true);
								}
							}
							else
							{
								this.SetSelectedRowCore(num2, true);
							}
							if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, !this.MultiSelect, false, false))
							{
								moved = false;
							}
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedRowCore(lastRow, true);
						bool flag = this.ScrollIntoView(num, lastRow, false);
						if (this.IsInnerCellOutOfBounds(num, lastRow))
						{
							moved = false;
							return true;
						}
						if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
						{
							moved = false;
						}
					}
					else
					{
						if (num2 == -1)
						{
							moved = false;
							return true;
						}
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
						{
							moved = false;
							return true;
						}
						this.ClearSelection();
						this.SetSelectedRowCore(num2, true);
						if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, true, false, false))
						{
							moved = false;
						}
					}
					return true;
				case DataGridViewSelectionMode.FullColumnSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(num, true);
							bool flag = this.ScrollIntoView(num, lastRow, false);
							if (this.IsInnerCellOutOfBounds(num, lastRow))
							{
								moved = false;
								return true;
							}
							if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
							{
								moved = false;
							}
						}
						else
						{
							if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(lastRow))
							{
								moved = false;
								return true;
							}
							if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, true, false, false))
							{
								moved = false;
							}
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedColumnCore(num, true);
						bool flag = this.ScrollIntoView(num, lastRow, false);
						if (this.IsInnerCellOutOfBounds(num, lastRow))
						{
							moved = false;
							return true;
						}
						if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
						{
							moved = false;
						}
					}
					else
					{
						if (num2 == -1)
						{
							moved = false;
							return true;
						}
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
						{
							moved = false;
							return true;
						}
						if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, true, false, false))
						{
							moved = false;
						}
					}
					return true;
				case DataGridViewSelectionMode.RowHeaderSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						if ((keyData & Keys.Shift) == Keys.Shift)
						{
							if (this.ptCurrentCell.X == -1)
							{
								this.ClearSelection();
								this.SetSelectedCellCore(num, lastRow, true);
								bool flag = this.ScrollIntoView(num, lastRow, false);
								if (this.IsInnerCellOutOfBounds(num, lastRow))
								{
									moved = false;
									return true;
								}
								if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
								{
									moved = false;
								}
							}
							else if (this.MultiSelect)
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
								{
									return true;
								}
								if (this.ptAnchorCell.Y == -1 || this.ptCurrentCell.Y == -1 || this.IsRowOutOfBounds(lastRow))
								{
									moved = false;
									return true;
								}
								if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
								{
									this.ClearSelection();
									this.SelectRowRange(this.ptAnchorCell.Y, lastRow, true);
								}
								else
								{
									int x3 = this.ptCurrentCell.X;
									int y3 = this.ptCurrentCell.Y;
									this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x3, x3, this.ptAnchorCell.Y, ref y3, lastRow);
								}
								if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, false, false, false))
								{
									moved = false;
								}
							}
							else
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
								{
									return true;
								}
								if (this.ptCurrentCell.Y == -1 || this.IsRowOutOfBounds(lastRow))
								{
									moved = false;
									return true;
								}
								if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
								{
									this.SetSelectedRowCore(this.ptCurrentCell.Y, false);
									this.SetSelectedRowCore(lastRow, true);
								}
								else
								{
									this.SetSelectedCellCore(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
									this.SetSelectedCellCore(this.ptCurrentCell.X, lastRow, true);
								}
								if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, true, false, false))
								{
									moved = false;
								}
							}
						}
						else if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, lastRow, true);
							bool flag = this.ScrollIntoView(num, lastRow, false);
							if (this.IsInnerCellOutOfBounds(num, lastRow))
							{
								moved = false;
								return true;
							}
							if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
							{
								moved = false;
							}
						}
						else
						{
							if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
							{
								return true;
							}
							if (this.ptCurrentCell.Y == -1 || this.IsRowOutOfBounds(lastRow))
							{
								moved = false;
								return true;
							}
							if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
							{
								this.ClearSelection();
								this.SetSelectedRowCore(lastRow, true);
							}
							else
							{
								this.ClearSelection();
								this.SetSelectedCellCore(this.ptCurrentCell.X, lastRow, true);
							}
							if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, true, false, false))
							{
								moved = false;
							}
						}
					}
					else if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, lastRow, true);
							bool flag = this.ScrollIntoView(num, lastRow, false);
							if (this.IsInnerCellOutOfBounds(num, lastRow))
							{
								moved = false;
								return true;
							}
							if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
							{
								moved = false;
							}
						}
						else
						{
							if (num2 == -1)
							{
								moved = false;
								return true;
							}
							if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
							{
								return true;
							}
							if (this.ptCurrentCell.Y == -1 || this.IsRowOutOfBounds(num2))
							{
								moved = false;
								return true;
							}
							if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
							{
								this.ClearSelection();
								if (this.MultiSelect)
								{
									if (this.ptAnchorCell.Y == -1)
									{
										moved = false;
										return true;
									}
									if (num2 >= this.ptAnchorCell.Y)
									{
										this.SelectRowRange(this.ptAnchorCell.Y, num2, true);
									}
									else
									{
										this.SelectRowRange(num2, this.ptAnchorCell.Y, true);
									}
								}
								else
								{
									this.SetSelectedRowCore(num2, true);
								}
							}
							else if (this.MultiSelect)
							{
								int x4 = this.ptCurrentCell.X;
								int y4 = this.ptCurrentCell.Y;
								if (this.ptAnchorCell.X == -1)
								{
									moved = false;
									return true;
								}
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x4, x4, this.ptAnchorCell.Y, ref y4, num2);
							}
							else
							{
								this.ClearSelection();
								this.SetSelectedCellCore(this.ptCurrentCell.X, num2, true);
							}
							if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, !this.MultiSelect, false, false))
							{
								moved = false;
							}
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(num, lastRow, true);
						bool flag = this.ScrollIntoView(num, lastRow, false);
						if (this.IsInnerCellOutOfBounds(num, lastRow))
						{
							moved = false;
							return true;
						}
						if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
						{
							moved = false;
						}
					}
					else
					{
						if (num2 == -1)
						{
							moved = false;
							return true;
						}
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsRowOutOfBounds(num2))
						{
							moved = false;
							return true;
						}
						if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(num2, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(this.ptCurrentCell.X, num2, true);
						}
						if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, true, false, false))
						{
							moved = false;
						}
					}
					return true;
				}
			}
			finally
			{
				int num3 = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num3 - 1;
			}
			return true;
		}

		/// <summary>Processes the END key.</summary>
		/// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
		/// <returns>
		///   <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.InvalidCastException">The END key would cause the control to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		/// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />.</exception>
		// Token: 0x06001C2E RID: 7214 RVA: 0x0007A834 File Offset: 0x00078A34
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessEndKey(Keys keyData)
		{
			DataGridViewColumn lastColumn = this.Columns.GetLastColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.None);
			int num = ((lastColumn == null) ? (-1) : lastColumn.Index);
			int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
			int lastRow = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
			if (num == -1 || firstRow == -1)
			{
				return false;
			}
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
					if ((keyData & Keys.Control) == Keys.None)
					{
						return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if (!this.ScrollIntoView(num, lastRow, true))
					{
						return true;
					}
					if (this.IsInnerCellOutOfBounds(num, lastRow))
					{
						return true;
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.MultiSelect && this.ptAnchorCell.X >= 0)
						{
							int x = this.ptCurrentCell.X;
							int y = this.ptCurrentCell.Y;
							this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, num, this.ptAnchorCell.Y, ref y, lastRow);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, lastRow, true);
						}
						bool flag = this.SetCurrentCellAddressCore(num, lastRow, !this.MultiSelect, false, false);
					}
					else
					{
						this.ClearSelection();
						this.SetSelectedCellCore(num, lastRow, true);
						bool flag = this.SetCurrentCellAddressCore(num, lastRow, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullRowSelect:
					if ((keyData & Keys.Control) == Keys.None)
					{
						return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if (!this.ScrollIntoView(num, lastRow, true))
					{
						return true;
					}
					if (this.IsInnerCellOutOfBounds(num, lastRow))
					{
						return true;
					}
					this.ClearSelection();
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.MultiSelect && this.ptCurrentCell.Y >= 0)
						{
							if (this.ptAnchorCell.Y == -1)
							{
								return true;
							}
							this.SelectRowRange(this.ptAnchorCell.Y, lastRow, true);
						}
						else
						{
							this.SetSelectedRowCore(lastRow, true);
						}
						bool flag = this.SetCurrentCellAddressCore(num, lastRow, !this.MultiSelect, false, false);
					}
					else
					{
						this.SetSelectedRowCore(lastRow, true);
						bool flag = this.SetCurrentCellAddressCore(num, lastRow, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullColumnSelect:
					if ((keyData & Keys.Control) == Keys.None)
					{
						return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if (!this.ScrollIntoView(num, lastRow, true))
					{
						return true;
					}
					if (this.IsInnerCellOutOfBounds(num, lastRow))
					{
						return true;
					}
					this.ClearSelection();
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.MultiSelect && this.ptCurrentCell.X >= 0)
						{
							this.SelectColumnRange(this.ptAnchorCell.X, num, true);
						}
						else
						{
							this.SetSelectedColumnCore(num, true);
						}
						bool flag = this.SetCurrentCellAddressCore(num, lastRow, !this.MultiSelect, false, false);
					}
					else
					{
						this.SetSelectedColumnCore(num, true);
						bool flag = this.SetCurrentCellAddressCore(num, lastRow, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.RowHeaderSelect:
					if ((keyData & Keys.Control) == Keys.None)
					{
						return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if (!this.ScrollIntoView(num, lastRow, true))
					{
						return true;
					}
					if (this.IsInnerCellOutOfBounds(num, lastRow))
					{
						return true;
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.MultiSelect && this.ptAnchorCell.X >= 0)
						{
							if (this.ptCurrentCell.Y > -1 && (this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
							{
								this.ClearSelection();
								this.SelectRowRange(this.ptCurrentCell.Y, lastRow, true);
							}
							else
							{
								int x2 = this.ptCurrentCell.X;
								int y2 = this.ptCurrentCell.Y;
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x2, num, this.ptAnchorCell.Y, ref y2, lastRow);
							}
						}
						else if (this.ptCurrentCell.Y > -1 && (this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(lastRow, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, lastRow, true);
						}
						bool flag = this.SetCurrentCellAddressCore(num, lastRow, !this.MultiSelect, false, false);
					}
					else
					{
						if (this.ptCurrentCell.Y > -1 && (this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(lastRow, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, lastRow, true);
						}
						bool flag = this.SetCurrentCellAddressCore(num, lastRow, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					if ((keyData & Keys.Control) == Keys.None)
					{
						return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (!this.ScrollIntoView(num, lastRow, true))
						{
							return true;
						}
						if (this.IsInnerCellOutOfBounds(num, lastRow))
						{
							return true;
						}
						if (this.ptCurrentCell.X >= 0 && this.Columns[this.ptCurrentCell.X].Selected)
						{
							this.ClearSelection();
							if (this.MultiSelect)
							{
								if (this.ptAnchorCell.X == -1)
								{
									return true;
								}
								this.SelectColumnRange(this.ptAnchorCell.X, num, true);
							}
							this.SetSelectedColumnCore(num, true);
						}
						else if (this.MultiSelect && this.ptCurrentCell.X >= 0)
						{
							int x3 = this.ptCurrentCell.X;
							int y3 = this.ptCurrentCell.Y;
							if (this.ptAnchorCell.X == -1)
							{
								return true;
							}
							this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x3, num, this.ptAnchorCell.Y, ref y3, lastRow);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, lastRow, true);
						}
						bool flag = this.SetCurrentCellAddressCore(num, lastRow, !this.MultiSelect, false, false);
					}
					else
					{
						if (!this.ScrollIntoView(num, lastRow, true))
						{
							return true;
						}
						if (this.IsInnerCellOutOfBounds(num, lastRow))
						{
							return true;
						}
						if (this.ptCurrentCell.X >= 0 && this.Columns[this.ptCurrentCell.X].Selected)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(num, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, lastRow, true);
						}
						bool flag = this.SetCurrentCellAddressCore(num, lastRow, true, false, false);
					}
					return true;
				}
			}
			finally
			{
				int num2 = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num2 - 1;
			}
			return true;
		}

		/// <summary>Processes the ENTER key.</summary>
		/// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
		/// <returns>
		///   <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.InvalidCastException">The ENTER key would cause the control to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		/// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />.</exception>
		// Token: 0x06001C2F RID: 7215 RVA: 0x0007AF30 File Offset: 0x00079130
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessEnterKey(Keys keyData)
		{
			bool flag = false;
			bool flag2 = true;
			if ((keyData & Keys.Control) == Keys.None)
			{
				keyData &= ~Keys.Shift;
				flag2 = this.ProcessDownKeyInternal(keyData, out flag);
			}
			if (!flag)
			{
				DataGridViewCell dataGridViewCell = null;
				if (this.EditMode == DataGridViewEditMode.EditOnEnter)
				{
					if (this.ptCurrentCell.X != -1)
					{
						dataGridViewCell = this.CurrentCellInternal;
						DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = this.CommitEdit(ref dataGridViewCell, DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit, DataGridView.DataGridViewValidateCellInternal.WhenChanged, false, false, false, false, false);
						if (dataGridViewDataErrorEventArgs != null && dataGridViewDataErrorEventArgs.ThrowException)
						{
							throw dataGridViewDataErrorEventArgs.Exception;
						}
					}
				}
				else
				{
					this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit, DataGridView.DataGridViewValidateCellInternal.WhenChanged, false, false, false, false, false, true, true, true);
				}
				if (this.IsCurrentRowDirty)
				{
					dataGridViewCell = null;
					int x = this.ptCurrentCell.X;
					int y = this.ptCurrentCell.Y;
					if (this.IsInnerCellOutOfBounds(x, y))
					{
						return flag2;
					}
					if (!this.OnRowValidating(ref dataGridViewCell, x, y))
					{
						if (this.IsInnerCellOutOfBounds(x, y))
						{
							return flag2;
						}
						this.OnRowValidated(ref dataGridViewCell, x, y);
					}
				}
			}
			return flag2;
		}

		/// <summary>Processes the ESC key.</summary>
		/// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
		/// <returns>
		///   <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		// Token: 0x06001C30 RID: 7216 RVA: 0x0007B018 File Offset: 0x00079218
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessEscapeKey(Keys keyData)
		{
			if (this.IsEscapeKeyEffective)
			{
				if (this.IsMouseOperationActive())
				{
					this.ResetTrackingState();
				}
				else
				{
					this.CancelEdit(true);
				}
				return true;
			}
			return false;
		}

		/// <summary>Processes the F2 key.</summary>
		/// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
		/// <returns>
		///   <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.InvalidCastException">The F2 key would cause the control to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		/// <exception cref="T:System.Exception">The F2 key would cause the control to enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />.</exception>
		// Token: 0x06001C31 RID: 7217 RVA: 0x0007B040 File Offset: 0x00079240
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessF2Key(Keys keyData)
		{
			if (this.ptCurrentCell.X != -1 && !this.IsCurrentCellInEditMode && Control.ModifierKeys == Keys.None && this.ColumnEditable(this.ptCurrentCell.X) && !this.IsSharedCellReadOnly(this.CurrentCellInternal, this.ptCurrentCell.Y) && (this.EditMode == DataGridViewEditMode.EditOnKeystrokeOrF2 || this.EditMode == DataGridViewEditMode.EditOnF2))
			{
				bool flag = this.ScrollIntoView(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
				this.BeginEditInternal(this.EditMode == DataGridViewEditMode.EditOnF2);
				return true;
			}
			return false;
		}

		/// <summary>Processes the F3 key by sorting the current column.</summary>
		/// <param name="keyData">A bitwise combination of values that represents the key or keys to process.</param>
		/// <returns>
		///   <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		// Token: 0x06001C32 RID: 7218 RVA: 0x0007B0DC File Offset: 0x000792DC
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessF3Key(Keys keyData)
		{
			if (this.ptCurrentCell.X != -1 && AccessibilityImprovements.Level2)
			{
				DataGridViewColumn dataGridViewColumn = this.Columns[this.ptCurrentCell.X];
				if (dataGridViewColumn != null && this.CanSort(dataGridViewColumn))
				{
					ListSortDirection listSortDirection = ((this.SortedColumn == dataGridViewColumn && this.SortOrder == SortOrder.Ascending) ? ListSortDirection.Descending : ListSortDirection.Ascending);
					this.Sort(dataGridViewColumn, listSortDirection);
					return true;
				}
			}
			return false;
		}

		/// <summary>Processes the HOME key.</summary>
		/// <param name="keyData">The key that was pressed.</param>
		/// <returns>
		///   <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.InvalidCastException">The HOME key would cause the control to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		/// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />.</exception>
		// Token: 0x06001C33 RID: 7219 RVA: 0x0007B144 File Offset: 0x00079344
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessHomeKey(Keys keyData)
		{
			DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
			int num = ((firstColumn == null) ? (-1) : firstColumn.Index);
			int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
			if (num == -1 || firstRow == -1)
			{
				return false;
			}
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
					if ((keyData & Keys.Control) == Keys.None)
					{
						return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if (!this.ScrollIntoView(num, firstRow, true))
					{
						return true;
					}
					if (this.IsInnerCellOutOfBounds(num, firstRow))
					{
						return true;
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.MultiSelect && this.ptAnchorCell.X >= 0)
						{
							int x = this.ptCurrentCell.X;
							int y = this.ptCurrentCell.Y;
							this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, num, this.ptAnchorCell.Y, ref y, firstRow);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
						}
						bool flag = this.SetCurrentCellAddressCore(num, firstRow, !this.MultiSelect, false, false);
					}
					else
					{
						this.ClearSelection();
						this.SetSelectedCellCore(num, firstRow, true);
						bool flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullRowSelect:
				{
					if ((keyData & Keys.Control) == Keys.None)
					{
						return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if (!this.ScrollIntoView(num, firstRow, true))
					{
						return true;
					}
					if (this.IsInnerCellOutOfBounds(num, firstRow))
					{
						return true;
					}
					this.ClearSelection();
					this.SetSelectedRowCore(firstRow, true);
					bool flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					return true;
				}
				case DataGridViewSelectionMode.FullColumnSelect:
					if ((keyData & Keys.Control) == Keys.None)
					{
						return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if (!this.ScrollIntoView(num, firstRow, true))
					{
						return true;
					}
					if (this.IsInnerCellOutOfBounds(num, firstRow))
					{
						return true;
					}
					this.ClearSelection();
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.MultiSelect && this.ptCurrentCell.X >= 0)
						{
							if (this.ptAnchorCell.X == -1)
							{
								return true;
							}
							this.SelectColumnRange(num, this.ptAnchorCell.X, true);
						}
						else
						{
							this.SetSelectedColumnCore(num, true);
						}
						bool flag = this.SetCurrentCellAddressCore(num, firstRow, !this.MultiSelect, false, false);
					}
					else
					{
						this.SetSelectedColumnCore(num, true);
						bool flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.RowHeaderSelect:
					if ((keyData & Keys.Control) == Keys.None)
					{
						return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if (!this.ScrollIntoView(num, firstRow, true))
					{
						return true;
					}
					if (this.IsInnerCellOutOfBounds(num, firstRow))
					{
						return true;
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.MultiSelect && this.ptAnchorCell.X >= 0)
						{
							if (this.ptCurrentCell.Y > -1 && (this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
							{
								this.ClearSelection();
								this.SelectRowRange(firstRow, this.ptAnchorCell.Y, true);
							}
							else
							{
								int x2 = this.ptCurrentCell.X;
								int y2 = this.ptCurrentCell.Y;
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x2, num, this.ptAnchorCell.Y, ref y2, firstRow);
							}
						}
						else if (this.ptCurrentCell.Y > -1 && (this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(firstRow, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
						}
						bool flag = this.SetCurrentCellAddressCore(num, firstRow, !this.MultiSelect, false, false);
					}
					else
					{
						if (this.ptCurrentCell.Y > -1 && (this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(firstRow, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
						}
						bool flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					if ((keyData & Keys.Control) == Keys.None)
					{
						return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (!this.ScrollIntoView(num, firstRow, true))
						{
							return true;
						}
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						if (this.ptCurrentCell.X >= 0 && this.Columns[this.ptCurrentCell.X].Selected)
						{
							this.ClearSelection();
							if (this.MultiSelect)
							{
								if (this.ptAnchorCell.X == -1)
								{
									return true;
								}
								this.SelectColumnRange(num, this.ptAnchorCell.X, true);
							}
							this.SetSelectedColumnCore(num, true);
						}
						else if (this.MultiSelect && this.ptCurrentCell.X >= 0)
						{
							int x3 = this.ptCurrentCell.X;
							int y3 = this.ptCurrentCell.Y;
							if (this.ptAnchorCell.X == -1)
							{
								return true;
							}
							this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x3, num, this.ptAnchorCell.Y, ref y3, firstRow);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
						}
						bool flag = this.SetCurrentCellAddressCore(num, firstRow, !this.MultiSelect, false, false);
					}
					else
					{
						if (!this.ScrollIntoView(num, firstRow, true))
						{
							return true;
						}
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						if (this.ptCurrentCell.X >= 0 && this.Columns[this.ptCurrentCell.X].Selected)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(num, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
						}
						bool flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					return true;
				}
			}
			finally
			{
				int num2 = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num2 - 1;
			}
			return true;
		}

		/// <summary>Processes the INSERT key.</summary>
		/// <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys" /> values that represents the key to process.</param>
		/// <returns>
		///   <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		// Token: 0x06001C34 RID: 7220 RVA: 0x0007B7AC File Offset: 0x000799AC
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessInsertKey(Keys keyData)
		{
			if (((keyData & (Keys.Shift | Keys.Control | Keys.Alt)) == Keys.Control || ((keyData & (Keys.Shift | Keys.Control | Keys.Alt)) == (Keys.Shift | Keys.Control) && (keyData & Keys.KeyCode) == Keys.C)) && this.ClipboardCopyMode != DataGridViewClipboardCopyMode.Disable)
			{
				DataObject clipboardContent = this.GetClipboardContent();
				if (clipboardContent != null)
				{
					Clipboard.SetDataObject(clipboardContent);
					return true;
				}
			}
			return false;
		}

		/// <summary>Processes a key message and generates the appropriate control events.</summary>
		/// <param name="m">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the window message to process.</param>
		/// <returns>
		///   <see langword="true" /> if the message was processed; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.InvalidCastException">The key pressed would cause the control to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		/// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />.</exception>
		// Token: 0x06001C35 RID: 7221 RVA: 0x0007B7FC File Offset: 0x000799FC
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected override bool ProcessKeyEventArgs(ref Message m)
		{
			if (m.Msg == 260 || m.Msg == 256)
			{
				if (this.ptCurrentCell.X != -1)
				{
					DataGridViewCell currentCellInternal = this.CurrentCellInternal;
					if (!this.IsCurrentCellInEditMode && this.ColumnEditable(this.ptCurrentCell.X) && !this.IsSharedCellReadOnly(currentCellInternal, this.ptCurrentCell.Y) && (this.EditMode == DataGridViewEditMode.EditOnKeystroke || this.EditMode == DataGridViewEditMode.EditOnKeystrokeOrF2))
					{
						KeyEventArgs keyEventArgs = new KeyEventArgs((Keys)(long)m.WParam | Control.ModifierKeys);
						if (keyEventArgs.KeyCode != Keys.ProcessKey || (int)m.LParam != 1)
						{
							Type editType = currentCellInternal.EditType;
							Type type = null;
							if (editType == null)
							{
								type = currentCellInternal.GetType().GetInterface("System.Windows.Forms.IDataGridViewEditingCell");
							}
							if ((editType != null || type == null) && currentCellInternal.KeyEntersEditMode(keyEventArgs))
							{
								bool flag = this.ScrollIntoView(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
								if (this.BeginEditInternal(keyEventArgs.KeyCode != Keys.F2 || Control.ModifierKeys != Keys.None || this.EditMode != DataGridViewEditMode.EditOnKeystrokeOrF2) && this.editingControl != null)
								{
									this.editingControl.SendMessage(m.Msg, m.WParam, m.LParam);
									this.dataGridViewState1[32] = true;
									return true;
								}
							}
						}
					}
				}
			}
			else if (this.dataGridViewState1[32] && (m.Msg == 262 || m.Msg == 258 || m.Msg == 646))
			{
				this.dataGridViewState1[32] = false;
				if (this.editingControl != null)
				{
					this.editingControl.SendMessage(m.Msg, m.WParam, m.LParam);
					return true;
				}
			}
			return base.ProcessKeyEventArgs(ref m);
		}

		/// <summary>Previews a keyboard message.</summary>
		/// <param name="m">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the window message to process.</param>
		/// <returns>
		///   <see langword="true" /> if the message was processed; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.InvalidCastException">The key pressed would cause the control to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		/// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />.</exception>
		// Token: 0x06001C36 RID: 7222 RVA: 0x0007B9FC File Offset: 0x00079BFC
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected override bool ProcessKeyPreview(ref Message m)
		{
			KeyEventArgs keyEventArgs = new KeyEventArgs((Keys)((int)m.WParam | (int)Control.ModifierKeys));
			bool flag;
			if (m.Msg == 258)
			{
				Keys keyCode = keyEventArgs.KeyCode;
				flag = keyCode == Keys.Escape || keyCode == Keys.Space;
			}
			else
			{
				Keys keyCode2 = keyEventArgs.KeyCode;
				if (keyCode2 <= Keys.Return)
				{
					if (keyCode2 != Keys.Tab && keyCode2 != Keys.Return)
					{
						goto IL_BC;
					}
				}
				else
				{
					switch (keyCode2)
					{
					case Keys.Escape:
					case Keys.Space:
					case Keys.Prior:
					case Keys.Next:
					case Keys.End:
					case Keys.Home:
					case Keys.Left:
					case Keys.Up:
					case Keys.Right:
					case Keys.Down:
					case Keys.Delete:
						break;
					case Keys.IMEConvert:
					case Keys.IMENonconvert:
					case Keys.IMEAccept:
					case Keys.IMEModeChange:
					case Keys.Select:
					case Keys.Print:
					case Keys.Execute:
					case Keys.Snapshot:
					case Keys.Insert:
						goto IL_BC;
					default:
						if (keyCode2 - Keys.F2 > 1)
						{
							goto IL_BC;
						}
						break;
					}
				}
				flag = true;
				goto IL_BE;
				IL_BC:
				flag = false;
			}
			IL_BE:
			if (this.editingControl != null && (m.Msg == 256 || m.Msg == 260))
			{
				this.dataGridViewState2[8192] = ((IDataGridViewEditingControl)this.editingControl).EditingControlWantsInputKey(keyEventArgs.KeyData, flag);
			}
			if (this.dataGridViewState2[8192])
			{
				return base.ProcessKeyPreview(ref m);
			}
			if (flag)
			{
				if (m.Msg != 256 && m.Msg != 260)
				{
					return true;
				}
				if (this.ProcessDataGridViewKey(keyEventArgs))
				{
					return true;
				}
				this.dataGridViewState2[8192] = true;
			}
			return base.ProcessKeyPreview(ref m);
		}

		// Token: 0x06001C37 RID: 7223 RVA: 0x0007BB70 File Offset: 0x00079D70
		private bool? ProcessColumnResize(Keys keyData, int step)
		{
			if (!AccessibilityImprovements.Level2 || (keyData & Keys.Alt) != Keys.Alt || !this.AllowUserToResizeColumns || this.ptCurrentCell.X == -1)
			{
				return null;
			}
			if (this.currentColSplitBar == -1)
			{
				DataGridViewColumn dataGridViewColumn = this.Columns[this.ptCurrentCell.X];
				if (dataGridViewColumn != null && dataGridViewColumn.Resizable == DataGridViewTriState.True && (dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.None || dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill))
				{
					this.BeginKeyboardColumnResize(this.ptCurrentCell.X);
					return new bool?(true);
				}
				return new bool?(false);
			}
			else
			{
				int num = this.currentColSplitBar + step;
				if (this.dataGridViewOper[16777216] && this.resizeClipRectangle.Contains(num, this.resizeClipRectangle.Top))
				{
					this.MoveRowHeadersOrColumnResize(num);
					return new bool?(true);
				}
				return new bool?(false);
			}
		}

		/// <summary>Processes the LEFT ARROW key.</summary>
		/// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
		/// <returns>
		///   <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.InvalidCastException">The LEFT ARROW key would cause the control to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		/// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />.</exception>
		// Token: 0x06001C38 RID: 7224 RVA: 0x0007BC64 File Offset: 0x00079E64
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessLeftKey(Keys keyData)
		{
			if (this.RightToLeftInternal)
			{
				return this.ProcessRightKeyPrivate(keyData);
			}
			return this.ProcessLeftKeyPrivate(keyData);
		}

		// Token: 0x06001C39 RID: 7225 RVA: 0x0007BC80 File Offset: 0x00079E80
		private bool ProcessLeftKeyPrivate(Keys keyData)
		{
			bool? flag = this.ProcessColumnResize(keyData, -this.keyboardResizeStep);
			if (flag != null)
			{
				return flag.Value;
			}
			DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
			int num = ((dataGridViewColumn == null) ? (-1) : dataGridViewColumn.Index);
			int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
			if (num == -1 || firstRow == -1)
			{
				return false;
			}
			int num2 = -1;
			if (this.ptCurrentCell.X != -1)
			{
				dataGridViewColumn = this.Columns.GetPreviousColumn(this.Columns[this.ptCurrentCell.X], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				if (dataGridViewColumn != null)
				{
					num2 = dataGridViewColumn.Index;
				}
			}
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
							bool flag2 = this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							flag2 = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (num2 == -1)
							{
								return true;
							}
							if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(num2))
							{
								return true;
							}
							if (this.MultiSelect)
							{
								int x = this.ptCurrentCell.X;
								int y = this.ptCurrentCell.Y;
								if (this.ptAnchorCell.X == -1)
								{
									return true;
								}
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, num2, this.ptAnchorCell.Y, ref y, y);
							}
							else
							{
								this.ClearSelection();
								this.SetSelectedCellCore(num2, this.ptCurrentCell.Y, true);
							}
							bool flag2 = this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, !this.MultiSelect, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(num, firstRow, true);
						bool flag2 = this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						flag2 = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(num2))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedCellCore(num2, this.ptCurrentCell.Y, true);
						bool flag2 = this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullRowSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedRowCore(firstRow, true);
						bool flag2 = this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						flag2 = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(num2))
						{
							return true;
						}
						bool flag2 = this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullColumnSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(num, true);
							bool flag2 = this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							flag2 = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (num2 == -1)
							{
								return true;
							}
							if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(num2))
							{
								return true;
							}
							this.ClearSelection();
							if (this.MultiSelect)
							{
								if (this.ptAnchorCell.X == -1)
								{
									return true;
								}
								if (this.Columns.DisplayInOrder(this.ptAnchorCell.X, num2))
								{
									this.SelectColumnRange(this.ptAnchorCell.X, num2, true);
								}
								else
								{
									this.SelectColumnRange(num2, this.ptAnchorCell.X, true);
								}
							}
							else
							{
								this.SetSelectedColumnCore(num2, true);
							}
							bool flag2 = this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, !this.MultiSelect, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedColumnCore(num, true);
						bool flag2 = this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						flag2 = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(num2))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedColumnCore(num2, true);
						bool flag2 = this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
							bool flag2 = this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							flag2 = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (num2 == -1)
							{
								return true;
							}
							if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsColumnOutOfBounds(num2))
							{
								return true;
							}
							if (this.Columns[this.ptCurrentCell.X].Selected)
							{
								this.ClearSelection();
								if (this.MultiSelect)
								{
									if (this.ptAnchorCell.X == -1)
									{
										return true;
									}
									if (this.Columns.DisplayInOrder(this.ptAnchorCell.X, num2))
									{
										this.SelectColumnRange(this.ptAnchorCell.X, num2, true);
									}
									else
									{
										this.SelectColumnRange(num2, this.ptAnchorCell.X, true);
									}
								}
								this.SetSelectedColumnCore(num2, true);
							}
							else if (this.MultiSelect)
							{
								int x2 = this.ptCurrentCell.X;
								int y2 = this.ptCurrentCell.Y;
								if (this.ptAnchorCell.X == -1)
								{
									return true;
								}
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x2, num2, this.ptAnchorCell.Y, ref y2, y2);
							}
							else
							{
								this.ClearSelection();
								this.SetSelectedCellCore(num2, this.ptCurrentCell.Y, true);
							}
							bool flag2 = this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, !this.MultiSelect, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(num, firstRow, true);
						bool flag2 = this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						flag2 = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsColumnOutOfBounds(num2))
						{
							return true;
						}
						if (this.Columns[this.ptCurrentCell.X].Selected)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(num2, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num2, this.ptCurrentCell.Y, true);
						}
						bool flag2 = this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				}
			}
			finally
			{
				int num3 = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num3 - 1;
			}
			return true;
		}

		// Token: 0x06001C3A RID: 7226 RVA: 0x0007C5D0 File Offset: 0x0007A7D0
		private bool ProcessLeftMost(bool shift, int firstVisibleColumnIndex, int firstVisibleRowIndex)
		{
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
					if (shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(firstVisibleColumnIndex, firstVisibleRowIndex, true);
							bool flag = this.ScrollIntoView(firstVisibleColumnIndex, firstVisibleRowIndex, false);
							if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
							{
								return true;
							}
							flag = this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
						}
						else if (this.MultiSelect)
						{
							if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							int x = this.ptCurrentCell.X;
							int y = this.ptCurrentCell.Y;
							if (this.ptAnchorCell.X == -1 || this.ptCurrentCell.X == -1 || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
							{
								return true;
							}
							this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, firstVisibleColumnIndex, this.ptAnchorCell.Y, ref y, y);
							bool flag = this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, false, false, false);
						}
						else
						{
							if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
							{
								return true;
							}
							this.ClearSelection();
							this.SetSelectedCellCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true);
							bool flag = this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(firstVisibleColumnIndex, firstVisibleRowIndex, true);
						bool flag = this.ScrollIntoView(firstVisibleColumnIndex, firstVisibleRowIndex, false);
						if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
						{
							return true;
						}
						flag = this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
					}
					else
					{
						if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedCellCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true);
						bool flag = this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullRowSelect:
					if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedRowCore(firstVisibleRowIndex, true);
						bool flag = this.ScrollIntoView(firstVisibleColumnIndex, firstVisibleRowIndex, false);
						if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
						{
							return true;
						}
						flag = this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
					}
					else
					{
						if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
						{
							return true;
						}
						bool flag = this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullColumnSelect:
					if (shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
							bool flag = this.ScrollIntoView(firstVisibleColumnIndex, firstVisibleRowIndex, false);
							if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
							{
								return true;
							}
							flag = this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
						}
						else if (this.MultiSelect)
						{
							if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptAnchorCell.X == -1 || this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
							{
								return true;
							}
							this.ClearSelection();
							this.SelectColumnRange(firstVisibleColumnIndex, this.ptAnchorCell.X, true);
							bool flag = this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, false, false, false);
						}
						else
						{
							if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
							{
								return true;
							}
							this.SetSelectedColumnCore(this.ptCurrentCell.X, false);
							this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
							bool flag = this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
						bool flag = this.ScrollIntoView(firstVisibleColumnIndex, firstVisibleRowIndex, false);
						if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
						{
							return true;
						}
						flag = this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
					}
					else
					{
						if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
						bool flag = this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					if (shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(firstVisibleColumnIndex, firstVisibleRowIndex, true);
							bool flag = this.ScrollIntoView(firstVisibleColumnIndex, firstVisibleRowIndex, false);
							if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
							{
								return true;
							}
							flag = this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
						}
						else if (this.MultiSelect)
						{
							if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptAnchorCell.X == -1 || this.ptCurrentCell.X == -1 || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
							{
								return true;
							}
							if (this.Columns[this.ptCurrentCell.X].Selected)
							{
								this.ClearSelection();
								this.SelectColumnRange(firstVisibleColumnIndex, this.ptAnchorCell.X, true);
							}
							else
							{
								int x2 = this.ptCurrentCell.X;
								int y2 = this.ptCurrentCell.Y;
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x2, firstVisibleColumnIndex, this.ptAnchorCell.Y, ref y2, y2);
							}
							bool flag = this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, false, false, false);
						}
						else
						{
							if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
							{
								return true;
							}
							if (this.Columns[this.ptCurrentCell.X].Selected)
							{
								this.SetSelectedColumnCore(this.ptCurrentCell.X, false);
								this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
							}
							else
							{
								this.SetSelectedCellCore(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
								this.SetSelectedCellCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true);
							}
							bool flag = this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(firstVisibleColumnIndex, firstVisibleRowIndex, true);
						bool flag = this.ScrollIntoView(firstVisibleColumnIndex, firstVisibleRowIndex, false);
						if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
						{
							return true;
						}
						flag = this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
					}
					else
					{
						if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
						{
							return true;
						}
						if (this.Columns[this.ptCurrentCell.X].Selected)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true);
						}
						bool flag = this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				}
			}
			finally
			{
				int num = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num - 1;
			}
			return true;
		}

		/// <summary>Processes the PAGE DOWN key.</summary>
		/// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
		/// <returns>
		///   <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.InvalidCastException">The PAGE DOWN key would cause the control to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		/// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />.</exception>
		// Token: 0x06001C3B RID: 7227 RVA: 0x0007CDB4 File Offset: 0x0007AFB4
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessNextKey(Keys keyData)
		{
			DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
			int num = ((firstColumn == null) ? (-1) : firstColumn.Index);
			if (num == -1)
			{
				return false;
			}
			int num2 = 0;
			int num3;
			if (this.ptCurrentCell.Y == -1)
			{
				num3 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
				if (num3 == -1)
				{
					return false;
				}
			}
			else
			{
				num3 = this.ptCurrentCell.Y;
			}
			if ((this.Rows.GetRowState(num3) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None)
			{
				if (this.displayedBandsInfo.FirstDisplayedScrollingRow > 0)
				{
					int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
					if (!this.ScrollIntoView((this.ptCurrentCell.X == -1) ? num : this.ptCurrentCell.X, firstRow, true))
					{
						return true;
					}
					num2 = this.Rows.GetRowCount(DataGridViewElementStates.Visible, this.ptCurrentCell.Y, firstRow) - 1;
				}
				else
				{
					num2 = this.displayedBandsInfo.NumTotallyDisplayedFrozenRows;
				}
			}
			num2 += this.displayedBandsInfo.NumTotallyDisplayedScrollingRows;
			int num4 = num3;
			if (num2 == 0)
			{
				num2 = 1;
			}
			while (num2 > 0 && num4 != -1)
			{
				num4 = this.Rows.GetNextRow(num3, DataGridViewElementStates.Visible);
				if (num4 != -1)
				{
					num3 = num4;
					num2--;
				}
			}
			this.noSelectionChangeCount++;
			try
			{
				if (this.ptCurrentCell.X == -1)
				{
					this.ClearSelection();
					switch (this.SelectionMode)
					{
					case DataGridViewSelectionMode.CellSelect:
					case DataGridViewSelectionMode.RowHeaderSelect:
					case DataGridViewSelectionMode.ColumnHeaderSelect:
						this.SetSelectedCellCore(num, num3, true);
						break;
					case DataGridViewSelectionMode.FullRowSelect:
						this.SetSelectedRowCore(num3, true);
						break;
					case DataGridViewSelectionMode.FullColumnSelect:
						this.SetSelectedColumnCore(num, true);
						break;
					}
					bool flag = this.ScrollIntoView(num, num3, false);
					if (this.IsInnerCellOutOfBounds(num, num3))
					{
						return true;
					}
					flag = this.SetCurrentCellAddressCore(num, num3, true, false, false);
					return true;
				}
				else
				{
					switch (this.SelectionMode)
					{
					case DataGridViewSelectionMode.CellSelect:
					case DataGridViewSelectionMode.ColumnHeaderSelect:
					{
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num3, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num3))
						{
							return true;
						}
						if ((keyData & Keys.Shift) == Keys.Shift && this.MultiSelect)
						{
							int x = this.ptCurrentCell.X;
							int y = this.ptCurrentCell.Y;
							if (this.ptAnchorCell.Y == -1)
							{
								return true;
							}
							this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, x, this.ptAnchorCell.Y, ref y, num3);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(this.ptCurrentCell.X, num3, true);
						}
						bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num3, false, false, false);
						return true;
					}
					case DataGridViewSelectionMode.FullRowSelect:
					{
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num3, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num3))
						{
							return true;
						}
						this.ClearSelection();
						if ((keyData & Keys.Shift) == Keys.Shift && this.MultiSelect)
						{
							if (this.ptAnchorCell.Y == -1)
							{
								return true;
							}
							if (this.ptAnchorCell.Y < num3)
							{
								this.SelectRowRange(this.ptAnchorCell.Y, num3, true);
							}
							else
							{
								this.SelectRowRange(num3, this.ptAnchorCell.Y, true);
							}
						}
						else
						{
							this.SetSelectedRowCore(num3, true);
						}
						bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num3, false, false, false);
						return true;
					}
					case DataGridViewSelectionMode.FullColumnSelect:
					{
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num3, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num3))
						{
							return true;
						}
						bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num3, true, false, false);
						return true;
					}
					case DataGridViewSelectionMode.RowHeaderSelect:
					{
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num3, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num3))
						{
							return true;
						}
						if ((keyData & Keys.Shift) == Keys.Shift && this.MultiSelect)
						{
							if (this.ptAnchorCell.Y == -1)
							{
								return true;
							}
							if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
							{
								this.ClearSelection();
								if (this.ptAnchorCell.Y < num3)
								{
									this.SelectRowRange(this.ptAnchorCell.Y, num3, true);
								}
								else
								{
									this.SelectRowRange(num3, this.ptAnchorCell.Y, true);
								}
							}
							else
							{
								int x2 = this.ptCurrentCell.X;
								int y2 = this.ptCurrentCell.Y;
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x2, x2, this.ptAnchorCell.Y, ref y2, num3);
							}
						}
						else if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(num3, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(this.ptCurrentCell.X, num3, true);
						}
						bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num3, !this.MultiSelect, false, false);
						return true;
					}
					}
				}
			}
			finally
			{
				int num5 = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num5 - 1;
			}
			return true;
		}

		/// <summary>Processes the PAGE UP key.</summary>
		/// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
		/// <returns>
		///   <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.InvalidCastException">The PAGE UP key would cause the control to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		/// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />.</exception>
		// Token: 0x06001C3C RID: 7228 RVA: 0x0007D35C File Offset: 0x0007B55C
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessPriorKey(Keys keyData)
		{
			DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
			int num = ((firstColumn == null) ? (-1) : firstColumn.Index);
			if (num == -1)
			{
				return false;
			}
			int num2;
			if (this.ptCurrentCell.Y == -1)
			{
				num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
				if (num2 == -1)
				{
					return false;
				}
			}
			else
			{
				num2 = this.ptCurrentCell.Y;
			}
			int num3;
			if ((this.Rows.GetRowState(num2) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None)
			{
				num3 = this.displayedBandsInfo.NumTotallyDisplayedFrozenRows;
			}
			else
			{
				num3 = this.displayedBandsInfo.NumTotallyDisplayedScrollingRows;
			}
			if (num3 == 0)
			{
				num3 = 1;
			}
			int num4 = num2;
			while (num3 > 0 && num4 != -1)
			{
				num4 = this.Rows.GetPreviousRow(num2, DataGridViewElementStates.Visible);
				if (num4 != -1)
				{
					num2 = num4;
				}
				num3--;
			}
			if ((this.Rows.GetRowState(num2) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None)
			{
				int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
				if (firstRow != -1 && !this.ScrollIntoView((this.ptCurrentCell.X == -1) ? num : this.ptCurrentCell.X, firstRow, true))
				{
					return true;
				}
				num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			}
			this.noSelectionChangeCount++;
			try
			{
				if (this.ptCurrentCell.X == -1)
				{
					this.ClearSelection();
					switch (this.SelectionMode)
					{
					case DataGridViewSelectionMode.CellSelect:
					case DataGridViewSelectionMode.RowHeaderSelect:
					case DataGridViewSelectionMode.ColumnHeaderSelect:
						this.SetSelectedCellCore(num, num2, true);
						break;
					case DataGridViewSelectionMode.FullRowSelect:
						this.SetSelectedRowCore(num2, true);
						break;
					case DataGridViewSelectionMode.FullColumnSelect:
						this.SetSelectedColumnCore(num, true);
						break;
					}
					bool flag = this.ScrollIntoView(num, num2, false);
					if (this.IsInnerCellOutOfBounds(num, num2))
					{
						return true;
					}
					flag = this.SetCurrentCellAddressCore(num, num2, true, false, false);
					return true;
				}
				else
				{
					switch (this.SelectionMode)
					{
					case DataGridViewSelectionMode.CellSelect:
					case DataGridViewSelectionMode.ColumnHeaderSelect:
					{
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
						{
							return true;
						}
						if ((keyData & Keys.Shift) == Keys.Shift && this.MultiSelect)
						{
							int x = this.ptCurrentCell.X;
							int y = this.ptCurrentCell.Y;
							if (this.ptAnchorCell.X == -1)
							{
								return true;
							}
							this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, x, this.ptAnchorCell.Y, ref y, num2);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(this.ptCurrentCell.X, num2, true);
						}
						bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, false, false, false);
						return true;
					}
					case DataGridViewSelectionMode.FullRowSelect:
					{
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
						{
							return true;
						}
						this.ClearSelection();
						if ((keyData & Keys.Shift) == Keys.Shift && this.MultiSelect)
						{
							if (this.ptAnchorCell.Y == -1)
							{
								return true;
							}
							if (this.ptAnchorCell.Y < num2)
							{
								this.SelectRowRange(this.ptAnchorCell.Y, num2, true);
							}
							else
							{
								this.SelectRowRange(num2, this.ptAnchorCell.Y, true);
							}
						}
						else
						{
							this.SetSelectedRowCore(num2, true);
						}
						bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, false, false, false);
						return true;
					}
					case DataGridViewSelectionMode.FullColumnSelect:
					{
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
						{
							return true;
						}
						bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, true, false, false);
						return true;
					}
					case DataGridViewSelectionMode.RowHeaderSelect:
					{
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
						{
							return true;
						}
						if ((keyData & Keys.Shift) == Keys.Shift && this.MultiSelect)
						{
							if (this.ptAnchorCell.Y == -1)
							{
								return true;
							}
							if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
							{
								this.ClearSelection();
								if (this.ptAnchorCell.Y < num2)
								{
									this.SelectRowRange(this.ptAnchorCell.Y, num2, true);
								}
								else
								{
									this.SelectRowRange(num2, this.ptAnchorCell.Y, true);
								}
							}
							else
							{
								int x2 = this.ptCurrentCell.X;
								int y2 = this.ptCurrentCell.Y;
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x2, x2, this.ptAnchorCell.Y, ref y2, num2);
							}
						}
						else if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(num2, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(this.ptCurrentCell.X, num2, true);
						}
						bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, !this.MultiSelect, false, false);
						return true;
					}
					}
				}
			}
			finally
			{
				int num5 = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num5 - 1;
			}
			return true;
		}

		/// <summary>Processes the RIGHT ARROW key.</summary>
		/// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
		/// <returns>
		///   <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.InvalidCastException">The RIGHT ARROW key would cause the control to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		/// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />.</exception>
		// Token: 0x06001C3D RID: 7229 RVA: 0x0007D8F8 File Offset: 0x0007BAF8
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessRightKey(Keys keyData)
		{
			if (this.RightToLeftInternal)
			{
				return this.ProcessLeftKeyPrivate(keyData);
			}
			return this.ProcessRightKeyPrivate(keyData);
		}

		// Token: 0x06001C3E RID: 7230 RVA: 0x0007D914 File Offset: 0x0007BB14
		private bool ProcessRightKeyPrivate(Keys keyData)
		{
			bool? flag = this.ProcessColumnResize(keyData, this.keyboardResizeStep);
			if (flag != null)
			{
				return flag.Value;
			}
			DataGridViewColumn dataGridViewColumn = this.Columns.GetLastColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.None);
			int num = ((dataGridViewColumn == null) ? (-1) : dataGridViewColumn.Index);
			int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
			if (num == -1 || firstRow == -1)
			{
				return false;
			}
			int num2 = -1;
			if (this.ptCurrentCell.X != -1)
			{
				dataGridViewColumn = this.Columns.GetNextColumn(this.Columns[this.ptCurrentCell.X], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				if (dataGridViewColumn != null)
				{
					num2 = dataGridViewColumn.Index;
				}
			}
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
							bool flag2 = this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							flag2 = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (num2 == -1)
							{
								return true;
							}
							if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(num2))
							{
								return true;
							}
							if (this.MultiSelect)
							{
								int x = this.ptCurrentCell.X;
								int y = this.ptCurrentCell.Y;
								if (this.ptAnchorCell.X == -1)
								{
									return true;
								}
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, num2, this.ptAnchorCell.Y, ref y, y);
							}
							else
							{
								this.ClearSelection();
								this.SetSelectedCellCore(num2, this.ptCurrentCell.Y, true);
							}
							bool flag2 = this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, !this.MultiSelect, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(num, firstRow, true);
						bool flag2 = this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						flag2 = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(num2))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedCellCore(num2, this.ptCurrentCell.Y, true);
						bool flag2 = this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullRowSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedRowCore(firstRow, true);
						bool flag2 = this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						flag2 = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(num2))
						{
							return true;
						}
						bool flag2 = this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullColumnSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(num, true);
							bool flag2 = this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							flag2 = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (num2 == -1)
							{
								return true;
							}
							if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(num2))
							{
								return true;
							}
							this.ClearSelection();
							if (this.MultiSelect)
							{
								if (this.ptAnchorCell.X == -1)
								{
									return true;
								}
								if (this.Columns.DisplayInOrder(this.ptAnchorCell.X, num2))
								{
									this.SelectColumnRange(this.ptAnchorCell.X, num2, true);
								}
								else
								{
									this.SelectColumnRange(num2, this.ptAnchorCell.X, true);
								}
							}
							else
							{
								this.SetSelectedColumnCore(num2, true);
							}
							bool flag2 = this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, !this.MultiSelect, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedColumnCore(num, true);
						bool flag2 = this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						flag2 = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(num2))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedColumnCore(num2, true);
						bool flag2 = this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
							bool flag2 = this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							flag2 = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (num2 == -1)
							{
								return true;
							}
							if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(num2))
							{
								return true;
							}
							if (this.Columns[this.ptCurrentCell.X].Selected)
							{
								this.ClearSelection();
								if (this.MultiSelect)
								{
									if (this.ptAnchorCell.X == -1)
									{
										return true;
									}
									if (this.Columns.DisplayInOrder(this.ptAnchorCell.X, num2))
									{
										this.SelectColumnRange(this.ptAnchorCell.X, num2, true);
									}
									else
									{
										this.SelectColumnRange(num2, this.ptAnchorCell.X, true);
									}
								}
								else
								{
									this.SetSelectedColumnCore(num2, true);
								}
							}
							else if (this.MultiSelect)
							{
								if (this.ptAnchorCell.X == -1)
								{
									return true;
								}
								int x2 = this.ptCurrentCell.X;
								int y2 = this.ptCurrentCell.Y;
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x2, num2, this.ptAnchorCell.Y, ref y2, y2);
							}
							else
							{
								this.ClearSelection();
								this.SetSelectedCellCore(num2, this.ptCurrentCell.Y, true);
							}
							bool flag2 = this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, !this.MultiSelect, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(num, firstRow, true);
						bool flag2 = this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						flag2 = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsColumnOutOfBounds(num2))
						{
							return true;
						}
						if (this.Columns[this.ptCurrentCell.X].Selected)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(num2, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num2, this.ptCurrentCell.Y, true);
						}
						bool flag2 = this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				}
			}
			finally
			{
				int num3 = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num3 - 1;
			}
			return true;
		}

		// Token: 0x06001C3F RID: 7231 RVA: 0x0007E26C File Offset: 0x0007C46C
		private bool ProcessRightMost(bool shift, int lastVisibleColumnIndex, int firstVisibleRowIndex)
		{
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
					if (shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(lastVisibleColumnIndex, firstVisibleRowIndex, true);
							bool flag = this.ScrollIntoView(lastVisibleColumnIndex, firstVisibleRowIndex, false);
							if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstVisibleRowIndex))
							{
								return true;
							}
							flag = this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
						}
						else
						{
							if (!this.ScrollIntoView(lastVisibleColumnIndex, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(lastVisibleColumnIndex))
							{
								return true;
							}
							if (this.MultiSelect)
							{
								if (this.ptAnchorCell.X == -1)
								{
									return true;
								}
								int x = this.ptCurrentCell.X;
								int y = this.ptCurrentCell.Y;
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, lastVisibleColumnIndex, this.ptAnchorCell.Y, ref y, y);
								bool flag = this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, false, false, false);
							}
							else
							{
								this.ClearSelection();
								this.SetSelectedCellCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true);
								bool flag = this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
							}
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(lastVisibleColumnIndex, firstVisibleRowIndex, true);
						bool flag = this.ScrollIntoView(lastVisibleColumnIndex, firstVisibleRowIndex, false);
						if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstVisibleRowIndex))
						{
							return true;
						}
						flag = this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
					}
					else
					{
						if (!this.ScrollIntoView(lastVisibleColumnIndex, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(lastVisibleColumnIndex))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedCellCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true);
						bool flag = this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullRowSelect:
					if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedRowCore(firstVisibleRowIndex, true);
						bool flag = this.ScrollIntoView(lastVisibleColumnIndex, firstVisibleRowIndex, false);
						if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstVisibleRowIndex))
						{
							return true;
						}
						flag = this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
					}
					else
					{
						if (!this.ScrollIntoView(lastVisibleColumnIndex, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(lastVisibleColumnIndex))
						{
							return true;
						}
						bool flag = this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullColumnSelect:
					if (shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
							bool flag = this.ScrollIntoView(lastVisibleColumnIndex, firstVisibleRowIndex, false);
							if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstVisibleRowIndex))
							{
								return true;
							}
							flag = this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
						}
						else
						{
							if (!this.ScrollIntoView(lastVisibleColumnIndex, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(lastVisibleColumnIndex))
							{
								return true;
							}
							if (this.MultiSelect)
							{
								if (this.ptAnchorCell.X == -1)
								{
									return true;
								}
								this.ClearSelection();
								this.SelectColumnRange(this.ptAnchorCell.X, lastVisibleColumnIndex, true);
								bool flag = this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, false, false, false);
							}
							else
							{
								this.SetSelectedColumnCore(this.ptCurrentCell.X, false);
								this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
								bool flag = this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
							}
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
						bool flag = this.ScrollIntoView(lastVisibleColumnIndex, firstVisibleRowIndex, false);
						if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstVisibleRowIndex))
						{
							return true;
						}
						flag = this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
					}
					else
					{
						if (!this.ScrollIntoView(lastVisibleColumnIndex, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(lastVisibleColumnIndex))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
						bool flag = this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					if (shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(lastVisibleColumnIndex, firstVisibleRowIndex, true);
							bool flag = this.ScrollIntoView(lastVisibleColumnIndex, firstVisibleRowIndex, false);
							if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstVisibleRowIndex))
							{
								return true;
							}
							flag = this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
						}
						else
						{
							if (!this.ScrollIntoView(lastVisibleColumnIndex, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(lastVisibleColumnIndex))
							{
								return true;
							}
							if (this.MultiSelect)
							{
								if (this.ptAnchorCell.X == -1)
								{
									return true;
								}
								if (this.Columns[this.ptCurrentCell.X].Selected)
								{
									this.ClearSelection();
									this.SelectColumnRange(this.ptAnchorCell.X, lastVisibleColumnIndex, true);
								}
								else
								{
									int x2 = this.ptCurrentCell.X;
									int y2 = this.ptCurrentCell.Y;
									this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x2, lastVisibleColumnIndex, this.ptAnchorCell.Y, ref y2, y2);
								}
								bool flag = this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, false, false, false);
							}
							else
							{
								if (this.Columns[this.ptCurrentCell.X].Selected)
								{
									this.SetSelectedColumnCore(this.ptCurrentCell.X, false);
									this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
								}
								else
								{
									this.SetSelectedCellCore(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
									this.SetSelectedCellCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true);
								}
								bool flag = this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
							}
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(lastVisibleColumnIndex, firstVisibleRowIndex, true);
						bool flag = this.ScrollIntoView(lastVisibleColumnIndex, firstVisibleRowIndex, false);
						if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstVisibleRowIndex))
						{
							return true;
						}
						flag = this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
					}
					else
					{
						if (!this.ScrollIntoView(lastVisibleColumnIndex, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(lastVisibleColumnIndex))
						{
							return true;
						}
						if (this.Columns[this.ptCurrentCell.X].Selected)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true);
						}
						bool flag = this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				}
			}
			finally
			{
				int num = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num - 1;
			}
			return true;
		}

		/// <summary>Processes the SPACEBAR.</summary>
		/// <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys" /> values that represents the key to process.</param>
		/// <returns>
		///   <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		// Token: 0x06001C40 RID: 7232 RVA: 0x0007E9B4 File Offset: 0x0007CBB4
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessSpaceKey(Keys keyData)
		{
			if ((keyData & (Keys.Shift | Keys.Control | Keys.Alt)) == Keys.Shift && this.ptCurrentCell.X != -1)
			{
				this.noSelectionChangeCount++;
				bool flag = false;
				if (this.selectedBandIndexes.Count > 8)
				{
					this.inBulkPaintCount++;
					flag = true;
				}
				try
				{
					if (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)
					{
						int i = 0;
						while (i < this.selectedBandIndexes.Count)
						{
							if (this.selectedBandIndexes[i] != this.ptCurrentCell.X)
							{
								this.SetSelectedColumnCore(this.selectedBandIndexes[i], false);
							}
							else
							{
								i++;
							}
						}
						this.RemoveIndividuallySelectedCells();
						if (!this.Columns[this.ptCurrentCell.X].Selected)
						{
							this.SetSelectedColumnCore(this.ptCurrentCell.X, true);
						}
						return true;
					}
					if (this.SelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
					{
						int j = 0;
						while (j < this.selectedBandIndexes.Count)
						{
							if (this.selectedBandIndexes[j] != this.ptCurrentCell.Y)
							{
								this.SetSelectedRowCore(this.selectedBandIndexes[j], false);
							}
							else
							{
								j++;
							}
						}
						this.RemoveIndividuallySelectedCells();
						if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) == DataGridViewElementStates.None)
						{
							this.SetSelectedRowCore(this.ptCurrentCell.Y, true);
						}
						return true;
					}
				}
				finally
				{
					int num = this.NoSelectionChangeCount;
					this.NoSelectionChangeCount = num - 1;
					if (flag)
					{
						this.ExitBulkPaint(-1, -1);
					}
				}
				return false;
			}
			return false;
		}

		/// <summary>Processes the TAB key.</summary>
		/// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
		/// <returns>
		///   <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.InvalidCastException">The TAB key would cause the control to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		/// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />.</exception>
		// Token: 0x06001C41 RID: 7233 RVA: 0x0007EB64 File Offset: 0x0007CD64
		[UIPermission(SecurityAction.LinkDemand, Window = UIPermissionWindow.AllWindows)]
		protected bool ProcessTabKey(Keys keyData)
		{
			if (this.StandardTab)
			{
				if ((keyData & Keys.Control) != Keys.Control)
				{
					return false;
				}
				if ((keyData & Keys.Shift) == Keys.Shift)
				{
					return this.VisibleCellExists && !this.CurrentCellIsFirstVisibleCell && this.TabToPreviousCell();
				}
				return this.VisibleCellExists && !this.CurrentCellIsLastVisibleCell && this.TabToNextCell();
			}
			else
			{
				if ((keyData & Keys.Control) == Keys.Control)
				{
					return false;
				}
				if ((keyData & Keys.Shift) == Keys.Shift)
				{
					return this.VisibleCellExists && !this.CurrentCellIsFirstVisibleCell && this.TabToPreviousCell();
				}
				return this.VisibleCellExists && !this.CurrentCellIsLastVisibleCell && this.TabToNextCell();
			}
		}

		/// <summary>Processes keys used for navigating in the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		/// <param name="e">Contains information about the key that was pressed.</param>
		/// <returns>
		///   <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.InvalidCastException">The key pressed would cause the control to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		/// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />.  
		///  -or-  
		///  The DELETE key would delete one or more rows, but an error in the data source prevents the deletion and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />.</exception>
		// Token: 0x06001C42 RID: 7234 RVA: 0x0007EC18 File Offset: 0x0007CE18
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected virtual bool ProcessDataGridViewKey(KeyEventArgs e)
		{
			Keys keyCode = e.KeyCode;
			if (keyCode <= Keys.A)
			{
				if (keyCode <= Keys.Return)
				{
					if (keyCode == Keys.Tab)
					{
						return this.ProcessTabKey(e.KeyData);
					}
					if (keyCode != Keys.Return)
					{
						return false;
					}
					return this.ProcessEnterKey(e.KeyData);
				}
				else
				{
					switch (keyCode)
					{
					case Keys.Escape:
						return this.ProcessEscapeKey(e.KeyData);
					case Keys.IMEConvert:
					case Keys.IMENonconvert:
					case Keys.IMEAccept:
					case Keys.IMEModeChange:
					case Keys.Select:
					case Keys.Print:
					case Keys.Execute:
					case Keys.Snapshot:
					case Keys.Help:
						return false;
					case Keys.Space:
						return this.ProcessSpaceKey(e.KeyData);
					case Keys.Prior:
						return this.ProcessPriorKey(e.KeyData);
					case Keys.Next:
						return this.ProcessNextKey(e.KeyData);
					case Keys.End:
						return this.ProcessEndKey(e.KeyData);
					case Keys.Home:
						return this.ProcessHomeKey(e.KeyData);
					case Keys.Left:
						return this.ProcessLeftKey(e.KeyData);
					case Keys.Up:
						return this.ProcessUpKey(e.KeyData);
					case Keys.Right:
						return this.ProcessRightKey(e.KeyData);
					case Keys.Down:
						return this.ProcessDownKey(e.KeyData);
					case Keys.Insert:
						goto IL_190;
					case Keys.Delete:
						return this.ProcessDeleteKey(e.KeyData);
					case Keys.D0:
						break;
					default:
						if (keyCode != Keys.A)
						{
							return false;
						}
						return this.ProcessAKey(e.KeyData);
					}
				}
			}
			else if (keyCode <= Keys.NumPad0)
			{
				if (keyCode == Keys.C)
				{
					goto IL_190;
				}
				if (keyCode != Keys.NumPad0)
				{
					return false;
				}
			}
			else
			{
				if (keyCode == Keys.F2)
				{
					return this.ProcessF2Key(e.KeyData);
				}
				if (keyCode != Keys.F3)
				{
					return false;
				}
				return this.ProcessF3Key(e.KeyData);
			}
			return this.ProcessZeroKey(e.KeyData);
			IL_190:
			return this.ProcessInsertKey(e.KeyData);
		}

		/// <summary>Processes the UP ARROW key.</summary>
		/// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
		/// <returns>
		///   <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.InvalidCastException">The UP ARROW key would cause the control to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		/// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />.</exception>
		// Token: 0x06001C43 RID: 7235 RVA: 0x0007EDD0 File Offset: 0x0007CFD0
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessUpKey(Keys keyData)
		{
			DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
			int num = ((firstColumn == null) ? (-1) : firstColumn.Index);
			int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
			if (num == -1 || firstRow == -1)
			{
				return false;
			}
			int num2 = -1;
			if (this.ptCurrentCell.Y != -1)
			{
				num2 = this.Rows.GetPreviousRow(this.ptCurrentCell.Y, DataGridViewElementStates.Visible);
			}
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						if ((keyData & Keys.Shift) == Keys.Shift)
						{
							if (this.ptCurrentCell.X == -1)
							{
								this.ClearSelection();
								this.SetSelectedCellCore(num, firstRow, true);
								bool flag = this.ScrollIntoView(num, firstRow, false);
								if (this.IsInnerCellOutOfBounds(num, firstRow))
								{
									return true;
								}
								flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
							}
							else if (this.MultiSelect)
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
								{
									return true;
								}
								if (this.ptAnchorCell.X == -1 || this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(firstRow))
								{
									return true;
								}
								int x = this.ptCurrentCell.X;
								int y = this.ptCurrentCell.Y;
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, x, this.ptAnchorCell.Y, ref y, firstRow);
								bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, false, false, false);
							}
							else
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
								{
									return true;
								}
								if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(firstRow))
								{
									return true;
								}
								this.ClearSelection();
								this.SetSelectedCellCore(this.ptCurrentCell.X, firstRow, true);
								bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, true, false, false);
							}
						}
						else if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
							bool flag = this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(firstRow))
							{
								return true;
							}
							this.ClearSelection();
							this.SetSelectedCellCore(this.ptCurrentCell.X, firstRow, true);
							bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, true, false, false);
						}
					}
					else if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
							bool flag = this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (num2 == -1)
							{
								return true;
							}
							if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
							{
								return true;
							}
							if (this.MultiSelect)
							{
								if (this.ptAnchorCell.Y == -1)
								{
									return true;
								}
								int x2 = this.ptCurrentCell.X;
								int y2 = this.ptCurrentCell.Y;
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x2, x2, this.ptAnchorCell.Y, ref y2, num2);
							}
							else
							{
								this.ClearSelection();
								this.SetSelectedCellCore(this.ptCurrentCell.X, num2, true);
							}
							bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, !this.MultiSelect, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(num, firstRow, true);
						bool flag = this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedCellCore(this.ptCurrentCell.X, num2, true);
						bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullRowSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						if ((keyData & Keys.Shift) == Keys.Shift)
						{
							if (this.ptCurrentCell.X == -1)
							{
								this.ClearSelection();
								this.SetSelectedRowCore(firstRow, true);
								bool flag = this.ScrollIntoView(num, firstRow, false);
								if (this.IsInnerCellOutOfBounds(num, firstRow))
								{
									return true;
								}
								flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
							}
							else if (this.MultiSelect)
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
								{
									return true;
								}
								if (this.ptAnchorCell.X == -1 || this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(firstRow))
								{
									return true;
								}
								this.ClearSelection();
								this.SelectRowRange(firstRow, this.ptAnchorCell.Y, true);
								bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, false, false, false);
							}
							else
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
								{
									return true;
								}
								if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(firstRow))
								{
									return true;
								}
								this.SetSelectedRowCore(this.ptCurrentCell.Y, false);
								this.SetSelectedRowCore(firstRow, true);
								bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, true, false, false);
							}
						}
						else if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(firstRow, true);
							bool flag = this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(firstRow))
							{
								return true;
							}
							this.ClearSelection();
							this.SetSelectedRowCore(firstRow, true);
							bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, true, false, false);
						}
					}
					else if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(firstRow, true);
							bool flag = this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (num2 == -1)
							{
								return true;
							}
							if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
							{
								return true;
							}
							this.ClearSelection();
							if (this.MultiSelect)
							{
								if (this.ptAnchorCell.Y == -1)
								{
									return true;
								}
								if (this.ptAnchorCell.Y >= num2)
								{
									this.SelectRowRange(num2, this.ptAnchorCell.Y, true);
								}
								else
								{
									this.SelectRowRange(this.ptAnchorCell.Y, num2, true);
								}
							}
							else
							{
								this.SetSelectedRowCore(num2, true);
							}
							bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, !this.MultiSelect, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedRowCore(firstRow, true);
						bool flag = this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedRowCore(num2, true);
						bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullColumnSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(num, true);
							bool flag = this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(firstRow))
							{
								return true;
							}
							bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, true, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedColumnCore(num, true);
						bool flag = this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
						{
							return true;
						}
						bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.RowHeaderSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						if ((keyData & Keys.Shift) == Keys.Shift)
						{
							if (this.ptCurrentCell.X == -1)
							{
								this.ClearSelection();
								this.SetSelectedCellCore(num, firstRow, true);
								bool flag = this.ScrollIntoView(num, firstRow, false);
								if (this.IsInnerCellOutOfBounds(num, firstRow))
								{
									return true;
								}
								flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
							}
							else if (this.MultiSelect)
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
								{
									return true;
								}
								if (this.ptAnchorCell.X == -1 || this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(firstRow))
								{
									return true;
								}
								if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
								{
									this.ClearSelection();
									this.SelectRowRange(firstRow, this.ptAnchorCell.Y, true);
								}
								else
								{
									int x3 = this.ptCurrentCell.X;
									int y3 = this.ptCurrentCell.Y;
									this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x3, x3, this.ptAnchorCell.Y, ref y3, firstRow);
								}
								bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, false, false, false);
							}
							else
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
								{
									return true;
								}
								if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(firstRow))
								{
									return true;
								}
								if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
								{
									this.SetSelectedRowCore(this.ptCurrentCell.Y, false);
									this.SetSelectedRowCore(firstRow, true);
								}
								else
								{
									this.SetSelectedCellCore(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
									this.SetSelectedCellCore(this.ptCurrentCell.X, firstRow, true);
								}
								bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, true, false, false);
							}
						}
						else if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
							bool flag = this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(firstRow))
							{
								return true;
							}
							if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
							{
								this.ClearSelection();
								this.SetSelectedRowCore(firstRow, true);
							}
							else
							{
								this.ClearSelection();
								this.SetSelectedCellCore(this.ptCurrentCell.X, firstRow, true);
							}
							bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, true, false, false);
						}
					}
					else if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
							bool flag = this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (num2 == -1)
							{
								return true;
							}
							if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
							{
								return true;
							}
							if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
							{
								this.ClearSelection();
								if (this.MultiSelect)
								{
									if (this.ptAnchorCell.Y == -1)
									{
										return true;
									}
									if (this.ptAnchorCell.Y >= num2)
									{
										this.SelectRowRange(num2, this.ptAnchorCell.Y, true);
									}
									else
									{
										this.SelectRowRange(this.ptAnchorCell.Y, num2, true);
									}
								}
								this.SetSelectedRowCore(num2, true);
							}
							else if (this.MultiSelect)
							{
								int x4 = this.ptCurrentCell.X;
								int y4 = this.ptCurrentCell.Y;
								if (this.ptAnchorCell.Y == -1)
								{
									return true;
								}
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x4, x4, this.ptAnchorCell.Y, ref y4, num2);
							}
							else
							{
								this.ClearSelection();
								this.SetSelectedCellCore(this.ptCurrentCell.X, num2, true);
							}
							bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, !this.MultiSelect, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(num, firstRow, true);
						bool flag = this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
						{
							return true;
						}
						if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(num2, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(this.ptCurrentCell.X, num2, true);
						}
						bool flag = this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, true, false, false);
					}
					return true;
				}
			}
			finally
			{
				int num3 = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num3 - 1;
			}
			return true;
		}

		/// <summary>Processes the 0 key.</summary>
		/// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
		/// <returns>
		///   <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.InvalidCastException">The 0 key would cause the control to enter edit mode, but the <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		/// <exception cref="T:System.Exception">This action would cause the control to enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> property to <see langword="true" />.</exception>
		// Token: 0x06001C44 RID: 7236 RVA: 0x0007FDFC File Offset: 0x0007DFFC
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessZeroKey(Keys keyData)
		{
			if (this.ptCurrentCell.X != -1 && !this.IsCurrentCellInEditMode && this.ColumnEditable(this.ptCurrentCell.X))
			{
				DataGridViewCell currentCellInternal = this.CurrentCellInternal;
				if (!this.IsSharedCellReadOnly(currentCellInternal, this.ptCurrentCell.Y) && (this.EditMode == DataGridViewEditMode.EditOnKeystroke || this.EditMode == DataGridViewEditMode.EditOnKeystrokeOrF2) && currentCellInternal.EditType != null)
				{
					bool flag = this.ScrollIntoView(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
					if (!this.BeginEditInternal(false))
					{
						return false;
					}
				}
			}
			if ((keyData & (Keys.Shift | Keys.Control | Keys.Alt)) != Keys.Control || !this.IsCurrentCellInEditMode)
			{
				return false;
			}
			DataGridViewCell currentCellInternal2 = this.CurrentCellInternal;
			object nullValue = currentCellInternal2.GetInheritedStyle(null, this.ptCurrentCell.Y, false).NullValue;
			if (nullValue == null || (currentCellInternal2.FormattedValueType != null && currentCellInternal2.FormattedValueType.IsAssignableFrom(nullValue.GetType())))
			{
				if (this.editingControl != null)
				{
					((IDataGridViewEditingControl)this.editingControl).EditingControlFormattedValue = nullValue;
					((IDataGridViewEditingControl)this.editingControl).EditingControlValueChanged = true;
					((IDataGridViewEditingControl)this.editingControl).PrepareEditingControlForEdit(true);
				}
				else
				{
					IDataGridViewEditingCell dataGridViewEditingCell = currentCellInternal2 as IDataGridViewEditingCell;
					dataGridViewEditingCell.EditingCellFormattedValue = nullValue;
					dataGridViewEditingCell.EditingCellValueChanged = true;
					dataGridViewEditingCell.PrepareEditingCellForEdit(true);
					this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
				}
				this.NotifyCurrentCellDirty(true);
				return true;
			}
			return false;
		}

		// Token: 0x06001C45 RID: 7237 RVA: 0x0007FF84 File Offset: 0x0007E184
		private void PushAllowUserToAddRows()
		{
			if (this.AllowUserToAddRowsInternal)
			{
				if (this.Columns.Count > 0 && this.newRowIndex == -1)
				{
					this.AddNewRow(false);
					return;
				}
			}
			else if (this.newRowIndex != -1)
			{
				this.Rows.RemoveAtInternal(this.newRowIndex, false);
			}
		}

		// Token: 0x06001C46 RID: 7238 RVA: 0x0007FFD4 File Offset: 0x0007E1D4
		private bool PushFormattedValue(ref DataGridViewCell dataGridViewCurrentCell, object formattedValue, out Exception exception)
		{
			exception = null;
			DataGridViewCellStyle inheritedEditingCellStyle = this.InheritedEditingCellStyle;
			DataGridViewCellParsingEventArgs dataGridViewCellParsingEventArgs = this.OnCellParsing(this.ptCurrentCell.Y, this.ptCurrentCell.X, formattedValue, dataGridViewCurrentCell.ValueType, inheritedEditingCellStyle);
			if (dataGridViewCellParsingEventArgs.ParsingApplied && dataGridViewCellParsingEventArgs.Value != null && dataGridViewCurrentCell.ValueType != null && dataGridViewCurrentCell.ValueType.IsAssignableFrom(dataGridViewCellParsingEventArgs.Value.GetType()))
			{
				if (dataGridViewCurrentCell.RowIndex == -1)
				{
					dataGridViewCurrentCell = this.Rows[this.ptCurrentCell.Y].Cells[this.ptCurrentCell.X];
				}
				return dataGridViewCurrentCell.SetValueInternal(this.ptCurrentCell.Y, dataGridViewCellParsingEventArgs.Value);
			}
			object obj;
			try
			{
				obj = dataGridViewCurrentCell.ParseFormattedValue(formattedValue, dataGridViewCellParsingEventArgs.InheritedCellStyle, null, null);
			}
			catch (Exception ex)
			{
				if (ClientUtils.IsCriticalException(ex))
				{
					throw;
				}
				exception = ex;
				return false;
			}
			if (dataGridViewCurrentCell.RowIndex == -1)
			{
				dataGridViewCurrentCell = this.Rows[this.ptCurrentCell.Y].Cells[this.ptCurrentCell.X];
			}
			return dataGridViewCurrentCell.SetValueInternal(this.ptCurrentCell.Y, obj);
		}

		// Token: 0x06001C47 RID: 7239 RVA: 0x00080120 File Offset: 0x0007E320
		private void RecordCellMouseClick(DataGridViewCellMouseEventArgs dgvcme)
		{
			this.lastMouseClickInfo.button = dgvcme.Button;
			this.lastMouseClickInfo.timeStamp = DateTime.Now.Ticks;
			this.lastMouseClickInfo.x = dgvcme.X;
			this.lastMouseClickInfo.y = dgvcme.Y;
			this.lastMouseClickInfo.col = dgvcme.ColumnIndex;
			this.lastMouseClickInfo.row = dgvcme.RowIndex;
		}

		// Token: 0x06001C48 RID: 7240 RVA: 0x0008019A File Offset: 0x0007E39A
		private void RefreshColumnsAndRows()
		{
			this.Rows.ClearInternal(false);
			this.RefreshColumns();
			this.RefreshRows(true);
		}

		// Token: 0x06001C49 RID: 7241 RVA: 0x000801B8 File Offset: 0x0007E3B8
		private void RefreshColumns()
		{
			bool visible = base.Visible;
			if (visible)
			{
				base.BeginUpdateInternal();
			}
			this.dataGridViewOper[1024] = true;
			try
			{
				DataGridViewColumnCollection columns = this.Columns;
				DataGridViewColumn[] array = null;
				if (this.dataConnection != null)
				{
					array = this.dataConnection.GetCollectionOfBoundDataGridViewColumns();
				}
				if (this.AutoGenerateColumns)
				{
					this.AutoGenerateDataBoundColumns(array);
				}
				else
				{
					for (int i = 0; i < columns.Count; i++)
					{
						columns[i].IsDataBoundInternal = false;
						columns[i].BoundColumnIndex = -1;
						columns[i].BoundColumnConverter = null;
						if (this.DataSource != null && columns[i].DataPropertyName.Length != 0)
						{
							this.MapDataGridViewColumnToDataBoundField(columns[i]);
						}
					}
				}
				if (this.DataSource != null)
				{
					this.dataConnection.ApplySortingInformationFromBackEnd();
				}
			}
			finally
			{
				this.dataGridViewOper[1024] = false;
				if (visible)
				{
					base.EndUpdateInternal(false);
					base.Invalidate(true);
				}
			}
		}

		/// <summary>Refreshes the value of the current cell with the underlying cell value when the cell is in edit mode, discarding any previous value.</summary>
		/// <returns>
		///   <see langword="true" /> if successful; <see langword="false" /> if a <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event occurred.</returns>
		// Token: 0x06001C4A RID: 7242 RVA: 0x000802C0 File Offset: 0x0007E4C0
		public bool RefreshEdit()
		{
			if (this.ptCurrentCell.X == -1 || !this.IsCurrentCellInEditMode)
			{
				return true;
			}
			DataGridViewCell currentCellInternal = this.CurrentCellInternal;
			DataGridViewCellStyle inheritedStyle = currentCellInternal.GetInheritedStyle(null, this.ptCurrentCell.Y, true);
			if (this.editingControl != null)
			{
				if (this.InitializeEditingControlValue(ref inheritedStyle, currentCellInternal))
				{
					if (((IDataGridViewEditingControl)this.editingControl).RepositionEditingControlOnValueChange)
					{
						this.PositionEditingControl(true, true, false);
					}
					((IDataGridViewEditingControl)this.editingControl).PrepareEditingControlForEdit(true);
					((IDataGridViewEditingControl)this.editingControl).EditingControlValueChanged = false;
					this.IsCurrentCellDirtyInternal = false;
					return true;
				}
				return false;
			}
			else
			{
				if (this.InitializeEditingCellValue(ref inheritedStyle, ref currentCellInternal))
				{
					IDataGridViewEditingCell dataGridViewEditingCell = currentCellInternal as IDataGridViewEditingCell;
					dataGridViewEditingCell.PrepareEditingCellForEdit(true);
					dataGridViewEditingCell.EditingCellValueChanged = false;
					this.IsCurrentCellDirtyInternal = false;
					return true;
				}
				return false;
			}
		}

		// Token: 0x06001C4B RID: 7243 RVA: 0x0008038C File Offset: 0x0007E58C
		private void RefreshRows(bool scrollIntoView)
		{
			bool visible = base.Visible;
			if (visible)
			{
				base.BeginUpdateInternal();
			}
			try
			{
				if (this.dataGridViewOper[131072])
				{
					this.dataGridViewState2[4194304] = true;
				}
				this.Rows.ClearInternal(true);
				if (this.dataConnection != null && this.Columns.Count > 0)
				{
					IList list = this.dataConnection.List;
					if (list != null && list.Count > 0)
					{
						int count = list.Count;
						bool doNotChangePositionInTheCurrencyManager = this.dataConnection.DoNotChangePositionInTheCurrencyManager;
						bool flag = !this.layout.dirty && !this.InSortOperation;
						if (flag)
						{
							this.dataConnection.DoNotChangePositionInTheCurrencyManager = true;
						}
						try
						{
							this.Rows.AddInternal(this.RowTemplateClone);
							if (count > 1)
							{
								this.Rows.AddCopiesInternal(0, count - 1);
							}
							foreach (object obj in this.Columns)
							{
								DataGridViewColumn dataGridViewColumn = (DataGridViewColumn)obj;
								if (dataGridViewColumn.Selected && !this.selectedBandIndexes.Contains(dataGridViewColumn.Index))
								{
									this.selectedBandIndexes.Add(dataGridViewColumn.Index);
								}
							}
						}
						finally
						{
							this.dataConnection.DoNotChangePositionInTheCurrencyManager = doNotChangePositionInTheCurrencyManager;
						}
						if (flag)
						{
							this.dataConnection.MatchCurrencyManagerPosition(scrollIntoView, true);
						}
					}
				}
			}
			finally
			{
				if (visible)
				{
					base.EndUpdateInternal(false);
					base.Invalidate(true);
				}
			}
		}

		// Token: 0x06001C4C RID: 7244 RVA: 0x00080564 File Offset: 0x0007E764
		private void RealeaseMouse()
		{
			Cursor.ClipInternal = Rectangle.Empty;
			base.CaptureInternal = false;
		}

		// Token: 0x06001C4D RID: 7245 RVA: 0x00080578 File Offset: 0x0007E778
		private void RemoveIndividualReadOnlyCellsInColumn(int columnIndex)
		{
			int i = 0;
			while (i < this.individualReadOnlyCells.Count)
			{
				DataGridViewCell dataGridViewCell = this.individualReadOnlyCells[i];
				if (dataGridViewCell.ColumnIndex == columnIndex)
				{
					this.SetReadOnlyCellCore(dataGridViewCell.ColumnIndex, dataGridViewCell.RowIndex, false);
				}
				else
				{
					i++;
				}
			}
		}

		// Token: 0x06001C4E RID: 7246 RVA: 0x000805C8 File Offset: 0x0007E7C8
		private void RemoveIndividualReadOnlyCellsInRow(int rowIndex)
		{
			int i = 0;
			while (i < this.individualReadOnlyCells.Count)
			{
				DataGridViewCell dataGridViewCell = this.individualReadOnlyCells[i];
				if (dataGridViewCell.RowIndex == rowIndex)
				{
					this.SetReadOnlyCellCore(dataGridViewCell.ColumnIndex, rowIndex, false);
				}
				else
				{
					i++;
				}
			}
		}

		// Token: 0x06001C4F RID: 7247 RVA: 0x00080614 File Offset: 0x0007E814
		private void RemoveIndividuallySelectedCells()
		{
			bool flag = false;
			if (this.individualSelectedCells.Count > 8)
			{
				this.inBulkPaintCount++;
				flag = true;
			}
			try
			{
				while (this.individualSelectedCells.Count > 0)
				{
					DataGridViewCell headCell = this.individualSelectedCells.HeadCell;
					this.SetSelectedCellCore(headCell.ColumnIndex, headCell.RowIndex, false);
				}
			}
			finally
			{
				if (flag)
				{
					this.ExitBulkPaint(-1, -1);
				}
			}
		}

		// Token: 0x06001C50 RID: 7248 RVA: 0x00080690 File Offset: 0x0007E890
		private void RemoveIndividuallySelectedCells(int columnIndexException, int rowIndexException)
		{
			bool flag = false;
			if (this.individualSelectedCells.Count > 8)
			{
				this.inBulkPaintCount++;
				flag = true;
			}
			try
			{
				while (this.individualSelectedCells.Count > 0)
				{
					DataGridViewCell dataGridViewCell = this.individualSelectedCells.HeadCell;
					if (dataGridViewCell.ColumnIndex == columnIndexException && dataGridViewCell.RowIndex == rowIndexException)
					{
						while (this.individualSelectedCells.Count > 1)
						{
							dataGridViewCell = this.individualSelectedCells[1];
							this.SetSelectedCellCore(dataGridViewCell.ColumnIndex, dataGridViewCell.RowIndex, false);
						}
						break;
					}
					this.SetSelectedCellCore(dataGridViewCell.ColumnIndex, dataGridViewCell.RowIndex, false);
				}
			}
			finally
			{
				if (flag)
				{
					this.ExitBulkPaint(-1, -1);
				}
			}
		}

		// Token: 0x06001C51 RID: 7249 RVA: 0x00080750 File Offset: 0x0007E950
		private void RemoveIndividuallySelectedCellsInColumn(int columnIndex)
		{
			int i = 0;
			int num = 0;
			bool flag = false;
			while (i < this.individualSelectedCells.Count)
			{
				DataGridViewCell dataGridViewCell = this.individualSelectedCells[i];
				if (dataGridViewCell.ColumnIndex == columnIndex)
				{
					this.SetSelectedCellCore(dataGridViewCell.ColumnIndex, dataGridViewCell.RowIndex, false);
					num++;
					if (num > 8)
					{
						flag = true;
						break;
					}
				}
				else
				{
					i++;
				}
			}
			if (flag)
			{
				this.inBulkPaintCount++;
				try
				{
					while (i < this.individualSelectedCells.Count)
					{
						DataGridViewCell dataGridViewCell = this.individualSelectedCells[i];
						if (dataGridViewCell.ColumnIndex == columnIndex)
						{
							this.SetSelectedCellCore(dataGridViewCell.ColumnIndex, dataGridViewCell.RowIndex, false);
						}
						else
						{
							i++;
						}
					}
				}
				finally
				{
					this.ExitBulkPaint(columnIndex, -1);
				}
			}
		}

		// Token: 0x06001C52 RID: 7250 RVA: 0x00080818 File Offset: 0x0007EA18
		private void RemoveIndividuallySelectedCellsInRow(int rowIndex)
		{
			int i = 0;
			while (i < this.individualSelectedCells.Count)
			{
				DataGridViewCell dataGridViewCell = this.individualSelectedCells[i];
				if (dataGridViewCell.RowIndex == rowIndex)
				{
					this.SetSelectedCellCore(dataGridViewCell.ColumnIndex, dataGridViewCell.RowIndex, false);
				}
				else
				{
					i++;
				}
			}
		}

		// Token: 0x06001C53 RID: 7251 RVA: 0x00080866 File Offset: 0x0007EA66
		private void ResetBackgroundColor()
		{
			this.BackgroundColor = DataGridView.DefaultBackgroundBrush.Color;
		}

		// Token: 0x06001C54 RID: 7252 RVA: 0x00080878 File Offset: 0x0007EA78
		private void ResetGridColor()
		{
			this.GridColor = DataGridView.DefaultGridColor;
		}

		/// <summary>Resets the <see cref="P:System.Windows.Forms.DataGridView.Text" /> property to its default value (<see cref="F:System.String.Empty" />).</summary>
		// Token: 0x06001C55 RID: 7253 RVA: 0x0002AA1A File Offset: 0x00028C1A
		[EditorBrowsable(EditorBrowsableState.Never)]
		public override void ResetText()
		{
			base.ResetText();
		}

		// Token: 0x06001C56 RID: 7254 RVA: 0x00080888 File Offset: 0x0007EA88
		private void ResetTrackingState()
		{
			if (this.IsKeyboardOperationActive())
			{
				return;
			}
			if (this.horizScrollTimer != null && this.horizScrollTimer.Enabled)
			{
				this.horizScrollTimer.Enabled = false;
			}
			if (this.vertScrollTimer != null && this.vertScrollTimer.Enabled)
			{
				this.vertScrollTimer.Enabled = false;
			}
			this.dataGridViewOper[419] = false;
			this.dataGridViewOper[4] = false;
			this.dataGridViewOper[8] = false;
			this.dataGridViewOper[16] = false;
			this.trackColumn = -1;
			this.trackRow = -1;
			this.ptMouseDownCell.X = -2;
			this.ptMouseDownCell.Y = -2;
			if (this.currentRowSplitBar != -1)
			{
				base.Invalidate(this.CalcRowResizeFeedbackRect(this.currentRowSplitBar), true);
				this.lastRowSplitBar = (this.currentRowSplitBar = -1);
			}
			if (this.currentColSplitBar != -1)
			{
				base.Invalidate(this.CalcColResizeFeedbackRect(this.currentColSplitBar), true);
				this.lastColSplitBar = (this.currentColSplitBar = -1);
			}
			if (this.lastHeaderShadow != -1)
			{
				this.dataGridViewState2[1024] = false;
				this.trackColumnEdge = -1;
				this.lastHeaderShadow = -1;
				base.Invalidate(Rectangle.Union(this.layout.TopLeftHeader, this.layout.ColumnHeaders));
			}
			this.RealeaseMouse();
		}

		// Token: 0x06001C57 RID: 7255 RVA: 0x000809E8 File Offset: 0x0007EBE8
		private void ResetKeyboardTrackingState()
		{
			if (this.IsMouseOperationActive())
			{
				return;
			}
			this.dataGridViewOper[16777216] = false;
			this.trackColumn = -1;
			if (this.currentColSplitBar != -1)
			{
				base.Invalidate(this.CalcColResizeFeedbackRect(this.currentColSplitBar), true);
				this.lastColSplitBar = (this.currentColSplitBar = -1);
			}
		}

		// Token: 0x06001C58 RID: 7256 RVA: 0x00080A42 File Offset: 0x0007EC42
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private bool IsMouseOperationActive()
		{
			return (this.dataGridViewOper.Data & 419) != 0;
		}

		// Token: 0x06001C59 RID: 7257 RVA: 0x00080A58 File Offset: 0x0007EC58
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private bool IsKeyboardOperationActive()
		{
			return (this.dataGridViewOper.Data & 16777216) != 0;
		}

		// Token: 0x06001C5A RID: 7258 RVA: 0x00080A6E File Offset: 0x0007EC6E
		internal void ResetUIState(bool useRowShortcut, bool computeVisibleRows)
		{
			this.PerformLayoutPrivate(useRowShortcut, computeVisibleRows, true, !useRowShortcut);
			if (!useRowShortcut)
			{
				base.Invalidate();
				this.InvalidateScrollBars();
			}
		}

		// Token: 0x06001C5B RID: 7259 RVA: 0x00080A8C File Offset: 0x0007EC8C
		private void RestoreRowsCachedThickness()
		{
			this.inBulkPaintCount++;
			this.inBulkLayoutCount++;
			try
			{
				for (int num = this.Rows.GetFirstRow(DataGridViewElementStates.Visible); num != -1; num = this.Rows.GetNextRow(num, DataGridViewElementStates.Visible))
				{
					DataGridViewRow dataGridViewRow = this.Rows.SharedRow(num);
					int num2;
					int num3;
					dataGridViewRow.GetHeightInfo(num, out num2, out num3);
					if (num2 != dataGridViewRow.CachedThickness && !this.OnRowHeightInfoPushed(num, dataGridViewRow.CachedThickness, num3))
					{
						dataGridViewRow.ThicknessInternal = dataGridViewRow.CachedThickness;
					}
				}
			}
			finally
			{
				this.ExitBulkLayout(true);
				this.ExitBulkPaint(-1, -1);
			}
		}

		// Token: 0x06001C5C RID: 7260 RVA: 0x00080B38 File Offset: 0x0007ED38
		private bool RowIsResizable(int rowIndex)
		{
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			if ((rowState & DataGridViewElementStates.ResizableSet) == DataGridViewElementStates.ResizableSet)
			{
				return (rowState & DataGridViewElementStates.Resizable) == DataGridViewElementStates.Resizable;
			}
			return this.AllowUserToResizeRows;
		}

		// Token: 0x06001C5D RID: 7261 RVA: 0x00080B68 File Offset: 0x0007ED68
		private bool RowNeedsDisplayedState(int rowIndex, int lastDisplayedFrozenRowIndex, int lastDisplayedScrollingRowIndex)
		{
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			if ((rowState & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
			{
				return false;
			}
			if ((rowState & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None)
			{
				return rowIndex <= lastDisplayedFrozenRowIndex;
			}
			return this.displayedBandsInfo.FirstDisplayedScrollingRow != -1 && rowIndex >= this.displayedBandsInfo.FirstDisplayedScrollingRow && rowIndex <= lastDisplayedScrollingRowIndex;
		}

		// Token: 0x06001C5E RID: 7262 RVA: 0x00080BBA File Offset: 0x0007EDBA
		private void ScrollBar_MouseEnter(object sender, EventArgs e)
		{
			if (this.dataGridViewState2[32])
			{
				this.OnMouseEnter(EventArgs.Empty);
			}
			this.UpdateMouseEnteredCell(null, null);
		}

		// Token: 0x06001C5F RID: 7263 RVA: 0x00080BE0 File Offset: 0x0007EDE0
		private void ScrollBar_MouseLeave(object sender, EventArgs e)
		{
			this.UpdateMouseEnteredCell(null, null);
			Point point = base.PointToClient(Control.MousePosition);
			if (!base.ClientRectangle.Contains(point))
			{
				this.OnMouseLeave(EventArgs.Empty);
			}
		}

		// Token: 0x06001C60 RID: 7264 RVA: 0x00080C20 File Offset: 0x0007EE20
		private bool ScrollColumnIntoView(int columnIndex, int rowIndex, bool committed, bool forCurrentCellChange)
		{
			if (this.displayedBandsInfo.FirstDisplayedScrollingCol != -1 && !this.Columns[columnIndex].Frozen && (columnIndex != this.displayedBandsInfo.FirstDisplayedScrollingCol || this.negOffset > 0))
			{
				if (this.Columns.DisplayInOrder(columnIndex, this.displayedBandsInfo.FirstDisplayedScrollingCol))
				{
					if (!committed && this.ptCurrentCell.X >= 0 && !this.CommitEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Scroll, forCurrentCellChange && (this.ptCurrentCell.X != columnIndex || this.ptCurrentCell.Y != rowIndex), this.ptCurrentCell.Y != rowIndex))
					{
						return false;
					}
					int num = this.Columns.GetColumnCount(DataGridViewElementStates.Visible, columnIndex, this.displayedBandsInfo.FirstDisplayedScrollingCol);
					if (this.negOffset > 0)
					{
						num++;
					}
					this.ScrollColumns(-num);
				}
				else if (columnIndex == this.displayedBandsInfo.FirstDisplayedScrollingCol && this.negOffset > 0)
				{
					if (!committed && this.ptCurrentCell.X >= 0 && !this.CommitEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Scroll, forCurrentCellChange && (this.ptCurrentCell.X != columnIndex || this.ptCurrentCell.Y != rowIndex), this.ptCurrentCell.Y != rowIndex))
					{
						return false;
					}
					this.ScrollColumns(-1);
				}
				else if (this.displayedBandsInfo.LastTotallyDisplayedScrollingCol == -1 || (this.displayedBandsInfo.LastTotallyDisplayedScrollingCol != columnIndex && this.Columns.DisplayInOrder(this.displayedBandsInfo.LastTotallyDisplayedScrollingCol, columnIndex)))
				{
					if (!committed && this.ptCurrentCell.X >= 0 && !this.CommitEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Scroll, forCurrentCellChange && (this.ptCurrentCell.X != columnIndex || this.ptCurrentCell.Y != rowIndex), this.ptCurrentCell.Y != rowIndex))
					{
						return false;
					}
					int num = 0;
					int num2 = this.displayedBandsInfo.FirstDisplayedScrollingCol;
					if (this.RightToLeftInternal)
					{
						int i = this.GetColumnXFromIndex(columnIndex) - this.Columns[columnIndex].Width;
						while (i < this.layout.Data.X)
						{
							if (!this.Columns.DisplayInOrder(num2, columnIndex))
							{
								break;
							}
							i += this.Columns[num2].Width;
							if (num2 == this.displayedBandsInfo.FirstDisplayedScrollingCol)
							{
								i -= this.negOffset;
							}
							num++;
							if (i < this.layout.Data.X)
							{
								num2 = this.Columns.GetNextColumn(this.Columns[num2], DataGridViewElementStates.Visible, DataGridViewElementStates.None).Index;
							}
						}
					}
					else
					{
						int i = this.GetColumnXFromIndex(columnIndex) + this.Columns[columnIndex].Width;
						while (i > this.layout.Data.Right && this.Columns.DisplayInOrder(num2, columnIndex))
						{
							i -= this.Columns[num2].Width;
							if (num2 == this.displayedBandsInfo.FirstDisplayedScrollingCol)
							{
								i += this.negOffset;
							}
							num++;
							if (i > this.layout.Data.Right)
							{
								num2 = this.Columns.GetNextColumn(this.Columns[num2], DataGridViewElementStates.Visible, DataGridViewElementStates.None).Index;
							}
						}
					}
					if (num != 0)
					{
						this.ScrollColumns(num);
					}
				}
			}
			return true;
		}

		// Token: 0x06001C61 RID: 7265 RVA: 0x00080F9C File Offset: 0x0007F19C
		private void ScrollColumns(int columns)
		{
			DataGridViewColumn dataGridViewColumn = null;
			int num = 0;
			if (columns > 0)
			{
				DataGridViewColumn dataGridViewColumn2;
				if (this.displayedBandsInfo.LastTotallyDisplayedScrollingCol >= 0)
				{
					dataGridViewColumn2 = this.Columns[this.displayedBandsInfo.LastTotallyDisplayedScrollingCol];
					while (num < columns && dataGridViewColumn2 != null)
					{
						dataGridViewColumn2 = this.Columns.GetNextColumn(dataGridViewColumn2, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
						num++;
					}
					if (dataGridViewColumn2 == null)
					{
						return;
					}
				}
				dataGridViewColumn2 = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
				num = 0;
				while (num < columns && dataGridViewColumn2 != null)
				{
					dataGridViewColumn2 = this.Columns.GetNextColumn(dataGridViewColumn2, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					num++;
				}
				dataGridViewColumn = dataGridViewColumn2;
			}
			if (columns < 0)
			{
				DataGridViewColumn dataGridViewColumn2 = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
				if (this.negOffset > 0)
				{
					num++;
				}
				while (num < -columns && dataGridViewColumn2 != null)
				{
					dataGridViewColumn2 = this.Columns.GetPreviousColumn(dataGridViewColumn2, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
					num++;
				}
				dataGridViewColumn = dataGridViewColumn2;
				if (dataGridViewColumn == null)
				{
					if (this.negOffset == 0)
					{
						this.FlushDisplayedChanged();
						return;
					}
					dataGridViewColumn = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
				}
			}
			int num2 = 0;
			for (DataGridViewColumn dataGridViewColumn3 = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen); dataGridViewColumn3 != dataGridViewColumn; dataGridViewColumn3 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
			{
				num2 += dataGridViewColumn3.Thickness;
			}
			this.HorizontalOffset = num2;
		}

		// Token: 0x06001C62 RID: 7266 RVA: 0x000810DC File Offset: 0x0007F2DC
		private bool ScrollIntoView(int columnIndex, int rowIndex, bool forCurrentCellChange)
		{
			bool flag = false;
			if (this.ptCurrentCell.X >= 0 && (this.ptCurrentCell.X != columnIndex || this.ptCurrentCell.Y != rowIndex))
			{
				if (!this.CommitEditForOperation(columnIndex, rowIndex, forCurrentCellChange))
				{
					return false;
				}
				flag = true;
				if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
				{
					return false;
				}
			}
			return this.ScrollColumnIntoView(columnIndex, rowIndex, flag, forCurrentCellChange) && !this.IsInnerCellOutOfBounds(columnIndex, rowIndex) && this.ScrollRowIntoView(columnIndex, rowIndex, flag, forCurrentCellChange);
		}

		// Token: 0x06001C63 RID: 7267 RVA: 0x00081154 File Offset: 0x0007F354
		private void ScrollRectangles(NativeMethods.RECT[] rects, int change)
		{
			if (rects != null)
			{
				if (Control.MouseButtons != MouseButtons.None)
				{
					this.dataGridViewState1[2048] = true;
				}
				foreach (NativeMethods.RECT rect in rects)
				{
					SafeNativeMethods.ScrollWindow(new HandleRef(this, base.Handle), change, 0, ref rect, ref rect);
				}
			}
		}

		// Token: 0x06001C64 RID: 7268 RVA: 0x000811AC File Offset: 0x0007F3AC
		private bool ScrollRowIntoView(int columnIndex, int rowIndex, bool committed, bool forCurrentCellChange)
		{
			if ((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None)
			{
				if (rowIndex < this.displayedBandsInfo.FirstDisplayedScrollingRow)
				{
					if (!committed && this.ptCurrentCell.X >= 0 && !this.CommitEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Scroll, forCurrentCellChange && (this.ptCurrentCell.X != columnIndex || this.ptCurrentCell.Y != rowIndex), this.ptCurrentCell.Y != rowIndex))
					{
						return false;
					}
					int num = this.Rows.GetRowCount(DataGridViewElementStates.Visible, rowIndex, this.displayedBandsInfo.FirstDisplayedScrollingRow);
					this.ScrollRowsByCount(-num, (num > 1) ? ScrollEventType.LargeDecrement : ScrollEventType.SmallDecrement);
				}
				else if (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0 && rowIndex > this.displayedBandsInfo.FirstDisplayedScrollingRow)
				{
					int num = 0;
					int num2 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
					int num3 = this.GetRowYFromIndex(rowIndex) + this.Rows.SharedRow(rowIndex).GetHeight(rowIndex);
					while (num3 > this.layout.Data.Bottom && rowIndex > num2)
					{
						num3 -= this.Rows.SharedRow(num2).GetHeight(num2);
						num++;
						if (num3 > this.layout.Data.Bottom)
						{
							num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
						}
					}
					if (num != 0)
					{
						if (!committed && this.ptCurrentCell.X >= 0 && !this.CommitEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Scroll, forCurrentCellChange && (this.ptCurrentCell.X != columnIndex || this.ptCurrentCell.Y != rowIndex), this.ptCurrentCell.Y != rowIndex))
						{
							return false;
						}
						this.ScrollRowsByCount(num, (num > 1) ? ScrollEventType.LargeIncrement : ScrollEventType.SmallIncrement);
					}
				}
			}
			return true;
		}

		// Token: 0x06001C65 RID: 7269 RVA: 0x00081374 File Offset: 0x0007F574
		private void ScrollRows(int rowCount, int deltaY, ScrollEventType scrollEventType)
		{
			bool flag = false;
			this.verticalOffset -= deltaY;
			if (this.vertScrollBar.Enabled)
			{
				this.vertScrollBar.Value = this.verticalOffset;
			}
			this.ClearRegionCache();
			int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			Rectangle rectangle = this.layout.Data;
			if (this.layout.RowHeadersVisible)
			{
				rectangle = Rectangle.Union(rectangle, this.layout.RowHeaders);
				if (this.SingleHorizontalBorderAdded)
				{
					int num = rectangle.Y;
					rectangle.Y = num + 1;
					num = rectangle.Height;
					rectangle.Height = num - 1;
					flag = true;
				}
			}
			else if (this.SingleVerticalBorderAdded)
			{
				int num = rectangle.X;
				rectangle.X = num - 1;
				num = rectangle.Width;
				rectangle.Width = num + 1;
			}
			rectangle.Y += rowsHeight;
			rectangle.Height -= rowsHeight;
			if (this.editingControl != null && (this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None)
			{
				this.PositionEditingControl(true, false, false);
			}
			if (Control.MouseButtons != MouseButtons.None)
			{
				this.dataGridViewState1[2048] = true;
			}
			this.UpdateMouseEnteredCell(null, null);
			NativeMethods.RECT rect = NativeMethods.RECT.FromXYWH(rectangle.X, rectangle.Y, rectangle.Width, rectangle.Height);
			SafeNativeMethods.ScrollWindow(new HandleRef(this, base.Handle), 0, deltaY, ref rect, ref rect);
			if (flag)
			{
				rectangle.X = this.layout.Inside.X;
				rectangle.Y = this.layout.Inside.Y;
				rectangle.Width = this.layout.RowHeaders.Width;
				rectangle.Height = 1;
				base.Invalidate(rectangle);
			}
			if (!this.dataGridViewState2[16384])
			{
				int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
				int rowCount2 = this.Rows.GetRowCount(DataGridViewElementStates.Visible, firstRow, this.displayedBandsInfo.FirstDisplayedScrollingRow);
				this.OnScroll(scrollEventType, rowCount2 - rowCount, rowCount2, ScrollOrientation.VerticalScroll);
			}
		}

		// Token: 0x06001C66 RID: 7270 RVA: 0x00081594 File Offset: 0x0007F794
		private void ScrollRowsByCount(int rows, ScrollEventType scrollEventType)
		{
			int num = 0;
			int num2 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
			if (rows > 0)
			{
				for (int i = rows; i > 0; i--)
				{
					num -= this.Rows.SharedRow(num2).GetHeight(num2);
					num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
				}
				if (num2 != -1)
				{
					int firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
					this.displayedBandsInfo.FirstDisplayedScrollingRow = num2;
					this.ComputeVisibleRows();
					if (this.displayedBandsInfo.FirstDisplayedScrollingRow > firstDisplayedScrollingRow)
					{
						num = -this.Rows.GetRowsHeight(DataGridViewElementStates.Visible, firstDisplayedScrollingRow, this.displayedBandsInfo.FirstDisplayedScrollingRow);
						rows = this.Rows.GetRowCount(DataGridViewElementStates.Visible, firstDisplayedScrollingRow, this.displayedBandsInfo.FirstDisplayedScrollingRow);
					}
					else
					{
						rows = 0;
					}
				}
			}
			else
			{
				for (int j = rows; j < 0; j++)
				{
					num2 = this.Rows.GetPreviousRow(num2, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
					if (num2 != -1)
					{
						num += this.Rows.SharedRow(num2).GetHeight(num2);
					}
				}
				if (num2 != -1)
				{
					this.displayedBandsInfo.FirstDisplayedScrollingRow = num2;
					this.ComputeVisibleRows();
				}
			}
			if (num2 != -1 && rows != 0)
			{
				this.ScrollRows(rows, num, scrollEventType);
			}
			this.FlushDisplayedChanged();
		}

		// Token: 0x06001C67 RID: 7271 RVA: 0x000816BC File Offset: 0x0007F8BC
		private void ScrollRowsByHeight(int height)
		{
			int num = 0;
			int firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
			int num2 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
			if (height > 0)
			{
				for (int i = this.Rows.SharedRow(num2).GetHeight(num2); i <= height; i += this.Rows.SharedRow(num2).GetHeight(num2))
				{
					num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
					if (num2 == -1)
					{
						throw new InvalidOperationException();
					}
				}
			}
			else
			{
				num2 = this.Rows.GetPreviousRow(num2, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
				int i = -this.Rows.SharedRow(num2).GetHeight(num2);
				while (i >= height)
				{
					int previousRow = this.Rows.GetPreviousRow(num2, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
					if (previousRow == -1)
					{
						break;
					}
					i -= this.Rows.SharedRow(previousRow).GetHeight(previousRow);
					if (i >= height)
					{
						num2 = previousRow;
					}
				}
			}
			this.displayedBandsInfo.FirstDisplayedScrollingRow = num2;
			this.ComputeVisibleRows();
			ScrollEventType scrollEventType = ScrollEventType.EndScroll;
			int num3 = 0;
			if (this.displayedBandsInfo.FirstDisplayedScrollingRow > firstDisplayedScrollingRow)
			{
				num = this.Rows.GetRowsHeight(DataGridViewElementStates.Visible, firstDisplayedScrollingRow, this.displayedBandsInfo.FirstDisplayedScrollingRow);
				num3 = this.Rows.GetRowCount(DataGridViewElementStates.Visible, firstDisplayedScrollingRow, this.displayedBandsInfo.FirstDisplayedScrollingRow);
				scrollEventType = ((num3 > 1) ? ScrollEventType.LargeIncrement : ScrollEventType.SmallIncrement);
			}
			else if (this.displayedBandsInfo.FirstDisplayedScrollingRow < firstDisplayedScrollingRow)
			{
				num = -this.Rows.GetRowsHeight(DataGridViewElementStates.Visible, this.displayedBandsInfo.FirstDisplayedScrollingRow, firstDisplayedScrollingRow);
				num3 = -this.Rows.GetRowCount(DataGridViewElementStates.Visible, this.displayedBandsInfo.FirstDisplayedScrollingRow, firstDisplayedScrollingRow);
				scrollEventType = ((num3 < -1) ? ScrollEventType.LargeDecrement : ScrollEventType.SmallDecrement);
			}
			if (num != 0)
			{
				this.ScrollRows(num3, -num, scrollEventType);
			}
			this.FlushDisplayedChanged();
		}

		/// <summary>Selects all the cells in the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		// Token: 0x06001C68 RID: 7272 RVA: 0x0008185C File Offset: 0x0007FA5C
		public void SelectAll()
		{
			if (!this.MultiSelect)
			{
				return;
			}
			this.inBulkPaintCount++;
			this.noDimensionChangeCount++;
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
				{
					int count = this.Columns.Count;
					int i = 0;
					int count2 = this.Rows.Count;
					while (i < count2)
					{
						DataGridViewRow dataGridViewRow = this.Rows[i];
						for (int j = 0; j < count; j++)
						{
							this.SetSelectedCellCore(j, i, true);
						}
						i++;
					}
					break;
				}
				case DataGridViewSelectionMode.FullRowSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
				{
					int k = 0;
					int count3 = this.Rows.Count;
					while (k < count3)
					{
						DataGridViewElementStates rowState = this.Rows.GetRowState(k);
						if ((rowState & DataGridViewElementStates.Selected) == DataGridViewElementStates.None)
						{
							this.SetSelectedRowCore(k, true);
						}
						k++;
					}
					break;
				}
				case DataGridViewSelectionMode.FullColumnSelect:
				case DataGridViewSelectionMode.ColumnHeaderSelect:
				{
					int l = 0;
					int count4 = this.Columns.Count;
					while (l < count4)
					{
						if (!this.Columns[l].Selected)
						{
							this.SetSelectedColumnCore(l, true);
						}
						l++;
					}
					break;
				}
				}
			}
			finally
			{
				this.noDimensionChangeCount--;
				this.noSelectionChangeCount--;
				this.ExitBulkPaint(-1, -1);
			}
			DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
			int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
			if (firstColumn != null && firstRow != -1)
			{
				this.ptAnchorCell.X = firstColumn.Index;
				this.ptAnchorCell.Y = firstRow;
			}
			else
			{
				this.ptAnchorCell.X = -1;
				this.ptAnchorCell.Y = -1;
			}
			if (this.noSelectionChangeCount == 0)
			{
				this.FlushSelectionChanged();
			}
		}

		// Token: 0x06001C69 RID: 7273 RVA: 0x00081A38 File Offset: 0x0007FC38
		private DataGridViewCell SelectedCell(int index)
		{
			switch (this.SelectionMode)
			{
			case DataGridViewSelectionMode.CellSelect:
				if (index < this.individualSelectedCells.Count)
				{
					return this.individualSelectedCells[index];
				}
				break;
			case DataGridViewSelectionMode.FullRowSelect:
			case DataGridViewSelectionMode.RowHeaderSelect:
			{
				int num = 0;
				int count = this.selectedBandIndexes.Count;
				while (num < count && index >= 0)
				{
					if (index < this.Columns.Count)
					{
						int num2 = this.selectedBandIndexes[num];
						return this.Rows.SharedRow(num2).Cells[index];
					}
					index -= this.Columns.Count;
					num++;
				}
				if (this.SelectionMode == DataGridViewSelectionMode.RowHeaderSelect && index < this.individualSelectedCells.Count)
				{
					return this.individualSelectedCells[index];
				}
				break;
			}
			case DataGridViewSelectionMode.FullColumnSelect:
			case DataGridViewSelectionMode.ColumnHeaderSelect:
			{
				int num3 = 0;
				int count2 = this.selectedBandIndexes.Count;
				while (num3 < count2 && index >= 0)
				{
					if (index < this.Rows.Count)
					{
						int num4 = this.selectedBandIndexes[num3];
						return this.Rows.SharedRow(index).Cells[num4];
					}
					index -= this.Rows.Count;
					num3++;
				}
				if (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect && index < this.individualSelectedCells.Count)
				{
					return this.individualSelectedCells[index];
				}
				break;
			}
			}
			return null;
		}

		// Token: 0x06001C6A RID: 7274 RVA: 0x00081BA4 File Offset: 0x0007FDA4
		private void SetColumnHeadersHeightInternal(int columnHeadersHeight, bool invalidInAdjustFillingColumns)
		{
			using (LayoutTransaction.CreateTransactionIf(this.AutoSize, this.ParentInternal, this, PropertyNames.ColumnHeadersHeight))
			{
				this.columnHeadersHeight = columnHeadersHeight;
				if (this.AutoSize)
				{
					this.InvalidateInside();
				}
				else if (this.layout.ColumnHeadersVisible)
				{
					this.PerformLayoutPrivate(false, false, invalidInAdjustFillingColumns, true);
					this.InvalidateInside();
				}
				this.OnColumnHeadersHeightChanged(EventArgs.Empty);
			}
		}

		/// <summary>Sets the currently active cell.</summary>
		/// <param name="columnIndex">The index of the column containing the cell.</param>
		/// <param name="rowIndex">The index of the row containing the cell.</param>
		/// <param name="setAnchorCellAddress">
		///   <see langword="true" /> to make the new current cell the anchor cell for a subsequent multicell selection using the SHIFT key; otherwise, <see langword="false" />.</param>
		/// <param name="validateCurrentCell">
		///   <see langword="true" /> to validate the value in the old current cell and cancel the change if validation fails; otherwise, <see langword="false" />.</param>
		/// <param name="throughMouseClick">
		///   <see langword="true" /> if the current cell is being set as a result of a mouse click; otherwise, <see langword="false" />.</param>
		/// <returns>
		///   <see langword="true" /> if the current cell was successfully set; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///   <paramref name="columnIndex" /> is less than 0 or greater than the number of columns in the control minus 1, and <paramref name="rowIndex" /> is not -1.  
		/// -or-  
		/// <paramref name="rowIndex" /> is less than 0 or greater than the number of rows in the control minus 1, and <paramref name="columnIndex" /> is not -1.</exception>
		/// <exception cref="T:System.InvalidOperationException">The specified cell has a <see cref="P:System.Windows.Forms.DataGridViewCell.Visible" /> property value of <see langword="false" />.  
		///  -or-  
		///  This method was called for a reason other than the underlying data source being reset, and another thread is currently executing this method.</exception>
		/// <exception cref="T:System.InvalidCastException">The new current cell tried to enter edit mode, but its <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> property does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
		// Token: 0x06001C6B RID: 7275 RVA: 0x00081C24 File Offset: 0x0007FE24
		protected virtual bool SetCurrentCellAddressCore(int columnIndex, int rowIndex, bool setAnchorCellAddress, bool validateCurrentCell, bool throughMouseClick)
		{
			if (columnIndex < -1 || (columnIndex >= 0 && rowIndex == -1) || columnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("columnIndex");
			}
			if (rowIndex < -1 || (columnIndex == -1 && rowIndex >= 0) || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			if (columnIndex > -1 && rowIndex > -1 && !this.IsSharedCellVisible(this.Rows.SharedRow(rowIndex).Cells[columnIndex], rowIndex))
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CurrentCellCannotBeInvisible"));
			}
			if (this.dataGridViewOper[131072] && (this.dataConnection == null || !this.dataConnection.ProcessingListChangedEvent))
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_SetCurrentCellAddressCoreNotReentrant"));
			}
			this.dataGridViewOper[131072] = true;
			try
			{
				DataGridViewCell dataGridViewCell = null;
				if (columnIndex > -1)
				{
					if (this.ptCurrentCell.X != columnIndex || this.ptCurrentCell.Y != rowIndex)
					{
						if (this.dataGridViewState1[4194304])
						{
							this.dataGridViewState1[4194304] = false;
							this.ptCurrentCell.X = columnIndex;
							this.ptCurrentCell.Y = rowIndex;
							if (this.cachedEditingControl != null)
							{
								this.editingControl = this.cachedEditingControl;
								((IDataGridViewEditingControl)this.editingControl).EditingControlRowIndex = rowIndex;
								this.cachedEditingControl = null;
								this.PositionEditingControl(true, true, false);
							}
							this.OnCurrentCellChanged(EventArgs.Empty);
							return true;
						}
						int x = this.ptCurrentCell.X;
						int y = this.ptCurrentCell.Y;
						if (x >= 0)
						{
							DataGridViewCell dataGridViewCell2 = this.CurrentCellInternal;
							if (!this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.CurrentCellChange, validateCurrentCell ? DataGridView.DataGridViewValidateCellInternal.Always : DataGridView.DataGridViewValidateCellInternal.Never, validateCurrentCell, false, validateCurrentCell && y != rowIndex, false, false, this.EditMode > DataGridViewEditMode.EditOnEnter, false, false))
							{
								return false;
							}
							if (!this.IsInnerCellOutOfBounds(x, y))
							{
								dataGridViewCell2 = this.Rows.SharedRow(y).Cells[x];
								if (dataGridViewCell2.LeaveUnsharesRowInternal(y, throughMouseClick))
								{
									dataGridViewCell2 = this.Rows[y].Cells[x];
								}
								dataGridViewCell2.OnLeaveInternal(y, throughMouseClick);
							}
							if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
							{
								return false;
							}
							if (y != rowIndex && validateCurrentCell)
							{
								if (this.OnRowValidating(ref dataGridViewCell, x, y))
								{
									if (!this.IsInnerCellOutOfBounds(x, y))
									{
										this.OnRowEnter(ref dataGridViewCell, x, y, true, true);
										if (!this.IsInnerCellOutOfBounds(x, y))
										{
											dataGridViewCell2.OnEnterInternal(y, throughMouseClick);
											this.OnCellEnter(ref dataGridViewCell, x, y);
										}
									}
									return false;
								}
								if (!this.IsInnerCellOutOfBounds(x, y))
								{
									this.OnRowValidated(ref dataGridViewCell, x, y);
								}
							}
						}
						this.dataGridViewState2[4194304] = false;
						try
						{
							if (y != rowIndex && !this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
							{
								this.OnRowEnter(ref dataGridViewCell, columnIndex, rowIndex, true, false);
							}
							if (x != columnIndex && this.SelectionMode == DataGridViewSelectionMode.FullRowSelect && AccessibilityImprovements.Level2)
							{
								if (x >= 0)
								{
									this.InvalidateCellPrivate(x, -1);
								}
								this.InvalidateCellPrivate(columnIndex, -1);
							}
							if (this.dataGridViewState2[4194304] && rowIndex >= this.Rows.Count)
							{
								return false;
							}
							if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
							{
								return false;
							}
							this.ptCurrentCell.X = columnIndex;
							this.ptCurrentCell.Y = rowIndex;
							if (this.editingControl != null)
							{
								((IDataGridViewEditingControl)this.editingControl).EditingControlRowIndex = rowIndex;
							}
							this.OnCurrentCellChanged(EventArgs.Empty);
							if (setAnchorCellAddress)
							{
								this.ptAnchorCell.X = columnIndex;
								this.ptAnchorCell.Y = rowIndex;
							}
							DataGridViewCell dataGridViewCell2 = this.CurrentCellInternal;
							if (dataGridViewCell2.EnterUnsharesRowInternal(rowIndex, throughMouseClick))
							{
								dataGridViewCell2 = this.Rows[rowIndex].Cells[columnIndex];
							}
							dataGridViewCell2.OnEnterInternal(rowIndex, throughMouseClick);
							this.OnCellEnter(ref dataGridViewCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
							if (x >= 0)
							{
								if (x < this.Columns.Count && y < this.Rows.Count)
								{
									this.InvalidateCellPrivate(x, y);
								}
								if (y != this.ptCurrentCell.Y && this.RowHeadersVisible && y < this.Rows.Count)
								{
									this.InvalidateCellPrivate(-1, y);
								}
							}
							this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
							if (this.RowHeadersVisible && y != this.ptCurrentCell.Y)
							{
								this.InvalidateCellPrivate(-1, this.ptCurrentCell.Y);
							}
							if (this.Focused && this.ptCurrentCell.X != -1 && !this.IsCurrentCellInEditMode && !this.dataGridViewState1[64] && !this.dataGridViewState2[4194304] && (this.EditMode == DataGridViewEditMode.EditOnEnter || (this.EditMode != DataGridViewEditMode.EditProgrammatically && dataGridViewCell2.EditType == null)))
							{
								this.BeginEditInternal(true);
							}
						}
						finally
						{
							this.dataGridViewState2[4194304] = false;
						}
						if (this.ptCurrentCell.X != -1)
						{
							this.AccessibilityNotifyCurrentCellChanged(new Point(this.ptCurrentCell.X, this.ptCurrentCell.Y));
						}
					}
					else
					{
						if (setAnchorCellAddress)
						{
							this.ptAnchorCell.X = columnIndex;
							this.ptAnchorCell.Y = rowIndex;
						}
						if (this.Focused && !this.IsCurrentCellInEditMode && (this.EditMode == DataGridViewEditMode.EditOnEnter || (this.EditMode != DataGridViewEditMode.EditProgrammatically && this.CurrentCellInternal.EditType == null)))
						{
							this.BeginEditInternal(true);
						}
						else
						{
							this.CorrectFocus(false);
						}
					}
				}
				else
				{
					int x2 = this.ptCurrentCell.X;
					int y2 = this.ptCurrentCell.Y;
					if (x2 >= 0 && !this.dataGridViewState1[4194304] && !this.dataGridViewOper[1048576])
					{
						DataGridViewCell dataGridViewCell3 = this.CurrentCellInternal;
						if (!this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.CurrentCellChange, validateCurrentCell ? DataGridView.DataGridViewValidateCellInternal.Always : DataGridView.DataGridViewValidateCellInternal.Never, validateCurrentCell, false, validateCurrentCell, false, false, this.EditMode > DataGridViewEditMode.EditOnEnter, false, false))
						{
							return false;
						}
						if (!this.IsInnerCellOutOfBounds(x2, y2))
						{
							dataGridViewCell3 = this.Rows.SharedRow(y2).Cells[x2];
							if (dataGridViewCell3.LeaveUnsharesRowInternal(y2, throughMouseClick))
							{
								dataGridViewCell3 = this.Rows[y2].Cells[x2];
							}
							dataGridViewCell3.OnLeaveInternal(y2, throughMouseClick);
						}
						if (validateCurrentCell)
						{
							if (this.OnRowValidating(ref dataGridViewCell, x2, y2))
							{
								if (!this.IsInnerCellOutOfBounds(x2, y2))
								{
									this.OnRowEnter(ref dataGridViewCell, x2, y2, true, true);
									if (!this.IsInnerCellOutOfBounds(x2, y2))
									{
										dataGridViewCell3.OnEnterInternal(y2, throughMouseClick);
										this.OnCellEnter(ref dataGridViewCell, x2, y2);
									}
								}
								return false;
							}
							if (!this.IsInnerCellOutOfBounds(x2, y2))
							{
								this.OnRowValidated(ref dataGridViewCell, x2, y2);
							}
						}
					}
					if (this.ptCurrentCell.X != -1)
					{
						this.ptCurrentCell.X = -1;
						this.ptCurrentCell.Y = -1;
						this.OnCurrentCellChanged(EventArgs.Empty);
					}
					if (setAnchorCellAddress)
					{
						this.ptAnchorCell.X = -1;
						this.ptAnchorCell.Y = -1;
					}
					if (this.dataGridViewState1[4194304])
					{
						if (this.editingControl != null)
						{
							if (this.dataGridViewState2[536870912])
							{
								this.dataGridViewState2[536870912] = false;
							}
							else
							{
								this.cachedEditingControl = this.editingControl;
							}
							this.editingControl = null;
						}
					}
					else if (x2 >= 0 && !this.dataGridViewOper[1048576])
					{
						if (x2 < this.Columns.Count && y2 < this.Rows.Count)
						{
							this.InvalidateCellPrivate(x2, y2);
						}
						if (this.RowHeadersVisible && y2 < this.Rows.Count)
						{
							this.InvalidateCellPrivate(-1, y2);
						}
					}
				}
			}
			finally
			{
				this.dataGridViewOper[131072] = false;
			}
			return true;
		}

		// Token: 0x06001C6C RID: 7276 RVA: 0x0008244C File Offset: 0x0008064C
		internal void SetCurrentCellAddressCoreInternal(int columnIndex, int rowIndex, bool setAnchorCellAddress, bool validateCurrentCell, bool throughMouseClick)
		{
			this.SetCurrentCellAddressCore(columnIndex, rowIndex, setAnchorCellAddress, validateCurrentCell, throughMouseClick);
		}

		// Token: 0x06001C6D RID: 7277 RVA: 0x0008245C File Offset: 0x0008065C
		private void SelectCellRange(int columnIndexFrom, int rowIndexFrom, int columnIndexTo, int rowIndexTo, bool select)
		{
			bool flag = false;
			if (rowIndexTo - rowIndexFrom > 8)
			{
				this.inBulkPaintCount++;
				flag = true;
			}
			try
			{
				if (select)
				{
					int num = columnIndexFrom;
					do
					{
						for (int i = rowIndexFrom; i <= rowIndexTo; i++)
						{
							this.SetSelectedCellCore(num, i, true);
						}
						if (num != columnIndexTo)
						{
							DataGridViewColumn nextColumn = this.Columns.GetNextColumn(this.Columns[num], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
							num = nextColumn.Index;
						}
					}
					while (num != columnIndexTo);
					if (columnIndexFrom != columnIndexTo)
					{
						for (int j = rowIndexFrom; j <= rowIndexTo; j++)
						{
							this.SetSelectedCellCore(num, j, true);
						}
					}
				}
				else
				{
					int num2 = columnIndexTo;
					do
					{
						for (int k = rowIndexTo; k >= rowIndexFrom; k--)
						{
							this.SetSelectedCellCore(num2, k, false);
						}
						if (num2 != columnIndexFrom)
						{
							DataGridViewColumn previousColumn = this.Columns.GetPreviousColumn(this.Columns[num2], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
							num2 = previousColumn.Index;
						}
					}
					while (num2 != columnIndexFrom);
					if (columnIndexFrom != columnIndexTo)
					{
						for (int l = rowIndexTo; l >= rowIndexFrom; l--)
						{
							this.SetSelectedCellCore(num2, l, false);
						}
					}
				}
			}
			finally
			{
				if (flag)
				{
					this.ExitBulkPaint(-1, -1);
				}
			}
		}

		// Token: 0x06001C6E RID: 7278 RVA: 0x0008257C File Offset: 0x0008077C
		private void SelectCellUnorderedRange(int columnIndexFrom, int rowIndexFrom, int columnIndexTo, int rowIndexTo, bool select)
		{
			int num;
			int num2;
			if (this.Columns.DisplayInOrder(columnIndexFrom, columnIndexTo))
			{
				num = columnIndexFrom;
				num2 = columnIndexTo;
			}
			else
			{
				num = columnIndexTo;
				num2 = columnIndexFrom;
			}
			int num3;
			int num4;
			if (rowIndexFrom < rowIndexTo)
			{
				num3 = rowIndexFrom;
				num4 = rowIndexTo;
			}
			else
			{
				num3 = rowIndexTo;
				num4 = rowIndexFrom;
			}
			this.SelectCellRange(num, num3, num2, num4, select);
		}

		// Token: 0x06001C6F RID: 7279 RVA: 0x000825C0 File Offset: 0x000807C0
		private void SelectColumnRange(int columnIndexFrom, int columnIndexTo, bool select)
		{
			int num = columnIndexFrom;
			do
			{
				if (select)
				{
					if (!this.selectedBandIndexes.Contains(num))
					{
						this.SetSelectedColumnCore(num, true);
					}
				}
				else
				{
					this.SetSelectedColumnCore(num, false);
				}
				if (num != columnIndexTo)
				{
					DataGridViewColumn nextColumn = this.Columns.GetNextColumn(this.Columns[num], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					num = nextColumn.Index;
				}
			}
			while (num != columnIndexTo);
			if (columnIndexFrom != columnIndexTo)
			{
				if (select)
				{
					if (!this.selectedBandIndexes.Contains(columnIndexTo))
					{
						this.SetSelectedColumnCore(columnIndexTo, true);
						return;
					}
				}
				else
				{
					this.SetSelectedColumnCore(columnIndexTo, false);
				}
			}
		}

		// Token: 0x06001C70 RID: 7280 RVA: 0x00082644 File Offset: 0x00080844
		private void SelectRowRange(int rowIndexFrom, int rowIndexTo, bool select)
		{
			bool flag = false;
			if (rowIndexTo - rowIndexFrom > 8)
			{
				this.inBulkPaintCount++;
				flag = true;
			}
			try
			{
				if (select)
				{
					for (int i = rowIndexFrom; i <= rowIndexTo; i++)
					{
						if ((this.Rows.GetRowState(i) & DataGridViewElementStates.Selected) == DataGridViewElementStates.None)
						{
							this.SetSelectedRowCore(i, true);
						}
					}
				}
				else
				{
					for (int j = rowIndexTo; j >= rowIndexFrom; j--)
					{
						this.SetSelectedRowCore(j, false);
					}
				}
			}
			finally
			{
				if (flag)
				{
					this.ExitBulkPaint(-1, -1);
				}
			}
		}

		// Token: 0x06001C71 RID: 7281 RVA: 0x000826C8 File Offset: 0x000808C8
		private bool SetAndSelectCurrentCellAddress(int columnIndex, int rowIndex, bool setAnchorCellAddress, bool validateCurrentCell, bool throughMouseClick, bool clearSelection, bool forceCurrentCellSelection)
		{
			if (!this.SetCurrentCellAddressCore(columnIndex, rowIndex, setAnchorCellAddress, validateCurrentCell, throughMouseClick))
			{
				return false;
			}
			if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
			{
				return false;
			}
			if (clearSelection)
			{
				this.ClearSelection(columnIndex, rowIndex, true);
			}
			else if (forceCurrentCellSelection)
			{
				this.SetSelectedElementCore(columnIndex, rowIndex, true);
			}
			else
			{
				if (this.MultiSelect && this.individualSelectedCells.Count + this.selectedBandIndexes.Count > 1)
				{
					return true;
				}
				if (this.individualSelectedCells.Count == 1)
				{
					DataGridViewCell headCell = this.individualSelectedCells.HeadCell;
					if (headCell.ColumnIndex != columnIndex || headCell.RowIndex != rowIndex)
					{
						return true;
					}
				}
				else if (this.selectedBandIndexes.Count == 1)
				{
					switch (this.SelectionMode)
					{
					case DataGridViewSelectionMode.FullRowSelect:
					case DataGridViewSelectionMode.RowHeaderSelect:
						if (this.selectedBandIndexes.HeadInt != rowIndex)
						{
							return true;
						}
						break;
					case DataGridViewSelectionMode.FullColumnSelect:
					case DataGridViewSelectionMode.ColumnHeaderSelect:
						if (this.selectedBandIndexes.HeadInt != columnIndex)
						{
							return true;
						}
						break;
					}
				}
				this.SetSelectedElementCore(columnIndex, rowIndex, true);
			}
			return true;
		}

		/// <summary>This member overrides <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />.</summary>
		/// <param name="x">The new <see cref="P:System.Windows.Forms.Control.Left" /> property value of the control.</param>
		/// <param name="y">The new <see cref="P:System.Windows.Forms.Control.Top" /> property value of the control.</param>
		/// <param name="width">The new <see cref="P:System.Windows.Forms.Control.Width" /> property value of the control.</param>
		/// <param name="height">The new <see cref="P:System.Windows.Forms.Control.Height" /> property value of the control.</param>
		/// <param name="specified">A bitwise combination of the <see cref="T:System.Windows.Forms.BoundsSpecified" /> values.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">One or both of the width or height values exceeds the maximum value of 8,388,607.</exception>
		// Token: 0x06001C72 RID: 7282 RVA: 0x000827C4 File Offset: 0x000809C4
		protected override void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified)
		{
			if ((specified & BoundsSpecified.Width) == BoundsSpecified.Width && width > 8388607)
			{
				throw new ArgumentOutOfRangeException("width", width, SR.GetString("DataGridView_SizeTooLarge", new object[] { 8388607.ToString(CultureInfo.CurrentCulture) }));
			}
			if ((specified & BoundsSpecified.Height) == BoundsSpecified.Height && height > 8388607)
			{
				throw new ArgumentOutOfRangeException("height", height, SR.GetString("DataGridView_SizeTooLarge", new object[] { 8388607.ToString(CultureInfo.CurrentCulture) }));
			}
			base.SetBoundsCore(x, y, width, height, specified);
		}

		// Token: 0x06001C73 RID: 7283 RVA: 0x0008286C File Offset: 0x00080A6C
		internal void SetReadOnlyCellCore(int columnIndex, int rowIndex, bool readOnly)
		{
			DataGridViewRow dataGridViewRow = this.Rows.SharedRow(rowIndex);
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			if (this.IsSharedCellReadOnly(dataGridViewRow.Cells[columnIndex], rowIndex) != readOnly)
			{
				DataGridViewCell dataGridViewCell = this.Rows[rowIndex].Cells[columnIndex];
				if (readOnly)
				{
					if ((rowState & DataGridViewElementStates.ReadOnly) == DataGridViewElementStates.None && !this.Columns[columnIndex].ReadOnly)
					{
						this.individualReadOnlyCells.Add(dataGridViewCell);
						dataGridViewCell.ReadOnlyInternal = true;
						return;
					}
				}
				else
				{
					if (this.individualReadOnlyCells.Contains(dataGridViewCell))
					{
						this.individualReadOnlyCells.Remove(dataGridViewCell);
					}
					else
					{
						if (this.Columns[columnIndex].ReadOnly)
						{
							this.Columns[columnIndex].ReadOnlyInternal = false;
							for (int i = 0; i < rowIndex; i++)
							{
								DataGridViewCell dataGridViewCell2 = this.Rows[i].Cells[columnIndex];
								dataGridViewCell2.ReadOnlyInternal = true;
								this.individualReadOnlyCells.Add(dataGridViewCell2);
							}
							for (int j = rowIndex + 1; j < this.Rows.Count; j++)
							{
								DataGridViewCell dataGridViewCell2 = this.Rows[j].Cells[columnIndex];
								dataGridViewCell2.ReadOnlyInternal = true;
								this.individualReadOnlyCells.Add(dataGridViewCell2);
							}
						}
						if ((rowState & DataGridViewElementStates.ReadOnly) != DataGridViewElementStates.None)
						{
							this.Rows.SetRowState(rowIndex, DataGridViewElementStates.ReadOnly, false);
							for (int k = 0; k < columnIndex; k++)
							{
								DataGridViewCell dataGridViewCell2 = this.Rows[rowIndex].Cells[k];
								dataGridViewCell2.ReadOnlyInternal = true;
								this.individualReadOnlyCells.Add(dataGridViewCell2);
							}
							for (int l = columnIndex + 1; l < this.Columns.Count; l++)
							{
								DataGridViewCell dataGridViewCell2 = this.Rows[rowIndex].Cells[l];
								dataGridViewCell2.ReadOnlyInternal = true;
								this.individualReadOnlyCells.Add(dataGridViewCell2);
							}
						}
					}
					if (dataGridViewCell.ReadOnly)
					{
						dataGridViewCell.ReadOnlyInternal = false;
					}
				}
			}
		}

		// Token: 0x06001C74 RID: 7284 RVA: 0x00082A70 File Offset: 0x00080C70
		internal void SetReadOnlyColumnCore(int columnIndex, bool readOnly)
		{
			if (this.Columns[columnIndex].ReadOnly == readOnly)
			{
				if (!readOnly)
				{
					this.RemoveIndividualReadOnlyCellsInColumn(columnIndex);
				}
				return;
			}
			if (readOnly)
			{
				try
				{
					this.dataGridViewOper[16384] = true;
					this.RemoveIndividualReadOnlyCellsInColumn(columnIndex);
				}
				finally
				{
					this.dataGridViewOper[16384] = false;
				}
				this.Columns[columnIndex].ReadOnlyInternal = true;
				return;
			}
			this.Columns[columnIndex].ReadOnlyInternal = false;
		}

		// Token: 0x06001C75 RID: 7285 RVA: 0x00082B00 File Offset: 0x00080D00
		internal void SetReadOnlyRowCore(int rowIndex, bool readOnly)
		{
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			if ((rowState & DataGridViewElementStates.ReadOnly) > DataGridViewElementStates.None == readOnly)
			{
				if (!readOnly)
				{
					this.RemoveIndividualReadOnlyCellsInRow(rowIndex);
				}
				return;
			}
			if (readOnly)
			{
				try
				{
					this.dataGridViewOper[16384] = true;
					this.RemoveIndividualReadOnlyCellsInRow(rowIndex);
				}
				finally
				{
					this.dataGridViewOper[16384] = false;
				}
				this.Rows.SetRowState(rowIndex, DataGridViewElementStates.ReadOnly, true);
				return;
			}
			this.Rows.SetRowState(rowIndex, DataGridViewElementStates.ReadOnly, false);
		}

		/// <summary>Changes the selection state of the cell with the specified row and column indexes.</summary>
		/// <param name="columnIndex">The index of the column containing the cell.</param>
		/// <param name="rowIndex">The index of the row containing the cell.</param>
		/// <param name="selected">
		///   <see langword="true" /> to select the cell; <see langword="false" /> to cancel the selection of the cell.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///   <paramref name="columnIndex" /> is less than 0 or greater than the number of columns in the control minus 1.  
		/// -or-  
		/// <paramref name="rowIndex" /> is less than 0 or greater than the number of rows in the control minus 1.</exception>
		// Token: 0x06001C76 RID: 7286 RVA: 0x00082B8C File Offset: 0x00080D8C
		protected virtual void SetSelectedCellCore(int columnIndex, int rowIndex, bool selected)
		{
			if (columnIndex < 0 || columnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("columnIndex");
			}
			if (rowIndex < 0 || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			DataGridViewRow dataGridViewRow = this.Rows.SharedRow(rowIndex);
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			if (this.IsSharedCellSelected(dataGridViewRow.Cells[columnIndex], rowIndex) != selected)
			{
				DataGridViewCell dataGridViewCell = this.Rows[rowIndex].Cells[columnIndex];
				if (selected)
				{
					if ((rowState & DataGridViewElementStates.Selected) == DataGridViewElementStates.None && !this.Columns[columnIndex].Selected)
					{
						this.individualSelectedCells.Add(dataGridViewCell);
						dataGridViewCell.SelectedInternal = true;
						return;
					}
				}
				else
				{
					if ((dataGridViewCell.State & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
					{
						this.individualSelectedCells.Remove(dataGridViewCell);
					}
					else
					{
						bool flag = false;
						if (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)
						{
							if (this.Rows.Count > 8)
							{
								this.inBulkPaintCount++;
								flag = true;
							}
							try
							{
								this.selectedBandIndexes.Remove(columnIndex);
								this.Columns[columnIndex].SelectedInternal = false;
								for (int i = 0; i < rowIndex; i++)
								{
									DataGridViewCell dataGridViewCell2 = this.Rows[i].Cells[columnIndex];
									dataGridViewCell2.SelectedInternal = true;
									this.individualSelectedCells.Add(dataGridViewCell2);
								}
								for (int j = rowIndex + 1; j < this.Rows.Count; j++)
								{
									DataGridViewCell dataGridViewCell2 = this.Rows[j].Cells[columnIndex];
									dataGridViewCell2.SelectedInternal = true;
									this.individualSelectedCells.Add(dataGridViewCell2);
								}
								goto IL_297;
							}
							finally
							{
								if (flag)
								{
									this.ExitBulkPaint(columnIndex, -1);
								}
							}
						}
						if (this.SelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
						{
							if (this.Columns.Count > 8)
							{
								this.inBulkPaintCount++;
								flag = true;
							}
							try
							{
								this.selectedBandIndexes.Remove(rowIndex);
								this.Rows.SetRowState(rowIndex, DataGridViewElementStates.Selected, false);
								for (int k = 0; k < columnIndex; k++)
								{
									DataGridViewCell dataGridViewCell2 = this.Rows[rowIndex].Cells[k];
									dataGridViewCell2.SelectedInternal = true;
									this.individualSelectedCells.Add(dataGridViewCell2);
								}
								for (int l = columnIndex + 1; l < this.Columns.Count; l++)
								{
									DataGridViewCell dataGridViewCell2 = this.Rows[rowIndex].Cells[l];
									dataGridViewCell2.SelectedInternal = true;
									this.individualSelectedCells.Add(dataGridViewCell2);
								}
							}
							finally
							{
								if (flag)
								{
									this.ExitBulkPaint(-1, rowIndex);
								}
							}
						}
					}
					IL_297:
					if (dataGridViewCell.Selected)
					{
						dataGridViewCell.SelectedInternal = false;
					}
				}
			}
		}

		// Token: 0x06001C77 RID: 7287 RVA: 0x00082E5C File Offset: 0x0008105C
		internal void SetSelectedCellCoreInternal(int columnIndex, int rowIndex, bool selected)
		{
			if (selected && !this.MultiSelect)
			{
				if (!this.Columns[columnIndex].Visible || (this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CurrentCellCannotBeInvisible"));
				}
				if (!this.ScrollIntoView(columnIndex, rowIndex, true))
				{
					return;
				}
				if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
				{
					return;
				}
			}
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
					if (selected && !this.MultiSelect)
					{
						this.RemoveIndividuallySelectedCells();
					}
					this.SetSelectedCellCore(columnIndex, rowIndex, selected);
					break;
				case DataGridViewSelectionMode.FullRowSelect:
					if (selected)
					{
						if (!this.MultiSelect)
						{
							int i = 0;
							while (i < this.selectedBandIndexes.Count)
							{
								if (this.selectedBandIndexes[i] != rowIndex)
								{
									this.SetSelectedRowCore(this.selectedBandIndexes[i], false);
								}
								else
								{
									i++;
								}
							}
						}
						if ((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Selected) == DataGridViewElementStates.None)
						{
							this.SetSelectedRowCore(rowIndex, true);
						}
					}
					else if ((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
					{
						this.SetSelectedRowCore(rowIndex, false);
					}
					break;
				case DataGridViewSelectionMode.FullColumnSelect:
					if (selected)
					{
						if (!this.MultiSelect)
						{
							int j = 0;
							while (j < this.selectedBandIndexes.Count)
							{
								if (this.selectedBandIndexes[j] != columnIndex)
								{
									this.SetSelectedColumnCore(this.selectedBandIndexes[j], false);
								}
								else
								{
									j++;
								}
							}
						}
						if (!this.selectedBandIndexes.Contains(columnIndex))
						{
							this.SetSelectedColumnCore(columnIndex, true);
						}
					}
					else if (this.selectedBandIndexes.Contains(columnIndex))
					{
						this.SetSelectedColumnCore(columnIndex, false);
					}
					break;
				case DataGridViewSelectionMode.RowHeaderSelect:
					if (selected)
					{
						if (!this.MultiSelect)
						{
							if (this.selectedBandIndexes.Count > 0)
							{
								this.SetSelectedRowCore(this.selectedBandIndexes.HeadInt, false);
							}
							else
							{
								this.RemoveIndividuallySelectedCells();
							}
						}
						this.SetSelectedCellCore(columnIndex, rowIndex, true);
					}
					else if (!this.MultiSelect)
					{
						if (this.selectedBandIndexes.Count > 0)
						{
							this.SetSelectedRowCore(this.selectedBandIndexes.HeadInt, false);
						}
						else
						{
							this.SetSelectedCellCore(columnIndex, rowIndex, false);
						}
					}
					else
					{
						this.SetSelectedCellCore(columnIndex, rowIndex, false);
					}
					break;
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					if (selected)
					{
						if (!this.MultiSelect)
						{
							if (this.selectedBandIndexes.Count > 0)
							{
								this.SetSelectedColumnCore(this.selectedBandIndexes.HeadInt, false);
							}
							else
							{
								this.RemoveIndividuallySelectedCells();
							}
						}
						this.SetSelectedCellCore(columnIndex, rowIndex, true);
					}
					else if (!this.MultiSelect)
					{
						if (this.selectedBandIndexes.Count > 0)
						{
							this.SetSelectedColumnCore(this.selectedBandIndexes.HeadInt, false);
						}
						else
						{
							this.SetSelectedCellCore(columnIndex, rowIndex, false);
						}
					}
					else
					{
						this.SetSelectedCellCore(columnIndex, rowIndex, false);
					}
					break;
				}
			}
			finally
			{
				int num = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num - 1;
			}
			if (selected && !this.MultiSelect)
			{
				bool flag = this.SetCurrentCellAddressCore(columnIndex, rowIndex, true, false, true);
			}
		}

		/// <summary>Changes the selection state of the column with the specified index.</summary>
		/// <param name="columnIndex">The index of the column.</param>
		/// <param name="selected">
		///   <see langword="true" /> to select the column; <see langword="false" /> to cancel the selection of the column.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///   <paramref name="columnIndex" /> is less than 0 or greater than the number of columns in the control minus 1.</exception>
		// Token: 0x06001C78 RID: 7288 RVA: 0x00083168 File Offset: 0x00081368
		protected virtual void SetSelectedColumnCore(int columnIndex, bool selected)
		{
			if (columnIndex < 0 || columnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("columnIndex");
			}
			this.noSelectionChangeCount++;
			try
			{
				if (this.Columns[columnIndex].Selected != selected)
				{
					if (selected)
					{
						this.RemoveIndividuallySelectedCellsInColumn(columnIndex);
						this.Columns[columnIndex].SelectedInternal = true;
						this.selectedBandIndexes.Add(columnIndex);
					}
					else
					{
						this.Columns[columnIndex].SelectedInternal = false;
						this.selectedBandIndexes.Remove(columnIndex);
					}
				}
				else if (!selected)
				{
					this.RemoveIndividuallySelectedCellsInColumn(columnIndex);
				}
			}
			finally
			{
				int num = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num - 1;
			}
		}

		// Token: 0x06001C79 RID: 7289 RVA: 0x0008322C File Offset: 0x0008142C
		internal void SetSelectedColumnCoreInternal(int columnIndex, bool selected)
		{
			this.noSelectionChangeCount++;
			try
			{
				if (!this.MultiSelect && this.selectedBandIndexes.Count > 0)
				{
					int headInt = this.selectedBandIndexes.HeadInt;
					if (headInt != columnIndex)
					{
						this.SetSelectedColumnCore(headInt, false);
					}
				}
				this.SetSelectedColumnCore(columnIndex, selected);
			}
			finally
			{
				int num = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num - 1;
			}
		}

		// Token: 0x06001C7A RID: 7290 RVA: 0x000832A0 File Offset: 0x000814A0
		private void SetSelectedElementCore(int columnIndex, int rowIndex, bool selected)
		{
			switch (this.SelectionMode)
			{
			case DataGridViewSelectionMode.CellSelect:
				this.SetSelectedCellCore(columnIndex, rowIndex, selected);
				return;
			case DataGridViewSelectionMode.FullRowSelect:
				this.SetSelectedRowCore(rowIndex, selected);
				return;
			case DataGridViewSelectionMode.FullColumnSelect:
				this.SetSelectedColumnCore(columnIndex, selected);
				return;
			case DataGridViewSelectionMode.RowHeaderSelect:
				if (columnIndex == -1)
				{
					this.SetSelectedRowCore(rowIndex, selected);
					return;
				}
				this.SetSelectedCellCore(columnIndex, rowIndex, selected);
				return;
			case DataGridViewSelectionMode.ColumnHeaderSelect:
				if (rowIndex == -1)
				{
					this.SetSelectedColumnCore(columnIndex, selected);
					return;
				}
				this.SetSelectedCellCore(columnIndex, rowIndex, selected);
				return;
			default:
				return;
			}
		}

		/// <summary>Changes the selection state of the row with the specified index.</summary>
		/// <param name="rowIndex">The index of the row.</param>
		/// <param name="selected">
		///   <see langword="true" /> to select the row; <see langword="false" /> to cancel the selection of the row.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///   <paramref name="rowIndex" /> is less than 0 or greater than the number of rows in the control minus 1.</exception>
		// Token: 0x06001C7B RID: 7291 RVA: 0x00083318 File Offset: 0x00081518
		protected virtual void SetSelectedRowCore(int rowIndex, bool selected)
		{
			if (rowIndex < 0 || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			this.noSelectionChangeCount++;
			try
			{
				DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
				if ((rowState & DataGridViewElementStates.Selected) > DataGridViewElementStates.None != selected)
				{
					if (selected)
					{
						this.RemoveIndividuallySelectedCellsInRow(rowIndex);
						this.selectedBandIndexes.Add(rowIndex);
						this.Rows.SetRowState(rowIndex, DataGridViewElementStates.Selected, true);
					}
					else
					{
						this.selectedBandIndexes.Remove(rowIndex);
						this.Rows.SetRowState(rowIndex, DataGridViewElementStates.Selected, false);
					}
				}
				else if (!selected)
				{
					this.RemoveIndividuallySelectedCellsInRow(rowIndex);
				}
			}
			finally
			{
				int num = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num - 1;
			}
		}

		// Token: 0x06001C7C RID: 7292 RVA: 0x000833DC File Offset: 0x000815DC
		internal void SetSelectedRowCoreInternal(int rowIndex, bool selected)
		{
			this.noSelectionChangeCount++;
			try
			{
				if (!this.MultiSelect && this.selectedBandIndexes.Count > 0)
				{
					int headInt = this.selectedBandIndexes.HeadInt;
					if (headInt != rowIndex)
					{
						this.SetSelectedRowCore(headInt, false);
					}
				}
				this.SetSelectedRowCore(rowIndex, selected);
			}
			finally
			{
				int num = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num - 1;
			}
		}

		// Token: 0x06001C7D RID: 7293 RVA: 0x00083450 File Offset: 0x00081650
		private bool ShouldSerializeAlternatingRowsDefaultCellStyle()
		{
			DataGridViewCellStyle dataGridViewCellStyle = new DataGridViewCellStyle();
			return !this.AlternatingRowsDefaultCellStyle.Equals(dataGridViewCellStyle);
		}

		// Token: 0x06001C7E RID: 7294 RVA: 0x00083472 File Offset: 0x00081672
		private bool ShouldSerializeColumnHeadersDefaultCellStyle()
		{
			return !this.ColumnHeadersDefaultCellStyle.Equals(this.DefaultColumnHeadersDefaultCellStyle);
		}

		// Token: 0x06001C7F RID: 7295 RVA: 0x00083488 File Offset: 0x00081688
		private bool ShouldSerializeDefaultCellStyle()
		{
			return !this.DefaultCellStyle.Equals(this.DefaultDefaultCellStyle);
		}

		// Token: 0x06001C80 RID: 7296 RVA: 0x0008349E File Offset: 0x0008169E
		private bool ShouldSerializeRowHeadersDefaultCellStyle()
		{
			return !this.RowHeadersDefaultCellStyle.Equals(this.DefaultRowHeadersDefaultCellStyle);
		}

		// Token: 0x06001C81 RID: 7297 RVA: 0x000834B4 File Offset: 0x000816B4
		private bool ShouldSerializeRowsDefaultCellStyle()
		{
			DataGridViewCellStyle dataGridViewCellStyle = new DataGridViewCellStyle();
			return !this.RowsDefaultCellStyle.Equals(dataGridViewCellStyle);
		}

		/// <summary>Sorts the contents of the <see cref="T:System.Windows.Forms.DataGridView" /> control in ascending or descending order based on the contents of the specified column.</summary>
		/// <param name="dataGridViewColumn">The column by which to sort the contents of the <see cref="T:System.Windows.Forms.DataGridView" />.</param>
		/// <param name="direction">One of the <see cref="T:System.ComponentModel.ListSortDirection" /> values.</param>
		/// <exception cref="T:System.ArgumentException">The specified column is not part of this <see cref="T:System.Windows.Forms.DataGridView" />.  
		///  -or-  
		///  The <see cref="P:System.Windows.Forms.DataGridView.DataSource" /> property has been set and the <see cref="P:System.Windows.Forms.DataGridViewColumn.IsDataBound" /> property of the specified column returns <see langword="false" />.</exception>
		/// <exception cref="T:System.ArgumentNullException">
		///   <paramref name="dataGridViewColumn" /> is <see langword="null" />.</exception>
		/// <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Forms.DataGridView.VirtualMode" /> property is set to <see langword="true" /> and the <see cref="P:System.Windows.Forms.DataGridViewColumn.IsDataBound" /> property of the specified column returns <see langword="false" />.  
		///  -or-  
		///  The object specified by the <see cref="P:System.Windows.Forms.DataGridView.DataSource" /> property does not implement the <see cref="T:System.ComponentModel.IBindingList" /> interface.  
		///  -or-  
		///  The object specified by the <see cref="P:System.Windows.Forms.DataGridView.DataSource" /> property has a <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> property value of <see langword="false" />.</exception>
		// Token: 0x06001C82 RID: 7298 RVA: 0x000834D8 File Offset: 0x000816D8
		public virtual void Sort(DataGridViewColumn dataGridViewColumn, ListSortDirection direction)
		{
			if (dataGridViewColumn == null)
			{
				throw new ArgumentNullException("dataGridViewColumn");
			}
			if (direction != ListSortDirection.Ascending && direction != ListSortDirection.Descending)
			{
				throw new InvalidEnumArgumentException("direction", (int)direction, typeof(ListSortDirection));
			}
			if (dataGridViewColumn.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			if (this.VirtualMode && !dataGridViewColumn.IsDataBound)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_OperationDisabledInVirtualMode"));
			}
			this.SortInternal(null, dataGridViewColumn, direction);
		}

		/// <summary>Sorts the contents of the <see cref="T:System.Windows.Forms.DataGridView" /> control using an implementation of the <see cref="T:System.Collections.IComparer" /> interface.</summary>
		/// <param name="comparer">An implementation of <see cref="T:System.Collections.IComparer" /> that performs the custom sorting operation.</param>
		/// <exception cref="T:System.ArgumentNullException">
		///   <paramref name="comparer" /> is <see langword="null" />.</exception>
		/// <exception cref="T:System.InvalidOperationException">
		///   <see cref="P:System.Windows.Forms.DataGridView.VirtualMode" /> is set to <see langword="true" />.  
		/// -or-  
		/// <see cref="P:System.Windows.Forms.DataGridView.DataSource" /> is not <see langword="null" />.</exception>
		// Token: 0x06001C83 RID: 7299 RVA: 0x00083554 File Offset: 0x00081754
		public virtual void Sort(IComparer comparer)
		{
			if (comparer == null)
			{
				throw new ArgumentNullException("comparer");
			}
			if (this.VirtualMode)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_OperationDisabledInVirtualMode"));
			}
			if (this.DataSource != null)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotUseAComparerToSortDataGridViewWhenDataBound"));
			}
			this.SortInternal(comparer, null, ListSortDirection.Ascending);
		}

		// Token: 0x06001C84 RID: 7300 RVA: 0x000835A8 File Offset: 0x000817A8
		private void SortDataBoundDataGridView_PerformCheck(DataGridViewColumn dataGridViewColumn)
		{
			IBindingList bindingList = this.dataConnection.List as IBindingList;
			if (bindingList == null)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotSortDataBoundDataGridViewBoundToNonIBindingList"));
			}
			if (!bindingList.SupportsSorting)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_IBindingListNeedsToSupportSorting"));
			}
			if (!dataGridViewColumn.IsDataBound)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnNeedsToBeDataBoundWhenSortingDataBoundDataGridView"), "dataGridViewColumn");
			}
		}

		// Token: 0x06001C85 RID: 7301 RVA: 0x00083610 File Offset: 0x00081810
		private void SortInternal(IComparer comparer, DataGridViewColumn dataGridViewColumn, ListSortDirection direction)
		{
			this.ptCurrentCellCache.X = this.ptCurrentCell.X;
			this.ptCurrentCellCache.Y = this.ptCurrentCell.Y;
			this.dataGridViewOper[64] = true;
			try
			{
				if (!this.SetCurrentCellAddressCore(-1, -1, true, true, false))
				{
					return;
				}
				int firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
				int i = this.Rows.GetRowCount(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				if (i > 0 && this.DataSource == null)
				{
					int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					this.Rows.SetRowState(firstRow, DataGridViewElementStates.Frozen, false);
				}
				if (this.sortedColumn != null && this.sortedColumn.SortMode == DataGridViewColumnSortMode.Automatic && this.sortedColumn.HasHeaderCell)
				{
					this.sortedColumn.HeaderCell.SortGlyphDirection = SortOrder.None;
				}
				if (comparer == null)
				{
					this.sortedColumn = dataGridViewColumn;
					this.sortOrder = ((direction == ListSortDirection.Ascending) ? SortOrder.Ascending : SortOrder.Descending);
					if (dataGridViewColumn.SortMode == DataGridViewColumnSortMode.Automatic && dataGridViewColumn.HasHeaderCell)
					{
						dataGridViewColumn.HeaderCell.SortGlyphDirection = this.sortOrder;
					}
				}
				else
				{
					this.sortedColumn = null;
					this.sortOrder = SortOrder.None;
				}
				if (this.DataSource == null)
				{
					this.UpdateRowsDisplayedState(false);
					this.Rows.Sort(comparer, direction == ListSortDirection.Ascending);
				}
				else
				{
					this.SortDataBoundDataGridView_PerformCheck(dataGridViewColumn);
					this.dataConnection.Sort(dataGridViewColumn, direction);
				}
				if (this.ptCurrentCellCache.X != -1 && !this.IsInnerCellOutOfBounds(this.ptCurrentCellCache.X, this.ptCurrentCellCache.Y))
				{
					this.SetAndSelectCurrentCellAddress(this.ptCurrentCellCache.X, this.ptCurrentCellCache.Y, true, false, false, false, false);
				}
				if (i > 0)
				{
					int num = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
					while (i > 1)
					{
						num = this.Rows.GetNextRow(num, DataGridViewElementStates.Visible);
						i--;
					}
					this.Rows.SetRowState(num, DataGridViewElementStates.Frozen, true);
				}
				this.displayedBandsInfo.FirstDisplayedScrollingRow = firstDisplayedScrollingRow;
			}
			finally
			{
				this.dataGridViewOper[64] = false;
			}
			this.OnGlobalAutoSize();
			if (this.DataSource == null)
			{
				this.displayedBandsInfo.EnsureDirtyState();
			}
			this.ResetUIState(false, false);
			this.OnSorted(EventArgs.Empty);
			if (AccessibilityImprovements.Level3)
			{
				base.AccessibilityNotifyClients(AccessibleEvents.Reorder, -4, 0);
			}
		}

		// Token: 0x06001C86 RID: 7302 RVA: 0x00083860 File Offset: 0x00081A60
		internal void SwapSortedRows(int rowIndex1, int rowIndex2)
		{
			if (rowIndex1 == rowIndex2)
			{
				return;
			}
			if (rowIndex1 == this.ptCurrentCellCache.Y)
			{
				this.ptCurrentCellCache.Y = rowIndex2;
			}
			else if (rowIndex2 == this.ptCurrentCellCache.Y)
			{
				this.ptCurrentCellCache.Y = rowIndex1;
			}
			DataGridViewSelectionMode dataGridViewSelectionMode = this.SelectionMode;
			if (dataGridViewSelectionMode == DataGridViewSelectionMode.FullRowSelect || dataGridViewSelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
			{
				int num = this.selectedBandIndexes.IndexOf(rowIndex1);
				int num2 = this.selectedBandIndexes.IndexOf(rowIndex2);
				if (num != -1 && num2 == -1)
				{
					this.selectedBandIndexes[num] = rowIndex2;
				}
				else if (num == -1 && num2 != -1)
				{
					this.selectedBandIndexes[num2] = rowIndex1;
				}
				if (this.selectedBandSnapshotIndexes != null)
				{
					num = this.selectedBandSnapshotIndexes.IndexOf(rowIndex1);
					num2 = this.selectedBandSnapshotIndexes.IndexOf(rowIndex2);
					if (num != -1 && num2 == -1)
					{
						this.selectedBandSnapshotIndexes[num] = rowIndex2;
						return;
					}
					if (num == -1 && num2 != -1)
					{
						this.selectedBandSnapshotIndexes[num2] = rowIndex1;
					}
				}
			}
		}

		// Token: 0x06001C87 RID: 7303 RVA: 0x00083950 File Offset: 0x00081B50
		private void DataGridViewHScrolled(object sender, ScrollEventArgs se)
		{
			if (!base.Enabled)
			{
				return;
			}
			if (se.Type == ScrollEventType.SmallIncrement || se.Type == ScrollEventType.SmallDecrement)
			{
				int num = ((se.Type == ScrollEventType.SmallIncrement) ? 1 : (-1));
				this.ScrollColumns(num);
				se.NewValue = this.HorizontalOffset;
				return;
			}
			if (se.Type != ScrollEventType.EndScroll)
			{
				this.HorizontalOffset = se.NewValue;
			}
		}

		// Token: 0x06001C88 RID: 7304 RVA: 0x000839B0 File Offset: 0x00081BB0
		private void DataGridViewVScrolled(object sender, ScrollEventArgs se)
		{
			if (!base.Enabled)
			{
				return;
			}
			int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			switch (se.Type)
			{
			case ScrollEventType.SmallDecrement:
				if (this.vertScrollBar.Value != this.vertScrollBar.Minimum)
				{
					this.ScrollRowsByCount(-1, ScrollEventType.SmallDecrement);
				}
				se.NewValue = this.VerticalOffset;
				return;
			case ScrollEventType.SmallIncrement:
				if (this.vertScrollBar.Value + this.Rows.SharedRow(this.displayedBandsInfo.FirstDisplayedScrollingRow).GetHeight(this.displayedBandsInfo.FirstDisplayedScrollingRow) <= this.vertScrollBar.Maximum - this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight))
				{
					this.ScrollRowsByCount(1, ScrollEventType.SmallIncrement);
				}
				se.NewValue = this.VerticalOffset;
				return;
			case ScrollEventType.LargeDecrement:
				this.VerticalOffset -= this.vertScrollBar.LargeChange;
				se.NewValue = this.VerticalOffset;
				return;
			case ScrollEventType.LargeIncrement:
			{
				int height = this.Rows.SharedRow(this.displayedBandsInfo.FirstDisplayedScrollingRow).GetHeight(this.displayedBandsInfo.FirstDisplayedScrollingRow);
				this.VerticalOffset += Math.Max(height, this.vertScrollBar.LargeChange);
				se.NewValue = this.VerticalOffset;
				return;
			}
			case ScrollEventType.ThumbPosition:
				break;
			case ScrollEventType.ThumbTrack:
			case ScrollEventType.First:
			case ScrollEventType.Last:
				if (se.NewValue >= this.vertScrollBar.Maximum - this.vertScrollBar.LargeChange)
				{
					this.VerticalOffset = this.vertScrollBar.Maximum - this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight);
					return;
				}
				this.VerticalOffset = se.NewValue;
				break;
			default:
				return;
			}
		}

		// Token: 0x06001C89 RID: 7305 RVA: 0x00083B48 File Offset: 0x00081D48
		private bool TabToNextCell()
		{
			DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
			int num = ((dataGridViewColumn == null) ? (-1) : dataGridViewColumn.Index);
			int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
			if (num == -1 || firstRow == -1)
			{
				return false;
			}
			int num2 = -1;
			if (this.ptCurrentCell.X != -1)
			{
				dataGridViewColumn = this.Columns.GetNextColumn(this.Columns[this.ptCurrentCell.X], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				if (dataGridViewColumn != null)
				{
					num2 = dataGridViewColumn.Index;
				}
			}
			int num3 = -1;
			if (this.ptCurrentCell.Y != -1)
			{
				num3 = this.Rows.GetNextRow(this.ptCurrentCell.Y, DataGridViewElementStates.Visible);
			}
			int num4 = -1;
			int num5 = -1;
			this.noSelectionChangeCount++;
			try
			{
				if (this.ptCurrentCell.X == -1)
				{
					this.ClearSelection();
				}
				else
				{
					if (num2 == -1)
					{
						num4 = ((num3 == -1) ? firstRow : num3);
						num5 = num;
					}
					else
					{
						num4 = this.ptCurrentCell.Y;
						num5 = num2;
					}
					if (!this.ScrollIntoView(num5, num4, true))
					{
						return true;
					}
				}
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					if (this.ptCurrentCell.X == -1)
					{
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						this.SetSelectedCellCore(num, firstRow, true);
					}
					else
					{
						if (this.IsInnerCellOutOfBounds(num5, num4))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedCellCore(num5, num4, true);
					}
					break;
				case DataGridViewSelectionMode.FullRowSelect:
					if (this.ptCurrentCell.X == -1)
					{
						if (this.IsRowOutOfBounds(firstRow))
						{
							return true;
						}
						this.SetSelectedRowCore(firstRow, true);
					}
					else if (num4 != this.ptCurrentCell.Y || this.MultiSelect)
					{
						if (this.IsRowOutOfBounds(num4))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedRowCore(num4, true);
					}
					break;
				case DataGridViewSelectionMode.FullColumnSelect:
					if (this.ptCurrentCell.X == -1)
					{
						if (this.IsColumnOutOfBounds(num))
						{
							return true;
						}
						this.SetSelectedColumnCore(num, true);
					}
					else
					{
						if (this.IsColumnOutOfBounds(num5))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedColumnCore(num5, true);
					}
					break;
				}
			}
			finally
			{
				int num6 = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num6 - 1;
			}
			if (this.ptCurrentCell.X == -1)
			{
				bool flag = this.ScrollIntoView(num, firstRow, false);
				if (this.IsInnerCellOutOfBounds(num, firstRow))
				{
					return true;
				}
				flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
			}
			else
			{
				if (this.IsInnerCellOutOfBounds(num5, num4))
				{
					return true;
				}
				bool flag = this.SetCurrentCellAddressCore(num5, num4, true, false, false);
			}
			return true;
		}

		// Token: 0x06001C8A RID: 7306 RVA: 0x00083E0C File Offset: 0x0008200C
		private bool TabToPreviousCell()
		{
			DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
			int num = ((dataGridViewColumn == null) ? (-1) : dataGridViewColumn.Index);
			int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
			if (num == -1 || firstRow == -1)
			{
				return false;
			}
			int num2 = -1;
			if (this.ptCurrentCell.X != -1)
			{
				dataGridViewColumn = this.Columns.GetPreviousColumn(this.Columns[this.ptCurrentCell.X], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				if (dataGridViewColumn != null)
				{
					num2 = dataGridViewColumn.Index;
				}
			}
			int num3 = -1;
			if (this.ptCurrentCell.Y != -1)
			{
				num3 = this.Rows.GetPreviousRow(this.ptCurrentCell.Y, DataGridViewElementStates.Visible);
			}
			dataGridViewColumn = this.Columns.GetLastColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.None);
			int index = dataGridViewColumn.Index;
			int lastRow = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
			int num4 = -1;
			int num5 = -1;
			this.noSelectionChangeCount++;
			try
			{
				if (this.ptCurrentCell.X == -1)
				{
					this.ClearSelection();
				}
				else
				{
					if (num2 == -1)
					{
						num4 = ((num3 == -1) ? lastRow : num3);
						num5 = index;
					}
					else
					{
						num4 = this.ptCurrentCell.Y;
						num5 = num2;
					}
					if (!this.ScrollIntoView(num5, num4, true))
					{
						return true;
					}
				}
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					if (this.ptCurrentCell.X == -1)
					{
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						this.SetSelectedCellCore(num, firstRow, true);
					}
					else
					{
						if (this.IsInnerCellOutOfBounds(num5, num4))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedCellCore(num5, num4, true);
					}
					break;
				case DataGridViewSelectionMode.FullRowSelect:
					if (this.ptCurrentCell.X == -1)
					{
						if (this.IsRowOutOfBounds(firstRow))
						{
							return true;
						}
						this.SetSelectedRowCore(firstRow, true);
					}
					else if (num4 != this.ptCurrentCell.Y || this.MultiSelect)
					{
						if (this.IsRowOutOfBounds(num4))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedRowCore(num4, true);
					}
					break;
				case DataGridViewSelectionMode.FullColumnSelect:
					if (this.ptCurrentCell.X == -1)
					{
						if (this.IsColumnOutOfBounds(num))
						{
							return true;
						}
						this.SetSelectedColumnCore(num, true);
					}
					else
					{
						if (this.IsColumnOutOfBounds(num5))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedColumnCore(num5, true);
					}
					break;
				}
			}
			finally
			{
				int num6 = this.NoSelectionChangeCount;
				this.NoSelectionChangeCount = num6 - 1;
			}
			if (this.ptCurrentCell.X == -1)
			{
				bool flag = this.ScrollIntoView(num, firstRow, false);
				if (this.IsInnerCellOutOfBounds(num, firstRow))
				{
					return true;
				}
				flag = this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
			}
			else
			{
				if (this.IsInnerCellOutOfBounds(num5, num4))
				{
					return true;
				}
				bool flag = this.SetCurrentCellAddressCore(num5, num4, true, false, false);
			}
			return true;
		}

		// Token: 0x06001C8B RID: 7307 RVA: 0x000840F8 File Offset: 0x000822F8
		private void UnwireEditingControlEvents()
		{
			this.editingPanel.Click -= this.EditingControls_Click;
			this.editingPanel.DoubleClick -= this.EditingControls_DoubleClick;
			this.editingPanel.MouseClick -= this.EditingControls_MouseClick;
			this.editingPanel.MouseDoubleClick -= this.EditingControls_MouseDoubleClick;
			this.editingPanel.MouseDown -= this.EditingControls_MouseDown;
			this.editingPanel.MouseEnter -= this.EditingControls_MouseEnter;
			this.editingPanel.MouseLeave -= this.EditingControls_MouseLeave;
			this.editingPanel.MouseMove -= this.EditingControls_MouseMove;
			this.editingPanel.MouseUp -= this.EditingControls_MouseUp;
			this.editingControl.Click -= this.EditingControls_Click;
			this.editingControl.DoubleClick -= this.EditingControls_DoubleClick;
			this.editingControl.MouseClick -= this.EditingControls_MouseClick;
			this.editingControl.MouseDoubleClick -= this.EditingControls_MouseDoubleClick;
			this.editingControl.MouseDown -= this.EditingControls_MouseDown;
			this.editingControl.MouseEnter -= this.EditingControls_MouseEnter;
			this.editingControl.MouseLeave -= this.EditingControls_MouseLeave;
			this.editingControl.MouseMove -= this.EditingControls_MouseMove;
			this.editingControl.MouseUp -= this.EditingControls_MouseUp;
		}

		// Token: 0x06001C8C RID: 7308 RVA: 0x000842A4 File Offset: 0x000824A4
		private void UnwireScrollBarsEvents()
		{
			if (this.horizScrollBar != null)
			{
				this.horizScrollBar.MouseEnter -= this.ScrollBar_MouseEnter;
				this.horizScrollBar.MouseLeave -= this.ScrollBar_MouseLeave;
			}
			if (this.vertScrollBar != null)
			{
				this.vertScrollBar.MouseEnter -= this.ScrollBar_MouseEnter;
				this.vertScrollBar.MouseLeave -= this.ScrollBar_MouseLeave;
			}
		}

		/// <summary>Forces the cell at the specified location to update its error text.</summary>
		/// <param name="columnIndex">The column index of the cell to update, or -1 to indicate a row header cell.</param>
		/// <param name="rowIndex">The row index of the cell to update, or -1 to indicate a column header cell.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///   <paramref name="columnIndex" /> is less than -1 or greater than the number of columns in the control minus 1.  
		/// -or-  
		/// <paramref name="rowIndex" /> is less than -1 or greater than the number of rows in the control minus 1.</exception>
		// Token: 0x06001C8D RID: 7309 RVA: 0x00084320 File Offset: 0x00082520
		public void UpdateCellErrorText(int columnIndex, int rowIndex)
		{
			if (columnIndex < -1 || columnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("columnIndex");
			}
			if (rowIndex < -1 || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			if (base.IsHandleCreated)
			{
				this.InvalidateCellPrivate(columnIndex, rowIndex);
			}
		}

		/// <summary>Forces the control to update its display of the cell at the specified location based on its new value, applying any automatic sizing modes currently in effect.</summary>
		/// <param name="columnIndex">The zero-based column index of the cell with the new value.</param>
		/// <param name="rowIndex">The zero-based row index of the cell with the new value.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///   <paramref name="columnIndex" /> is less than zero or greater than the number of columns in the control minus one.  
		/// -or-  
		/// <paramref name="rowIndex" /> is less than zero or greater than the number of rows in the control minus one.</exception>
		// Token: 0x06001C8E RID: 7310 RVA: 0x00084378 File Offset: 0x00082578
		public void UpdateCellValue(int columnIndex, int rowIndex)
		{
			if (columnIndex < 0 || columnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("columnIndex");
			}
			if (rowIndex < 0 || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			if (base.IsHandleCreated)
			{
				this.OnCellCommonChange(columnIndex, rowIndex);
			}
		}

		// Token: 0x06001C8F RID: 7311 RVA: 0x000843D0 File Offset: 0x000825D0
		private void UpdateColumnsDisplayedState(bool displayed)
		{
			int i = this.displayedBandsInfo.NumDisplayedFrozenCols;
			if (i > 0)
			{
				DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				while (i > 0)
				{
					if (dataGridViewColumn.Displayed != displayed)
					{
						dataGridViewColumn.DisplayedInternal = displayed;
					}
					dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					i--;
				}
			}
			int firstDisplayedScrollingCol = this.displayedBandsInfo.FirstDisplayedScrollingCol;
			if (firstDisplayedScrollingCol != -1)
			{
				int j = this.displayedBandsInfo.NumDisplayedScrollingCols;
				DataGridViewColumn dataGridViewColumn = this.Columns[firstDisplayedScrollingCol];
				while (j > 0)
				{
					if (dataGridViewColumn.Displayed != displayed)
					{
						dataGridViewColumn.DisplayedInternal = displayed;
					}
					dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					j--;
				}
			}
		}

		/// <summary>Forces the row at the given row index to update its error text.</summary>
		/// <param name="rowIndex">The zero-based index of the row to update.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///   <paramref name="rowIndex" /> is not in the valid range of 0 to the number of rows in the control minus 1.</exception>
		// Token: 0x06001C90 RID: 7312 RVA: 0x00084478 File Offset: 0x00082678
		public void UpdateRowErrorText(int rowIndex)
		{
			if (rowIndex < 0 || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			if (base.IsHandleCreated && this.layout.RowHeadersVisible)
			{
				this.InvalidateCellPrivate(-1, rowIndex);
			}
		}

		/// <summary>Forces the rows in the given range to update their error text.</summary>
		/// <param name="rowIndexStart">The zero-based index of the first row in the set of rows to update.</param>
		/// <param name="rowIndexEnd">The zero-based index of the last row in the set of rows to update.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///   <paramref name="rowIndexStart" /> is not in the valid range of 0 to the number of rows in the control minus 1.  
		/// -or-  
		/// <paramref name="rowIndexEnd" /> is not in the valid range of 0 to the number of rows in the control minus 1.  
		/// -or-  
		/// <paramref name="rowIndexEnd" /> is less than <paramref name="rowIndexStart" />.</exception>
		// Token: 0x06001C91 RID: 7313 RVA: 0x000844B4 File Offset: 0x000826B4
		public void UpdateRowErrorText(int rowIndexStart, int rowIndexEnd)
		{
			if (rowIndexStart < 0 || rowIndexStart >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndexStart");
			}
			if (rowIndexEnd < 0 || rowIndexEnd >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndexEnd");
			}
			if (rowIndexEnd < rowIndexStart)
			{
				throw new ArgumentOutOfRangeException("rowIndexEnd");
			}
			if (base.IsHandleCreated && this.layout.RowHeadersVisible)
			{
				Rectangle cellAdjustedDisplayRectangle = this.GetCellAdjustedDisplayRectangle(-1, rowIndexStart, true);
				Rectangle cellAdjustedDisplayRectangle2 = this.GetCellAdjustedDisplayRectangle(-1, rowIndexEnd, true);
				if (cellAdjustedDisplayRectangle.IsEmpty || cellAdjustedDisplayRectangle2.IsEmpty)
				{
					if (!cellAdjustedDisplayRectangle.IsEmpty || !cellAdjustedDisplayRectangle2.IsEmpty)
					{
						base.Invalidate(this.layout.RowHeaders);
						return;
					}
				}
				else
				{
					base.Invalidate(Rectangle.Union(cellAdjustedDisplayRectangle, cellAdjustedDisplayRectangle2));
				}
			}
		}

		/// <summary>Forces the specified row or rows to update their height information.</summary>
		/// <param name="rowIndex">The zero-based index of the first row to update.</param>
		/// <param name="updateToEnd">
		///   <see langword="true" /> to update the specified row and all subsequent rows.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		///   <paramref name="rowIndex" /> is less than 0 and <paramref name="updateToEnd" /> is <see langword="true" />.  
		/// -or-  
		/// <paramref name="rowIndex" /> is less than -1 and <paramref name="updateToEnd" /> is <see langword="false" />.  
		/// -or-  
		/// <paramref name="rowIndex" /> is greater than the highest row index in the <see cref="P:System.Windows.Forms.DataGridView.Rows" /> collection.</exception>
		// Token: 0x06001C92 RID: 7314 RVA: 0x00084576 File Offset: 0x00082776
		public void UpdateRowHeightInfo(int rowIndex, bool updateToEnd)
		{
			this.UpdateRowHeightInfoPrivate(rowIndex, updateToEnd, true);
		}

		// Token: 0x06001C93 RID: 7315 RVA: 0x00084584 File Offset: 0x00082784
		private void UpdateRowHeightInfoPrivate(int rowIndex, bool updateToEnd, bool invalidInAdjustFillingColumns)
		{
			if ((updateToEnd && rowIndex < 0) || (!updateToEnd && rowIndex < -1) || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			this.Rows.InvalidateCachedRowsHeights();
			bool flag = rowIndex >= 0 && (this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Visible) > DataGridViewElementStates.None;
			if (base.IsHandleCreated && (rowIndex == -1 || flag))
			{
				if (updateToEnd)
				{
					int firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
					if (this.AutoSize)
					{
						LayoutTransaction.DoLayout(this.ParentInternal, this, PropertyNames.Rows);
					}
					else
					{
						this.PerformLayoutPrivate(false, false, invalidInAdjustFillingColumns, false);
					}
					Rectangle rectangle = this.layout.Data;
					if (this.layout.RowHeadersVisible)
					{
						rectangle = Rectangle.Union(rectangle, this.layout.RowHeaders);
					}
					else if (this.SingleVerticalBorderAdded)
					{
						int num;
						if (!this.RightToLeftInternal)
						{
							num = rectangle.X;
							rectangle.X = num - 1;
						}
						num = rectangle.Width;
						rectangle.Width = num + 1;
					}
					if (!flag)
					{
						rowIndex = this.Rows.GetNextRow(rowIndex, DataGridViewElementStates.Visible);
					}
					if (rowIndex != -1)
					{
						int rowYFromIndex = this.GetRowYFromIndex((firstDisplayedScrollingRow == this.displayedBandsInfo.FirstDisplayedScrollingRow) ? rowIndex : this.displayedBandsInfo.FirstDisplayedScrollingRow);
						rectangle.Height -= rectangle.Y - rowYFromIndex;
						rectangle.Y = rowYFromIndex;
						base.Invalidate(rectangle);
					}
					if (this.editingControl != null)
					{
						this.PositionEditingControl(true, true, false);
					}
				}
				else
				{
					if (rowIndex == -1)
					{
						if (this.AutoSize)
						{
							LayoutTransaction.DoLayout(this.ParentInternal, this, PropertyNames.Rows);
						}
						else
						{
							this.PerformLayoutPrivate(false, false, invalidInAdjustFillingColumns, false);
						}
						base.Invalidate();
					}
					else
					{
						int firstDisplayedScrollingRow2 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
						if (this.inBulkLayoutCount == 0)
						{
							if (this.AutoSize)
							{
								LayoutTransaction.DoLayout(this.ParentInternal, this, PropertyNames.Rows);
							}
							else
							{
								this.PerformLayoutPrivate(false, false, invalidInAdjustFillingColumns, false);
							}
						}
						if (this.inBulkPaintCount == 0)
						{
							Rectangle rectangle2 = this.layout.Data;
							if (this.layout.RowHeadersVisible)
							{
								rectangle2 = Rectangle.Union(rectangle2, this.layout.RowHeaders);
							}
							else if (this.SingleVerticalBorderAdded)
							{
								int num;
								if (!this.RightToLeftInternal)
								{
									num = rectangle2.X;
									rectangle2.X = num - 1;
								}
								num = rectangle2.Width;
								rectangle2.Width = num + 1;
							}
							int rowYFromIndex2 = this.GetRowYFromIndex((firstDisplayedScrollingRow2 == this.displayedBandsInfo.FirstDisplayedScrollingRow) ? rowIndex : this.displayedBandsInfo.FirstDisplayedScrollingRow);
							rectangle2.Height -= rectangle2.Y - rowYFromIndex2;
							rectangle2.Y = rowYFromIndex2;
							base.Invalidate(rectangle2);
						}
					}
					if (this.editingControl != null)
					{
						this.PositionEditingControl(rowIndex == -1 || this.ptCurrentCell.Y != rowIndex, true, false);
					}
				}
				this.UpdateMouseEnteredCell(null, null);
			}
		}

		// Token: 0x06001C94 RID: 7316 RVA: 0x00084860 File Offset: 0x00082A60
		private void UpdateRowsDisplayedState(bool displayed)
		{
			int i = this.displayedBandsInfo.NumDisplayedFrozenRows;
			int num;
			if (i > 0)
			{
				num = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				while (i > 0)
				{
					if ((this.Rows.GetRowState(num) & DataGridViewElementStates.Displayed) == DataGridViewElementStates.None == displayed)
					{
						this.Rows.SetRowState(num, DataGridViewElementStates.Displayed, displayed);
					}
					num = this.Rows.GetNextRow(num, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					i--;
				}
			}
			num = this.displayedBandsInfo.FirstDisplayedScrollingRow;
			if (num > -1)
			{
				for (int j = this.displayedBandsInfo.NumDisplayedScrollingRows; j > 0; j--)
				{
					if ((this.Rows.GetRowState(num) & DataGridViewElementStates.Displayed) == DataGridViewElementStates.None == displayed)
					{
						this.Rows.SetRowState(num, DataGridViewElementStates.Displayed, displayed);
					}
					num = this.Rows.GetNextRow(num, DataGridViewElementStates.Visible);
				}
			}
		}

		// Token: 0x06001C95 RID: 7317 RVA: 0x00084920 File Offset: 0x00082B20
		private void UpdateMouseEnteredCell(DataGridView.HitTestInfo hti, MouseEventArgs e)
		{
			Point point = base.PointToClient(Control.MousePosition);
			DataGridView.HitTestInfo hitTestInfo;
			if (hti != null)
			{
				hitTestInfo = hti;
			}
			else
			{
				hitTestInfo = this.HitTest(point.X, point.Y);
			}
			if (hitTestInfo.Type != DataGridViewHitTestType.None && hitTestInfo.Type != DataGridViewHitTestType.HorizontalScrollBar && hitTestInfo.Type != DataGridViewHitTestType.VerticalScrollBar)
			{
				if (this.ptMouseEnteredCell.X != hitTestInfo.col || this.ptMouseEnteredCell.Y != hitTestInfo.row)
				{
					DataGridViewCellEventArgs dataGridViewCellEventArgs;
					if (this.ptMouseEnteredCell.X >= -1 && this.ptMouseEnteredCell.X < this.Columns.Count && this.ptMouseEnteredCell.Y >= -1 && this.ptMouseEnteredCell.Y < this.Rows.Count)
					{
						dataGridViewCellEventArgs = new DataGridViewCellEventArgs(this.ptMouseEnteredCell.X, this.ptMouseEnteredCell.Y);
						this.OnCellMouseLeave(dataGridViewCellEventArgs);
					}
					dataGridViewCellEventArgs = new DataGridViewCellEventArgs(hitTestInfo.col, hitTestInfo.row);
					this.OnCellMouseEnter(dataGridViewCellEventArgs);
				}
				if (e != null)
				{
					int num = e.X - hitTestInfo.ColumnX;
					if (this.RightToLeftInternal)
					{
						num += ((hitTestInfo.col == -1) ? this.RowHeadersWidth : this.Columns[hitTestInfo.col].Thickness);
					}
					DataGridViewCellMouseEventArgs dataGridViewCellMouseEventArgs = new DataGridViewCellMouseEventArgs(hitTestInfo.col, hitTestInfo.row, num, e.Y - hitTestInfo.RowY, e);
					this.OnCellMouseMove(dataGridViewCellMouseEventArgs);
					return;
				}
			}
			else if (this.ptMouseEnteredCell.X != -2)
			{
				if (this.ptMouseEnteredCell.X >= -1 && this.ptMouseEnteredCell.X < this.Columns.Count && this.ptMouseEnteredCell.Y >= -1 && this.ptMouseEnteredCell.Y < this.Rows.Count)
				{
					DataGridViewCellEventArgs dataGridViewCellEventArgs2 = new DataGridViewCellEventArgs(this.ptMouseEnteredCell.X, this.ptMouseEnteredCell.Y);
					this.OnCellMouseLeave(dataGridViewCellEventArgs2);
					return;
				}
				this.ptMouseEnteredCell.X = (this.ptMouseEnteredCell.Y = -2);
			}
		}

		// Token: 0x06001C96 RID: 7318 RVA: 0x00084B3C File Offset: 0x00082D3C
		private void UpdateSelectedCellsBlock(int anchorColumnIndex, ref int oldEdgeColumnIndex, int newEdgeColumnIndex, int anchorRowIndex, ref int oldEdgeRowIndex, int newEdgeRowIndex)
		{
			if ((this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex) && this.Columns.DisplayInOrder(newEdgeColumnIndex, anchorColumnIndex)) || (this.Columns.DisplayInOrder(oldEdgeColumnIndex, anchorColumnIndex) && this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex)) || (anchorRowIndex < oldEdgeRowIndex && newEdgeRowIndex < anchorRowIndex) || (oldEdgeRowIndex < anchorRowIndex && anchorRowIndex < newEdgeRowIndex))
			{
				this.SelectCellUnorderedRange(anchorColumnIndex, anchorRowIndex, oldEdgeColumnIndex, oldEdgeRowIndex, false);
				this.SelectCellUnorderedRange(anchorColumnIndex, anchorRowIndex, newEdgeColumnIndex, newEdgeRowIndex, true);
				oldEdgeColumnIndex = newEdgeColumnIndex;
				oldEdgeRowIndex = newEdgeRowIndex;
				return;
			}
			if (this.Columns.DisplayInOrder(oldEdgeColumnIndex, newEdgeColumnIndex) && (this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex) || anchorColumnIndex == oldEdgeColumnIndex) && oldEdgeRowIndex == newEdgeRowIndex)
			{
				DataGridViewColumn nextColumn = this.Columns.GetNextColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				if (anchorRowIndex <= newEdgeRowIndex)
				{
					this.SelectCellRange(nextColumn.Index, anchorRowIndex, newEdgeColumnIndex, newEdgeRowIndex, true);
				}
				else
				{
					this.SelectCellRange(nextColumn.Index, newEdgeRowIndex, newEdgeColumnIndex, anchorRowIndex, true);
				}
			}
			else if (this.Columns.DisplayInOrder(newEdgeColumnIndex, oldEdgeColumnIndex) && (this.Columns.DisplayInOrder(oldEdgeColumnIndex, anchorColumnIndex) || oldEdgeColumnIndex == anchorColumnIndex) && oldEdgeRowIndex == newEdgeRowIndex)
			{
				DataGridViewColumn previousColumn = this.Columns.GetPreviousColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				if (anchorRowIndex <= newEdgeRowIndex)
				{
					this.SelectCellRange(newEdgeColumnIndex, anchorRowIndex, previousColumn.Index, newEdgeRowIndex, true);
				}
				else
				{
					this.SelectCellRange(newEdgeColumnIndex, newEdgeRowIndex, previousColumn.Index, anchorRowIndex, true);
				}
			}
			else if (newEdgeRowIndex > oldEdgeRowIndex && anchorRowIndex <= oldEdgeRowIndex && newEdgeColumnIndex == oldEdgeColumnIndex)
			{
				if (this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex) || anchorColumnIndex == newEdgeColumnIndex)
				{
					this.SelectCellRange(anchorColumnIndex, this.Rows.GetNextRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), newEdgeColumnIndex, newEdgeRowIndex, true);
				}
				else
				{
					this.SelectCellRange(newEdgeColumnIndex, this.Rows.GetNextRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), anchorColumnIndex, newEdgeRowIndex, true);
				}
			}
			else if (newEdgeRowIndex < oldEdgeRowIndex && oldEdgeRowIndex <= anchorRowIndex && newEdgeColumnIndex == oldEdgeColumnIndex)
			{
				if (this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex) || anchorColumnIndex == newEdgeColumnIndex)
				{
					this.SelectCellRange(anchorColumnIndex, newEdgeRowIndex, newEdgeColumnIndex, this.Rows.GetPreviousRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), true);
				}
				else
				{
					this.SelectCellRange(newEdgeColumnIndex, newEdgeRowIndex, anchorColumnIndex, this.Rows.GetPreviousRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), true);
				}
			}
			else if (this.Columns.DisplayInOrder(oldEdgeColumnIndex, newEdgeColumnIndex) && !this.Columns.DisplayInOrder(oldEdgeColumnIndex, anchorColumnIndex) && newEdgeRowIndex > oldEdgeRowIndex && anchorRowIndex <= oldEdgeRowIndex)
			{
				DataGridViewColumn nextColumn2 = this.Columns.GetNextColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				this.SelectCellRange(nextColumn2.Index, anchorRowIndex, newEdgeColumnIndex, oldEdgeRowIndex, true);
				this.SelectCellRange(anchorColumnIndex, this.Rows.GetNextRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), newEdgeColumnIndex, newEdgeRowIndex, true);
			}
			else if (this.Columns.DisplayInOrder(oldEdgeColumnIndex, newEdgeColumnIndex) && newEdgeRowIndex < oldEdgeRowIndex && oldEdgeRowIndex <= anchorRowIndex)
			{
				if (!this.Columns.DisplayInOrder(oldEdgeColumnIndex, anchorColumnIndex))
				{
					DataGridViewColumn nextColumn3 = this.Columns.GetNextColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectCellRange(nextColumn3.Index, oldEdgeRowIndex, newEdgeColumnIndex, anchorRowIndex, true);
					this.SelectCellRange(anchorColumnIndex, newEdgeRowIndex, newEdgeColumnIndex, this.Rows.GetPreviousRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), true);
				}
				else if (!this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex))
				{
					if (anchorRowIndex == oldEdgeRowIndex)
					{
						this.SelectCellRange(oldEdgeColumnIndex, anchorRowIndex, anchorColumnIndex, oldEdgeRowIndex, false);
						this.SelectCellRange(newEdgeColumnIndex, newEdgeRowIndex, anchorColumnIndex, anchorRowIndex, true);
					}
					else
					{
						DataGridViewColumn previousColumn2 = this.Columns.GetPreviousColumn(this.Columns[newEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
						this.SelectCellRange(oldEdgeColumnIndex, oldEdgeRowIndex, previousColumn2.Index, anchorRowIndex, false);
						this.SelectCellRange(newEdgeColumnIndex, newEdgeRowIndex, anchorColumnIndex, this.Rows.GetPreviousRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), true);
					}
				}
			}
			else if (this.Columns.DisplayInOrder(newEdgeColumnIndex, oldEdgeColumnIndex) && newEdgeRowIndex < oldEdgeRowIndex && anchorRowIndex >= oldEdgeRowIndex)
			{
				if (!this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex))
				{
					DataGridViewColumn previousColumn3 = this.Columns.GetPreviousColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectCellRange(newEdgeColumnIndex, oldEdgeRowIndex, previousColumn3.Index, anchorRowIndex, true);
					this.SelectCellRange(newEdgeColumnIndex, newEdgeRowIndex, anchorColumnIndex, this.Rows.GetPreviousRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), true);
				}
				else if (this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex))
				{
					DataGridViewColumn nextColumn4 = this.Columns.GetNextColumn(this.Columns[newEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectCellRange(nextColumn4.Index, oldEdgeRowIndex, oldEdgeColumnIndex, anchorRowIndex, false);
					this.SelectCellRange(anchorColumnIndex, newEdgeRowIndex, newEdgeColumnIndex, this.Rows.GetPreviousRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), true);
				}
				else
				{
					this.SelectCellRange(anchorColumnIndex, oldEdgeRowIndex, oldEdgeColumnIndex, anchorRowIndex, false);
					this.SelectCellRange(newEdgeColumnIndex, newEdgeRowIndex, anchorColumnIndex, anchorRowIndex, true);
				}
			}
			else if (this.Columns.DisplayInOrder(newEdgeColumnIndex, oldEdgeColumnIndex) && !this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex) && newEdgeRowIndex > oldEdgeRowIndex && anchorRowIndex <= oldEdgeRowIndex)
			{
				DataGridViewColumn previousColumn4 = this.Columns.GetPreviousColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				this.SelectCellRange(newEdgeColumnIndex, anchorRowIndex, previousColumn4.Index, oldEdgeRowIndex, true);
				this.SelectCellRange(newEdgeColumnIndex, this.Rows.GetNextRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), anchorColumnIndex, newEdgeRowIndex, true);
			}
			else if (this.Columns.DisplayInOrder(newEdgeColumnIndex, oldEdgeColumnIndex))
			{
				DataGridViewColumn dataGridViewColumn = this.Columns.GetNextColumn(this.Columns[newEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				if (newEdgeRowIndex == oldEdgeRowIndex)
				{
					if (this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex) || anchorColumnIndex == newEdgeColumnIndex)
					{
						if (oldEdgeRowIndex > anchorRowIndex)
						{
							this.SelectCellRange(dataGridViewColumn.Index, anchorRowIndex, oldEdgeColumnIndex, oldEdgeRowIndex, false);
						}
						else
						{
							this.SelectCellRange(dataGridViewColumn.Index, oldEdgeRowIndex, oldEdgeColumnIndex, anchorRowIndex, false);
						}
					}
				}
				else if (newEdgeRowIndex < oldEdgeRowIndex)
				{
					if (oldEdgeRowIndex > anchorRowIndex && this.Columns.DisplayInOrder(newEdgeColumnIndex, oldEdgeColumnIndex) && anchorRowIndex <= newEdgeRowIndex)
					{
						if (this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex))
						{
							if (!this.Columns.DisplayInOrder(newEdgeColumnIndex, anchorColumnIndex))
							{
								this.SelectCellRange(dataGridViewColumn.Index, anchorRowIndex, oldEdgeColumnIndex, oldEdgeRowIndex, false);
								this.SelectCellRange(anchorColumnIndex, this.Rows.GetNextRow(newEdgeRowIndex, DataGridViewElementStates.Visible), newEdgeColumnIndex, oldEdgeRowIndex, false);
							}
						}
						else
						{
							dataGridViewColumn = this.Columns.GetPreviousColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
							this.SelectCellRange(oldEdgeColumnIndex, this.Rows.GetNextRow(newEdgeRowIndex, DataGridViewElementStates.Visible), anchorColumnIndex, oldEdgeRowIndex, false);
							this.SelectCellRange(newEdgeColumnIndex, anchorRowIndex, dataGridViewColumn.Index, newEdgeRowIndex, true);
						}
					}
				}
				else if (newEdgeRowIndex > oldEdgeRowIndex)
				{
					if (oldEdgeRowIndex < anchorRowIndex)
					{
						if ((this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex) || anchorColumnIndex == newEdgeColumnIndex) && newEdgeRowIndex <= anchorRowIndex)
						{
							this.SelectCellRange(dataGridViewColumn.Index, oldEdgeRowIndex, oldEdgeColumnIndex, anchorRowIndex, false);
							this.SelectCellRange(anchorColumnIndex, oldEdgeRowIndex, newEdgeColumnIndex, this.Rows.GetPreviousRow(newEdgeRowIndex, DataGridViewElementStates.Visible), false);
						}
						else if (!this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex) && newEdgeRowIndex <= anchorRowIndex)
						{
							dataGridViewColumn = this.Columns.GetPreviousColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
							this.SelectCellRange(oldEdgeColumnIndex, oldEdgeRowIndex, anchorColumnIndex, this.Rows.GetPreviousRow(newEdgeRowIndex, DataGridViewElementStates.Visible), false);
							this.SelectCellRange(newEdgeColumnIndex, newEdgeRowIndex, dataGridViewColumn.Index, anchorRowIndex, true);
						}
					}
					else if (this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex) || anchorColumnIndex == newEdgeColumnIndex)
					{
						this.SelectCellRange(dataGridViewColumn.Index, anchorRowIndex, oldEdgeColumnIndex, oldEdgeRowIndex, false);
						this.SelectCellRange(anchorColumnIndex, this.Rows.GetNextRow(anchorRowIndex, DataGridViewElementStates.Visible), newEdgeColumnIndex, newEdgeRowIndex, true);
					}
				}
			}
			else if (this.Columns.DisplayInOrder(oldEdgeColumnIndex, newEdgeColumnIndex))
			{
				DataGridViewColumn dataGridViewColumn2 = this.Columns.GetPreviousColumn(this.Columns[newEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				if (newEdgeRowIndex == oldEdgeRowIndex)
				{
					if (this.Columns.DisplayInOrder(newEdgeColumnIndex, anchorColumnIndex) || newEdgeColumnIndex == anchorColumnIndex)
					{
						if (oldEdgeRowIndex > anchorRowIndex)
						{
							this.SelectCellRange(oldEdgeColumnIndex, anchorRowIndex, dataGridViewColumn2.Index, oldEdgeRowIndex, false);
						}
						else
						{
							this.SelectCellRange(oldEdgeColumnIndex, oldEdgeRowIndex, dataGridViewColumn2.Index, anchorRowIndex, false);
						}
					}
				}
				else if (newEdgeRowIndex < oldEdgeRowIndex)
				{
					if (oldEdgeRowIndex > anchorRowIndex)
					{
						if ((this.Columns.DisplayInOrder(newEdgeColumnIndex, anchorColumnIndex) || newEdgeColumnIndex == anchorColumnIndex) && newEdgeRowIndex >= anchorRowIndex)
						{
							this.SelectCellRange(oldEdgeColumnIndex, anchorRowIndex, dataGridViewColumn2.Index, oldEdgeRowIndex, false);
							this.SelectCellRange(newEdgeColumnIndex, this.Rows.GetNextRow(newEdgeRowIndex, DataGridViewElementStates.Visible), anchorColumnIndex, oldEdgeRowIndex, false);
						}
						else if (!this.Columns.DisplayInOrder(oldEdgeColumnIndex, anchorColumnIndex) && newEdgeRowIndex >= anchorRowIndex)
						{
							dataGridViewColumn2 = this.Columns.GetNextColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
							this.SelectCellRange(anchorColumnIndex, this.Rows.GetNextRow(newEdgeRowIndex, DataGridViewElementStates.Visible), oldEdgeColumnIndex, oldEdgeRowIndex, false);
							this.SelectCellRange(dataGridViewColumn2.Index, anchorRowIndex, newEdgeColumnIndex, newEdgeRowIndex, true);
						}
					}
				}
				else if (newEdgeRowIndex > oldEdgeRowIndex)
				{
					if (oldEdgeRowIndex < anchorRowIndex)
					{
						if ((this.Columns.DisplayInOrder(newEdgeColumnIndex, anchorColumnIndex) || anchorColumnIndex == newEdgeColumnIndex) && newEdgeRowIndex <= anchorRowIndex)
						{
							this.SelectCellRange(oldEdgeColumnIndex, oldEdgeRowIndex, dataGridViewColumn2.Index, anchorRowIndex, false);
							this.SelectCellRange(newEdgeColumnIndex, oldEdgeRowIndex, anchorColumnIndex, this.Rows.GetPreviousRow(newEdgeRowIndex, DataGridViewElementStates.Visible), false);
						}
						else if (!this.Columns.DisplayInOrder(oldEdgeColumnIndex, anchorColumnIndex) && newEdgeRowIndex <= anchorRowIndex)
						{
							dataGridViewColumn2 = this.Columns.GetNextColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
							this.SelectCellRange(anchorColumnIndex, oldEdgeRowIndex, oldEdgeColumnIndex, this.Rows.GetPreviousRow(newEdgeRowIndex, DataGridViewElementStates.Visible), false);
							this.SelectCellRange(dataGridViewColumn2.Index, newEdgeRowIndex, newEdgeColumnIndex, anchorRowIndex, true);
						}
					}
					else if (this.Columns.DisplayInOrder(newEdgeColumnIndex, anchorColumnIndex) || anchorColumnIndex == newEdgeColumnIndex)
					{
						this.SelectCellRange(oldEdgeColumnIndex, anchorRowIndex, dataGridViewColumn2.Index, oldEdgeRowIndex, false);
						this.SelectCellRange(newEdgeColumnIndex, this.Rows.GetNextRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), anchorColumnIndex, newEdgeRowIndex, true);
					}
				}
			}
			else if (newEdgeRowIndex > oldEdgeRowIndex)
			{
				if (newEdgeColumnIndex == oldEdgeColumnIndex && newEdgeRowIndex <= anchorRowIndex)
				{
					if (this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex))
					{
						this.SelectCellRange(anchorColumnIndex, oldEdgeRowIndex, oldEdgeColumnIndex, this.Rows.GetPreviousRow(newEdgeRowIndex, DataGridViewElementStates.Visible), false);
					}
					else
					{
						this.SelectCellRange(oldEdgeColumnIndex, oldEdgeRowIndex, anchorColumnIndex, this.Rows.GetPreviousRow(newEdgeRowIndex, DataGridViewElementStates.Visible), false);
					}
				}
			}
			else if (newEdgeRowIndex < oldEdgeRowIndex && newEdgeColumnIndex == oldEdgeColumnIndex && newEdgeRowIndex >= anchorRowIndex)
			{
				if (this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex))
				{
					this.SelectCellRange(anchorColumnIndex, this.Rows.GetNextRow(newEdgeRowIndex, DataGridViewElementStates.Visible), oldEdgeColumnIndex, oldEdgeRowIndex, false);
				}
				else
				{
					this.SelectCellRange(oldEdgeColumnIndex, this.Rows.GetNextRow(newEdgeRowIndex, DataGridViewElementStates.Visible), anchorColumnIndex, oldEdgeRowIndex, false);
				}
			}
			oldEdgeColumnIndex = newEdgeColumnIndex;
			oldEdgeRowIndex = newEdgeRowIndex;
		}

		// Token: 0x06001C97 RID: 7319 RVA: 0x00085650 File Offset: 0x00083850
		private void VertScrollTimer_Tick(object sender, EventArgs e)
		{
			base.BeginInvoke(new MethodInvoker(this.VertScrollTimerHandler));
		}

		// Token: 0x06001C98 RID: 7320 RVA: 0x00085668 File Offset: 0x00083868
		private void VertScrollTimerHandler()
		{
			Point point = base.PointToClient(Control.MousePosition);
			DataGridView.HitTestInfo hitTestInfo = this.HitTest(point.X, point.Y);
			int x = point.X;
			int y = point.Y;
			int num;
			int num2;
			if (this.GetOutOfBoundCorrectedHitTestInfo(ref hitTestInfo, ref x, ref y, out num, out num2))
			{
				if (num2 != 0)
				{
					int num3 = Math.Abs(num2);
					int num4 = num2 / num3;
					this.ScrollRowsByCount(num4, (num4 < 0) ? ScrollEventType.SmallDecrement : ScrollEventType.SmallIncrement);
					this.vertScrollTimer.Interval = DataGridView.GetRowScrollRate(num3);
					if (this.dataGridViewOper[8])
					{
						hitTestInfo = this.HitTest(x, point.Y - num2 - num4);
						if (hitTestInfo.row >= 0)
						{
							this.OnRowSelectMouseMove(hitTestInfo);
							return;
						}
					}
					else if (this.dataGridViewOper[16])
					{
						if (num != 0)
						{
							hitTestInfo = this.HitTest(point.X - num - num / Math.Abs(num), point.Y - num2 - num4);
						}
						else
						{
							hitTestInfo = this.HitTest(x, point.Y - num2 - num4);
						}
						if (hitTestInfo.col >= 0 && hitTestInfo.row >= 0)
						{
							this.OnCellSelectMouseMove(hitTestInfo);
							return;
						}
					}
				}
				else
				{
					if (this.dataGridViewOper[8] && hitTestInfo.row >= 0)
					{
						this.OnRowSelectMouseMove(hitTestInfo);
					}
					else if (this.dataGridViewOper[16] && hitTestInfo.col >= 0 && hitTestInfo.row >= 0)
					{
						this.OnCellSelectMouseMove(hitTestInfo);
					}
					this.VertScrollTimer.Enabled = false;
				}
			}
		}

		// Token: 0x06001C99 RID: 7321 RVA: 0x000857EC File Offset: 0x000839EC
		private void WireEditingControlEvents()
		{
			this.editingPanel.Click += this.EditingControls_Click;
			this.editingPanel.DoubleClick += this.EditingControls_DoubleClick;
			this.editingPanel.MouseClick += this.EditingControls_MouseClick;
			this.editingPanel.MouseDoubleClick += this.EditingControls_MouseDoubleClick;
			this.editingPanel.MouseDown += this.EditingControls_MouseDown;
			this.editingPanel.MouseEnter += this.EditingControls_MouseEnter;
			this.editingPanel.MouseLeave += this.EditingControls_MouseLeave;
			this.editingPanel.MouseMove += this.EditingControls_MouseMove;
			this.editingPanel.MouseUp += this.EditingControls_MouseUp;
			this.editingControl.Click += this.EditingControls_Click;
			this.editingControl.DoubleClick += this.EditingControls_DoubleClick;
			this.editingControl.MouseClick += this.EditingControls_MouseClick;
			this.editingControl.MouseDoubleClick += this.EditingControls_MouseDoubleClick;
			this.editingControl.MouseDown += this.EditingControls_MouseDown;
			this.editingControl.MouseEnter += this.EditingControls_MouseEnter;
			this.editingControl.MouseLeave += this.EditingControls_MouseLeave;
			this.editingControl.MouseMove += this.EditingControls_MouseMove;
			this.editingControl.MouseUp += this.EditingControls_MouseUp;
		}

		// Token: 0x06001C9A RID: 7322 RVA: 0x00085998 File Offset: 0x00083B98
		private void WireScrollBarsEvents()
		{
			if (this.horizScrollBar != null)
			{
				this.horizScrollBar.MouseEnter += this.ScrollBar_MouseEnter;
				this.horizScrollBar.MouseLeave += this.ScrollBar_MouseLeave;
			}
			if (this.vertScrollBar != null)
			{
				this.vertScrollBar.MouseEnter += this.ScrollBar_MouseEnter;
				this.vertScrollBar.MouseLeave += this.ScrollBar_MouseLeave;
			}
		}

		// Token: 0x06001C9B RID: 7323 RVA: 0x00085A14 File Offset: 0x00083C14
		internal override void WmContextMenu(ref Message m)
		{
			int num = (int)((short)(long)m.LParam);
			int num2 = (int)(long)m.LParam >> 16;
			bool flag = false;
			Point point;
			ContextMenuStrip contextMenuStrip;
			if ((int)(long)m.LParam == -1)
			{
				flag = true;
				point = new Point(base.Width / 2, base.Height / 2);
				contextMenuStrip = this.ContextMenuStrip;
			}
			else
			{
				point = base.PointToClientInternal(new Point(num, num2));
				DataGridView.HitTestInfo hitTestInfo = this.HitTest(point.X, point.Y);
				DataGridViewCell dataGridViewCell = null;
				switch (hitTestInfo.Type)
				{
				case DataGridViewHitTestType.Cell:
					dataGridViewCell = this.Rows.SharedRow(hitTestInfo.row).Cells[hitTestInfo.col];
					break;
				case DataGridViewHitTestType.ColumnHeader:
					dataGridViewCell = this.Columns[hitTestInfo.col].HeaderCell;
					break;
				case DataGridViewHitTestType.RowHeader:
					dataGridViewCell = this.Rows.SharedRow(hitTestInfo.row).HeaderCell;
					break;
				case DataGridViewHitTestType.TopLeftHeader:
					dataGridViewCell = this.TopLeftHeaderCell;
					break;
				}
				if (dataGridViewCell != null)
				{
					contextMenuStrip = dataGridViewCell.GetInheritedContextMenuStrip(hitTestInfo.row);
				}
				else
				{
					contextMenuStrip = this.ContextMenuStrip;
				}
			}
			if (contextMenuStrip != null && base.ClientRectangle.Contains(point))
			{
				contextMenuStrip.ShowInternal(this, point, flag);
				return;
			}
			this.DefWndProc(ref m);
		}

		// Token: 0x06001C9C RID: 7324 RVA: 0x00085B6C File Offset: 0x00083D6C
		private void WmGetDlgCode(ref Message m)
		{
			m.Result = (IntPtr)((long)m.Result | 1L | 128L);
			Keys modifierKeys = Control.ModifierKeys;
			if (this.GetTabKeyEffective((modifierKeys & Keys.Shift) == Keys.Shift, (modifierKeys & Keys.Control) == Keys.Control))
			{
				m.Result = (IntPtr)((long)m.Result | 2L);
			}
		}

		// Token: 0x06001C9D RID: 7325 RVA: 0x00085BDC File Offset: 0x00083DDC
		private unsafe bool WmNotify(ref Message m)
		{
			if (m.LParam == IntPtr.Zero)
			{
				return false;
			}
			NativeMethods.NMHDR* ptr = (NativeMethods.NMHDR*)(void*)m.LParam;
			if (ptr->code == NativeMethods.TTN_GETDISPINFO && !base.DesignMode)
			{
				string toolTipPrivate = this.ToolTipPrivate;
				if (!string.IsNullOrEmpty(toolTipPrivate))
				{
					UnsafeNativeMethods.SendMessage(new HandleRef(this, ptr->hwndFrom), 1048, 0, SystemInformation.MaxWindowTrackSize.Width);
					NativeMethods.TOOLTIPTEXT tooltiptext = (NativeMethods.TOOLTIPTEXT)m.GetLParam(typeof(NativeMethods.TOOLTIPTEXT));
					tooltiptext.lpszText = toolTipPrivate;
					if (this.RightToLeft == RightToLeft.Yes)
					{
						tooltiptext.uFlags |= 4;
					}
					Marshal.StructureToPtr(tooltiptext, m.LParam, false);
					return true;
				}
			}
			return false;
		}

		/// <summary>Processes window messages.</summary>
		/// <param name="m">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the window message to process.</param>
		// Token: 0x06001C9E RID: 7326 RVA: 0x00085C98 File Offset: 0x00083E98
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected override void WndProc(ref Message m)
		{
			int msg = m.Msg;
			if (msg <= 269)
			{
				if (msg != 78)
				{
					if (msg == 135)
					{
						this.WmGetDlgCode(ref m);
						return;
					}
					if (msg != 269)
					{
						goto IL_A5;
					}
				}
				else
				{
					if (this.WmNotify(ref m))
					{
						return;
					}
					goto IL_A5;
				}
			}
			else if (msg != 271)
			{
				if (msg != 513 && msg != 515)
				{
					goto IL_A5;
				}
				this.dataGridViewOper[8192] = true;
				try
				{
					base.WndProc(ref m);
				}
				finally
				{
					this.dataGridViewOper[8192] = false;
				}
				return;
			}
			if (this.editingControl != null)
			{
				this.editingControl.SendMessage(m.Msg, m.WParam, m.LParam);
			}
			IL_A5:
			base.WndProc(ref m);
		}

		// Token: 0x04000AD0 RID: 2768
		private static readonly object EVENT_DATAGRIDVIEWALLOWUSERTOADDROWSCHANGED = new object();

		// Token: 0x04000AD1 RID: 2769
		private static readonly object EVENT_DATAGRIDVIEWALLOWUSERTODELETEROWSCHANGED = new object();

		// Token: 0x04000AD2 RID: 2770
		private static readonly object EVENT_DATAGRIDVIEWALLOWUSERTOORDERCOLUMNSCHANGED = new object();

		// Token: 0x04000AD3 RID: 2771
		private static readonly object EVENT_DATAGRIDVIEWALLOWUSERTORESIZECOLUMNSCHANGED = new object();

		// Token: 0x04000AD4 RID: 2772
		private static readonly object EVENT_DATAGRIDVIEWALLOWUSERTORESIZEROWSCHANGED = new object();

		// Token: 0x04000AD5 RID: 2773
		private static readonly object EVENT_DATAGRIDVIEWALTERNATINGROWSDEFAULTCELLSTYLECHANGED = new object();

		// Token: 0x04000AD6 RID: 2774
		private static readonly object EVENT_DATAGRIDVIEWAUTOGENERATECOLUMNSCHANGED = new object();

		// Token: 0x04000AD7 RID: 2775
		private static readonly object EVENT_DATAGRIDVIEWAUTOSIZECOLUMNMODECHANGED = new object();

		// Token: 0x04000AD8 RID: 2776
		private static readonly object EVENT_DATAGRIDVIEWAUTOSIZECOLUMNSMODECHANGED = new object();

		// Token: 0x04000AD9 RID: 2777
		private static readonly object EVENT_DATAGRIDVIEWAUTOSIZEROWSMODECHANGED = new object();

		// Token: 0x04000ADA RID: 2778
		private static readonly object EVENT_DATAGRIDVIEWBACKGROUNDCOLORCHANGED = new object();

		// Token: 0x04000ADB RID: 2779
		private static readonly object EVENT_DATAGRIDVIEWBORDERSTYLECHANGED = new object();

		// Token: 0x04000ADC RID: 2780
		private static readonly object EVENT_DATAGRIDVIEWCANCELROWEDIT = new object();

		// Token: 0x04000ADD RID: 2781
		private static readonly object EVENT_DATAGRIDVIEWCELLBEGINEDIT = new object();

		// Token: 0x04000ADE RID: 2782
		private static readonly object EVENT_DATAGRIDVIEWCELLBORDERSTYLECHANGED = new object();

		// Token: 0x04000ADF RID: 2783
		private static readonly object EVENT_DATAGRIDVIEWCELLCLICK = new object();

		// Token: 0x04000AE0 RID: 2784
		private static readonly object EVENT_DATAGRIDVIEWCELLCONTENTCLICK = new object();

		// Token: 0x04000AE1 RID: 2785
		private static readonly object EVENT_DATAGRIDVIEWCELLCONTENTDOUBLECLICK = new object();

		// Token: 0x04000AE2 RID: 2786
		private static readonly object EVENT_DATAGRIDVIEWCELLCONTEXTMENUSTRIPCHANGED = new object();

		// Token: 0x04000AE3 RID: 2787
		private static readonly object EVENT_DATAGRIDVIEWCELLCONTEXTMENUSTRIPNEEDED = new object();

		// Token: 0x04000AE4 RID: 2788
		private static readonly object EVENT_DATAGRIDVIEWCELLDOUBLECLICK = new object();

		// Token: 0x04000AE5 RID: 2789
		private static readonly object EVENT_DATAGRIDVIEWCELLENDEDIT = new object();

		// Token: 0x04000AE6 RID: 2790
		private static readonly object EVENT_DATAGRIDVIEWCELLENTER = new object();

		// Token: 0x04000AE7 RID: 2791
		private static readonly object EVENT_DATAGRIDVIEWCELLERRORTEXTCHANGED = new object();

		// Token: 0x04000AE8 RID: 2792
		private static readonly object EVENT_DATAGRIDVIEWCELLERRORTEXTNEEDED = new object();

		// Token: 0x04000AE9 RID: 2793
		private static readonly object EVENT_DATAGRIDVIEWCELLFORMATTING = new object();

		// Token: 0x04000AEA RID: 2794
		private static readonly object EVENT_DATAGRIDVIEWCELLLEAVE = new object();

		// Token: 0x04000AEB RID: 2795
		private static readonly object EVENT_DATAGRIDVIEWCELLMOUSECLICK = new object();

		// Token: 0x04000AEC RID: 2796
		private static readonly object EVENT_DATAGRIDVIEWCELLMOUSEDOUBLECLICK = new object();

		// Token: 0x04000AED RID: 2797
		private static readonly object EVENT_DATAGRIDVIEWCELLMOUSEDOWN = new object();

		// Token: 0x04000AEE RID: 2798
		private static readonly object EVENT_DATAGRIDVIEWCELLMOUSEENTER = new object();

		// Token: 0x04000AEF RID: 2799
		private static readonly object EVENT_DATAGRIDVIEWCELLMOUSELEAVE = new object();

		// Token: 0x04000AF0 RID: 2800
		private static readonly object EVENT_DATAGRIDVIEWCELLMOUSEMOVE = new object();

		// Token: 0x04000AF1 RID: 2801
		private static readonly object EVENT_DATAGRIDVIEWCELLMOUSEUP = new object();

		// Token: 0x04000AF2 RID: 2802
		private static readonly object EVENT_DATAGRIDVIEWCELLPAINTING = new object();

		// Token: 0x04000AF3 RID: 2803
		private static readonly object EVENT_DATAGRIDVIEWCELLPARSING = new object();

		// Token: 0x04000AF4 RID: 2804
		private static readonly object EVENT_DATAGRIDVIEWCELLSTATECHANGED = new object();

		// Token: 0x04000AF5 RID: 2805
		private static readonly object EVENT_DATAGRIDVIEWCELLSTYLECHANGED = new object();

		// Token: 0x04000AF6 RID: 2806
		private static readonly object EVENT_DATAGRIDVIEWCELLSTYLECONTENTCHANGED = new object();

		// Token: 0x04000AF7 RID: 2807
		private static readonly object EVENT_DATAGRIDVIEWCELLTOOLTIPTEXTCHANGED = new object();

		// Token: 0x04000AF8 RID: 2808
		private static readonly object EVENT_DATAGRIDVIEWCELLTOOLTIPTEXTNEEDED = new object();

		// Token: 0x04000AF9 RID: 2809
		private static readonly object EVENT_DATAGRIDVIEWCELLVALIDATING = new object();

		// Token: 0x04000AFA RID: 2810
		private static readonly object EVENT_DATAGRIDVIEWCELLVALIDATED = new object();

		// Token: 0x04000AFB RID: 2811
		private static readonly object EVENT_DATAGRIDVIEWCELLVALUECHANGED = new object();

		// Token: 0x04000AFC RID: 2812
		private static readonly object EVENT_DATAGRIDVIEWCELLVALUENEEDED = new object();

		// Token: 0x04000AFD RID: 2813
		private static readonly object EVENT_DATAGRIDVIEWCELLVALUEPUSHED = new object();

		// Token: 0x04000AFE RID: 2814
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNADDED = new object();

		// Token: 0x04000AFF RID: 2815
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNCONTEXTMENUSTRIPCHANGED = new object();

		// Token: 0x04000B00 RID: 2816
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNDATAPROPERTYNAMECHANGED = new object();

		// Token: 0x04000B01 RID: 2817
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNDEFAULTCELLSTYLECHANGED = new object();

		// Token: 0x04000B02 RID: 2818
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNDISPLAYINDEXCHANGED = new object();

		// Token: 0x04000B03 RID: 2819
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNDIVIDERWIDTHCHANGED = new object();

		// Token: 0x04000B04 RID: 2820
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNHEADERCELLCHANGED = new object();

		// Token: 0x04000B05 RID: 2821
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNDIVIDERDOUBLECLICK = new object();

		// Token: 0x04000B06 RID: 2822
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNHEADERMOUSECLICK = new object();

		// Token: 0x04000B07 RID: 2823
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNHEADERMOUSEDOUBLECLICK = new object();

		// Token: 0x04000B08 RID: 2824
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNHEADERSBORDERSTYLECHANGED = new object();

		// Token: 0x04000B09 RID: 2825
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNHEADERSDEFAULTCELLSTYLECHANGED = new object();

		// Token: 0x04000B0A RID: 2826
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNHEADERSHEIGHTCHANGED = new object();

		// Token: 0x04000B0B RID: 2827
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNHEADERSHEIGHTSIZEMODECHANGED = new object();

		// Token: 0x04000B0C RID: 2828
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNMINIMUMWIDTHCHANGED = new object();

		// Token: 0x04000B0D RID: 2829
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNNAMECHANGED = new object();

		// Token: 0x04000B0E RID: 2830
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNREMOVED = new object();

		// Token: 0x04000B0F RID: 2831
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNSORTMODECHANGED = new object();

		// Token: 0x04000B10 RID: 2832
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNSTATECHANGED = new object();

		// Token: 0x04000B11 RID: 2833
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNTOOLTIPTEXTCHANGED = new object();

		// Token: 0x04000B12 RID: 2834
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNWIDTHCHANGED = new object();

		// Token: 0x04000B13 RID: 2835
		private static readonly object EVENT_DATAGRIDVIEWCURRENTCELLCHANGED = new object();

		// Token: 0x04000B14 RID: 2836
		private static readonly object EVENT_DATAGRIDVIEWCURRENTCELLDIRTYSTATECHANGED = new object();

		// Token: 0x04000B15 RID: 2837
		private static readonly object EVENT_DATAGRIDVIEWDATABINDINGCOMPLETE = new object();

		// Token: 0x04000B16 RID: 2838
		private static readonly object EVENT_DATAGRIDVIEWDATAERROR = new object();

		// Token: 0x04000B17 RID: 2839
		private static readonly object EVENT_DATAGRIDVIEWDATAMEMBERCHANGED = new object();

		// Token: 0x04000B18 RID: 2840
		private static readonly object EVENT_DATAGRIDVIEWDATASOURCECHANGED = new object();

		// Token: 0x04000B19 RID: 2841
		private static readonly object EVENT_DATAGRIDVIEWDEFAULTCELLSTYLECHANGED = new object();

		// Token: 0x04000B1A RID: 2842
		private static readonly object EVENT_DATAGRIDVIEWDEFAULTVALUESNEEDED = new object();

		// Token: 0x04000B1B RID: 2843
		private static readonly object EVENT_DATAGRIDVIEWEDITINGCONTROLSHOWING = new object();

		// Token: 0x04000B1C RID: 2844
		private static readonly object EVENT_DATAGRIDVIEWEDITMODECHANGED = new object();

		// Token: 0x04000B1D RID: 2845
		private static readonly object EVENT_DATAGRIDVIEWGRIDCOLORCHANGED = new object();

		// Token: 0x04000B1E RID: 2846
		private static readonly object EVENT_DATAGRIDVIEWMULTISELECTCHANGED = new object();

		// Token: 0x04000B1F RID: 2847
		private static readonly object EVENT_DATAGRIDVIEWNEWROWNEEDED = new object();

		// Token: 0x04000B20 RID: 2848
		private static readonly object EVENT_DATAGRIDVIEWREADONLYCHANGED = new object();

		// Token: 0x04000B21 RID: 2849
		private static readonly object EVENT_DATAGRIDVIEWROWCONTEXTMENUSTRIPCHANGED = new object();

		// Token: 0x04000B22 RID: 2850
		private static readonly object EVENT_DATAGRIDVIEWROWCONTEXTMENUSTRIPNEEDED = new object();

		// Token: 0x04000B23 RID: 2851
		private static readonly object EVENT_DATAGRIDVIEWROWDEFAULTCELLSTYLECHANGED = new object();

		// Token: 0x04000B24 RID: 2852
		private static readonly object EVENT_DATAGRIDVIEWROWDIRTYSTATENEEDED = new object();

		// Token: 0x04000B25 RID: 2853
		private static readonly object EVENT_DATAGRIDVIEWROWDIVIDERHEIGHTCHANGED = new object();

		// Token: 0x04000B26 RID: 2854
		private static readonly object EVENT_DATAGRIDVIEWROWENTER = new object();

		// Token: 0x04000B27 RID: 2855
		private static readonly object EVENT_DATAGRIDVIEWROWERRORTEXTCHANGED = new object();

		// Token: 0x04000B28 RID: 2856
		private static readonly object EVENT_DATAGRIDVIEWROWERRORTEXTNEEDED = new object();

		// Token: 0x04000B29 RID: 2857
		private static readonly object EVENT_DATAGRIDVIEWROWHEADERCELLCHANGED = new object();

		// Token: 0x04000B2A RID: 2858
		private static readonly object EVENT_DATAGRIDVIEWROWDIVIDERDOUBLECLICK = new object();

		// Token: 0x04000B2B RID: 2859
		private static readonly object EVENT_DATAGRIDVIEWROWHEADERMOUSECLICK = new object();

		// Token: 0x04000B2C RID: 2860
		private static readonly object EVENT_DATAGRIDVIEWROWHEADERMOUSEDOUBLECLICK = new object();

		// Token: 0x04000B2D RID: 2861
		private static readonly object EVENT_DATAGRIDVIEWROWHEADERSBORDERSTYLECHANGED = new object();

		// Token: 0x04000B2E RID: 2862
		private static readonly object EVENT_DATAGRIDVIEWROWHEADERSDEFAULTCELLSTYLECHANGED = new object();

		// Token: 0x04000B2F RID: 2863
		private static readonly object EVENT_DATAGRIDVIEWROWHEADERSWIDTHCHANGED = new object();

		// Token: 0x04000B30 RID: 2864
		private static readonly object EVENT_DATAGRIDVIEWROWHEADERSWIDTHSIZEMODECHANGED = new object();

		// Token: 0x04000B31 RID: 2865
		private static readonly object EVENT_DATAGRIDVIEWROWHEIGHTCHANGED = new object();

		// Token: 0x04000B32 RID: 2866
		private static readonly object EVENT_DATAGRIDVIEWROWHEIGHTINFONEEDED = new object();

		// Token: 0x04000B33 RID: 2867
		private static readonly object EVENT_DATAGRIDVIEWROWHEIGHTINFOPUSHED = new object();

		// Token: 0x04000B34 RID: 2868
		private static readonly object EVENT_DATAGRIDVIEWROWLEAVE = new object();

		// Token: 0x04000B35 RID: 2869
		private static readonly object EVENT_DATAGRIDVIEWROWMINIMUMHEIGHTCHANGED = new object();

		// Token: 0x04000B36 RID: 2870
		private static readonly object EVENT_DATAGRIDVIEWROWPOSTPAINT = new object();

		// Token: 0x04000B37 RID: 2871
		private static readonly object EVENT_DATAGRIDVIEWROWPREPAINT = new object();

		// Token: 0x04000B38 RID: 2872
		private static readonly object EVENT_DATAGRIDVIEWROWSADDED = new object();

		// Token: 0x04000B39 RID: 2873
		private static readonly object EVENT_DATAGRIDVIEWROWSDEFAULTCELLSTYLECHANGED = new object();

		// Token: 0x04000B3A RID: 2874
		private static readonly object EVENT_DATAGRIDVIEWROWSREMOVED = new object();

		// Token: 0x04000B3B RID: 2875
		private static readonly object EVENT_DATAGRIDVIEWROWSTATECHANGED = new object();

		// Token: 0x04000B3C RID: 2876
		private static readonly object EVENT_DATAGRIDVIEWROWUNSHARED = new object();

		// Token: 0x04000B3D RID: 2877
		private static readonly object EVENT_DATAGRIDVIEWROWVALIDATED = new object();

		// Token: 0x04000B3E RID: 2878
		private static readonly object EVENT_DATAGRIDVIEWROWVALIDATING = new object();

		// Token: 0x04000B3F RID: 2879
		private static readonly object EVENT_DATAGRIDVIEWSCROLL = new object();

		// Token: 0x04000B40 RID: 2880
		private static readonly object EVENT_DATAGRIDVIEWSELECTIONCHANGED = new object();

		// Token: 0x04000B41 RID: 2881
		private static readonly object EVENT_DATAGRIDVIEWSORTCOMPARE = new object();

		// Token: 0x04000B42 RID: 2882
		private static readonly object EVENT_DATAGRIDVIEWSORTED = new object();

		// Token: 0x04000B43 RID: 2883
		private static readonly object EVENT_DATAGRIDVIEWUSERADDEDROW = new object();

		// Token: 0x04000B44 RID: 2884
		private static readonly object EVENT_DATAGRIDVIEWUSERDELETEDROW = new object();

		// Token: 0x04000B45 RID: 2885
		private static readonly object EVENT_DATAGRIDVIEWUSERDELETINGROW = new object();

		// Token: 0x04000B46 RID: 2886
		private const int DATAGRIDVIEWSTATE1_allowUserToAddRows = 1;

		// Token: 0x04000B47 RID: 2887
		private const int DATAGRIDVIEWSTATE1_allowUserToDeleteRows = 2;

		// Token: 0x04000B48 RID: 2888
		private const int DATAGRIDVIEWSTATE1_allowUserToOrderColumns = 4;

		// Token: 0x04000B49 RID: 2889
		private const int DATAGRIDVIEWSTATE1_columnHeadersVisible = 8;

		// Token: 0x04000B4A RID: 2890
		private const int DATAGRIDVIEWSTATE1_rowHeadersVisible = 16;

		// Token: 0x04000B4B RID: 2891
		private const int DATAGRIDVIEWSTATE1_forwardCharMessage = 32;

		// Token: 0x04000B4C RID: 2892
		private const int DATAGRIDVIEWSTATE1_leavingWithTabKey = 64;

		// Token: 0x04000B4D RID: 2893
		private const int DATAGRIDVIEWSTATE1_multiSelect = 128;

		// Token: 0x04000B4E RID: 2894
		private const int DATAGRIDVIEWSTATE1_ignoringEditingChanges = 512;

		// Token: 0x04000B4F RID: 2895
		private const int DATAGRIDVIEWSTATE1_ambientForeColor = 1024;

		// Token: 0x04000B50 RID: 2896
		private const int DATAGRIDVIEWSTATE1_scrolledSinceMouseDown = 2048;

		// Token: 0x04000B51 RID: 2897
		private const int DATAGRIDVIEWSTATE1_editingControlHidden = 4096;

		// Token: 0x04000B52 RID: 2898
		private const int DATAGRIDVIEWSTATE1_standardTab = 8192;

		// Token: 0x04000B53 RID: 2899
		private const int DATAGRIDVIEWSTATE1_editingControlChanging = 16384;

		// Token: 0x04000B54 RID: 2900
		private const int DATAGRIDVIEWSTATE1_currentCellInEditMode = 32768;

		// Token: 0x04000B55 RID: 2901
		private const int DATAGRIDVIEWSTATE1_virtualMode = 65536;

		// Token: 0x04000B56 RID: 2902
		private const int DATAGRIDVIEWSTATE1_editedCellChanged = 131072;

		// Token: 0x04000B57 RID: 2903
		private const int DATAGRIDVIEWSTATE1_editedRowChanged = 262144;

		// Token: 0x04000B58 RID: 2904
		private const int DATAGRIDVIEWSTATE1_newRowEdited = 524288;

		// Token: 0x04000B59 RID: 2905
		private const int DATAGRIDVIEWSTATE1_readOnly = 1048576;

		// Token: 0x04000B5A RID: 2906
		private const int DATAGRIDVIEWSTATE1_newRowCreatedByEditing = 2097152;

		// Token: 0x04000B5B RID: 2907
		private const int DATAGRIDVIEWSTATE1_temporarilyResetCurrentCell = 4194304;

		// Token: 0x04000B5C RID: 2908
		private const int DATAGRIDVIEWSTATE1_autoGenerateColumns = 8388608;

		// Token: 0x04000B5D RID: 2909
		private const int DATAGRIDVIEWSTATE1_customCursorSet = 16777216;

		// Token: 0x04000B5E RID: 2910
		private const int DATAGRIDVIEWSTATE1_ambientFont = 33554432;

		// Token: 0x04000B5F RID: 2911
		private const int DATAGRIDVIEWSTATE1_ambientColumnHeadersFont = 67108864;

		// Token: 0x04000B60 RID: 2912
		private const int DATAGRIDVIEWSTATE1_ambientRowHeadersFont = 134217728;

		// Token: 0x04000B61 RID: 2913
		private const int DATAGRIDVIEWSTATE1_isRestrictedChecked = 268435456;

		// Token: 0x04000B62 RID: 2914
		private const int DATAGRIDVIEWSTATE1_isRestricted = 536870912;

		// Token: 0x04000B63 RID: 2915
		private const int DATAGRIDVIEWSTATE1_isAutoSized = 1073741824;

		// Token: 0x04000B64 RID: 2916
		private const int DATAGRIDVIEWSTATE2_showEditingIcon = 1;

		// Token: 0x04000B65 RID: 2917
		private const int DATAGRIDVIEWSTATE2_allowUserToResizeColumns = 2;

		// Token: 0x04000B66 RID: 2918
		private const int DATAGRIDVIEWSTATE2_allowUserToResizeRows = 4;

		// Token: 0x04000B67 RID: 2919
		private const int DATAGRIDVIEWSTATE2_mouseOverRemovedEditingCtrl = 8;

		// Token: 0x04000B68 RID: 2920
		private const int DATAGRIDVIEWSTATE2_mouseOverRemovedEditingPanel = 16;

		// Token: 0x04000B69 RID: 2921
		private const int DATAGRIDVIEWSTATE2_mouseEnterExpected = 32;

		// Token: 0x04000B6A RID: 2922
		private const int DATAGRIDVIEWSTATE2_enableHeadersVisualStyles = 64;

		// Token: 0x04000B6B RID: 2923
		private const int DATAGRIDVIEWSTATE2_showCellErrors = 128;

		// Token: 0x04000B6C RID: 2924
		private const int DATAGRIDVIEWSTATE2_showCellToolTips = 256;

		// Token: 0x04000B6D RID: 2925
		private const int DATAGRIDVIEWSTATE2_showRowErrors = 512;

		// Token: 0x04000B6E RID: 2926
		private const int DATAGRIDVIEWSTATE2_showColumnRelocationInsertion = 1024;

		// Token: 0x04000B6F RID: 2927
		private const int DATAGRIDVIEWSTATE2_rightToLeftMode = 2048;

		// Token: 0x04000B70 RID: 2928
		private const int DATAGRIDVIEWSTATE2_rightToLeftValid = 4096;

		// Token: 0x04000B71 RID: 2929
		private const int DATAGRIDVIEWSTATE2_currentCellWantsInputKey = 8192;

		// Token: 0x04000B72 RID: 2930
		private const int DATAGRIDVIEWSTATE2_stopRaisingVerticalScroll = 16384;

		// Token: 0x04000B73 RID: 2931
		private const int DATAGRIDVIEWSTATE2_stopRaisingHorizontalScroll = 32768;

		// Token: 0x04000B74 RID: 2932
		private const int DATAGRIDVIEWSTATE2_replacedCellSelected = 65536;

		// Token: 0x04000B75 RID: 2933
		private const int DATAGRIDVIEWSTATE2_replacedCellReadOnly = 131072;

		// Token: 0x04000B76 RID: 2934
		private const int DATAGRIDVIEWSTATE2_raiseSelectionChanged = 262144;

		// Token: 0x04000B77 RID: 2935
		private const int DATAGRIDVIEWSTATE2_initializing = 524288;

		// Token: 0x04000B78 RID: 2936
		private const int DATAGRIDVIEWSTATE2_autoSizedWithoutHandle = 1048576;

		// Token: 0x04000B79 RID: 2937
		private const int DATAGRIDVIEWSTATE2_ignoreCursorChange = 2097152;

		// Token: 0x04000B7A RID: 2938
		private const int DATAGRIDVIEWSTATE2_rowsCollectionClearedInSetCell = 4194304;

		// Token: 0x04000B7B RID: 2939
		private const int DATAGRIDVIEWSTATE2_nextMouseUpIsDouble = 8388608;

		// Token: 0x04000B7C RID: 2940
		private const int DATAGRIDVIEWSTATE2_inBindingContextChanged = 16777216;

		// Token: 0x04000B7D RID: 2941
		private const int DATAGRIDVIEWSTATE2_allowHorizontalScrollbar = 33554432;

		// Token: 0x04000B7E RID: 2942
		private const int DATAGRIDVIEWSTATE2_usedFillWeightsDirty = 67108864;

		// Token: 0x04000B7F RID: 2943
		private const int DATAGRIDVIEWSTATE2_messageFromEditingCtrls = 134217728;

		// Token: 0x04000B80 RID: 2944
		private const int DATAGRIDVIEWSTATE2_cellMouseDownInContentBounds = 268435456;

		// Token: 0x04000B81 RID: 2945
		private const int DATAGRIDVIEWSTATE2_discardEditingControl = 536870912;

		// Token: 0x04000B82 RID: 2946
		private const int DATAGRIDVIEWOPER_trackColResize = 1;

		// Token: 0x04000B83 RID: 2947
		private const int DATAGRIDVIEWOPER_trackRowResize = 2;

		// Token: 0x04000B84 RID: 2948
		private const int DATAGRIDVIEWOPER_trackColSelect = 4;

		// Token: 0x04000B85 RID: 2949
		private const int DATAGRIDVIEWOPER_trackRowSelect = 8;

		// Token: 0x04000B86 RID: 2950
		private const int DATAGRIDVIEWOPER_trackCellSelect = 16;

		// Token: 0x04000B87 RID: 2951
		private const int DATAGRIDVIEWOPER_trackColRelocation = 32;

		// Token: 0x04000B88 RID: 2952
		private const int DATAGRIDVIEWOPER_inSort = 64;

		// Token: 0x04000B89 RID: 2953
		private const int DATAGRIDVIEWOPER_trackColHeadersResize = 128;

		// Token: 0x04000B8A RID: 2954
		private const int DATAGRIDVIEWOPER_trackRowHeadersResize = 256;

		// Token: 0x04000B8B RID: 2955
		private const int DATAGRIDVIEWOPER_trackMouseMoves = 512;

		// Token: 0x04000B8C RID: 2956
		private const int DATAGRIDVIEWOPER_inRefreshColumns = 1024;

		// Token: 0x04000B8D RID: 2957
		private const int DATAGRIDVIEWOPER_inDisplayIndexAdjustments = 2048;

		// Token: 0x04000B8E RID: 2958
		private const int DATAGRIDVIEWOPER_lastEditCtrlClickDoubled = 4096;

		// Token: 0x04000B8F RID: 2959
		private const int DATAGRIDVIEWOPER_inMouseDown = 8192;

		// Token: 0x04000B90 RID: 2960
		private const int DATAGRIDVIEWOPER_inReadOnlyChange = 16384;

		// Token: 0x04000B91 RID: 2961
		private const int DATAGRIDVIEWOPER_inCellValidating = 32768;

		// Token: 0x04000B92 RID: 2962
		private const int DATAGRIDVIEWOPER_inBorderStyleChange = 65536;

		// Token: 0x04000B93 RID: 2963
		private const int DATAGRIDVIEWOPER_inCurrentCellChange = 131072;

		// Token: 0x04000B94 RID: 2964
		private const int DATAGRIDVIEWOPER_inAdjustFillingColumns = 262144;

		// Token: 0x04000B95 RID: 2965
		private const int DATAGRIDVIEWOPER_inAdjustFillingColumn = 524288;

		// Token: 0x04000B96 RID: 2966
		private const int DATAGRIDVIEWOPER_inDispose = 1048576;

		// Token: 0x04000B97 RID: 2967
		private const int DATAGRIDVIEWOPER_inBeginEdit = 2097152;

		// Token: 0x04000B98 RID: 2968
		private const int DATAGRIDVIEWOPER_inEndEdit = 4194304;

		// Token: 0x04000B99 RID: 2969
		private const int DATAGRIDVIEWOPER_resizingOperationAboutToStart = 8388608;

		// Token: 0x04000B9A RID: 2970
		private const int DATAGRIDVIEWOPER_trackKeyboardColResize = 16777216;

		// Token: 0x04000B9B RID: 2971
		private const int DATAGRIDVIEWOPER_mouseOperationMask = 419;

		// Token: 0x04000B9C RID: 2972
		private const int DATAGRIDVIEWOPER_keyboardOperationMask = 16777216;

		// Token: 0x04000B9D RID: 2973
		private static Size DragSize = SystemInformation.DragSize;

		// Token: 0x04000B9E RID: 2974
		private const byte DATAGRIDVIEW_columnSizingHotZone = 6;

		// Token: 0x04000B9F RID: 2975
		private const byte DATAGRIDVIEW_rowSizingHotZone = 5;

		// Token: 0x04000BA0 RID: 2976
		private const byte DATAGRIDVIEW_insertionBarWidth = 3;

		// Token: 0x04000BA1 RID: 2977
		private const byte DATAGRIDVIEW_bulkPaintThreshold = 8;

		// Token: 0x04000BA2 RID: 2978
		private const string DATAGRIDVIEW_htmlPrefix = "Version:1.0\r\nStartHTML:00000097\r\nEndHTML:{0}\r\nStartFragment:00000133\r\nEndFragment:{1}\r\n";

		// Token: 0x04000BA3 RID: 2979
		private const string DATAGRIDVIEW_htmlStartFragment = "<HTML>\r\n<BODY>\r\n<!--StartFragment-->";

		// Token: 0x04000BA4 RID: 2980
		private const string DATAGRIDVIEW_htmlEndFragment = "\r\n<!--EndFragment-->\r\n</BODY>\r\n</HTML>";

		// Token: 0x04000BA5 RID: 2981
		private const int FOCUS_RECT_OFFSET = 2;

		// Token: 0x04000BA6 RID: 2982
		private BitVector32 dataGridViewState1;

		// Token: 0x04000BA7 RID: 2983
		private BitVector32 dataGridViewState2;

		// Token: 0x04000BA8 RID: 2984
		private BitVector32 dataGridViewOper;

		// Token: 0x04000BA9 RID: 2985
		private const BorderStyle defaultBorderStyle = BorderStyle.FixedSingle;

		// Token: 0x04000BAA RID: 2986
		private const DataGridViewAdvancedCellBorderStyle defaultAdvancedCellBorderStyle = DataGridViewAdvancedCellBorderStyle.Single;

		// Token: 0x04000BAB RID: 2987
		private const DataGridViewAdvancedCellBorderStyle defaultAdvancedRowHeadersBorderStyle = DataGridViewAdvancedCellBorderStyle.OutsetPartial;

		// Token: 0x04000BAC RID: 2988
		private const DataGridViewAdvancedCellBorderStyle defaultAdvancedColumnHeadersBorderStyle = DataGridViewAdvancedCellBorderStyle.OutsetPartial;

		// Token: 0x04000BAD RID: 2989
		private const DataGridViewSelectionMode defaultSelectionMode = DataGridViewSelectionMode.RowHeaderSelect;

		// Token: 0x04000BAE RID: 2990
		private const DataGridViewEditMode defaultEditMode = DataGridViewEditMode.EditOnKeystrokeOrF2;

		// Token: 0x04000BAF RID: 2991
		private const DataGridViewAutoSizeRowCriteriaInternal invalidDataGridViewAutoSizeRowCriteriaInternalMask = ~(DataGridViewAutoSizeRowCriteriaInternal.Header | DataGridViewAutoSizeRowCriteriaInternal.AllColumns);

		// Token: 0x04000BB0 RID: 2992
		private SolidBrush backgroundBrush = DataGridView.DefaultBackgroundBrush;

		// Token: 0x04000BB1 RID: 2993
		private Pen gridPen;

		// Token: 0x04000BB2 RID: 2994
		private Cursor oldCursor;

		// Token: 0x04000BB3 RID: 2995
		private HScrollBar horizScrollBar = new HScrollBar();

		// Token: 0x04000BB4 RID: 2996
		private VScrollBar vertScrollBar = new VScrollBar();

		// Token: 0x04000BB5 RID: 2997
		private DataGridViewHeaderCell topLeftHeaderCell;

		// Token: 0x04000BB6 RID: 2998
		private DataGridViewRow rowTemplate;

		// Token: 0x04000BB7 RID: 2999
		private DataGridViewRowCollection dataGridViewRows;

		// Token: 0x04000BB8 RID: 3000
		private DataGridViewColumnCollection dataGridViewColumns;

		// Token: 0x04000BB9 RID: 3001
		private DataGridViewCellStyle placeholderCellStyle;

		// Token: 0x04000BBA RID: 3002
		private StringFormat placeholderStringFormat;

		// Token: 0x04000BBB RID: 3003
		private DataGridViewColumn sortedColumn;

		// Token: 0x04000BBC RID: 3004
		private SortOrder sortOrder;

		// Token: 0x04000BBD RID: 3005
		private object uneditedFormattedValue;

		// Token: 0x04000BBE RID: 3006
		private Control editingControl;

		// Token: 0x04000BBF RID: 3007
		private Control latestEditingControl;

		// Token: 0x04000BC0 RID: 3008
		private Control cachedEditingControl;

		// Token: 0x04000BC1 RID: 3009
		private Panel editingPanel;

		// Token: 0x04000BC2 RID: 3010
		private DataGridView.DataGridViewEditingPanelAccessibleObject editingPanelAccessibleObject;

		// Token: 0x04000BC3 RID: 3011
		private Point ptCurrentCell;

		// Token: 0x04000BC4 RID: 3012
		private Point ptCurrentCellCache = Point.Empty;

		// Token: 0x04000BC5 RID: 3013
		private Point ptAnchorCell;

		// Token: 0x04000BC6 RID: 3014
		private Point ptMouseDownCell;

		// Token: 0x04000BC7 RID: 3015
		private Point ptMouseEnteredCell;

		// Token: 0x04000BC8 RID: 3016
		private Point ptToolTipCell;

		// Token: 0x04000BC9 RID: 3017
		private Point ptMouseDownGridCoord;

		// Token: 0x04000BCA RID: 3018
		private DataGridViewSelectionMode selectionMode;

		// Token: 0x04000BCB RID: 3019
		private DataGridViewEditMode editMode;

		// Token: 0x04000BCC RID: 3020
		private DataGridViewCellLinkedList individualSelectedCells;

		// Token: 0x04000BCD RID: 3021
		private DataGridViewCellLinkedList individualReadOnlyCells;

		// Token: 0x04000BCE RID: 3022
		private DataGridViewIntLinkedList selectedBandIndexes;

		// Token: 0x04000BCF RID: 3023
		private DataGridViewIntLinkedList selectedBandSnapshotIndexes;

		// Token: 0x04000BD0 RID: 3024
		private DataGridViewCellStyle defaultCellStyle;

		// Token: 0x04000BD1 RID: 3025
		private DataGridViewCellStyle columnHeadersDefaultCellStyle;

		// Token: 0x04000BD2 RID: 3026
		private DataGridViewCellStyle rowHeadersDefaultCellStyle;

		// Token: 0x04000BD3 RID: 3027
		private DataGridViewCellStyle rowsDefaultCellStyle;

		// Token: 0x04000BD4 RID: 3028
		private DataGridViewCellStyle alternatingRowsDefaultCellStyle;

		// Token: 0x04000BD5 RID: 3029
		private ScrollBars scrollBars;

		// Token: 0x04000BD6 RID: 3030
		private DataGridView.LayoutData layout;

		// Token: 0x04000BD7 RID: 3031
		private DataGridView.DisplayedBandsData displayedBandsInfo;

		// Token: 0x04000BD8 RID: 3032
		private Rectangle normalClientRectangle;

		// Token: 0x04000BD9 RID: 3033
		private ArrayList lstRows;

		// Token: 0x04000BDA RID: 3034
		private int availableWidthForFillColumns;

		// Token: 0x04000BDB RID: 3035
		private BorderStyle borderStyle;

		// Token: 0x04000BDC RID: 3036
		private DataGridViewAdvancedBorderStyle advancedCellBorderStyle;

		// Token: 0x04000BDD RID: 3037
		private DataGridViewAdvancedBorderStyle advancedRowHeadersBorderStyle;

		// Token: 0x04000BDE RID: 3038
		private DataGridViewAdvancedBorderStyle advancedColumnHeadersBorderStyle;

		// Token: 0x04000BDF RID: 3039
		private DataGridViewClipboardCopyMode clipboardCopyMode;

		// Token: 0x04000BE0 RID: 3040
		private const int minimumRowHeadersWidth = 4;

		// Token: 0x04000BE1 RID: 3041
		private const int minimumColumnHeadersHeight = 4;

		// Token: 0x04000BE2 RID: 3042
		private const int defaultRowHeadersWidth = 41;

		// Token: 0x04000BE3 RID: 3043
		private const int maxHeadersThickness = 32768;

		// Token: 0x04000BE4 RID: 3044
		private const int upperSize = 8388607;

		// Token: 0x04000BE5 RID: 3045
		private int rowHeadersWidth = 41;

		// Token: 0x04000BE6 RID: 3046
		private int cachedRowHeadersWidth;

		// Token: 0x04000BE7 RID: 3047
		private const int defaultColumnHeadersHeight = 23;

		// Token: 0x04000BE8 RID: 3048
		private int columnHeadersHeight = 23;

		// Token: 0x04000BE9 RID: 3049
		private int cachedColumnHeadersHeight;

		// Token: 0x04000BEA RID: 3050
		private DataGridViewAutoSizeRowsMode autoSizeRowsMode;

		// Token: 0x04000BEB RID: 3051
		private DataGridViewAutoSizeColumnsMode autoSizeColumnsMode;

		// Token: 0x04000BEC RID: 3052
		private DataGridViewColumnHeadersHeightSizeMode columnHeadersHeightSizeMode;

		// Token: 0x04000BED RID: 3053
		private DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode;

		// Token: 0x04000BEE RID: 3054
		private DataGridViewCellStyleChangedEventArgs dgvcsce;

		// Token: 0x04000BEF RID: 3055
		private DataGridViewCellPaintingEventArgs dgvcpe;

		// Token: 0x04000BF0 RID: 3056
		private DataGridViewCellValueEventArgs dgvcve;

		// Token: 0x04000BF1 RID: 3057
		private DataGridViewRowHeightInfoNeededEventArgs dgvrhine;

		// Token: 0x04000BF2 RID: 3058
		private DataGridViewRowPostPaintEventArgs dgvrpope;

		// Token: 0x04000BF3 RID: 3059
		private DataGridViewRowPrePaintEventArgs dgvrprpe;

		// Token: 0x04000BF4 RID: 3060
		private int horizontalOffset;

		// Token: 0x04000BF5 RID: 3061
		private int verticalOffset;

		// Token: 0x04000BF6 RID: 3062
		private int negOffset;

		// Token: 0x04000BF7 RID: 3063
		private int newRowIndex = -1;

		// Token: 0x04000BF8 RID: 3064
		private int cumulativeVerticalWheelDelta;

		// Token: 0x04000BF9 RID: 3065
		private int cumulativeHorizontalWheelDelta;

		// Token: 0x04000BFA RID: 3066
		private int trackColAnchor;

		// Token: 0x04000BFB RID: 3067
		private int trackColumn = -1;

		// Token: 0x04000BFC RID: 3068
		private int trackColumnEdge = -1;

		// Token: 0x04000BFD RID: 3069
		private int trackRowAnchor;

		// Token: 0x04000BFE RID: 3070
		private int trackRow = -1;

		// Token: 0x04000BFF RID: 3071
		private int trackRowEdge = -1;

		// Token: 0x04000C00 RID: 3072
		private int lastHeaderShadow = -1;

		// Token: 0x04000C01 RID: 3073
		private int currentColSplitBar = -1;

		// Token: 0x04000C02 RID: 3074
		private int lastColSplitBar = -1;

		// Token: 0x04000C03 RID: 3075
		private int currentRowSplitBar = -1;

		// Token: 0x04000C04 RID: 3076
		private int lastRowSplitBar = -1;

		// Token: 0x04000C05 RID: 3077
		private int mouseBarOffset;

		// Token: 0x04000C06 RID: 3078
		private int noDimensionChangeCount;

		// Token: 0x04000C07 RID: 3079
		private int noSelectionChangeCount;

		// Token: 0x04000C08 RID: 3080
		private int noAutoSizeCount;

		// Token: 0x04000C09 RID: 3081
		private int inBulkPaintCount;

		// Token: 0x04000C0A RID: 3082
		private int inBulkLayoutCount;

		// Token: 0x04000C0B RID: 3083
		private int inPerformLayoutCount;

		// Token: 0x04000C0C RID: 3084
		private int keyboardResizeStep;

		// Token: 0x04000C0D RID: 3085
		private Rectangle resizeClipRectangle;

		// Token: 0x04000C0E RID: 3086
		private Timer vertScrollTimer;

		// Token: 0x04000C0F RID: 3087
		private Timer horizScrollTimer;

		// Token: 0x04000C10 RID: 3088
		private Hashtable converters;

		// Token: 0x04000C11 RID: 3089
		private Hashtable pens;

		// Token: 0x04000C12 RID: 3090
		private Hashtable brushes;

		// Token: 0x04000C13 RID: 3091
		private NativeMethods.RECT[] cachedScrollableRegion;

		// Token: 0x04000C14 RID: 3092
		private DataGridView.DataGridViewDataConnection dataConnection;

		// Token: 0x04000C15 RID: 3093
		private DataGridView.DataGridViewToolTip toolTipControl;

		// Token: 0x04000C16 RID: 3094
		private string toolTipCaption = string.Empty;

		// Token: 0x04000C17 RID: 3095
		private const int maxTTDISPINFOBufferLength = 80;

		// Token: 0x04000C18 RID: 3096
		private DataGridView.MouseClickInfo lastMouseClickInfo;

		// Token: 0x02000654 RID: 1620
		internal enum DataGridViewHitTestTypeInternal
		{
			// Token: 0x040039DB RID: 14811
			None,
			// Token: 0x040039DC RID: 14812
			Cell,
			// Token: 0x040039DD RID: 14813
			ColumnHeader,
			// Token: 0x040039DE RID: 14814
			RowHeader,
			// Token: 0x040039DF RID: 14815
			ColumnResizeLeft,
			// Token: 0x040039E0 RID: 14816
			ColumnResizeRight,
			// Token: 0x040039E1 RID: 14817
			RowResizeTop,
			// Token: 0x040039E2 RID: 14818
			RowResizeBottom,
			// Token: 0x040039E3 RID: 14819
			FirstColumnHeaderLeft,
			// Token: 0x040039E4 RID: 14820
			TopLeftHeader,
			// Token: 0x040039E5 RID: 14821
			TopLeftHeaderResizeLeft,
			// Token: 0x040039E6 RID: 14822
			TopLeftHeaderResizeRight,
			// Token: 0x040039E7 RID: 14823
			TopLeftHeaderResizeTop,
			// Token: 0x040039E8 RID: 14824
			TopLeftHeaderResizeBottom,
			// Token: 0x040039E9 RID: 14825
			ColumnHeadersResizeBottom,
			// Token: 0x040039EA RID: 14826
			ColumnHeadersResizeTop,
			// Token: 0x040039EB RID: 14827
			RowHeadersResizeRight,
			// Token: 0x040039EC RID: 14828
			RowHeadersResizeLeft,
			// Token: 0x040039ED RID: 14829
			ColumnHeaderLeft,
			// Token: 0x040039EE RID: 14830
			ColumnHeaderRight
		}

		// Token: 0x02000655 RID: 1621
		internal enum DataGridViewValidateCellInternal
		{
			// Token: 0x040039F0 RID: 14832
			Never,
			// Token: 0x040039F1 RID: 14833
			Always,
			// Token: 0x040039F2 RID: 14834
			WhenChanged
		}

		// Token: 0x02000656 RID: 1622
		private enum DataGridViewMouseEvent
		{
			// Token: 0x040039F4 RID: 14836
			Click,
			// Token: 0x040039F5 RID: 14837
			DoubleClick,
			// Token: 0x040039F6 RID: 14838
			MouseClick,
			// Token: 0x040039F7 RID: 14839
			MouseDoubleClick,
			// Token: 0x040039F8 RID: 14840
			MouseDown,
			// Token: 0x040039F9 RID: 14841
			MouseUp,
			// Token: 0x040039FA RID: 14842
			MouseMove
		}

		// Token: 0x02000657 RID: 1623
		private struct MouseClickInfo
		{
			// Token: 0x040039FB RID: 14843
			public MouseButtons button;

			// Token: 0x040039FC RID: 14844
			public long timeStamp;

			// Token: 0x040039FD RID: 14845
			public int x;

			// Token: 0x040039FE RID: 14846
			public int y;

			// Token: 0x040039FF RID: 14847
			public int col;

			// Token: 0x04003A00 RID: 14848
			public int row;
		}

		// Token: 0x02000658 RID: 1624
		internal class DataGridViewEditingPanel : Panel
		{
			// Token: 0x06006524 RID: 25892 RVA: 0x00178508 File Offset: 0x00176708
			public DataGridViewEditingPanel(DataGridView owningDataGridView)
			{
				this.owningDataGridView = owningDataGridView;
			}

			// Token: 0x170015D0 RID: 5584
			// (get) Token: 0x06006525 RID: 25893 RVA: 0x000A83A1 File Offset: 0x000A65A1
			internal override bool SupportsUiaProviders
			{
				get
				{
					return AccessibilityImprovements.Level3;
				}
			}

			// Token: 0x06006526 RID: 25894 RVA: 0x00178517 File Offset: 0x00176717
			protected override AccessibleObject CreateAccessibilityInstance()
			{
				if (AccessibilityImprovements.Level3)
				{
					return new DataGridView.DataGridViewEditingPanelAccessibleObject(this.owningDataGridView, this);
				}
				return base.CreateAccessibilityInstance();
			}

			// Token: 0x04003A01 RID: 14849
			private DataGridView owningDataGridView;
		}

		/// <summary>Provides information about the <see cref="T:System.Windows.Forms.DataGridView" /> control to accessibility client applications.</summary>
		// Token: 0x02000659 RID: 1625
		[ComVisible(true)]
		protected class DataGridViewAccessibleObject : Control.ControlAccessibleObject
		{
			/// <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataGridView.DataGridViewAccessibleObject" /> class.</summary>
			/// <param name="owner">The <see cref="T:System.Windows.Forms.DataGridView" /> that owns the <see cref="T:System.Windows.Forms.DataGridView.DataGridViewAccessibleObject" />.</param>
			// Token: 0x06006527 RID: 25895 RVA: 0x00178533 File Offset: 0x00176733
			public DataGridViewAccessibleObject(DataGridView owner)
				: base(owner)
			{
				this.owner = owner;
			}

			/// <summary>Gets or sets the accessible object name.</summary>
			/// <returns>The accessible object name.</returns>
			// Token: 0x170015D1 RID: 5585
			// (get) Token: 0x06006528 RID: 25896 RVA: 0x00178544 File Offset: 0x00176744
			public override string Name
			{
				get
				{
					string accessibleName = base.Owner.AccessibleName;
					if (!string.IsNullOrEmpty(accessibleName))
					{
						return accessibleName;
					}
					return "DataGridView";
				}
			}

			/// <summary>Gets the role of the <see cref="T:System.Windows.Forms.DataGridView.DataGridViewAccessibleObject" />.</summary>
			/// <returns>The <see cref="F:System.Windows.Forms.AccessibleRole.Table" /> value.</returns>
			// Token: 0x170015D2 RID: 5586
			// (get) Token: 0x06006529 RID: 25897 RVA: 0x0017856C File Offset: 0x0017676C
			public override AccessibleRole Role
			{
				get
				{
					AccessibleRole accessibleRole = this.owner.AccessibleRole;
					if (accessibleRole != AccessibleRole.Default)
					{
						return accessibleRole;
					}
					return AccessibleRole.Table;
				}
			}

			// Token: 0x170015D3 RID: 5587
			// (get) Token: 0x0600652A RID: 25898 RVA: 0x0017858D File Offset: 0x0017678D
			private AccessibleObject TopRowAccessibilityObject
			{
				get
				{
					if (this.topRowAccessibilityObject == null)
					{
						this.topRowAccessibilityObject = new DataGridView.DataGridViewTopRowAccessibleObject(this.owner);
					}
					return this.topRowAccessibilityObject;
				}
			}

			// Token: 0x170015D4 RID: 5588
			// (get) Token: 0x0600652B RID: 25899 RVA: 0x001785AE File Offset: 0x001767AE
			private AccessibleObject SelectedCellsAccessibilityObject
			{
				get
				{
					if (this.selectedCellsAccessibilityObject == null)
					{
						this.selectedCellsAccessibilityObject = new DataGridView.DataGridViewSelectedCellsAccessibleObject(this.owner);
					}
					return this.selectedCellsAccessibilityObject;
				}
			}

			/// <summary>Returns the child accessible object corresponding to the specified index.</summary>
			/// <param name="index">The zero-based index of the child accessible object.</param>
			/// <returns>An <see cref="T:System.Windows.Forms.AccessibleObject" /> that represents the child accessible object corresponding to the specified index.</returns>
			// Token: 0x0600652C RID: 25900 RVA: 0x001785D0 File Offset: 0x001767D0
			public override AccessibleObject GetChild(int index)
			{
				if (this.owner.Columns.Count == 0)
				{
					return null;
				}
				if (AccessibilityImprovements.Level5 && index < 0)
				{
					return null;
				}
				if (index < 1 && this.owner.ColumnHeadersVisible)
				{
					return this.TopRowAccessibilityObject;
				}
				if (this.owner.ColumnHeadersVisible)
				{
					index--;
				}
				if (index < this.owner.Rows.GetRowCount(DataGridViewElementStates.Visible))
				{
					int num = this.owner.Rows.DisplayIndexToRowIndex(index);
					return this.owner.Rows[num].AccessibilityObject;
				}
				index -= this.owner.Rows.GetRowCount(DataGridViewElementStates.Visible);
				if (this.owner.horizScrollBar.Visible)
				{
					if (index == 0)
					{
						return this.owner.horizScrollBar.AccessibilityObject;
					}
					index--;
				}
				if (this.owner.vertScrollBar.Visible && index == 0)
				{
					return this.owner.vertScrollBar.AccessibilityObject;
				}
				return null;
			}

			/// <summary>Returns the number of child objects belonging to an accessible object.</summary>
			/// <returns>The number of child objects belonging to the accessible object.</returns>
			// Token: 0x0600652D RID: 25901 RVA: 0x001786D0 File Offset: 0x001768D0
			public override int GetChildCount()
			{
				if (this.owner.Columns.Count == 0)
				{
					return 0;
				}
				int num = this.owner.Rows.GetRowCount(DataGridViewElementStates.Visible);
				if (this.owner.ColumnHeadersVisible)
				{
					num++;
				}
				if (this.owner.horizScrollBar.Visible)
				{
					num++;
				}
				if (this.owner.vertScrollBar.Visible)
				{
					num++;
				}
				return num;
			}

			/// <summary>Returns the accessible object of the <see cref="T:System.Windows.Forms.DataGridViewCell" /> that has the keyboard focus.</summary>
			/// <returns>An <see cref="T:System.Windows.Forms.AccessibleObject" /> that specifies the <see cref="T:System.Windows.Forms.DataGridViewCell" /> that has the current focus, or <see langword="null" /> if the <see cref="T:System.Windows.Forms.DataGridView" /> does not have focus.</returns>
			// Token: 0x0600652E RID: 25902 RVA: 0x00178742 File Offset: 0x00176942
			public override AccessibleObject GetFocused()
			{
				if (this.owner.Focused && this.owner.CurrentCell != null)
				{
					return this.owner.CurrentCell.AccessibilityObject;
				}
				return null;
			}

			/// <summary>Returns an <see cref="T:System.Windows.Forms.AccessibleObject" /> that represents the selected cells in the <see cref="T:System.Windows.Forms.DataGridView" /> control.</summary>
			/// <returns>An <see cref="T:System.Windows.Forms.AccessibleObject" /> that represents the currently selected cells, or <see langword="null" /> if no cells are selected or if the object itself does not have focus.</returns>
			// Token: 0x0600652F RID: 25903 RVA: 0x00178770 File Offset: 0x00176970
			public override AccessibleObject GetSelected()
			{
				return this.SelectedCellsAccessibilityObject;
			}

			/// <summary>Retrieves the child object at the specified screen coordinates.</summary>
			/// <param name="x">The horizontal screen coordinate.</param>
			/// <param name="y">The vertical screen coordinate.</param>
			/// <returns>An <see cref="T:System.Windows.Forms.AccessibleObject" /> that represents an object at the given screen coordinates, or <see langword="null" /> if no object is at the specified location.</returns>
			// Token: 0x06006530 RID: 25904 RVA: 0x00178778 File Offset: 0x00176978
			public override AccessibleObject HitTest(int x, int y)
			{
				Point point = this.owner.PointToClient(new Point(x, y));
				DataGridView.HitTestInfo hitTestInfo = this.owner.HitTest(point.X, point.Y);
				switch (hitTestInfo.Type)
				{
				case DataGridViewHitTestType.Cell:
					return this.owner.Rows[hitTestInfo.RowIndex].Cells[hitTestInfo.ColumnIndex].AccessibilityObject;
				case DataGridViewHitTestType.ColumnHeader:
				{
					int num = this.owner.Columns.ColumnIndexToActualDisplayIndex(hitTestInfo.ColumnIndex, DataGridViewElementStates.Visible);
					if (this.owner.RowHeadersVisible)
					{
						return this.TopRowAccessibilityObject.GetChild(num + 1);
					}
					return this.TopRowAccessibilityObject.GetChild(num);
				}
				case DataGridViewHitTestType.RowHeader:
					return this.owner.Rows[hitTestInfo.RowIndex].AccessibilityObject;
				case DataGridViewHitTestType.TopLeftHeader:
					return this.owner.TopLeftHeaderCell.AccessibilityObject;
				case DataGridViewHitTestType.HorizontalScrollBar:
					return this.owner.HorizontalScrollBar.AccessibilityObject;
				case DataGridViewHitTestType.VerticalScrollBar:
					return this.owner.VerticalScrollBar.AccessibilityObject;
				default:
					return null;
				}
			}

			/// <summary>Navigates to another accessible object.</summary>
			/// <param name="navigationDirection">One of the <see cref="T:System.Windows.Forms.AccessibleNavigation" /> values.</param>
			/// <returns>An <see cref="T:System.Windows.Forms.AccessibleObject" /> that represents the object positioned at the specified <see cref="T:System.Windows.Forms.AccessibleNavigation" /> value.</returns>
			// Token: 0x06006531 RID: 25905 RVA: 0x0017889C File Offset: 0x00176A9C
			[SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]
			public override AccessibleObject Navigate(AccessibleNavigation navigationDirection)
			{
				if (navigationDirection == AccessibleNavigation.FirstChild)
				{
					return this.GetChild(0);
				}
				if (navigationDirection != AccessibleNavigation.LastChild)
				{
					return null;
				}
				return this.GetChild(this.GetChildCount() - 1);
			}

			// Token: 0x170015D5 RID: 5589
			// (get) Token: 0x06006532 RID: 25906 RVA: 0x001788C0 File Offset: 0x00176AC0
			internal override int[] RuntimeId
			{
				get
				{
					if (this.runtimeId == null)
					{
						this.runtimeId = new int[2];
						this.runtimeId[0] = 42;
						this.runtimeId[1] = this.GetHashCode();
					}
					return this.runtimeId;
				}
			}

			// Token: 0x06006533 RID: 25907 RVA: 0x001788F4 File Offset: 0x00176AF4
			internal override bool IsIAccessibleExSupported()
			{
				return AccessibilityImprovements.Level2 || base.IsIAccessibleExSupported();
			}

			// Token: 0x06006534 RID: 25908 RVA: 0x00178908 File Offset: 0x00176B08
			internal override object GetPropertyValue(int propertyID)
			{
				if (AccessibilityImprovements.Level3)
				{
					if (propertyID <= 30016)
					{
						switch (propertyID)
						{
						case 30003:
							return 50036;
						case 30004:
						case 30006:
						case 30007:
							break;
						case 30005:
							return this.Name;
						case 30008:
							if (AccessibilityImprovements.Level5)
							{
								return this.owner.Focused;
							}
							return false;
						case 30009:
							return this.owner.CanFocus;
						case 30010:
							return this.owner.Enabled;
						default:
							if (propertyID == 30016)
							{
								return true;
							}
							break;
						}
					}
					else if (propertyID != 30026)
					{
						if (propertyID == 30030 || propertyID == 30038)
						{
							return true;
						}
					}
					else
					{
						bool flag = false;
						for (int i = 0; i < this.ColumnCount; i++)
						{
							int num = (AccessibilityImprovements.Level5 ? this.owner.Columns.ActualDisplayIndexToColumnIndex(i, DataGridViewElementStates.Visible) : i);
							if (this.owner.IsSortable(this.owner.Columns[num]))
							{
								flag = true;
								break;
							}
						}
						if (flag)
						{
							switch (this.owner.SortOrder)
							{
							case SortOrder.None:
								return SR.GetString("NotSortedAccessibleStatus");
							case SortOrder.Ascending:
							{
								string text = "DataGridViewSortedAscendingAccessibleStatusFormat";
								object[] array = new object[1];
								int num2 = 0;
								DataGridViewColumn sortedColumn = this.owner.SortedColumn;
								array[num2] = ((sortedColumn != null) ? sortedColumn.HeaderText : null);
								return SR.GetString(text, array);
							}
							case SortOrder.Descending:
							{
								string text2 = "DataGridViewSortedDescendingAccessibleStatusFormat";
								object[] array2 = new object[1];
								int num3 = 0;
								DataGridViewColumn sortedColumn2 = this.owner.SortedColumn;
								array2[num3] = ((sortedColumn2 != null) ? sortedColumn2.HeaderText : null);
								return SR.GetString(text2, array2);
							}
							}
						}
						if (AccessibilityImprovements.Level5 && this.ColumnCount > 0 && this.RowCount > 0)
						{
							return SR.GetString("NotSortedAccessibleStatus");
						}
					}
				}
				if (propertyID == 30038)
				{
					return this.IsPatternSupported(10012);
				}
				if (propertyID == 30030)
				{
					return this.IsPatternSupported(10006);
				}
				return base.GetPropertyValue(propertyID);
			}

			// Token: 0x06006535 RID: 25909 RVA: 0x00178B15 File Offset: 0x00176D15
			internal override bool IsPatternSupported(int patternId)
			{
				return patternId == 10012 || patternId == 10006 || (AccessibilityImprovements.Level3 && patternId == 10018) || base.IsPatternSupported(patternId);
			}

			// Token: 0x06006536 RID: 25910 RVA: 0x00178B40 File Offset: 0x00176D40
			[SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]
			internal override UnsafeNativeMethods.IRawElementProviderSimple[] GetRowHeaders()
			{
				if (!this.owner.RowHeadersVisible)
				{
					return null;
				}
				UnsafeNativeMethods.IRawElementProviderSimple[] array = new UnsafeNativeMethods.IRawElementProviderSimple[this.RowCount];
				for (int i = 0; i < this.RowCount; i++)
				{
					int num = (AccessibilityImprovements.Level5 ? this.owner.Rows.DisplayIndexToRowIndex(i) : i);
					array[i] = this.owner.Rows[num].HeaderCell.AccessibilityObject;
				}
				return array;
			}

			// Token: 0x06006537 RID: 25911 RVA: 0x00178BB4 File Offset: 0x00176DB4
			[SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]
			internal override UnsafeNativeMethods.IRawElementProviderSimple[] GetColumnHeaders()
			{
				if (!this.owner.ColumnHeadersVisible)
				{
					return null;
				}
				UnsafeNativeMethods.IRawElementProviderSimple[] array = new UnsafeNativeMethods.IRawElementProviderSimple[this.ColumnCount];
				for (int i = 0; i < this.ColumnCount; i++)
				{
					int num = (AccessibilityImprovements.Level5 ? this.owner.Columns.ActualDisplayIndexToColumnIndex(i, DataGridViewElementStates.Visible) : i);
					array[i] = this.owner.Columns[num].HeaderCell.AccessibilityObject;
				}
				return array;
			}

			// Token: 0x170015D6 RID: 5590
			// (get) Token: 0x06006538 RID: 25912 RVA: 0x0001180C File Offset: 0x0000FA0C
			internal override UnsafeNativeMethods.RowOrColumnMajor RowOrColumnMajor
			{
				[SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]
				get
				{
					return UnsafeNativeMethods.RowOrColumnMajor.RowOrColumnMajor_RowMajor;
				}
			}

			// Token: 0x06006539 RID: 25913 RVA: 0x00178C2C File Offset: 0x00176E2C
			[SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]
			internal override UnsafeNativeMethods.IRawElementProviderSimple GetItem(int row, int column)
			{
				if (row >= 0 && row < this.RowCount && column >= 0 && column < this.ColumnCount)
				{
					if (AccessibilityImprovements.Level5)
					{
						row = this.owner.Rows.DisplayIndexToRowIndex(row);
						column = this.owner.Columns.ActualDisplayIndexToColumnIndex(column, DataGridViewElementStates.Visible);
					}
					return this.owner.Rows[row].Cells[column].AccessibilityObject;
				}
				return null;
			}

			// Token: 0x170015D7 RID: 5591
			// (get) Token: 0x0600653A RID: 25914 RVA: 0x00178CA5 File Offset: 0x00176EA5
			internal override int RowCount
			{
				[SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]
				get
				{
					if (!AccessibilityImprovements.Level5)
					{
						return this.owner.RowCount;
					}
					return this.owner.Rows.GetRowCount(DataGridViewElementStates.Visible);
				}
			}

			// Token: 0x170015D8 RID: 5592
			// (get) Token: 0x0600653B RID: 25915 RVA: 0x00178CCC File Offset: 0x00176ECC
			internal override int ColumnCount
			{
				[SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]
				get
				{
					if (!AccessibilityImprovements.Level5)
					{
						return this.owner.ColumnCount;
					}
					return this.owner.Columns.GetColumnCount(DataGridViewElementStates.Visible);
				}
			}

			// Token: 0x170015D9 RID: 5593
			// (get) Token: 0x0600653C RID: 25916 RVA: 0x00016039 File Offset: 0x00014239
			internal override Rectangle BoundingRectangle
			{
				get
				{
					return this.Bounds;
				}
			}

			// Token: 0x170015DA RID: 5594
			// (get) Token: 0x0600653D RID: 25917 RVA: 0x00178CF4 File Offset: 0x00176EF4
			internal override UnsafeNativeMethods.IRawElementProviderFragmentRoot FragmentRoot
			{
				get
				{
					ToolStripControlHost toolStripControlHost = base.Owner.ToolStripControlHost;
					ToolStrip toolStrip = ((toolStripControlHost != null) ? toolStripControlHost.Owner : null);
					if (toolStrip != null && toolStrip.IsHandleCreated)
					{
						return toolStrip.AccessibilityObject;
					}
					return this;
				}
			}

			// Token: 0x0600653E RID: 25918 RVA: 0x00178D2C File Offset: 0x00176F2C
			internal override UnsafeNativeMethods.IRawElementProviderFragment FragmentNavigate(UnsafeNativeMethods.NavigateDirection direction)
			{
				if (direction != UnsafeNativeMethods.NavigateDirection.FirstChild)
				{
					if (direction == UnsafeNativeMethods.NavigateDirection.LastChild)
					{
						int num = this.GetChildCount();
						if (num > 0)
						{
							int num2 = num - 1;
							return this.GetChild(num2);
						}
					}
				}
				else
				{
					int num = this.GetChildCount();
					if (num > 0)
					{
						return this.GetChild(0);
					}
				}
				if (base.Owner.ToolStripControlHost != null)
				{
					return base.FragmentNavigate(direction);
				}
				return null;
			}

			// Token: 0x0600653F RID: 25919 RVA: 0x00178D83 File Offset: 0x00176F83
			internal override void SetFocus()
			{
				if (this.owner.CanFocus)
				{
					this.owner.Focus();
				}
			}

			// Token: 0x06006540 RID: 25920 RVA: 0x00178D9E File Offset: 0x00176F9E
			internal override UnsafeNativeMethods.IRawElementProviderFragment ElementProviderFromPoint(double x, double y)
			{
				return this.HitTest((int)x, (int)y);
			}

			// Token: 0x06006541 RID: 25921 RVA: 0x000F1520 File Offset: 0x000EF720
			internal override UnsafeNativeMethods.IRawElementProviderFragment GetFocus()
			{
				return this.GetFocused();
			}

			// Token: 0x04003A02 RID: 14850
			private int[] runtimeId;

			// Token: 0x04003A03 RID: 14851
			private DataGridView owner;

			// Token: 0x04003A04 RID: 14852
			private DataGridView.DataGridViewTopRowAccessibleObject topRowAccessibilityObject;

			// Token: 0x04003A05 RID: 14853
			private DataGridView.DataGridViewSelectedCellsAccessibleObject selectedCellsAccessibilityObject;
		}

		// Token: 0x0200065A RID: 1626
		internal class DataGridViewEditingPanelAccessibleObject : Control.ControlAccessibleObject
		{
			// Token: 0x06006542 RID: 25922 RVA: 0x00178DAA File Offset: 0x00176FAA
			public DataGridViewEditingPanelAccessibleObject(DataGridView dataGridView, Panel panel)
				: base(panel)
			{
				this.dataGridView = dataGridView;
				this.panel = panel;
			}

			// Token: 0x170015DB RID: 5595
			// (get) Token: 0x06006543 RID: 25923 RVA: 0x00178DC1 File Offset: 0x00176FC1
			internal override Rectangle BoundingRectangle
			{
				get
				{
					return this.panel.AccessibilityObject.Bounds;
				}
			}

			// Token: 0x170015DC RID: 5596
			// (get) Token: 0x06006544 RID: 25924 RVA: 0x00178DD3 File Offset: 0x00176FD3
			internal override UnsafeNativeMethods.IRawElementProviderFragmentRoot FragmentRoot
			{
				get
				{
					return this.dataGridView.AccessibilityObject;
				}
			}

			// Token: 0x170015DD RID: 5597
			// (get) Token: 0x06006545 RID: 25925 RVA: 0x00178DE0 File Offset: 0x00176FE0
			internal override int[] RuntimeId
			{
				get
				{
					return this.panel.AccessibilityObject.RuntimeId;
				}
			}

			// Token: 0x06006546 RID: 25926 RVA: 0x00178DF4 File Offset: 0x00176FF4
			internal override UnsafeNativeMethods.IRawElementProviderFragment FragmentNavigate(UnsafeNativeMethods.NavigateDirection direction)
			{
				if (direction != UnsafeNativeMethods.NavigateDirection.Parent)
				{
					if (direction - UnsafeNativeMethods.NavigateDirection.FirstChild <= 1)
					{
						return this.dataGridView.EditingControlAccessibleObject;
					}
				}
				else
				{
					DataGridViewCell currentCell = this.dataGridView.CurrentCell;
					if (currentCell != null && this.dataGridView.IsCurrentCellInEditMode)
					{
						return currentCell.AccessibilityObject;
					}
				}
				return null;
			}

			// Token: 0x06006547 RID: 25927 RVA: 0x00178E3C File Offset: 0x0017703C
			internal override void SetFocus()
			{
				if (this.panel.CanFocus)
				{
					this.panel.Focus();
				}
			}

			// Token: 0x06006548 RID: 25928 RVA: 0x00178E57 File Offset: 0x00177057
			internal override bool IsPatternSupported(int patternId)
			{
				return patternId.Equals(10018);
			}

			// Token: 0x06006549 RID: 25929 RVA: 0x00178E68 File Offset: 0x00177068
			internal override object GetPropertyValue(int propertyId)
			{
				switch (propertyId)
				{
				case 30003:
					return 50033;
				case 30004:
				case 30006:
				case 30011:
				case 30012:
				case 30014:
				case 30015:
				case 30018:
				case 30020:
				case 30021:
					break;
				case 30005:
					return SR.GetString("DataGridView_AccEditingPanelAccName");
				case 30007:
					return this.panel.AccessibilityObject.KeyboardShortcut;
				case 30008:
					return this.dataGridView.CurrentCell != null;
				case 30009:
					return true;
				case 30010:
					return this.dataGridView.Enabled;
				case 30013:
					return string.Empty;
				case 30016:
				case 30017:
					return true;
				case 30019:
					return false;
				case 30022:
					return false;
				default:
					if (propertyId == 30090)
					{
						return true;
					}
					if (propertyId == 30107)
					{
						return SR.GetString("DataGridViewEditingPanelUiaProviderDescription");
					}
					break;
				}
				return base.GetPropertyValue(propertyId);
			}

			// Token: 0x04003A06 RID: 14854
			private DataGridView dataGridView;

			// Token: 0x04003A07 RID: 14855
			private Panel panel;
		}

		/// <summary>Represents a collection of controls contained on a <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
		// Token: 0x0200065B RID: 1627
		[ComVisible(false)]
		public class DataGridViewControlCollection : Control.ControlCollection
		{
			/// <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataGridView.DataGridViewControlCollection" /> class.</summary>
			/// <param name="owner">The <see cref="T:System.Windows.Forms.DataGridView" /> that owns the <see cref="T:System.Windows.Forms.DataGridView.DataGridViewControlCollection" />.</param>
			// Token: 0x0600654A RID: 25930 RVA: 0x00178F6D File Offset: 0x0017716D
			public DataGridViewControlCollection(DataGridView owner)
				: base(owner)
			{
				this.owner = owner;
			}

			/// <summary>Copies the contents of the <see cref="T:System.Windows.Forms.DataGridView.DataGridViewControlCollection" /> into a <see cref="T:System.Windows.Forms.Control" /> array, starting at the specified index of the target array.</summary>
			/// <param name="array">The one-dimensional <see cref="T:System.Windows.Forms.Control" /> array that is the destination of the elements copied from the current collection. The array must have zero-based indexing.</param>
			/// <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
			/// <exception cref="T:System.ArgumentNullException">
			///   <paramref name="array" /> is <see langword="null" />.</exception>
			/// <exception cref="T:System.ArgumentOutOfRangeException">
			///   <paramref name="index" /> is less than zero.</exception>
			/// <exception cref="T:System.ArgumentException">
			///   <paramref name="array" /> is multidimensional.  
			/// -or-  
			/// The number of elements in the source collection is greater than the available space from <paramref name="index" /> to the end of <paramref name="array" />.</exception>
			/// <exception cref="T:System.InvalidCastException">The type of the source element cannot be cast automatically to the type of <paramref name="array" />.</exception>
			// Token: 0x0600654B RID: 25931 RVA: 0x00178F7D File Offset: 0x0017717D
			public void CopyTo(Control[] array, int index)
			{
				base.CopyTo(array, index);
			}

			/// <summary>Inserts the specified <see cref="T:System.Windows.Forms.Control" /> into the <see cref="T:System.Windows.Forms.DataGridView.DataGridViewControlCollection" /> at the specified index.</summary>
			/// <param name="index">The zero-based index at which to insert <paramref name="value" />.</param>
			/// <param name="value">The <see cref="T:System.Windows.Forms.Control" /> to insert into the <see cref="T:System.Windows.Forms.DataGridView.DataGridViewControlCollection" />.</param>
			/// <exception cref="T:System.ArgumentOutOfRangeException">
			///   <paramref name="index" /> is less than zero or greater than or equal to the current number of controls in the <see cref="T:System.Windows.Forms.DataGridView.DataGridViewControlCollection" />.</exception>
			// Token: 0x0600654C RID: 25932 RVA: 0x00106EF5 File Offset: 0x001050F5
			public void Insert(int index, Control value)
			{
				((IList)this).Insert(index, value);
			}

			/// <summary>Removes the specified control from the <see cref="T:System.Windows.Forms.DataGridView.DataGridViewControlCollection" />.</summary>
			/// <param name="value">The <see cref="T:System.Windows.Forms.Control" /> to remove from the <see cref="T:System.Windows.Forms.DataGridView.DataGridViewControlCollection" />.</param>
			// Token: 0x0600654D RID: 25933 RVA: 0x00178F87 File Offset: 0x00177187
			public override void Remove(Control value)
			{
				if (value != this.owner.horizScrollBar && value != this.owner.vertScrollBar && value != this.owner.editingPanel)
				{
					base.Remove(value);
				}
			}

			// Token: 0x0600654E RID: 25934 RVA: 0x00178FBA File Offset: 0x001771BA
			internal void RemoveInternal(Control value)
			{
				base.Remove(value);
			}

			/// <summary>Removes all controls from the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
			// Token: 0x0600654F RID: 25935 RVA: 0x00178FC4 File Offset: 0x001771C4
			public override void Clear()
			{
				for (int i = 0; i < this.Count; i++)
				{
					if (this[i] != this.owner.horizScrollBar && this[i] != this.owner.vertScrollBar && this[i] != this.owner.editingPanel)
					{
						this.Remove(this[i]);
					}
				}
			}

			// Token: 0x04003A08 RID: 14856
			private DataGridView owner;
		}

		// Token: 0x0200065C RID: 1628
		internal class DataGridViewDataConnection
		{
			// Token: 0x06006550 RID: 25936 RVA: 0x0017902B File Offset: 0x0017722B
			public DataGridViewDataConnection(DataGridView owner)
			{
				this.owner = owner;
				this.dataConnectionState = new BitVector32(4);
			}

			// Token: 0x170015DE RID: 5598
			// (get) Token: 0x06006551 RID: 25937 RVA: 0x00179058 File Offset: 0x00177258
			public bool AllowAdd
			{
				get
				{
					return this.currencyManager != null && (this.currencyManager.List is IBindingList && this.currencyManager.AllowAdd) && ((IBindingList)this.currencyManager.List).SupportsChangeNotification;
				}
			}

			// Token: 0x170015DF RID: 5599
			// (get) Token: 0x06006552 RID: 25938 RVA: 0x001790A5 File Offset: 0x001772A5
			public bool AllowEdit
			{
				get
				{
					return this.currencyManager != null && this.currencyManager.AllowEdit;
				}
			}

			// Token: 0x170015E0 RID: 5600
			// (get) Token: 0x06006553 RID: 25939 RVA: 0x001790BC File Offset: 0x001772BC
			public bool AllowRemove
			{
				get
				{
					return this.currencyManager != null && (this.currencyManager.List is IBindingList && this.currencyManager.AllowRemove) && ((IBindingList)this.currencyManager.List).SupportsChangeNotification;
				}
			}

			// Token: 0x170015E1 RID: 5601
			// (get) Token: 0x06006554 RID: 25940 RVA: 0x00179109 File Offset: 0x00177309
			public bool CancellingRowEdit
			{
				get
				{
					return this.dataConnectionState[64];
				}
			}

			// Token: 0x170015E2 RID: 5602
			// (get) Token: 0x06006555 RID: 25941 RVA: 0x00179118 File Offset: 0x00177318
			public CurrencyManager CurrencyManager
			{
				get
				{
					return this.currencyManager;
				}
			}

			// Token: 0x170015E3 RID: 5603
			// (get) Token: 0x06006556 RID: 25942 RVA: 0x00179120 File Offset: 0x00177320
			public string DataMember
			{
				get
				{
					return this.dataMember;
				}
			}

			// Token: 0x170015E4 RID: 5604
			// (get) Token: 0x06006557 RID: 25943 RVA: 0x00179128 File Offset: 0x00177328
			public object DataSource
			{
				get
				{
					return this.dataSource;
				}
			}

			// Token: 0x170015E5 RID: 5605
			// (get) Token: 0x06006558 RID: 25944 RVA: 0x00179130 File Offset: 0x00177330
			// (set) Token: 0x06006559 RID: 25945 RVA: 0x0017913F File Offset: 0x0017733F
			public bool DoNotChangePositionInTheCurrencyManager
			{
				get
				{
					return this.dataConnectionState[16];
				}
				set
				{
					this.dataConnectionState[16] = value;
				}
			}

			// Token: 0x170015E6 RID: 5606
			// (get) Token: 0x0600655A RID: 25946 RVA: 0x0017914F File Offset: 0x0017734F
			public bool InterestedInRowEvents
			{
				get
				{
					return this.dataConnectionState[32];
				}
			}

			// Token: 0x170015E7 RID: 5607
			// (get) Token: 0x0600655B RID: 25947 RVA: 0x0017915E File Offset: 0x0017735E
			public IList List
			{
				get
				{
					if (this.currencyManager != null)
					{
						return this.currencyManager.List;
					}
					return null;
				}
			}

			// Token: 0x170015E8 RID: 5608
			// (get) Token: 0x0600655C RID: 25948 RVA: 0x00179175 File Offset: 0x00177375
			public bool ListWasReset
			{
				get
				{
					return this.dataConnectionState[1024];
				}
			}

			// Token: 0x170015E9 RID: 5609
			// (get) Token: 0x0600655D RID: 25949 RVA: 0x00179187 File Offset: 0x00177387
			public bool PositionChangingOutsideDataGridView
			{
				get
				{
					return !this.dataConnectionState[8] && this.dataConnectionState[2048];
				}
			}

			// Token: 0x170015EA RID: 5610
			// (get) Token: 0x0600655E RID: 25950 RVA: 0x001791A9 File Offset: 0x001773A9
			public bool ProcessingListChangedEvent
			{
				get
				{
					return this.dataConnectionState[131072];
				}
			}

			// Token: 0x170015EB RID: 5611
			// (get) Token: 0x0600655F RID: 25951 RVA: 0x001791BB File Offset: 0x001773BB
			public bool ProcessingMetaDataChanges
			{
				get
				{
					return this.dataConnectionState[2];
				}
			}

			// Token: 0x170015EC RID: 5612
			// (get) Token: 0x06006560 RID: 25952 RVA: 0x001791C9 File Offset: 0x001773C9
			public bool RestoreRow
			{
				get
				{
					return this.dataConnectionState[128];
				}
			}

			// Token: 0x06006561 RID: 25953 RVA: 0x001791DC File Offset: 0x001773DC
			public void AddNew()
			{
				if (this.currencyManager != null)
				{
					if (!this.currencyManager.ShouldBind)
					{
						return;
					}
					this.dataConnectionState[4] = false;
					this.dataConnectionState[32768] = true;
					try
					{
						this.currencyManager.EndCurrentEdit();
					}
					finally
					{
						this.dataConnectionState[32768] = false;
					}
					this.dataConnectionState[512] = true;
					try
					{
						this.currencyManager.AddNew();
					}
					finally
					{
						this.dataConnectionState[512] = false;
					}
				}
			}

			// Token: 0x06006562 RID: 25954 RVA: 0x00179288 File Offset: 0x00177488
			public void ApplySortingInformationFromBackEnd()
			{
				if (this.currencyManager == null)
				{
					return;
				}
				PropertyDescriptor propertyDescriptor = null;
				SortOrder sortOrder;
				this.GetSortingInformationFromBackend(out propertyDescriptor, out sortOrder);
				if (propertyDescriptor == null)
				{
					for (int i = 0; i < this.owner.Columns.Count; i++)
					{
						if (this.owner.Columns[i].IsDataBound)
						{
							this.owner.Columns[i].HeaderCell.SortGlyphDirection = SortOrder.None;
						}
					}
					this.owner.sortedColumn = null;
					this.owner.sortOrder = SortOrder.None;
					return;
				}
				bool flag = false;
				for (int j = 0; j < this.owner.Columns.Count; j++)
				{
					DataGridViewColumn dataGridViewColumn = this.owner.Columns[j];
					if (dataGridViewColumn.IsDataBound && dataGridViewColumn.SortMode != DataGridViewColumnSortMode.NotSortable)
					{
						if (string.Equals(dataGridViewColumn.DataPropertyName, propertyDescriptor.Name, StringComparison.OrdinalIgnoreCase))
						{
							if (!flag && !this.owner.InSortOperation)
							{
								this.owner.sortedColumn = dataGridViewColumn;
								this.owner.sortOrder = sortOrder;
								flag = true;
							}
							dataGridViewColumn.HeaderCell.SortGlyphDirection = sortOrder;
						}
						else
						{
							dataGridViewColumn.HeaderCell.SortGlyphDirection = SortOrder.None;
						}
					}
				}
			}

			// Token: 0x06006563 RID: 25955 RVA: 0x001793BE File Offset: 0x001775BE
			public TypeConverter BoundColumnConverter(int boundColumnIndex)
			{
				return this.props[boundColumnIndex].Converter;
			}

			// Token: 0x06006564 RID: 25956 RVA: 0x001793D4 File Offset: 0x001775D4
			public int BoundColumnIndex(string dataPropertyName)
			{
				if (this.props == null)
				{
					return -1;
				}
				int num = -1;
				for (int i = 0; i < this.props.Count; i++)
				{
					if (string.Compare(this.props[i].Name, dataPropertyName, true, CultureInfo.InvariantCulture) == 0)
					{
						num = i;
						break;
					}
				}
				return num;
			}

			// Token: 0x06006565 RID: 25957 RVA: 0x00179428 File Offset: 0x00177628
			public SortOrder BoundColumnSortOrder(int boundColumnIndex)
			{
				IBindingList bindingList = ((this.currencyManager != null) ? (this.currencyManager.List as IBindingList) : null);
				IBindingListView bindingListView = ((bindingList != null) ? (bindingList as IBindingListView) : null);
				if (bindingList == null || !bindingList.SupportsSorting || !bindingList.IsSorted)
				{
					return SortOrder.None;
				}
				PropertyDescriptor propertyDescriptor;
				SortOrder sortOrder;
				this.GetSortingInformationFromBackend(out propertyDescriptor, out sortOrder);
				if (sortOrder == SortOrder.None)
				{
					return SortOrder.None;
				}
				if (string.Compare(this.props[boundColumnIndex].Name, propertyDescriptor.Name, true, CultureInfo.InvariantCulture) == 0)
				{
					return sortOrder;
				}
				return SortOrder.None;
			}

			// Token: 0x06006566 RID: 25958 RVA: 0x001794A9 File Offset: 0x001776A9
			public Type BoundColumnValueType(int boundColumnIndex)
			{
				return this.props[boundColumnIndex].PropertyType;
			}

			// Token: 0x06006567 RID: 25959 RVA: 0x001794BC File Offset: 0x001776BC
			private void currencyManager_ListChanged(object sender, ListChangedEventArgs e)
			{
				this.dataConnectionState[131072] = true;
				try
				{
					this.ProcessListChanged(e);
				}
				finally
				{
					this.dataConnectionState[131072] = false;
				}
				this.owner.OnDataBindingComplete(e.ListChangedType);
				this.lastListCount = this.currencyManager.Count;
			}

			// Token: 0x06006568 RID: 25960 RVA: 0x00179528 File Offset: 0x00177728
			private void ProcessListChanged(ListChangedEventArgs e)
			{
				if (e.ListChangedType == ListChangedType.PropertyDescriptorAdded || e.ListChangedType == ListChangedType.PropertyDescriptorDeleted || e.ListChangedType == ListChangedType.PropertyDescriptorChanged)
				{
					this.dataConnectionState[2] = true;
					try
					{
						this.DataSourceMetaDataChanged();
					}
					finally
					{
						this.dataConnectionState[2] = false;
					}
					return;
				}
				if (this.dataConnectionState[65536] != this.owner.AllowUserToAddRowsInternal)
				{
					this.dataConnectionState[1024] = true;
					try
					{
						this.owner.RefreshRows(!this.owner.InSortOperation);
						this.owner.PushAllowUserToAddRows();
					}
					finally
					{
						this.ResetDataConnectionState();
					}
					return;
				}
				if (!this.dataConnectionState[4] && this.owner.newRowIndex == e.NewIndex)
				{
					if (e.ListChangedType != ListChangedType.ItemAdded)
					{
						if (e.ListChangedType == ListChangedType.ItemDeleted)
						{
							if (this.dataConnectionState[64])
							{
								this.owner.PopulateNewRowWithDefaultValues();
								return;
							}
							if (this.dataConnectionState[32768] || this.dataConnectionState[512])
							{
								this.dataConnectionState[1024] = true;
								try
								{
									this.owner.RefreshRows(!this.owner.InSortOperation);
									this.owner.PushAllowUserToAddRows();
									return;
								}
								finally
								{
									this.dataConnectionState[1024] = false;
								}
							}
							if (this.dataConnectionState[4096] && this.currencyManager.List.Count == 0)
							{
								this.AddNew();
							}
						}
						return;
					}
					if (this.dataConnectionState[512])
					{
						return;
					}
					if (this.dataConnectionState[256])
					{
						return;
					}
					if (this.owner.Columns.Count > 0)
					{
						do
						{
							this.owner.newRowIndex = -1;
							this.owner.AddNewRow(false);
						}
						while (this.DataBoundRowsCount() < this.currencyManager.Count);
					}
					this.dataConnectionState[4] = true;
					this.MatchCurrencyManagerPosition(true, true);
					return;
				}
				else
				{
					if (e.ListChangedType == ListChangedType.ItemAdded && this.currencyManager.List.Count == (this.owner.AllowUserToAddRowsInternal ? (this.owner.Rows.Count - 1) : this.owner.Rows.Count))
					{
						if (this.dataConnectionState[4096] && this.dataConnectionState[8192])
						{
							this.dataConnectionState[16384] = true;
						}
						return;
					}
					if (e.ListChangedType == ListChangedType.ItemDeleted)
					{
						if (this.dataConnectionState[4096] && this.dataConnectionState[16384] && this.dataConnectionState[8192])
						{
							this.dataConnectionState[16384] = false;
						}
						else
						{
							if (!this.dataConnectionState[4] && this.dataConnectionState[32768])
							{
								this.dataConnectionState[1024] = true;
								try
								{
									this.owner.RefreshRows(!this.owner.InSortOperation);
									this.owner.PushAllowUserToAddRows();
								}
								finally
								{
									this.dataConnectionState[1024] = false;
								}
								return;
							}
							if (this.currencyManager.List.Count == this.DataBoundRowsCount())
							{
								return;
							}
						}
					}
					this.dataConnectionState[16] = true;
					try
					{
						switch (e.ListChangedType)
						{
						case ListChangedType.Reset:
						{
							this.dataConnectionState[1024] = true;
							bool visible = this.owner.Visible;
							if (visible)
							{
								this.owner.BeginUpdateInternal();
							}
							try
							{
								this.owner.RefreshRows(!this.owner.InSortOperation);
								this.owner.PushAllowUserToAddRows();
								this.ApplySortingInformationFromBackEnd();
								goto IL_5B5;
							}
							finally
							{
								this.ResetDataConnectionState();
								if (visible)
								{
									this.owner.EndUpdateInternal(false);
									this.owner.Invalidate(true);
								}
							}
							break;
						}
						case ListChangedType.ItemAdded:
							break;
						case ListChangedType.ItemDeleted:
							this.owner.Rows.RemoveAtInternal(e.NewIndex, true);
							this.dataConnectionState[8192] = false;
							goto IL_5B5;
						case ListChangedType.ItemMoved:
						{
							int num = Math.Min(e.OldIndex, e.NewIndex);
							int num2 = Math.Max(e.OldIndex, e.NewIndex);
							this.owner.InvalidateRows(num, num2);
							goto IL_5B5;
						}
						case ListChangedType.ItemChanged:
						{
							string text = null;
							if (e.PropertyDescriptor != null)
							{
								text = e.PropertyDescriptor.Name;
							}
							for (int i = 0; i < this.owner.Columns.Count; i++)
							{
								DataGridViewColumn dataGridViewColumn = this.owner.Columns[i];
								if (dataGridViewColumn.Visible && dataGridViewColumn.IsDataBound)
								{
									if (!string.IsNullOrEmpty(text))
									{
										if (string.Compare(dataGridViewColumn.DataPropertyName, text, true, CultureInfo.InvariantCulture) == 0)
										{
											this.owner.OnCellCommonChange(i, e.NewIndex);
										}
									}
									else
									{
										this.owner.OnCellCommonChange(i, e.NewIndex);
									}
								}
							}
							this.owner.InvalidateCell(-1, e.NewIndex);
							if (this.owner.CurrentCellAddress.Y == e.NewIndex && this.owner.IsCurrentCellInEditMode)
							{
								this.owner.RefreshEdit();
								goto IL_5B5;
							}
							goto IL_5B5;
						}
						default:
							goto IL_5B5;
						}
						if (this.owner.NewRowIndex != -1 && e.NewIndex == this.owner.Rows.Count)
						{
							throw new InvalidOperationException();
						}
						this.owner.Rows.InsertInternal(e.NewIndex, this.owner.RowTemplateClone, true);
						IL_5B5:
						if (this.owner.Rows.Count > 0 && !this.dataConnectionState[8] && !this.owner.InSortOperation)
						{
							this.MatchCurrencyManagerPosition(false, e.ListChangedType == ListChangedType.Reset);
						}
					}
					finally
					{
						this.dataConnectionState[16] = false;
					}
					return;
				}
			}

			// Token: 0x06006569 RID: 25961 RVA: 0x00179BD0 File Offset: 0x00177DD0
			private void currencyManager_PositionChanged(object sender, EventArgs e)
			{
				if (this.owner.Columns.Count == 0)
				{
					return;
				}
				if (this.owner.Rows.Count == (this.owner.AllowUserToAddRowsInternal ? 1 : 0))
				{
					return;
				}
				if (this.dataConnectionState[8])
				{
					return;
				}
				if (this.owner.AllowUserToAddRowsInternal && this.dataConnectionState[4] && !this.dataConnectionState[512] && this.currencyManager.Position > -1 && this.currencyManager.Position == this.owner.NewRowIndex && this.owner.CurrentCellAddress.Y != this.owner.NewRowIndex && this.currencyManager.Count == this.DataBoundRowsCount() + 1)
				{
					return;
				}
				this.dataConnectionState[2048] = true;
				try
				{
					if (!this.owner.InSortOperation)
					{
						bool flag = true;
						if (this.dataConnectionState[256])
						{
							IBindingList bindingList = this.currencyManager.List as IBindingList;
							if (bindingList != null && bindingList.SupportsSorting && bindingList.IsSorted)
							{
								flag = false;
							}
						}
						bool flag2 = this.dataConnectionState[64] && !this.dataConnectionState[4];
						flag2 |= this.lastListCount == -1 || this.lastListCount == this.currencyManager.Count;
						this.MatchCurrencyManagerPosition(flag, flag2);
					}
				}
				finally
				{
					this.dataConnectionState[2048] = false;
				}
			}

			// Token: 0x0600656A RID: 25962 RVA: 0x00179D78 File Offset: 0x00177F78
			private int DataBoundRowsCount()
			{
				int num = this.owner.Rows.Count;
				if (this.owner.AllowUserToAddRowsInternal && this.owner.Rows.Count > 0 && (this.owner.CurrentCellAddress.Y != this.owner.NewRowIndex || this.owner.IsCurrentRowDirty))
				{
					num--;
				}
				return num;
			}

			// Token: 0x0600656B RID: 25963 RVA: 0x00179DE8 File Offset: 0x00177FE8
			private void DataSource_Initialized(object sender, EventArgs e)
			{
				ISupportInitializeNotification supportInitializeNotification = this.dataSource as ISupportInitializeNotification;
				if (supportInitializeNotification != null)
				{
					supportInitializeNotification.Initialized -= this.DataSource_Initialized;
				}
				this.dataConnectionState[262144] = false;
				this.SetDataConnection(this.dataSource, this.dataMember);
				this.owner.RefreshColumnsAndRows();
				this.owner.OnDataBindingComplete(ListChangedType.Reset);
			}

			// Token: 0x0600656C RID: 25964 RVA: 0x00179E50 File Offset: 0x00178050
			private void DataSourceMetaDataChanged()
			{
				this.props = this.currencyManager.GetItemProperties();
				this.owner.RefreshColumnsAndRows();
			}

			// Token: 0x0600656D RID: 25965 RVA: 0x00179E70 File Offset: 0x00178070
			public void DeleteRow(int rowIndex)
			{
				this.dataConnectionState[8] = true;
				try
				{
					if (!this.dataConnectionState[4])
					{
						bool flag;
						if (this.owner.newRowIndex == this.currencyManager.List.Count)
						{
							flag = rowIndex == this.owner.newRowIndex - 1;
						}
						else
						{
							flag = rowIndex == this.owner.newRowIndex;
						}
						if (flag)
						{
							this.CancelRowEdit(false, true);
							return;
						}
						this.dataConnectionState[4096] = true;
						this.dataConnectionState[8192] = true;
						try
						{
							this.currencyManager.RemoveAt(rowIndex);
							return;
						}
						finally
						{
							this.dataConnectionState[4096] = false;
							this.dataConnectionState[8192] = false;
						}
					}
					this.dataConnectionState[4096] = true;
					this.dataConnectionState[8192] = true;
					try
					{
						this.currencyManager.RemoveAt(rowIndex);
					}
					finally
					{
						this.dataConnectionState[4096] = false;
						this.dataConnectionState[8192] = false;
					}
				}
				finally
				{
					this.dataConnectionState[8] = false;
				}
			}

			// Token: 0x0600656E RID: 25966 RVA: 0x00179FF0 File Offset: 0x001781F0
			public bool DataFieldIsReadOnly(int boundColumnIndex)
			{
				return this.props != null && this.props[boundColumnIndex].IsReadOnly;
			}

			// Token: 0x0600656F RID: 25967 RVA: 0x0017A00D File Offset: 0x0017820D
			public void Dispose()
			{
				this.UnWireEvents();
				this.currencyManager = null;
			}

			// Token: 0x06006570 RID: 25968 RVA: 0x0017A01C File Offset: 0x0017821C
			private static DataGridViewColumn GetDataGridViewColumnFromType(Type type)
			{
				TypeConverter converter = TypeDescriptor.GetConverter(typeof(Image));
				DataGridViewColumn dataGridViewColumn;
				if (type.Equals(typeof(bool)) || type.Equals(typeof(CheckState)))
				{
					dataGridViewColumn = new DataGridViewCheckBoxColumn(type.Equals(typeof(CheckState)));
				}
				else if (typeof(Image).IsAssignableFrom(type) || converter.CanConvertFrom(type))
				{
					dataGridViewColumn = new DataGridViewImageColumn();
				}
				else
				{
					dataGridViewColumn = new DataGridViewTextBoxColumn();
				}
				return dataGridViewColumn;
			}

			// Token: 0x06006571 RID: 25969 RVA: 0x0017A0A0 File Offset: 0x001782A0
			public DataGridViewColumn[] GetCollectionOfBoundDataGridViewColumns()
			{
				if (this.props == null)
				{
					return null;
				}
				ArrayList arrayList = new ArrayList();
				int i = 0;
				while (i < this.props.Count)
				{
					if (!typeof(IList).IsAssignableFrom(this.props[i].PropertyType))
					{
						goto IL_67;
					}
					TypeConverter converter = TypeDescriptor.GetConverter(typeof(Image));
					if (converter.CanConvertFrom(this.props[i].PropertyType))
					{
						goto IL_67;
					}
					IL_160:
					i++;
					continue;
					IL_67:
					DataGridViewColumn dataGridViewColumnFromType = DataGridView.DataGridViewDataConnection.GetDataGridViewColumnFromType(this.props[i].PropertyType);
					dataGridViewColumnFromType.IsDataBoundInternal = true;
					dataGridViewColumnFromType.BoundColumnIndex = i;
					dataGridViewColumnFromType.DataPropertyName = this.props[i].Name;
					dataGridViewColumnFromType.Name = this.props[i].Name;
					dataGridViewColumnFromType.BoundColumnConverter = this.props[i].Converter;
					dataGridViewColumnFromType.HeaderText = ((!string.IsNullOrEmpty(this.props[i].DisplayName)) ? this.props[i].DisplayName : this.props[i].Name);
					dataGridViewColumnFromType.ValueType = this.props[i].PropertyType;
					dataGridViewColumnFromType.IsBrowsableInternal = this.props[i].IsBrowsable;
					dataGridViewColumnFromType.ReadOnly = this.props[i].IsReadOnly;
					arrayList.Add(dataGridViewColumnFromType);
					goto IL_160;
				}
				DataGridViewColumn[] array = new DataGridViewColumn[arrayList.Count];
				arrayList.CopyTo(array);
				return array;
			}

			// Token: 0x06006572 RID: 25970 RVA: 0x0017A238 File Offset: 0x00178438
			private void GetSortingInformationFromBackend(out PropertyDescriptor sortProperty, out SortOrder sortOrder)
			{
				IBindingList bindingList = ((this.currencyManager != null) ? (this.currencyManager.List as IBindingList) : null);
				IBindingListView bindingListView = ((bindingList != null) ? (bindingList as IBindingListView) : null);
				if (bindingList == null || !bindingList.SupportsSorting || !bindingList.IsSorted)
				{
					sortOrder = SortOrder.None;
					sortProperty = null;
					return;
				}
				if (bindingList.SortProperty != null)
				{
					sortProperty = bindingList.SortProperty;
					sortOrder = ((bindingList.SortDirection == ListSortDirection.Ascending) ? SortOrder.Ascending : SortOrder.Descending);
					return;
				}
				if (bindingListView == null)
				{
					sortProperty = null;
					sortOrder = SortOrder.None;
					return;
				}
				ListSortDescriptionCollection sortDescriptions = bindingListView.SortDescriptions;
				if (sortDescriptions != null && sortDescriptions.Count > 0 && sortDescriptions[0].PropertyDescriptor != null)
				{
					sortProperty = sortDescriptions[0].PropertyDescriptor;
					sortOrder = ((sortDescriptions[0].SortDirection == ListSortDirection.Ascending) ? SortOrder.Ascending : SortOrder.Descending);
					return;
				}
				sortProperty = null;
				sortOrder = SortOrder.None;
			}

			// Token: 0x06006573 RID: 25971 RVA: 0x0017A2FB File Offset: 0x001784FB
			public void ResetCachedAllowUserToAddRowsInternal()
			{
				this.dataConnectionState[65536] = this.owner.AllowUserToAddRowsInternal;
			}

			// Token: 0x06006574 RID: 25972 RVA: 0x0017A318 File Offset: 0x00178518
			private void ResetDataConnectionState()
			{
				this.dataConnectionState = new BitVector32(4);
				if (this.currencyManager != null)
				{
					this.dataConnectionState[32] = true;
				}
				this.ResetCachedAllowUserToAddRowsInternal();
			}

			// Token: 0x06006575 RID: 25973 RVA: 0x0017A344 File Offset: 0x00178544
			public void SetDataConnection(object dataSource, string dataMember)
			{
				if (this.dataConnectionState[1])
				{
					return;
				}
				this.ResetDataConnectionState();
				if (dataMember == null)
				{
					dataMember = string.Empty;
				}
				ISupportInitializeNotification supportInitializeNotification = this.dataSource as ISupportInitializeNotification;
				if (supportInitializeNotification != null && this.dataConnectionState[262144])
				{
					supportInitializeNotification.Initialized -= this.DataSource_Initialized;
					this.dataConnectionState[262144] = false;
				}
				this.dataSource = dataSource;
				this.dataMember = dataMember;
				if (this.owner.BindingContext == null)
				{
					return;
				}
				this.dataConnectionState[1] = true;
				try
				{
					this.UnWireEvents();
					if (this.dataSource != null && this.owner.BindingContext != null && this.dataSource != Convert.DBNull)
					{
						supportInitializeNotification = this.dataSource as ISupportInitializeNotification;
						if (supportInitializeNotification != null && !supportInitializeNotification.IsInitialized)
						{
							if (!this.dataConnectionState[262144])
							{
								supportInitializeNotification.Initialized += this.DataSource_Initialized;
								this.dataConnectionState[262144] = true;
							}
							this.currencyManager = null;
						}
						else
						{
							this.currencyManager = this.owner.BindingContext[this.dataSource, this.dataMember] as CurrencyManager;
						}
					}
					else
					{
						this.currencyManager = null;
					}
					this.WireEvents();
					if (this.currencyManager != null)
					{
						this.props = this.currencyManager.GetItemProperties();
					}
					else
					{
						this.props = null;
					}
				}
				finally
				{
					this.dataConnectionState[1] = false;
				}
				this.ResetCachedAllowUserToAddRowsInternal();
				if (this.currencyManager != null)
				{
					this.lastListCount = this.currencyManager.Count;
					return;
				}
				this.lastListCount = -1;
			}

			// Token: 0x06006576 RID: 25974 RVA: 0x0017A500 File Offset: 0x00178700
			public string GetError(int rowIndex)
			{
				IDataErrorInfo dataErrorInfo = null;
				try
				{
					dataErrorInfo = this.currencyManager[rowIndex] as IDataErrorInfo;
				}
				catch (Exception ex)
				{
					if (ClientUtils.IsCriticalException(ex) && !(ex is IndexOutOfRangeException))
					{
						throw;
					}
					DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = new DataGridViewDataErrorEventArgs(ex, -1, rowIndex, DataGridViewDataErrorContexts.Display);
					this.owner.OnDataErrorInternal(dataGridViewDataErrorEventArgs);
					if (dataGridViewDataErrorEventArgs.ThrowException)
					{
						throw dataGridViewDataErrorEventArgs.Exception;
					}
				}
				if (dataErrorInfo != null)
				{
					return dataErrorInfo.Error;
				}
				return string.Empty;
			}

			// Token: 0x06006577 RID: 25975 RVA: 0x0017A57C File Offset: 0x0017877C
			public string GetError(int boundColumnIndex, int columnIndex, int rowIndex)
			{
				IDataErrorInfo dataErrorInfo = null;
				try
				{
					dataErrorInfo = this.currencyManager[rowIndex] as IDataErrorInfo;
				}
				catch (Exception ex)
				{
					if (ClientUtils.IsCriticalException(ex) && !(ex is IndexOutOfRangeException))
					{
						throw;
					}
					DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = new DataGridViewDataErrorEventArgs(ex, columnIndex, rowIndex, DataGridViewDataErrorContexts.Display);
					this.owner.OnDataErrorInternal(dataGridViewDataErrorEventArgs);
					if (dataGridViewDataErrorEventArgs.ThrowException)
					{
						throw dataGridViewDataErrorEventArgs.Exception;
					}
				}
				if (dataErrorInfo != null)
				{
					return dataErrorInfo[this.props[boundColumnIndex].Name];
				}
				return string.Empty;
			}

			// Token: 0x06006578 RID: 25976 RVA: 0x0017A60C File Offset: 0x0017880C
			public object GetValue(int boundColumnIndex, int columnIndex, int rowIndex)
			{
				object obj = null;
				try
				{
					obj = this.props[boundColumnIndex].GetValue(this.currencyManager[rowIndex]);
				}
				catch (Exception ex)
				{
					if (ClientUtils.IsCriticalException(ex) && !(ex is IndexOutOfRangeException))
					{
						throw;
					}
					DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = new DataGridViewDataErrorEventArgs(ex, columnIndex, rowIndex, DataGridViewDataErrorContexts.Display);
					this.owner.OnDataErrorInternal(dataGridViewDataErrorEventArgs);
					if (dataGridViewDataErrorEventArgs.ThrowException)
					{
						throw dataGridViewDataErrorEventArgs.Exception;
					}
				}
				return obj;
			}

			// Token: 0x06006579 RID: 25977 RVA: 0x0017A688 File Offset: 0x00178888
			public void MatchCurrencyManagerPosition(bool scrollIntoView, bool clearSelection)
			{
				if (this.owner.Columns.Count == 0)
				{
					return;
				}
				int num = ((this.owner.CurrentCellAddress.X == -1) ? this.owner.FirstDisplayedColumnIndex : this.owner.CurrentCellAddress.X);
				if (num == -1)
				{
					DataGridViewColumn firstColumn = this.owner.Columns.GetFirstColumn(DataGridViewElementStates.None);
					firstColumn.Visible = true;
					num = firstColumn.Index;
				}
				int position = this.currencyManager.Position;
				if (position == -1)
				{
					if (!this.owner.SetCurrentCellAddressCore(-1, -1, false, false, false))
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_CellChangeCannotBeCommittedOrAborted"));
					}
				}
				else if (position < this.owner.Rows.Count)
				{
					if ((this.owner.Rows.GetRowState(position) & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
					{
						this.owner.Rows[position].Visible = true;
					}
					if (position == this.owner.CurrentCellAddress.Y && num == this.owner.CurrentCellAddress.X)
					{
						return;
					}
					if ((scrollIntoView && !this.owner.ScrollIntoView(num, position, true)) || (num < this.owner.Columns.Count && position < this.owner.Rows.Count && !this.owner.SetAndSelectCurrentCellAddress(num, position, true, false, false, clearSelection, false)))
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_CellChangeCannotBeCommittedOrAborted"));
					}
				}
			}

			// Token: 0x0600657A RID: 25978 RVA: 0x0017A808 File Offset: 0x00178A08
			public void CancelRowEdit(bool restoreRow, bool addNewFinished)
			{
				this.dataConnectionState[64] = true;
				this.dataConnectionState[128] = restoreRow;
				try
				{
					object obj = null;
					if (this.currencyManager.Position >= 0 && this.currencyManager.Position < this.currencyManager.List.Count)
					{
						obj = this.currencyManager.Current;
					}
					this.currencyManager.CancelCurrentEdit();
					IEditableObject editableObject = null;
					if (this.currencyManager.Position >= 0 && this.currencyManager.Position < this.currencyManager.List.Count)
					{
						editableObject = this.currencyManager.Current as IEditableObject;
					}
					if (editableObject != null && obj == editableObject)
					{
						editableObject.BeginEdit();
					}
				}
				finally
				{
					this.dataConnectionState[64] = false;
				}
				if (addNewFinished)
				{
					this.dataConnectionState[4] = true;
				}
			}

			// Token: 0x0600657B RID: 25979 RVA: 0x0017A8F4 File Offset: 0x00178AF4
			internal void OnNewRowNeeded()
			{
				this.dataConnectionState[8] = true;
				try
				{
					this.AddNew();
				}
				finally
				{
					this.dataConnectionState[8] = false;
				}
			}

			// Token: 0x0600657C RID: 25980 RVA: 0x0017A934 File Offset: 0x00178B34
			internal void OnRowEnter(DataGridViewCellEventArgs e)
			{
				if (this.dataConnectionState[2])
				{
					return;
				}
				if (!this.currencyManager.ShouldBind)
				{
					return;
				}
				this.dataConnectionState[8] = true;
				try
				{
					if (e.RowIndex != this.owner.NewRowIndex && !this.dataConnectionState[16] && this.currencyManager.Position != e.RowIndex)
					{
						try
						{
							this.currencyManager.Position = e.RowIndex;
						}
						catch (Exception ex)
						{
							if (ClientUtils.IsCriticalException(ex))
							{
								throw;
							}
							DataGridViewCellCancelEventArgs dataGridViewCellCancelEventArgs = new DataGridViewCellCancelEventArgs(e.ColumnIndex, e.RowIndex);
							this.ProcessException(ex, dataGridViewCellCancelEventArgs, false);
						}
						IEditableObject editableObject = this.currencyManager.Current as IEditableObject;
						if (editableObject != null)
						{
							editableObject.BeginEdit();
						}
					}
				}
				finally
				{
					this.dataConnectionState[8] = false;
				}
			}

			// Token: 0x0600657D RID: 25981 RVA: 0x0017AA24 File Offset: 0x00178C24
			internal void OnRowValidating(DataGridViewCellCancelEventArgs e)
			{
				if (!this.currencyManager.ShouldBind)
				{
					return;
				}
				if (!this.dataConnectionState[4] && !this.owner.IsCurrentRowDirty)
				{
					if (this.dataConnectionState[64])
					{
						goto IL_B0;
					}
					this.dataConnectionState[8] = true;
					try
					{
						this.CancelRowEdit(false, false);
						goto IL_B0;
					}
					finally
					{
						this.dataConnectionState[8] = false;
					}
				}
				if (this.owner.IsCurrentRowDirty)
				{
					this.dataConnectionState[256] = true;
					try
					{
						this.currencyManager.EndCurrentEdit();
					}
					catch (Exception ex)
					{
						if (ClientUtils.IsCriticalException(ex))
						{
							throw;
						}
						this.ProcessException(ex, e, true);
					}
					finally
					{
						this.dataConnectionState[256] = false;
					}
				}
				IL_B0:
				this.dataConnectionState[4] = true;
			}

			// Token: 0x0600657E RID: 25982 RVA: 0x0017AB18 File Offset: 0x00178D18
			public void ProcessException(Exception exception, DataGridViewCellCancelEventArgs e, bool beginEdit)
			{
				DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = new DataGridViewDataErrorEventArgs(exception, e.ColumnIndex, e.RowIndex, DataGridViewDataErrorContexts.Commit);
				this.owner.OnDataErrorInternal(dataGridViewDataErrorEventArgs);
				if (dataGridViewDataErrorEventArgs.ThrowException)
				{
					throw dataGridViewDataErrorEventArgs.Exception;
				}
				if (dataGridViewDataErrorEventArgs.Cancel)
				{
					e.Cancel = true;
					if (beginEdit)
					{
						IEditableObject editableObject = this.currencyManager.Current as IEditableObject;
						if (editableObject != null)
						{
							editableObject.BeginEdit();
							return;
						}
					}
				}
				else
				{
					this.CancelRowEdit(false, false);
				}
			}

			// Token: 0x0600657F RID: 25983 RVA: 0x0017AB90 File Offset: 0x00178D90
			public bool PushValue(int boundColumnIndex, int columnIndex, int rowIndex, object value)
			{
				try
				{
					if (value != null)
					{
						Type type = value.GetType();
						Type valueType = this.owner.Columns[columnIndex].ValueType;
						if (!valueType.IsAssignableFrom(type))
						{
							TypeConverter typeConverter = this.BoundColumnConverter(boundColumnIndex);
							if (typeConverter != null && typeConverter.CanConvertFrom(type))
							{
								value = typeConverter.ConvertFrom(value);
							}
							else
							{
								TypeConverter cachedTypeConverter = this.owner.GetCachedTypeConverter(type);
								if (cachedTypeConverter != null && cachedTypeConverter.CanConvertTo(valueType))
								{
									value = cachedTypeConverter.ConvertTo(value, valueType);
								}
							}
						}
					}
					this.props[boundColumnIndex].SetValue(this.currencyManager[rowIndex], value);
				}
				catch (Exception ex)
				{
					if (ClientUtils.IsCriticalException(ex))
					{
						throw;
					}
					DataGridViewCellCancelEventArgs dataGridViewCellCancelEventArgs = new DataGridViewCellCancelEventArgs(columnIndex, rowIndex);
					this.ProcessException(ex, dataGridViewCellCancelEventArgs, false);
					return !dataGridViewCellCancelEventArgs.Cancel;
				}
				return true;
			}

			// Token: 0x06006580 RID: 25984 RVA: 0x0017AC74 File Offset: 0x00178E74
			public bool ShouldChangeDataMember(object newDataSource)
			{
				if (!this.owner.Created)
				{
					return false;
				}
				if (this.owner.BindingContext == null)
				{
					return false;
				}
				if (newDataSource == null)
				{
					return true;
				}
				CurrencyManager currencyManager = this.owner.BindingContext[newDataSource] as CurrencyManager;
				if (currencyManager == null)
				{
					return false;
				}
				PropertyDescriptorCollection itemProperties = currencyManager.GetItemProperties();
				return this.dataMember.Length == 0 || itemProperties[this.dataMember] == null;
			}

			// Token: 0x06006581 RID: 25985 RVA: 0x0017ACE5 File Offset: 0x00178EE5
			public void Sort(DataGridViewColumn dataGridViewColumn, ListSortDirection direction)
			{
				((IBindingList)this.List).ApplySort(this.props[dataGridViewColumn.BoundColumnIndex], direction);
			}

			// Token: 0x06006582 RID: 25986 RVA: 0x0017AD0C File Offset: 0x00178F0C
			private void UnWireEvents()
			{
				if (this.currencyManager != null)
				{
					this.currencyManager.PositionChanged -= this.currencyManager_PositionChanged;
					this.currencyManager.ListChanged -= this.currencyManager_ListChanged;
					this.dataConnectionState[32] = false;
				}
			}

			// Token: 0x06006583 RID: 25987 RVA: 0x0017AD60 File Offset: 0x00178F60
			private void WireEvents()
			{
				if (this.currencyManager != null)
				{
					this.currencyManager.PositionChanged += this.currencyManager_PositionChanged;
					this.currencyManager.ListChanged += this.currencyManager_ListChanged;
					this.dataConnectionState[32] = true;
				}
			}

			// Token: 0x04003A09 RID: 14857
			private DataGridView owner;

			// Token: 0x04003A0A RID: 14858
			private CurrencyManager currencyManager;

			// Token: 0x04003A0B RID: 14859
			private object dataSource;

			// Token: 0x04003A0C RID: 14860
			private string dataMember = string.Empty;

			// Token: 0x04003A0D RID: 14861
			private PropertyDescriptorCollection props;

			// Token: 0x04003A0E RID: 14862
			private int lastListCount = -1;

			// Token: 0x04003A0F RID: 14863
			private BitVector32 dataConnectionState;

			// Token: 0x04003A10 RID: 14864
			private const int DATACONNECTIONSTATE_dataConnection_inSetDataConnection = 1;

			// Token: 0x04003A11 RID: 14865
			private const int DATACONNECTIONSTATE_processingMetaDataChanges = 2;

			// Token: 0x04003A12 RID: 14866
			private const int DATACONNECTIONSTATE_finishedAddNew = 4;

			// Token: 0x04003A13 RID: 14867
			private const int DATACONNECTIONSTATE_doNotChangePositionInTheDataGridViewControl = 8;

			// Token: 0x04003A14 RID: 14868
			private const int DATACONNECTIONSTATE_doNotChangePositionInTheCurrencyManager = 16;

			// Token: 0x04003A15 RID: 14869
			private const int DATACONNECTIONSTATE_interestedInRowEvents = 32;

			// Token: 0x04003A16 RID: 14870
			private const int DATACONNECTIONSTATE_cancellingRowEdit = 64;

			// Token: 0x04003A17 RID: 14871
			private const int DATACONNECTIONSTATE_restoreRow = 128;

			// Token: 0x04003A18 RID: 14872
			private const int DATACONNECTIONSTATE_rowValidatingInAddNew = 256;

			// Token: 0x04003A19 RID: 14873
			private const int DATACONNECTIONSTATE_inAddNew = 512;

			// Token: 0x04003A1A RID: 14874
			private const int DATACONNECTIONSTATE_listWasReset = 1024;

			// Token: 0x04003A1B RID: 14875
			private const int DATACONNECTIONSTATE_positionChangingInCurrencyManager = 2048;

			// Token: 0x04003A1C RID: 14876
			private const int DATACONNECTIONSTATE_inDeleteOperation = 4096;

			// Token: 0x04003A1D RID: 14877
			private const int DATACONNECTIONSTATE_didNotDeleteRowFromDataGridView = 8192;

			// Token: 0x04003A1E RID: 14878
			private const int DATACONNECTIONSTATE_itemAddedInDeleteOperation = 16384;

			// Token: 0x04003A1F RID: 14879
			private const int DATACONNECTIONSTATE_inEndCurrentEdit = 32768;

			// Token: 0x04003A20 RID: 14880
			private const int DATACONNECTIONSTATE_cachedAllowUserToAddRowsInternal = 65536;

			// Token: 0x04003A21 RID: 14881
			private const int DATACONNECTIONSTATE_processingListChangedEvent = 131072;

			// Token: 0x04003A22 RID: 14882
			private const int DATACONNECTIONSTATE_dataSourceInitializedHookedUp = 262144;
		}

		// Token: 0x0200065D RID: 1629
		internal class DisplayedBandsData
		{
			// Token: 0x06006584 RID: 25988 RVA: 0x0017ADB4 File Offset: 0x00178FB4
			public DisplayedBandsData()
			{
				this.firstDisplayedFrozenRow = -1;
				this.firstDisplayedFrozenCol = -1;
				this.firstDisplayedScrollingRow = -1;
				this.firstDisplayedScrollingCol = -1;
				this.lastTotallyDisplayedScrollingCol = -1;
				this.lastDisplayedScrollingRow = -1;
				this.lastDisplayedFrozenCol = -1;
				this.lastDisplayedFrozenRow = -1;
				this.oldFirstDisplayedScrollingRow = -1;
				this.oldFirstDisplayedScrollingCol = -1;
			}

			// Token: 0x170015ED RID: 5613
			// (get) Token: 0x06006585 RID: 25989 RVA: 0x0017AE0D File Offset: 0x0017900D
			public bool ColumnInsertionOccurred
			{
				get
				{
					return this.columnInsertionOccurred;
				}
			}

			// Token: 0x170015EE RID: 5614
			// (get) Token: 0x06006586 RID: 25990 RVA: 0x0017AE15 File Offset: 0x00179015
			// (set) Token: 0x06006587 RID: 25991 RVA: 0x0017AE1D File Offset: 0x0017901D
			public bool Dirty
			{
				get
				{
					return this.dirty;
				}
				set
				{
					this.dirty = value;
				}
			}

			// Token: 0x170015EF RID: 5615
			// (set) Token: 0x06006588 RID: 25992 RVA: 0x0017AE26 File Offset: 0x00179026
			public int FirstDisplayedFrozenCol
			{
				set
				{
					if (value != this.firstDisplayedFrozenCol)
					{
						this.EnsureDirtyState();
						this.firstDisplayedFrozenCol = value;
					}
				}
			}

			// Token: 0x170015F0 RID: 5616
			// (set) Token: 0x06006589 RID: 25993 RVA: 0x0017AE3E File Offset: 0x0017903E
			public int FirstDisplayedFrozenRow
			{
				set
				{
					if (value != this.firstDisplayedFrozenRow)
					{
						this.EnsureDirtyState();
						this.firstDisplayedFrozenRow = value;
					}
				}
			}

			// Token: 0x170015F1 RID: 5617
			// (get) Token: 0x0600658A RID: 25994 RVA: 0x0017AE56 File Offset: 0x00179056
			// (set) Token: 0x0600658B RID: 25995 RVA: 0x0017AE5E File Offset: 0x0017905E
			public int FirstDisplayedScrollingCol
			{
				get
				{
					return this.firstDisplayedScrollingCol;
				}
				set
				{
					if (value != this.firstDisplayedScrollingCol)
					{
						this.EnsureDirtyState();
						this.firstDisplayedScrollingCol = value;
					}
				}
			}

			// Token: 0x170015F2 RID: 5618
			// (get) Token: 0x0600658C RID: 25996 RVA: 0x0017AE76 File Offset: 0x00179076
			// (set) Token: 0x0600658D RID: 25997 RVA: 0x0017AE7E File Offset: 0x0017907E
			public int FirstDisplayedScrollingRow
			{
				get
				{
					return this.firstDisplayedScrollingRow;
				}
				set
				{
					if (value != this.firstDisplayedScrollingRow)
					{
						this.EnsureDirtyState();
						this.firstDisplayedScrollingRow = value;
					}
				}
			}

			// Token: 0x170015F3 RID: 5619
			// (set) Token: 0x0600658E RID: 25998 RVA: 0x0017AE96 File Offset: 0x00179096
			public int LastDisplayedFrozenCol
			{
				set
				{
					if (value != this.lastDisplayedFrozenCol)
					{
						this.EnsureDirtyState();
						this.lastDisplayedFrozenCol = value;
					}
				}
			}

			// Token: 0x170015F4 RID: 5620
			// (set) Token: 0x0600658F RID: 25999 RVA: 0x0017AEAE File Offset: 0x001790AE
			public int LastDisplayedFrozenRow
			{
				set
				{
					if (value != this.lastDisplayedFrozenRow)
					{
						this.EnsureDirtyState();
						this.lastDisplayedFrozenRow = value;
					}
				}
			}

			// Token: 0x170015F5 RID: 5621
			// (set) Token: 0x06006590 RID: 26000 RVA: 0x0017AEC6 File Offset: 0x001790C6
			public int LastDisplayedScrollingRow
			{
				set
				{
					if (value != this.lastDisplayedScrollingRow)
					{
						this.EnsureDirtyState();
						this.lastDisplayedScrollingRow = value;
					}
				}
			}

			// Token: 0x170015F6 RID: 5622
			// (get) Token: 0x06006591 RID: 26001 RVA: 0x0017AEDE File Offset: 0x001790DE
			// (set) Token: 0x06006592 RID: 26002 RVA: 0x0017AEE6 File Offset: 0x001790E6
			public int LastTotallyDisplayedScrollingCol
			{
				get
				{
					return this.lastTotallyDisplayedScrollingCol;
				}
				set
				{
					if (value != this.lastTotallyDisplayedScrollingCol)
					{
						this.EnsureDirtyState();
						this.lastTotallyDisplayedScrollingCol = value;
					}
				}
			}

			// Token: 0x170015F7 RID: 5623
			// (get) Token: 0x06006593 RID: 26003 RVA: 0x0017AEFE File Offset: 0x001790FE
			// (set) Token: 0x06006594 RID: 26004 RVA: 0x0017AF06 File Offset: 0x00179106
			public int NumDisplayedFrozenCols
			{
				get
				{
					return this.numDisplayedFrozenCols;
				}
				set
				{
					if (value != this.numDisplayedFrozenCols)
					{
						this.EnsureDirtyState();
						this.numDisplayedFrozenCols = value;
					}
				}
			}

			// Token: 0x170015F8 RID: 5624
			// (get) Token: 0x06006595 RID: 26005 RVA: 0x0017AF1E File Offset: 0x0017911E
			// (set) Token: 0x06006596 RID: 26006 RVA: 0x0017AF26 File Offset: 0x00179126
			public int NumDisplayedFrozenRows
			{
				get
				{
					return this.numDisplayedFrozenRows;
				}
				set
				{
					if (value != this.numDisplayedFrozenRows)
					{
						this.EnsureDirtyState();
						this.numDisplayedFrozenRows = value;
					}
				}
			}

			// Token: 0x170015F9 RID: 5625
			// (get) Token: 0x06006597 RID: 26007 RVA: 0x0017AF3E File Offset: 0x0017913E
			// (set) Token: 0x06006598 RID: 26008 RVA: 0x0017AF46 File Offset: 0x00179146
			public int NumDisplayedScrollingRows
			{
				get
				{
					return this.numDisplayedScrollingRows;
				}
				set
				{
					if (value != this.numDisplayedScrollingRows)
					{
						this.EnsureDirtyState();
						this.numDisplayedScrollingRows = value;
					}
				}
			}

			// Token: 0x170015FA RID: 5626
			// (get) Token: 0x06006599 RID: 26009 RVA: 0x0017AF5E File Offset: 0x0017915E
			// (set) Token: 0x0600659A RID: 26010 RVA: 0x0017AF66 File Offset: 0x00179166
			public int NumDisplayedScrollingCols
			{
				get
				{
					return this.numDisplayedScrollingCols;
				}
				set
				{
					if (value != this.numDisplayedScrollingCols)
					{
						this.EnsureDirtyState();
						this.numDisplayedScrollingCols = value;
					}
				}
			}

			// Token: 0x170015FB RID: 5627
			// (get) Token: 0x0600659B RID: 26011 RVA: 0x0017AF7E File Offset: 0x0017917E
			// (set) Token: 0x0600659C RID: 26012 RVA: 0x0017AF86 File Offset: 0x00179186
			public int NumTotallyDisplayedFrozenRows
			{
				get
				{
					return this.numTotallyDisplayedFrozenRows;
				}
				set
				{
					if (value != this.numTotallyDisplayedFrozenRows)
					{
						this.EnsureDirtyState();
						this.numTotallyDisplayedFrozenRows = value;
					}
				}
			}

			// Token: 0x170015FC RID: 5628
			// (get) Token: 0x0600659D RID: 26013 RVA: 0x0017AF9E File Offset: 0x0017919E
			// (set) Token: 0x0600659E RID: 26014 RVA: 0x0017AFA6 File Offset: 0x001791A6
			public int NumTotallyDisplayedScrollingRows
			{
				get
				{
					return this.numTotallyDisplayedScrollingRows;
				}
				set
				{
					if (value != this.numTotallyDisplayedScrollingRows)
					{
						this.EnsureDirtyState();
						this.numTotallyDisplayedScrollingRows = value;
					}
				}
			}

			// Token: 0x170015FD RID: 5629
			// (get) Token: 0x0600659F RID: 26015 RVA: 0x0017AFBE File Offset: 0x001791BE
			public int OldFirstDisplayedScrollingCol
			{
				get
				{
					return this.oldFirstDisplayedScrollingCol;
				}
			}

			// Token: 0x170015FE RID: 5630
			// (get) Token: 0x060065A0 RID: 26016 RVA: 0x0017AFC6 File Offset: 0x001791C6
			public int OldFirstDisplayedScrollingRow
			{
				get
				{
					return this.oldFirstDisplayedScrollingRow;
				}
			}

			// Token: 0x170015FF RID: 5631
			// (get) Token: 0x060065A1 RID: 26017 RVA: 0x0017AFCE File Offset: 0x001791CE
			public int OldNumDisplayedFrozenRows
			{
				get
				{
					return this.oldNumDisplayedFrozenRows;
				}
			}

			// Token: 0x17001600 RID: 5632
			// (get) Token: 0x060065A2 RID: 26018 RVA: 0x0017AFD6 File Offset: 0x001791D6
			public int OldNumDisplayedScrollingRows
			{
				get
				{
					return this.oldNumDisplayedScrollingRows;
				}
			}

			// Token: 0x17001601 RID: 5633
			// (get) Token: 0x060065A3 RID: 26019 RVA: 0x0017AFDE File Offset: 0x001791DE
			public bool RowInsertionOccurred
			{
				get
				{
					return this.rowInsertionOccurred;
				}
			}

			// Token: 0x060065A4 RID: 26020 RVA: 0x0017AFE6 File Offset: 0x001791E6
			public void EnsureDirtyState()
			{
				if (!this.dirty)
				{
					this.dirty = true;
					this.rowInsertionOccurred = false;
					this.columnInsertionOccurred = false;
					this.SetOldValues();
				}
			}

			// Token: 0x060065A5 RID: 26021 RVA: 0x0017B00B File Offset: 0x0017920B
			public void CorrectColumnIndexAfterInsertion(int columnIndex, int insertionCount)
			{
				this.EnsureDirtyState();
				if (this.oldFirstDisplayedScrollingCol != -1 && columnIndex <= this.oldFirstDisplayedScrollingCol)
				{
					this.oldFirstDisplayedScrollingCol += insertionCount;
				}
				this.columnInsertionOccurred = true;
			}

			// Token: 0x060065A6 RID: 26022 RVA: 0x0017B03A File Offset: 0x0017923A
			public void CorrectRowIndexAfterDeletion(int rowIndex)
			{
				this.EnsureDirtyState();
				if (this.oldFirstDisplayedScrollingRow != -1 && rowIndex <= this.oldFirstDisplayedScrollingRow)
				{
					this.oldFirstDisplayedScrollingRow--;
				}
			}

			// Token: 0x060065A7 RID: 26023 RVA: 0x0017B064 File Offset: 0x00179264
			public void CorrectRowIndexAfterInsertion(int rowIndex, int insertionCount)
			{
				this.EnsureDirtyState();
				if (this.oldFirstDisplayedScrollingRow != -1 && rowIndex <= this.oldFirstDisplayedScrollingRow)
				{
					this.oldFirstDisplayedScrollingRow += insertionCount;
				}
				this.rowInsertionOccurred = true;
				this.oldNumDisplayedScrollingRows += insertionCount;
				this.oldNumDisplayedFrozenRows += insertionCount;
			}

			// Token: 0x060065A8 RID: 26024 RVA: 0x0017B0BA File Offset: 0x001792BA
			private void SetOldValues()
			{
				this.oldFirstDisplayedScrollingRow = this.firstDisplayedScrollingRow;
				this.oldFirstDisplayedScrollingCol = this.firstDisplayedScrollingCol;
				this.oldNumDisplayedFrozenRows = this.numDisplayedFrozenRows;
				this.oldNumDisplayedScrollingRows = this.numDisplayedScrollingRows;
			}

			// Token: 0x04003A23 RID: 14883
			private bool dirty;

			// Token: 0x04003A24 RID: 14884
			private int firstDisplayedFrozenRow;

			// Token: 0x04003A25 RID: 14885
			private int firstDisplayedFrozenCol;

			// Token: 0x04003A26 RID: 14886
			private int numDisplayedFrozenRows;

			// Token: 0x04003A27 RID: 14887
			private int numDisplayedFrozenCols;

			// Token: 0x04003A28 RID: 14888
			private int numTotallyDisplayedFrozenRows;

			// Token: 0x04003A29 RID: 14889
			private int firstDisplayedScrollingRow;

			// Token: 0x04003A2A RID: 14890
			private int numDisplayedScrollingRows;

			// Token: 0x04003A2B RID: 14891
			private int numTotallyDisplayedScrollingRows;

			// Token: 0x04003A2C RID: 14892
			private int firstDisplayedScrollingCol;

			// Token: 0x04003A2D RID: 14893
			private int numDisplayedScrollingCols;

			// Token: 0x04003A2E RID: 14894
			private int lastTotallyDisplayedScrollingCol;

			// Token: 0x04003A2F RID: 14895
			private int lastDisplayedScrollingRow;

			// Token: 0x04003A30 RID: 14896
			private int lastDisplayedFrozenCol;

			// Token: 0x04003A31 RID: 14897
			private int lastDisplayedFrozenRow;

			// Token: 0x04003A32 RID: 14898
			private int oldFirstDisplayedScrollingRow;

			// Token: 0x04003A33 RID: 14899
			private int oldFirstDisplayedScrollingCol;

			// Token: 0x04003A34 RID: 14900
			private int oldNumDisplayedFrozenRows;

			// Token: 0x04003A35 RID: 14901
			private int oldNumDisplayedScrollingRows;

			// Token: 0x04003A36 RID: 14902
			private bool rowInsertionOccurred;

			// Token: 0x04003A37 RID: 14903
			private bool columnInsertionOccurred;
		}

		/// <summary>Contains information, such as the row and column indexes, about a specific coordinate pair in the <see cref="T:System.Windows.Forms.DataGridView" /> control. This class cannot be inherited.</summary>
		// Token: 0x0200065E RID: 1630
		public sealed class HitTestInfo
		{
			// Token: 0x060065A9 RID: 26025 RVA: 0x0017B0EC File Offset: 0x001792EC
			internal HitTestInfo()
			{
				this.type = DataGridViewHitTestType.None;
				this.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.None;
				this.row = (this.col = -1);
				this.rowStart = (this.colStart = -1);
				this.adjacentRow = (this.adjacentCol = -1);
			}

			/// <summary>Gets the index of the column that contains the coordinates described by the current <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" />.</summary>
			/// <returns>The index of the column in the <see cref="T:System.Windows.Forms.DataGridView" /> that contains the coordinates described by the current <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" />.</returns>
			// Token: 0x17001602 RID: 5634
			// (get) Token: 0x060065AA RID: 26026 RVA: 0x0017B13D File Offset: 0x0017933D
			public int ColumnIndex
			{
				get
				{
					return this.col;
				}
			}

			/// <summary>Gets the index of the row that contains the coordinates described by the current <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" />.</summary>
			/// <returns>The index of the row in the <see cref="T:System.Windows.Forms.DataGridView" /> that contains the coordinates described by the current <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" />.</returns>
			// Token: 0x17001603 RID: 5635
			// (get) Token: 0x060065AB RID: 26027 RVA: 0x0017B145 File Offset: 0x00179345
			public int RowIndex
			{
				get
				{
					return this.row;
				}
			}

			/// <summary>Gets the x-coordinate of the beginning of the column that contains the coordinates described by the current <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" />.</summary>
			/// <returns>The x-coordinate of the column in the <see cref="T:System.Windows.Forms.DataGridView" /> that contains the coordinates described by the current <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" />.</returns>
			// Token: 0x17001604 RID: 5636
			// (get) Token: 0x060065AC RID: 26028 RVA: 0x0017B14D File Offset: 0x0017934D
			public int ColumnX
			{
				get
				{
					return this.colStart;
				}
			}

			/// <summary>Gets the y-coordinate of the top of the row that contains the coordinates described by the current <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" />.</summary>
			/// <returns>The y-coordinate of the row in the <see cref="T:System.Windows.Forms.DataGridView" /> that contains the coordinates described by the current <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" />.</returns>
			// Token: 0x17001605 RID: 5637
			// (get) Token: 0x060065AD RID: 26029 RVA: 0x0017B155 File Offset: 0x00179355
			public int RowY
			{
				get
				{
					return this.rowStart;
				}
			}

			/// <summary>Gets the <see cref="T:System.Windows.Forms.DataGridViewHitTestType" /> that indicates which part of the <see cref="T:System.Windows.Forms.DataGridView" /> the coordinates described by the current <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" /> belong to.</summary>
			/// <returns>A <see cref="T:System.Windows.Forms.DataGridViewHitTestType" /> value that indicates the control part at the coordinates described by the current <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" />.</returns>
			// Token: 0x17001606 RID: 5638
			// (get) Token: 0x060065AE RID: 26030 RVA: 0x0017B15D File Offset: 0x0017935D
			public DataGridViewHitTestType Type
			{
				get
				{
					return this.type;
				}
			}

			/// <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" />.</summary>
			/// <param name="value">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" />.</param>
			/// <returns>
			///   <see langword="true" /> if <paramref name="value" /> is a <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" /> in which the values of the <see cref="P:System.Windows.Forms.DataGridView.HitTestInfo.Type" />, <see cref="P:System.Windows.Forms.DataGridView.HitTestInfo.RowIndex" />, and <see cref="P:System.Windows.Forms.DataGridView.HitTestInfo.ColumnIndex" /> properties are the same as the current <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" />.</returns>
			// Token: 0x060065AF RID: 26031 RVA: 0x0017B168 File Offset: 0x00179368
			public override bool Equals(object value)
			{
				DataGridView.HitTestInfo hitTestInfo = value as DataGridView.HitTestInfo;
				return hitTestInfo != null && (this.type == hitTestInfo.type && this.row == hitTestInfo.row) && this.col == hitTestInfo.col;
			}

			/// <summary>Serves as a hash function for a particular type.</summary>
			/// <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
			// Token: 0x060065B0 RID: 26032 RVA: 0x0017B1AD File Offset: 0x001793AD
			public override int GetHashCode()
			{
				return WindowsFormsUtils.GetCombinedHashCodes(new int[]
				{
					(int)this.type,
					this.row,
					this.col
				});
			}

			/// <summary>Returns a string that represents a <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" />.</summary>
			/// <returns>A string that represents a <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" />.</returns>
			// Token: 0x060065B1 RID: 26033 RVA: 0x0017B1D8 File Offset: 0x001793D8
			public override string ToString()
			{
				return string.Concat(new string[]
				{
					"{ Type:",
					this.type.ToString(),
					", Column:",
					this.col.ToString(CultureInfo.CurrentCulture),
					", Row:",
					this.row.ToString(CultureInfo.CurrentCulture),
					" }"
				});
			}

			// Token: 0x04003A38 RID: 14904
			internal DataGridViewHitTestType type;

			// Token: 0x04003A39 RID: 14905
			internal DataGridView.DataGridViewHitTestTypeInternal typeInternal;

			// Token: 0x04003A3A RID: 14906
			internal int row;

			// Token: 0x04003A3B RID: 14907
			internal int col;

			// Token: 0x04003A3C RID: 14908
			internal int adjacentRow;

			// Token: 0x04003A3D RID: 14909
			internal int adjacentCol;

			// Token: 0x04003A3E RID: 14910
			internal int mouseBarOffset;

			// Token: 0x04003A3F RID: 14911
			internal int rowStart;

			// Token: 0x04003A40 RID: 14912
			internal int colStart;

			/// <summary>Specifies that the point is not on a cell or cell header. This field is read-only.</summary>
			// Token: 0x04003A41 RID: 14913
			public static readonly DataGridView.HitTestInfo Nowhere = new DataGridView.HitTestInfo();
		}

		// Token: 0x0200065F RID: 1631
		internal class LayoutData
		{
			// Token: 0x060065B3 RID: 26035 RVA: 0x0017B258 File Offset: 0x00179458
			public LayoutData()
			{
			}

			// Token: 0x060065B4 RID: 26036 RVA: 0x0017B2C0 File Offset: 0x001794C0
			public LayoutData(DataGridView.LayoutData src)
			{
				this.ClientRectangle = src.ClientRectangle;
				this.TopLeftHeader = src.TopLeftHeader;
				this.ColumnHeaders = src.ColumnHeaders;
				this.RowHeaders = src.RowHeaders;
				this.Inside = src.Inside;
				this.Data = src.Data;
				this.ResizeBoxRect = src.ResizeBoxRect;
				this.ColumnHeadersVisible = src.ColumnHeadersVisible;
				this.RowHeadersVisible = src.RowHeadersVisible;
			}

			// Token: 0x060065B5 RID: 26037 RVA: 0x0017B394 File Offset: 0x00179594
			public override string ToString()
			{
				StringBuilder stringBuilder = new StringBuilder(100);
				stringBuilder.Append(base.ToString());
				stringBuilder.Append(" { \n");
				stringBuilder.Append("ClientRectangle = ");
				stringBuilder.Append(this.ClientRectangle.ToString());
				stringBuilder.Append('\n');
				stringBuilder.Append("Inside = ");
				stringBuilder.Append(this.Inside.ToString());
				stringBuilder.Append('\n');
				stringBuilder.Append("TopLeftHeader = ");
				stringBuilder.Append(this.TopLeftHeader.ToString());
				stringBuilder.Append('\n');
				stringBuilder.Append("ColumnHeaders = ");
				stringBuilder.Append(this.ColumnHeaders.ToString());
				stringBuilder.Append('\n');
				stringBuilder.Append("RowHeaders = ");
				stringBuilder.Append(this.RowHeaders.ToString());
				stringBuilder.Append('\n');
				stringBuilder.Append("Data = ");
				stringBuilder.Append(this.Data.ToString());
				stringBuilder.Append('\n');
				stringBuilder.Append("ResizeBoxRect = ");
				stringBuilder.Append(this.ResizeBoxRect.ToString());
				stringBuilder.Append('\n');
				stringBuilder.Append("ColumnHeadersVisible = ");
				stringBuilder.Append(this.ColumnHeadersVisible.ToString());
				stringBuilder.Append('\n');
				stringBuilder.Append("RowHeadersVisible = ");
				stringBuilder.Append(this.RowHeadersVisible.ToString());
				stringBuilder.Append(" }");
				return stringBuilder.ToString();
			}

			// Token: 0x04003A42 RID: 14914
			internal bool dirty = true;

			// Token: 0x04003A43 RID: 14915
			public Rectangle ClientRectangle = Rectangle.Empty;

			// Token: 0x04003A44 RID: 14916
			public Rectangle Inside = Rectangle.Empty;

			// Token: 0x04003A45 RID: 14917
			public Rectangle RowHeaders = Rectangle.Empty;

			// Token: 0x04003A46 RID: 14918
			public Rectangle ColumnHeaders = Rectangle.Empty;

			// Token: 0x04003A47 RID: 14919
			public Rectangle TopLeftHeader = Rectangle.Empty;

			// Token: 0x04003A48 RID: 14920
			public Rectangle Data = Rectangle.Empty;

			// Token: 0x04003A49 RID: 14921
			public Rectangle ResizeBoxRect = Rectangle.Empty;

			// Token: 0x04003A4A RID: 14922
			public bool ColumnHeadersVisible;

			// Token: 0x04003A4B RID: 14923
			public bool RowHeadersVisible;
		}

		// Token: 0x02000660 RID: 1632
		private class DataGridViewSelectedCellsAccessibleObject : AccessibleObject
		{
			// Token: 0x060065B6 RID: 26038 RVA: 0x0017B554 File Offset: 0x00179754
			public DataGridViewSelectedCellsAccessibleObject(DataGridView owner)
			{
				this.owner = owner;
			}

			// Token: 0x17001607 RID: 5639
			// (get) Token: 0x060065B7 RID: 26039 RVA: 0x0017B563 File Offset: 0x00179763
			public override string Name
			{
				get
				{
					return SR.GetString("DataGridView_AccSelectedCellsName");
				}
			}

			// Token: 0x17001608 RID: 5640
			// (get) Token: 0x060065B8 RID: 26040 RVA: 0x0017B56F File Offset: 0x0017976F
			public override AccessibleObject Parent
			{
				[SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]
				get
				{
					return this.owner.AccessibilityObject;
				}
			}

			// Token: 0x17001609 RID: 5641
			// (get) Token: 0x060065B9 RID: 26041 RVA: 0x0017B57C File Offset: 0x0017977C
			public override AccessibleRole Role
			{
				get
				{
					return AccessibleRole.Grouping;
				}
			}

			// Token: 0x1700160A RID: 5642
			// (get) Token: 0x060065BA RID: 26042 RVA: 0x0017B580 File Offset: 0x00179780
			public override AccessibleStates State
			{
				get
				{
					return AccessibleStates.Selected | AccessibleStates.Selectable;
				}
			}

			// Token: 0x1700160B RID: 5643
			// (get) Token: 0x060065BB RID: 26043 RVA: 0x00016178 File Offset: 0x00014378
			public override string Value
			{
				[SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]
				get
				{
					return this.Name;
				}
			}

			// Token: 0x060065BC RID: 26044 RVA: 0x0017B587 File Offset: 0x00179787
			public override AccessibleObject GetChild(int index)
			{
				if (index >= 0 && index < this.owner.GetCellCount(DataGridViewElementStates.Selected))
				{
					return this.owner.SelectedCell(index).AccessibilityObject;
				}
				return null;
			}

			// Token: 0x060065BD RID: 26045 RVA: 0x0017B5B0 File Offset: 0x001797B0
			public override int GetChildCount()
			{
				return this.owner.GetCellCount(DataGridViewElementStates.Selected);
			}

			// Token: 0x060065BE RID: 26046 RVA: 0x00006A49 File Offset: 0x00004C49
			public override AccessibleObject GetSelected()
			{
				return this;
			}

			// Token: 0x060065BF RID: 26047 RVA: 0x0017B5BF File Offset: 0x001797BF
			public override AccessibleObject GetFocused()
			{
				if (this.owner.CurrentCell != null && this.owner.CurrentCell.Selected)
				{
					return this.owner.CurrentCell.AccessibilityObject;
				}
				return null;
			}

			// Token: 0x060065C0 RID: 26048 RVA: 0x0017B5F4 File Offset: 0x001797F4
			[SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]
			public override AccessibleObject Navigate(AccessibleNavigation navigationDirection)
			{
				if (navigationDirection != AccessibleNavigation.FirstChild)
				{
					if (navigationDirection != AccessibleNavigation.LastChild)
					{
						return null;
					}
					if (this.owner.GetCellCount(DataGridViewElementStates.Selected) > 0)
					{
						return this.owner.SelectedCell(this.owner.GetCellCount(DataGridViewElementStates.Selected) - 1).AccessibilityObject;
					}
					return null;
				}
				else
				{
					if (this.owner.GetCellCount(DataGridViewElementStates.Selected) > 0)
					{
						return this.owner.SelectedCell(0).AccessibilityObject;
					}
					return null;
				}
			}

			// Token: 0x04003A4C RID: 14924
			private DataGridView owner;
		}

		// Token: 0x02000661 RID: 1633
		private class DataGridViewToolTip
		{
			// Token: 0x060065C1 RID: 26049 RVA: 0x0017B662 File Offset: 0x00179862
			public DataGridViewToolTip(DataGridView dataGridView)
			{
				this.dataGridView = dataGridView;
			}

			// Token: 0x1700160C RID: 5644
			// (get) Token: 0x060065C2 RID: 26050 RVA: 0x0017B671 File Offset: 0x00179871
			public bool Activated
			{
				get
				{
					return this.toolTipActivated;
				}
			}

			// Token: 0x1700160D RID: 5645
			// (get) Token: 0x060065C3 RID: 26051 RVA: 0x0017B679 File Offset: 0x00179879
			public ToolTip ToolTip
			{
				get
				{
					return this.toolTip;
				}
			}

			// Token: 0x060065C4 RID: 26052 RVA: 0x0017B684 File Offset: 0x00179884
			public void Activate(bool activate)
			{
				if (this.dataGridView.DesignMode)
				{
					return;
				}
				if (activate && this.toolTip == null)
				{
					this.toolTip = new ToolTip();
					this.toolTip.ShowAlways = true;
					this.toolTip.InitialDelay = 0;
					this.toolTip.UseFading = false;
					this.toolTip.UseAnimation = false;
					this.toolTip.AutoPopDelay = 0;
				}
				if (this.dataGridView.IsRestricted)
				{
					IntSecurity.AllWindows.Assert();
				}
				try
				{
					if (activate)
					{
						this.toolTip.Active = true;
						this.toolTip.Show(this.dataGridView.ToolTipPrivate, this.dataGridView);
					}
					else if (this.toolTip != null)
					{
						this.toolTip.Hide(this.dataGridView);
						this.toolTip.Active = false;
					}
				}
				finally
				{
					if (this.dataGridView.IsRestricted)
					{
						CodeAccessPermission.RevertAssert();
					}
				}
				this.toolTipActivated = activate;
			}

			// Token: 0x060065C5 RID: 26053 RVA: 0x0017B788 File Offset: 0x00179988
			public void Dispose()
			{
				if (this.toolTip != null)
				{
					this.toolTip.Dispose();
					this.toolTip = null;
				}
			}

			// Token: 0x04003A4D RID: 14925
			private DataGridView dataGridView;

			// Token: 0x04003A4E RID: 14926
			private ToolTip toolTip;

			// Token: 0x04003A4F RID: 14927
			private bool toolTipActivated;
		}

		/// <summary>Provides information about a row of <see cref="T:System.Windows.Forms.DataGridViewColumnHeaderCell" /> objects to accessibility client applications.</summary>
		// Token: 0x02000662 RID: 1634
		[ComVisible(true)]
		protected class DataGridViewTopRowAccessibleObject : AccessibleObject
		{
			/// <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataGridView.DataGridViewTopRowAccessibleObject" /> class without setting the <see cref="P:System.Windows.Forms.DataGridView.DataGridViewTopRowAccessibleObject.Owner" /> property.</summary>
			// Token: 0x060065C6 RID: 26054 RVA: 0x001772AE File Offset: 0x001754AE
			public DataGridViewTopRowAccessibleObject()
			{
			}

			/// <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataGridView.DataGridViewTopRowAccessibleObject" /> class, setting the <see cref="P:System.Windows.Forms.DataGridView.DataGridViewTopRowAccessibleObject.Owner" /> property to the specified value.</summary>
			/// <param name="owner">The <see cref="T:System.Windows.Forms.DataGridView" /> that owns the <see cref="T:System.Windows.Forms.DataGridView.DataGridViewTopRowAccessibleObject" /></param>
			// Token: 0x060065C7 RID: 26055 RVA: 0x0017B7A4 File Offset: 0x001799A4
			public DataGridViewTopRowAccessibleObject(DataGridView owner)
			{
				this.owner = owner;
			}

			/// <summary>Gets the location and size of the accessible object.</summary>
			/// <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the bounds of the accessible object.</returns>
			/// <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Forms.DataGridView.DataGridViewTopRowAccessibleObject.Owner" /> property is not set.</exception>
			// Token: 0x1700160E RID: 5646
			// (get) Token: 0x060065C8 RID: 26056 RVA: 0x0017B7B4 File Offset: 0x001799B4
			public override Rectangle Bounds
			{
				get
				{
					if (this.owner == null)
					{
						throw new InvalidOperationException(SR.GetString("DataGridViewTopRowAccessibleObject_OwnerNotSet"));
					}
					if (this.owner.ColumnHeadersVisible)
					{
						Rectangle rectangle = Rectangle.Union(this.owner.layout.ColumnHeaders, this.owner.layout.TopLeftHeader);
						return this.owner.RectangleToScreen(rectangle);
					}
					return Rectangle.Empty;
				}
			}

			/// <summary>Gets the name of the accessible object.</summary>
			/// <returns>The string "Top Row".</returns>
			// Token: 0x1700160F RID: 5647
			// (get) Token: 0x060065C9 RID: 26057 RVA: 0x0017B81E File Offset: 0x00179A1E
			public override string Name
			{
				get
				{
					return SR.GetString("DataGridView_AccTopRow");
				}
			}

			/// <summary>Gets the <see cref="T:System.Windows.Forms.DataGridView" /> that contains the row of column headers.</summary>
			/// <returns>The <see cref="T:System.Windows.Forms.DataGridView" /> that contains the row of column headers.</returns>
			/// <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Forms.DataGridView.DataGridViewTopRowAccessibleObject.Owner" /> property has already been set.</exception>
			// Token: 0x17001610 RID: 5648
			// (get) Token: 0x060065CA RID: 26058 RVA: 0x0017B82A File Offset: 0x00179A2A
			// (set) Token: 0x060065CB RID: 26059 RVA: 0x0017B832 File Offset: 0x00179A32
			public DataGridView Owner
			{
				get
				{
					return this.owner;
				}
				set
				{
					if (this.owner != null)
					{
						throw new InvalidOperationException(SR.GetString("DataGridViewTopRowAccessibleObject_OwnerAlreadySet"));
					}
					this.owner = value;
				}
			}

			/// <summary>Gets the parent of the <see cref="T:System.Windows.Forms.DataGridView.DataGridViewTopRowAccessibleObject" />.</summary>
			/// <returns>An <see cref="T:System.Windows.Forms.DataGridView.DataGridViewAccessibleObject" /> that represents the <see cref="T:System.Windows.Forms.DataGridView" />.</returns>
			/// <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Forms.DataGridView.DataGridViewTopRowAccessibleObject.Owner" /> property is not set.</exception>
			// Token: 0x17001611 RID: 5649
			// (get) Token: 0x060065CC RID: 26060 RVA: 0x0017B853 File Offset: 0x00179A53
			public override AccessibleObject Parent
			{
				[SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]
				get
				{
					if (this.owner == null)
					{
						throw new InvalidOperationException(SR.GetString("DataGridViewTopRowAccessibleObject_OwnerNotSet"));
					}
					return this.owner.AccessibilityObject;
				}
			}

			/// <summary>Gets the role of the accessible object.</summary>
			/// <returns>The <see cref="F:System.Windows.Forms.AccessibleRole.Row" /> value.</returns>
			// Token: 0x17001612 RID: 5650
			// (get) Token: 0x060065CD RID: 26061 RVA: 0x00177DCE File Offset: 0x00175FCE
			public override AccessibleRole Role
			{
				get
				{
					return AccessibleRole.Row;
				}
			}

			// Token: 0x17001613 RID: 5651
			// (get) Token: 0x060065CE RID: 26062 RVA: 0x0017B878 File Offset: 0x00179A78
			internal override int[] RuntimeId
			{
				get
				{
					if (AccessibilityImprovements.Level3 && this.runtimeId == null)
					{
						this.runtimeId = new int[3];
						this.runtimeId[0] = 42;
						this.runtimeId[1] = this.Parent.GetHashCode();
						this.runtimeId[2] = this.GetHashCode();
					}
					return this.runtimeId;
				}
			}

			/// <summary>Gets the value of an accessible object.</summary>
			/// <returns>The string "Top Row".</returns>
			// Token: 0x17001614 RID: 5652
			// (get) Token: 0x060065CF RID: 26063 RVA: 0x00016178 File Offset: 0x00014378
			public override string Value
			{
				[SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]
				get
				{
					return this.Name;
				}
			}

			/// <summary>Returns the child accessible object corresponding to the specified index.</summary>
			/// <param name="index">The zero-based index of the accessible child.</param>
			/// <returns>An <see cref="T:System.Windows.Forms.AccessibleObject" /> that represents the column header at the specified index.</returns>
			/// <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Forms.DataGridView.DataGridViewTopRowAccessibleObject.Owner" /> property is not set.</exception>
			/// <exception cref="T:System.ArgumentOutOfRangeException">
			///   <paramref name="index" /> is less than 0.</exception>
			// Token: 0x060065D0 RID: 26064 RVA: 0x0017B8D4 File Offset: 0x00179AD4
			public override AccessibleObject GetChild(int index)
			{
				if (this.owner == null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridViewTopRowAccessibleObject_OwnerNotSet"));
				}
				if (index < 0)
				{
					throw new ArgumentOutOfRangeException("index");
				}
				if (AccessibilityImprovements.Level5 && index > this.GetChildCount() - 1)
				{
					return null;
				}
				if (index == 0 && this.owner.RowHeadersVisible)
				{
					return this.owner.TopLeftHeaderCell.AccessibilityObject;
				}
				if (this.owner.RowHeadersVisible)
				{
					index--;
				}
				if (index < this.owner.Columns.GetColumnCount(DataGridViewElementStates.Visible))
				{
					int num = this.owner.Columns.ActualDisplayIndexToColumnIndex(index, DataGridViewElementStates.Visible);
					return this.owner.Columns[num].HeaderCell.AccessibilityObject;
				}
				return null;
			}

			/// <summary>Returns the number of children belonging to the accessible object.</summary>
			/// <returns>The number of child accessible objects belonging to the accessible object.</returns>
			/// <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Forms.DataGridView.DataGridViewTopRowAccessibleObject.Owner" /> property is not set.</exception>
			// Token: 0x060065D1 RID: 26065 RVA: 0x0017B998 File Offset: 0x00179B98
			public override int GetChildCount()
			{
				if (this.owner == null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridViewTopRowAccessibleObject_OwnerNotSet"));
				}
				int num = this.owner.Columns.GetColumnCount(DataGridViewElementStates.Visible);
				if (this.owner.RowHeadersVisible)
				{
					num++;
				}
				return num;
			}

			/// <summary>Navigates to another accessible object.</summary>
			/// <param name="navigationDirection">One of the <see cref="T:System.Windows.Forms.AccessibleNavigation" /> values.</param>
			/// <returns>An <see cref="T:System.Windows.Forms.AccessibleObject" /> that represents the object at the specified <see cref="T:System.Windows.Forms.AccessibleNavigation" /> value.</returns>
			/// <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Forms.DataGridView.DataGridViewTopRowAccessibleObject.Owner" /> property is not set.</exception>
			// Token: 0x060065D2 RID: 26066 RVA: 0x0017B9E4 File Offset: 0x00179BE4
			[SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]
			public override AccessibleObject Navigate(AccessibleNavigation navigationDirection)
			{
				if (this.owner == null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridViewTopRowAccessibleObject_OwnerNotSet"));
				}
				switch (navigationDirection)
				{
				case AccessibleNavigation.Down:
				case AccessibleNavigation.Next:
					if (this.owner.AccessibilityObject.GetChildCount() > 1)
					{
						return this.owner.AccessibilityObject.GetChild(1);
					}
					return null;
				case AccessibleNavigation.FirstChild:
					if (!AccessibilityImprovements.Level5 || this.GetChildCount() > 0)
					{
						return this.GetChild(0);
					}
					return null;
				case AccessibleNavigation.LastChild:
				{
					int childCount = this.GetChildCount();
					if (!AccessibilityImprovements.Level5 || childCount > 0)
					{
						return this.GetChild(childCount - 1);
					}
					return null;
				}
				}
				return null;
			}

			// Token: 0x17001615 RID: 5653
			// (get) Token: 0x060065D3 RID: 26067 RVA: 0x00016039 File Offset: 0x00014239
			internal override Rectangle BoundingRectangle
			{
				get
				{
					return this.Bounds;
				}
			}

			// Token: 0x17001616 RID: 5654
			// (get) Token: 0x060065D4 RID: 26068 RVA: 0x0017BA8F File Offset: 0x00179C8F
			internal override UnsafeNativeMethods.IRawElementProviderFragmentRoot FragmentRoot
			{
				get
				{
					return this.owner.AccessibilityObject;
				}
			}

			// Token: 0x060065D5 RID: 26069 RVA: 0x0017BA9C File Offset: 0x00179C9C
			[return: MarshalAs(UnmanagedType.IUnknown)]
			internal override UnsafeNativeMethods.IRawElementProviderFragment FragmentNavigate(UnsafeNativeMethods.NavigateDirection direction)
			{
				switch (direction)
				{
				case UnsafeNativeMethods.NavigateDirection.Parent:
					return this.Parent;
				case UnsafeNativeMethods.NavigateDirection.NextSibling:
					if (this.Parent.GetChildCount() > 1)
					{
						return this.Parent.GetChild(1);
					}
					break;
				case UnsafeNativeMethods.NavigateDirection.FirstChild:
					if (this.GetChildCount() > 0)
					{
						return this.GetChild(0);
					}
					break;
				case UnsafeNativeMethods.NavigateDirection.LastChild:
					if (this.GetChildCount() > 0)
					{
						return this.GetChild(this.GetChildCount() - 1);
					}
					break;
				}
				return null;
			}

			// Token: 0x060065D6 RID: 26070 RVA: 0x0017BB11 File Offset: 0x00179D11
			internal override bool IsPatternSupported(int patternId)
			{
				return (AccessibilityImprovements.Level3 && patternId.Equals(10018)) || base.IsPatternSupported(patternId);
			}

			// Token: 0x060065D7 RID: 26071 RVA: 0x0017BB34 File Offset: 0x00179D34
			internal override object GetPropertyValue(int propertyId)
			{
				if (AccessibilityImprovements.Level3)
				{
					switch (propertyId)
					{
					case 30005:
						return SR.GetString("DataGridView_AccTopRow");
					case 30006:
					case 30011:
					case 30012:
					case 30014:
					case 30015:
					case 30016:
					case 30018:
						break;
					case 30007:
					case 30013:
						return string.Empty;
					case 30008:
					case 30009:
						return false;
					case 30010:
						return this.owner.Enabled;
					case 30017:
						return true;
					case 30019:
						return false;
					default:
						if (propertyId == 30022)
						{
							return false;
						}
						if (propertyId == 30090)
						{
							return true;
						}
						break;
					}
				}
				return base.GetPropertyValue(propertyId);
			}

			// Token: 0x04003A50 RID: 14928
			private int[] runtimeId;

			// Token: 0x04003A51 RID: 14929
			private DataGridView owner;
		}
	}
}
