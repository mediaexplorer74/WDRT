using System;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Windows.Forms.Layout;

namespace System.Windows.Forms
{
	/// <summary>Provides basic functionality for the <see cref="T:System.Windows.Forms.ContextMenuStrip" /> control. Although <see cref="T:System.Windows.Forms.ToolStripDropDownMenu" /> and <see cref="T:System.Windows.Forms.ToolStripDropDown" /> replace and add functionality to the <see cref="T:System.Windows.Forms.Menu" /> control of previous versions, <see cref="T:System.Windows.Forms.Menu" /> is retained for both backward compatibility and future use if you choose.</summary>
	// Token: 0x020003C1 RID: 961
	[Designer("System.Windows.Forms.Design.ToolStripDropDownDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	[ComVisible(true)]
	[ClassInterface(ClassInterfaceType.AutoDispatch)]
	public class ToolStripDropDownMenu : ToolStripDropDown
	{
		/// <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.ToolStripDropDownMenu" /> class.</summary>
		// Token: 0x06004127 RID: 16679 RVA: 0x00115CE8 File Offset: 0x00113EE8
		public ToolStripDropDownMenu()
		{
		}

		// Token: 0x06004128 RID: 16680 RVA: 0x00115DA8 File Offset: 0x00113FA8
		internal ToolStripDropDownMenu(ToolStripItem ownerItem, bool isAutoGenerated)
			: base(ownerItem, isAutoGenerated)
		{
			if (DpiHelper.IsScalingRequired)
			{
				this.scaledDefaultImageSize = DpiHelper.LogicalToDeviceUnits(ToolStripDropDownMenu.DefaultImageSize, 0);
				this.scaledDefaultImageMarginWidth = DpiHelper.LogicalToDeviceUnitsX(ToolStripDropDownMenu.DefaultImageMarginWidth) + 1;
				this.scaledDefaultImageAndCheckMarginWidth = DpiHelper.LogicalToDeviceUnitsX(ToolStripDropDownMenu.DefaultImageAndCheckMarginWidth) + 1;
				if (DpiHelper.EnableToolStripHighDpiImprovements)
				{
					this.scaledImagePadding = DpiHelper.LogicalToDeviceUnits(ToolStripDropDownMenu.ImagePadding, 0);
					this.scaledTextPadding = DpiHelper.LogicalToDeviceUnits(ToolStripDropDownMenu.TextPadding, 0);
					this.scaledCheckPadding = DpiHelper.LogicalToDeviceUnits(ToolStripDropDownMenu.CheckPadding, 0);
					this.scaledArrowPadding = DpiHelper.LogicalToDeviceUnits(ToolStripDropDownMenu.ArrowPadding, 0);
					this.scaledArrowSize = DpiHelper.LogicalToDeviceUnitsX(ToolStripDropDownMenu.ArrowSize);
				}
			}
		}

		// Token: 0x17000FDF RID: 4063
		// (get) Token: 0x06004129 RID: 16681 RVA: 0x00115F03 File Offset: 0x00114103
		// (set) Token: 0x0600412A RID: 16682 RVA: 0x00115F0E File Offset: 0x0011410E
		internal override bool AllItemsVisible
		{
			get
			{
				return !this.RequiresScrollButtons;
			}
			set
			{
				this.RequiresScrollButtons = !value;
			}
		}

		// Token: 0x17000FE0 RID: 4064
		// (get) Token: 0x0600412B RID: 16683 RVA: 0x00115F1A File Offset: 0x0011411A
		internal Rectangle ArrowRectangle
		{
			get
			{
				return this.arrowRectangle;
			}
		}

		// Token: 0x17000FE1 RID: 4065
		// (get) Token: 0x0600412C RID: 16684 RVA: 0x00115F22 File Offset: 0x00114122
		internal Rectangle CheckRectangle
		{
			get
			{
				return this.checkRectangle;
			}
		}

		/// <summary>Gets the internal spacing, in pixels, of the control.</summary>
		/// <returns>A <see langword="Padding" /> object representing the spacing.</returns>
		// Token: 0x17000FE2 RID: 4066
		// (get) Token: 0x0600412D RID: 16685 RVA: 0x00115F2C File Offset: 0x0011412C
		protected override Padding DefaultPadding
		{
			get
			{
				RightToLeft rightToLeft = this.RightToLeft;
				int num = ((rightToLeft == RightToLeft.Yes) ? this.scaledTextPadding.Right : this.scaledTextPadding.Left);
				int num2 = ((this.ShowCheckMargin || this.ShowImageMargin) ? (num + this.ImageMargin.Width) : num);
				if (rightToLeft == RightToLeft.Yes)
				{
					return new Padding(1, 2, num2, 2);
				}
				return new Padding(num2, 2, 1, 2);
			}
		}

		/// <summary>Gets the rectangle that represents the display area of the <see cref="T:System.Windows.Forms.ToolStripDropDownMenu" />.</summary>
		/// <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the display area.</returns>
		// Token: 0x17000FE3 RID: 4067
		// (get) Token: 0x0600412E RID: 16686 RVA: 0x00115F98 File Offset: 0x00114198
		public override Rectangle DisplayRectangle
		{
			get
			{
				Rectangle rectangle = base.DisplayRectangle;
				if (base.GetToolStripState(32))
				{
					rectangle.Y += this.UpScrollButton.Height + this.UpScrollButton.Margin.Vertical;
					rectangle.Height -= this.UpScrollButton.Height + this.UpScrollButton.Margin.Vertical + this.DownScrollButton.Height + this.DownScrollButton.Margin.Vertical;
					rectangle = LayoutUtils.InflateRect(rectangle, new Padding(0, base.Padding.Top, 0, base.Padding.Bottom));
				}
				return rectangle;
			}
		}

		// Token: 0x17000FE4 RID: 4068
		// (get) Token: 0x0600412F RID: 16687 RVA: 0x0011605E File Offset: 0x0011425E
		private ToolStripScrollButton DownScrollButton
		{
			get
			{
				if (this.downScrollButton == null)
				{
					this.downScrollButton = new ToolStripScrollButton(false);
					this.downScrollButton.ParentInternal = this;
				}
				return this.downScrollButton;
			}
		}

		// Token: 0x17000FE5 RID: 4069
		// (get) Token: 0x06004130 RID: 16688 RVA: 0x00116086 File Offset: 0x00114286
		internal Rectangle ImageRectangle
		{
			get
			{
				return this.imageRectangle;
			}
		}

		// Token: 0x17000FE6 RID: 4070
		// (get) Token: 0x06004131 RID: 16689 RVA: 0x0011608E File Offset: 0x0011428E
		// (set) Token: 0x06004132 RID: 16690 RVA: 0x00116096 File Offset: 0x00114296
		internal int PaddingToTrim
		{
			get
			{
				return this.paddingToTrim;
			}
			set
			{
				if (this.paddingToTrim != value)
				{
					this.paddingToTrim = value;
					base.AdjustSize();
				}
			}
		}

		// Token: 0x17000FE7 RID: 4071
		// (get) Token: 0x06004133 RID: 16691 RVA: 0x001160AE File Offset: 0x001142AE
		internal Rectangle ImageMargin
		{
			get
			{
				this.imageMarginBounds.Height = base.Height;
				return this.imageMarginBounds;
			}
		}

		/// <summary>Passes a reference to the cached <see cref="P:System.Windows.Forms.Control.LayoutEngine" /> returned by the layout engine interface.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.Layout.LayoutEngine" /> that represents the cached layout engine returned by the layout engine interface.</returns>
		// Token: 0x17000FE8 RID: 4072
		// (get) Token: 0x06004134 RID: 16692 RVA: 0x001160C7 File Offset: 0x001142C7
		public override LayoutEngine LayoutEngine
		{
			get
			{
				return ToolStripDropDownMenu.ToolStripDropDownLayoutEngine.LayoutInstance;
			}
		}

		/// <summary>Gets or sets a value indicating how the items of <see cref="T:System.Windows.Forms.ContextMenuStrip" /> are displayed.</summary>
		/// <returns>One of the <see cref="T:System.Windows.Forms.ToolStripLayoutStyle" /> values. The default is <see cref="F:System.Windows.Forms.ToolStripLayoutStyle.Flow" />.</returns>
		// Token: 0x17000FE9 RID: 4073
		// (get) Token: 0x06004135 RID: 16693 RVA: 0x00101502 File Offset: 0x000FF702
		// (set) Token: 0x06004136 RID: 16694 RVA: 0x0010150A File Offset: 0x000FF70A
		[DefaultValue(ToolStripLayoutStyle.Flow)]
		public new ToolStripLayoutStyle LayoutStyle
		{
			get
			{
				return base.LayoutStyle;
			}
			set
			{
				base.LayoutStyle = value;
			}
		}

		/// <summary>Gets the maximum height and width, in pixels, of the <see cref="T:System.Windows.Forms.ContextMenuStrip" />.</summary>
		/// <returns>A <see langword="Size" /> object representing the height and width of the control, in pixels.</returns>
		// Token: 0x17000FEA RID: 4074
		// (get) Token: 0x06004137 RID: 16695 RVA: 0x001160CE File Offset: 0x001142CE
		protected internal override Size MaxItemSize
		{
			get
			{
				if (!this.state[ToolStripDropDownMenu.stateMaxItemSizeValid])
				{
					this.CalculateInternalLayoutMetrics();
				}
				return this.maxItemSize;
			}
		}

		/// <summary>Gets or sets a value indicating whether space for an image is shown on the left edge of the <see cref="T:System.Windows.Forms.ToolStripMenuItem" />.</summary>
		/// <returns>
		///   <see langword="true" /> if the image margin is shown; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
		// Token: 0x17000FEB RID: 4075
		// (get) Token: 0x06004138 RID: 16696 RVA: 0x001160EE File Offset: 0x001142EE
		// (set) Token: 0x06004139 RID: 16697 RVA: 0x00116100 File Offset: 0x00114300
		[DefaultValue(true)]
		[SRDescription("ToolStripDropDownMenuShowImageMarginDescr")]
		[SRCategory("CatAppearance")]
		public bool ShowImageMargin
		{
			get
			{
				return this.state[ToolStripDropDownMenu.stateShowImageMargin];
			}
			set
			{
				if (value != this.state[ToolStripDropDownMenu.stateShowImageMargin])
				{
					this.state[ToolStripDropDownMenu.stateShowImageMargin] = value;
					LayoutTransaction.DoLayout(this, this, PropertyNames.ShowImageMargin);
				}
			}
		}

		/// <summary>Gets or sets a value indicating whether space for a check mark is shown on the left edge of the <see cref="T:System.Windows.Forms.ToolStripMenuItem" />.</summary>
		/// <returns>
		///   <see langword="true" /> if the check margin is shown; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
		// Token: 0x17000FEC RID: 4076
		// (get) Token: 0x0600413A RID: 16698 RVA: 0x00116132 File Offset: 0x00114332
		// (set) Token: 0x0600413B RID: 16699 RVA: 0x00116144 File Offset: 0x00114344
		[DefaultValue(false)]
		[SRDescription("ToolStripDropDownMenuShowCheckMarginDescr")]
		[SRCategory("CatAppearance")]
		public bool ShowCheckMargin
		{
			get
			{
				return this.state[ToolStripDropDownMenu.stateShowCheckMargin];
			}
			set
			{
				if (value != this.state[ToolStripDropDownMenu.stateShowCheckMargin])
				{
					this.state[ToolStripDropDownMenu.stateShowCheckMargin] = value;
					LayoutTransaction.DoLayout(this, this, PropertyNames.ShowCheckMargin);
				}
			}
		}

		// Token: 0x17000FED RID: 4077
		// (get) Token: 0x0600413C RID: 16700 RVA: 0x00116176 File Offset: 0x00114376
		internal Rectangle TextRectangle
		{
			get
			{
				return this.textRectangle;
			}
		}

		// Token: 0x17000FEE RID: 4078
		// (get) Token: 0x0600413D RID: 16701 RVA: 0x0011617E File Offset: 0x0011437E
		private ToolStripScrollButton UpScrollButton
		{
			get
			{
				if (this.upScrollButton == null)
				{
					this.upScrollButton = new ToolStripScrollButton(true);
					this.upScrollButton.ParentInternal = this;
				}
				return this.upScrollButton;
			}
		}

		// Token: 0x0600413E RID: 16702 RVA: 0x001161A8 File Offset: 0x001143A8
		internal static ToolStripDropDownMenu FromHMenu(IntPtr hmenu, IWin32Window targetWindow)
		{
			ToolStripDropDownMenu toolStripDropDownMenu = new ToolStripDropDownMenu();
			toolStripDropDownMenu.SuspendLayout();
			HandleRef handleRef = new HandleRef(null, hmenu);
			int menuItemCount = UnsafeNativeMethods.GetMenuItemCount(handleRef);
			for (int i = 0; i < menuItemCount; i++)
			{
				NativeMethods.MENUITEMINFO_T_RW menuiteminfo_T_RW = new NativeMethods.MENUITEMINFO_T_RW();
				menuiteminfo_T_RW.cbSize = Marshal.SizeOf(typeof(NativeMethods.MENUITEMINFO_T_RW));
				menuiteminfo_T_RW.fMask = 256;
				menuiteminfo_T_RW.fType = 256;
				UnsafeNativeMethods.GetMenuItemInfo(handleRef, i, true, menuiteminfo_T_RW);
				ToolStripItem toolStripItem;
				if (menuiteminfo_T_RW.fType == 2048)
				{
					toolStripItem = new ToolStripSeparator();
				}
				else
				{
					menuiteminfo_T_RW = new NativeMethods.MENUITEMINFO_T_RW();
					menuiteminfo_T_RW.cbSize = Marshal.SizeOf(typeof(NativeMethods.MENUITEMINFO_T_RW));
					menuiteminfo_T_RW.fMask = 2;
					menuiteminfo_T_RW.fType = 2;
					UnsafeNativeMethods.GetMenuItemInfo(handleRef, i, true, menuiteminfo_T_RW);
					toolStripItem = new ToolStripMenuItem(hmenu, menuiteminfo_T_RW.wID, targetWindow);
					menuiteminfo_T_RW = new NativeMethods.MENUITEMINFO_T_RW();
					menuiteminfo_T_RW.cbSize = Marshal.SizeOf(typeof(NativeMethods.MENUITEMINFO_T_RW));
					menuiteminfo_T_RW.fMask = 4;
					menuiteminfo_T_RW.fType = 4;
					UnsafeNativeMethods.GetMenuItemInfo(handleRef, i, true, menuiteminfo_T_RW);
					if (menuiteminfo_T_RW.hSubMenu != IntPtr.Zero)
					{
						((ToolStripMenuItem)toolStripItem).DropDown = ToolStripDropDownMenu.FromHMenu(menuiteminfo_T_RW.hSubMenu, targetWindow);
					}
				}
				toolStripDropDownMenu.Items.Add(toolStripItem);
			}
			toolStripDropDownMenu.ResumeLayout();
			return toolStripDropDownMenu;
		}

		// Token: 0x0600413F RID: 16703 RVA: 0x00116304 File Offset: 0x00114504
		private void CalculateInternalLayoutMetrics()
		{
			Size empty = Size.Empty;
			Size empty2 = Size.Empty;
			Size size = this.scaledDefaultImageSize;
			Size empty3 = Size.Empty;
			Size empty4 = Size.Empty;
			for (int i = 0; i < this.Items.Count; i++)
			{
				ToolStripItem toolStripItem = this.Items[i];
				ToolStripMenuItem toolStripMenuItem = toolStripItem as ToolStripMenuItem;
				if (toolStripMenuItem != null)
				{
					Size textSize = toolStripMenuItem.GetTextSize();
					if (toolStripMenuItem.ShowShortcutKeys)
					{
						Size shortcutTextSize = toolStripMenuItem.GetShortcutTextSize();
						if (this.tabWidth == -1)
						{
							this.tabWidth = TextRenderer.MeasureText("\t", this.Font).Width;
						}
						textSize.Width += this.tabWidth + shortcutTextSize.Width;
						textSize.Height = Math.Max(textSize.Height, shortcutTextSize.Height);
					}
					empty.Width = Math.Max(empty.Width, textSize.Width);
					empty.Height = Math.Max(empty.Height, textSize.Height);
					Size size2 = Size.Empty;
					if (toolStripMenuItem.Image != null)
					{
						size2 = ((toolStripMenuItem.ImageScaling == ToolStripItemImageScaling.SizeToFit) ? base.ImageScalingSize : toolStripMenuItem.Image.Size);
					}
					empty2.Width = Math.Max(empty2.Width, size2.Width);
					empty2.Height = Math.Max(empty2.Height, size2.Height);
					if (toolStripMenuItem.CheckedImage != null)
					{
						Size size3 = toolStripMenuItem.CheckedImage.Size;
						size.Width = Math.Max(size3.Width, size.Width);
						size.Height = Math.Max(size3.Height, size.Height);
					}
				}
				else if (!(toolStripItem is ToolStripSeparator))
				{
					empty4.Height = Math.Max(toolStripItem.Bounds.Height, empty4.Height);
					empty4.Width = Math.Max(toolStripItem.Bounds.Width, empty4.Width);
				}
			}
			this.maxItemSize.Height = Math.Max(empty.Height + this.scaledTextPadding.Vertical, Math.Max(size.Height + this.scaledCheckPadding.Vertical, empty3.Height + this.scaledArrowPadding.Vertical));
			if (this.ShowImageMargin)
			{
				this.maxItemSize.Height = Math.Max(empty2.Height + this.scaledImagePadding.Vertical, this.maxItemSize.Height);
			}
			bool flag = this.ShowCheckMargin && size.Width == 0;
			bool flag2 = this.ShowImageMargin && empty2.Width == 0;
			empty3 = new Size(this.scaledArrowSize, this.maxItemSize.Height);
			empty.Height = this.maxItemSize.Height - this.scaledTextPadding.Vertical;
			empty2.Height = this.maxItemSize.Height - this.scaledImagePadding.Vertical;
			size.Height = this.maxItemSize.Height - this.scaledCheckPadding.Vertical;
			empty.Width = Math.Max(empty.Width, empty4.Width);
			Point empty5 = Point.Empty;
			int num = Math.Max(0, empty2.Width - this.scaledDefaultImageSize.Width);
			int num2;
			if (this.ShowCheckMargin && this.ShowImageMargin)
			{
				num2 = this.scaledDefaultImageAndCheckMarginWidth;
				num2 += num;
				empty5 = new Point(this.scaledCheckPadding.Left, this.scaledCheckPadding.Top);
				this.checkRectangle = LayoutUtils.Align(size, new Rectangle(empty5.X, empty5.Y, size.Width, this.maxItemSize.Height), ContentAlignment.MiddleCenter);
				empty5.X = this.checkRectangle.Right + this.scaledCheckPadding.Right + this.scaledImagePadding.Left;
				empty5.Y = this.scaledImagePadding.Top;
				this.imageRectangle = LayoutUtils.Align(empty2, new Rectangle(empty5.X, empty5.Y, empty2.Width, this.maxItemSize.Height), ContentAlignment.MiddleCenter);
			}
			else if (this.ShowCheckMargin)
			{
				num2 = this.scaledDefaultImageMarginWidth;
				empty5 = new Point(1, this.scaledCheckPadding.Top);
				this.checkRectangle = LayoutUtils.Align(size, new Rectangle(empty5.X, empty5.Y, num2, this.maxItemSize.Height), ContentAlignment.MiddleCenter);
				this.imageRectangle = Rectangle.Empty;
			}
			else if (this.ShowImageMargin)
			{
				num2 = this.scaledDefaultImageMarginWidth;
				num2 += num;
				empty5 = new Point(1, this.scaledCheckPadding.Top);
				this.checkRectangle = LayoutUtils.Align(LayoutUtils.UnionSizes(size, empty2), new Rectangle(empty5.X, empty5.Y, num2 - 1, this.maxItemSize.Height), ContentAlignment.MiddleCenter);
				this.imageRectangle = this.checkRectangle;
			}
			else
			{
				num2 = 0;
			}
			empty5.X = num2 + 1;
			this.imageMarginBounds = new Rectangle(0, 0, num2, base.Height);
			empty5.X = this.imageMarginBounds.Right + this.scaledTextPadding.Left;
			empty5.Y = this.scaledTextPadding.Top;
			this.textRectangle = new Rectangle(empty5, empty);
			empty5.X = this.textRectangle.Right + this.scaledTextPadding.Right + this.scaledArrowPadding.Left;
			empty5.Y = this.scaledArrowPadding.Top;
			this.arrowRectangle = new Rectangle(empty5, empty3);
			this.maxItemSize.Width = this.arrowRectangle.Right + this.scaledArrowPadding.Right - this.imageMarginBounds.Left;
			base.Padding = this.DefaultPadding;
			int num3 = this.imageMarginBounds.Width;
			if (this.RightToLeft == RightToLeft.Yes)
			{
				num3 += this.scaledTextPadding.Right;
				int width = this.maxItemSize.Width;
				this.checkRectangle.X = width - this.checkRectangle.Right;
				this.imageRectangle.X = width - this.imageRectangle.Right;
				this.textRectangle.X = width - this.textRectangle.Right;
				this.arrowRectangle.X = width - this.arrowRectangle.Right;
				this.imageMarginBounds.X = width - this.imageMarginBounds.Right;
			}
			else
			{
				num3 += this.scaledTextPadding.Left;
			}
			this.maxItemSize.Height = this.maxItemSize.Height + this.maxItemSize.Height % 2;
			this.textRectangle.Y = LayoutUtils.VAlign(this.textRectangle.Size, new Rectangle(Point.Empty, this.maxItemSize), ContentAlignment.MiddleCenter).Y;
			this.textRectangle.Y = this.textRectangle.Y + this.textRectangle.Height % 2;
			this.state[ToolStripDropDownMenu.stateMaxItemSizeValid] = true;
			this.PaddingToTrim = num3;
		}

		// Token: 0x06004140 RID: 16704 RVA: 0x00116A70 File Offset: 0x00114C70
		internal override void ChangeSelection(ToolStripItem nextItem)
		{
			if (nextItem != null)
			{
				Rectangle displayRectangle = this.DisplayRectangle;
				if (!displayRectangle.Contains(displayRectangle.X, nextItem.Bounds.Top) || !displayRectangle.Contains(displayRectangle.X, nextItem.Bounds.Bottom))
				{
					int num;
					if (displayRectangle.Y > nextItem.Bounds.Top)
					{
						num = nextItem.Bounds.Top - displayRectangle.Y;
					}
					else
					{
						num = nextItem.Bounds.Bottom - (displayRectangle.Y + displayRectangle.Height);
						int num2 = this.Items.IndexOf(nextItem);
						while (num2 >= 0 && ((this.Items[num2].Visible && displayRectangle.Contains(displayRectangle.X, this.Items[num2].Bounds.Top - num)) || !this.Items[num2].Visible))
						{
							num2--;
						}
						if (num2 >= 0 && displayRectangle.Contains(displayRectangle.X, this.Items[num2].Bounds.Bottom - num))
						{
							num += this.Items[num2].Bounds.Bottom - num - displayRectangle.Top;
						}
					}
					this.ScrollInternal(num);
					this.UpdateScrollButtonStatus();
				}
			}
			base.ChangeSelection(nextItem);
		}

		/// <summary>Creates a default <see cref="T:System.Windows.Forms.ToolStripMenuItem" /> with the specified text, image, and event handler on a new <see cref="T:System.Windows.Forms.ToolStripDropDownMenu" />.</summary>
		/// <param name="text">The text to use for the <see cref="T:System.Windows.Forms.ToolStripMenuItem" />. If the <paramref name="text" /> parameter is a hyphen (-), this method creates a <see cref="T:System.Windows.Forms.ToolStripSeparator" />.</param>
		/// <param name="image">The <see cref="T:System.Drawing.Image" /> to display on the <see cref="T:System.Windows.Forms.ToolStripMenuItem" />.</param>
		/// <param name="onClick">An event handler that raises the <see cref="E:System.Windows.Forms.ToolStripItem.Click" /> event when the <see cref="T:System.Windows.Forms.ToolStripMenuItem" /> is clicked.</param>
		/// <returns>A <see cref="T:System.Windows.Forms.ToolStripMenuItem" />, or a <see cref="T:System.Windows.Forms.ToolStripSeparator" /> if the <paramref name="text" /> parameter is a hyphen (-).</returns>
		// Token: 0x06004141 RID: 16705 RVA: 0x000D8E69 File Offset: 0x000D7069
		protected internal override ToolStripItem CreateDefaultItem(string text, Image image, EventHandler onClick)
		{
			if (text == "-")
			{
				return new ToolStripSeparator();
			}
			return new ToolStripMenuItem(text, image, onClick);
		}

		// Token: 0x06004142 RID: 16706 RVA: 0x00116BEC File Offset: 0x00114DEC
		internal override ToolStripItem GetNextItem(ToolStripItem start, ArrowDirection direction, bool rtlAware)
		{
			return this.GetNextItem(start, direction);
		}

		// Token: 0x06004143 RID: 16707 RVA: 0x00116BF8 File Offset: 0x00114DF8
		internal override void Initialize()
		{
			base.Initialize();
			base.Padding = this.DefaultPadding;
			FlowLayoutSettings flowLayoutSettings = FlowLayout.CreateSettings(this);
			flowLayoutSettings.FlowDirection = FlowDirection.TopDown;
			this.state[ToolStripDropDownMenu.stateShowImageMargin] = true;
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.Layout" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.LayoutEventArgs" /> that contains the event data.</param>
		// Token: 0x06004144 RID: 16708 RVA: 0x00116C36 File Offset: 0x00114E36
		protected override void OnLayout(LayoutEventArgs e)
		{
			if (!base.IsDisposed)
			{
				this.RequiresScrollButtons = false;
				this.CalculateInternalLayoutMetrics();
				base.OnLayout(e);
				if (!this.RequiresScrollButtons)
				{
					this.ResetScrollPosition();
				}
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.ToolStripDropDown.FontChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06004145 RID: 16709 RVA: 0x00116C62 File Offset: 0x00114E62
		protected override void OnFontChanged(EventArgs e)
		{
			this.tabWidth = -1;
			base.OnFontChanged(e);
		}

		/// <summary>Paints the background of the control.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param>
		// Token: 0x06004146 RID: 16710 RVA: 0x00116C72 File Offset: 0x00114E72
		protected override void OnPaintBackground(PaintEventArgs e)
		{
			base.OnPaintBackground(e);
			if (this.ShowCheckMargin || this.ShowImageMargin)
			{
				base.Renderer.DrawImageMargin(new ToolStripRenderEventArgs(e.Graphics, this, this.ImageMargin, SystemColors.Control));
			}
		}

		// Token: 0x06004147 RID: 16711 RVA: 0x00116CB0 File Offset: 0x00114EB0
		internal override void ResetScaling(int newDpi)
		{
			base.ResetScaling(newDpi);
			CommonProperties.xClearPreferredSizeCache(this);
			this.scaledDefaultImageSize = DpiHelper.LogicalToDeviceUnits(ToolStripDropDownMenu.DefaultImageSize, newDpi);
			this.scaledDefaultImageMarginWidth = DpiHelper.LogicalToDeviceUnits(ToolStripDropDownMenu.DefaultImageMarginWidth, newDpi) + 1;
			this.scaledDefaultImageAndCheckMarginWidth = DpiHelper.LogicalToDeviceUnits(ToolStripDropDownMenu.DefaultImageAndCheckMarginWidth, newDpi) + 1;
			this.scaledImagePadding = DpiHelper.LogicalToDeviceUnits(ToolStripDropDownMenu.ImagePadding, newDpi);
			this.scaledTextPadding = DpiHelper.LogicalToDeviceUnits(ToolStripDropDownMenu.TextPadding, newDpi);
			this.scaledCheckPadding = DpiHelper.LogicalToDeviceUnits(ToolStripDropDownMenu.CheckPadding, newDpi);
			this.scaledArrowPadding = DpiHelper.LogicalToDeviceUnits(ToolStripDropDownMenu.ArrowPadding, newDpi);
			this.scaledArrowSize = DpiHelper.LogicalToDeviceUnits(ToolStripDropDownMenu.ArrowSize, newDpi);
		}

		// Token: 0x17000FEF RID: 4079
		// (get) Token: 0x06004148 RID: 16712 RVA: 0x00116D56 File Offset: 0x00114F56
		// (set) Token: 0x06004149 RID: 16713 RVA: 0x00116D60 File Offset: 0x00114F60
		internal override bool RequiresScrollButtons
		{
			get
			{
				return base.GetToolStripState(32);
			}
			set
			{
				bool flag = this.RequiresScrollButtons != value;
				base.SetToolStripState(32, value);
				if (flag)
				{
					this.UpdateScrollButtonLocations();
					if (this.Items.Count > 0)
					{
						int num = this.Items[0].Bounds.Top - this.DisplayRectangle.Top;
						this.ScrollInternal(num);
						this.scrollAmount -= num;
						if (value)
						{
							this.RestoreScrollPosition();
							return;
						}
					}
					else
					{
						this.scrollAmount = 0;
					}
				}
			}
		}

		// Token: 0x0600414A RID: 16714 RVA: 0x00116DE9 File Offset: 0x00114FE9
		internal void ResetScrollPosition()
		{
			this.scrollAmount = 0;
		}

		// Token: 0x0600414B RID: 16715 RVA: 0x00116DF4 File Offset: 0x00114FF4
		internal void RestoreScrollPosition()
		{
			if (!this.RequiresScrollButtons || this.Items.Count == 0)
			{
				return;
			}
			Rectangle displayRectangle = this.DisplayRectangle;
			int num = displayRectangle.Top - this.Items[0].Bounds.Top;
			int num2 = this.scrollAmount - num;
			int num3 = 0;
			if (num2 > 0)
			{
				for (int i = 0; i < this.Items.Count; i++)
				{
					if (num3 >= num2)
					{
						break;
					}
					if (this.Items[i].Available)
					{
						Rectangle bounds = this.Items[this.Items.Count - 1].Bounds;
						bounds.Y -= num3;
						if (displayRectangle.Contains(displayRectangle.X, bounds.Top) && displayRectangle.Contains(displayRectangle.X, bounds.Bottom))
						{
							break;
						}
						if (i < this.Items.Count - 1)
						{
							num3 += this.Items[i + 1].Bounds.Top - this.Items[i].Bounds.Top;
						}
						else
						{
							num3 += this.Items[i].Bounds.Height;
						}
					}
				}
			}
			else
			{
				int num4 = this.Items.Count - 1;
				while (num4 >= 0 && num3 > num2)
				{
					if (this.Items[num4].Available)
					{
						Rectangle bounds2 = this.Items[0].Bounds;
						bounds2.Y -= num3;
						if (displayRectangle.Contains(displayRectangle.X, bounds2.Top) && displayRectangle.Contains(displayRectangle.X, bounds2.Bottom))
						{
							break;
						}
						if (num4 > 0)
						{
							num3 -= this.Items[num4].Bounds.Top - this.Items[num4 - 1].Bounds.Top;
						}
						else
						{
							num3 -= this.Items[num4].Bounds.Height;
						}
					}
					num4--;
				}
			}
			this.ScrollInternal(num3);
			this.scrollAmount = this.DisplayRectangle.Top - this.Items[0].Bounds.Top;
			this.UpdateScrollButtonLocations();
		}

		// Token: 0x0600414C RID: 16716 RVA: 0x0011708D File Offset: 0x0011528D
		internal override void ScrollInternal(int delta)
		{
			base.ScrollInternal(delta);
			this.scrollAmount += delta;
		}

		// Token: 0x0600414D RID: 16717 RVA: 0x001170A4 File Offset: 0x001152A4
		internal void ScrollInternal(bool up)
		{
			this.UpdateScrollButtonStatus();
			int num;
			if (this.indexOfFirstDisplayedItem == -1 || this.indexOfFirstDisplayedItem >= this.Items.Count)
			{
				int menuHeight = SystemInformation.MenuHeight;
				num = (up ? (-menuHeight) : menuHeight);
			}
			else if (up)
			{
				if (this.indexOfFirstDisplayedItem == 0)
				{
					num = 0;
				}
				else
				{
					ToolStripItem toolStripItem = this.Items[this.indexOfFirstDisplayedItem - 1];
					ToolStripItem toolStripItem2 = this.Items[this.indexOfFirstDisplayedItem];
					num = toolStripItem.Bounds.Top - toolStripItem2.Bounds.Top;
				}
			}
			else
			{
				if (this.indexOfFirstDisplayedItem == this.Items.Count - 1)
				{
				}
				ToolStripItem toolStripItem3 = this.Items[this.indexOfFirstDisplayedItem];
				ToolStripItem toolStripItem4 = this.Items[this.indexOfFirstDisplayedItem + 1];
				num = toolStripItem4.Bounds.Top - toolStripItem3.Bounds.Top;
			}
			this.ScrollInternal(num);
			this.UpdateScrollButtonLocations();
		}

		/// <summary>Resets the collection of displayed and overflow items after a layout is done.</summary>
		// Token: 0x0600414E RID: 16718 RVA: 0x001171B0 File Offset: 0x001153B0
		protected override void SetDisplayedItems()
		{
			base.SetDisplayedItems();
			if (this.RequiresScrollButtons)
			{
				this.DisplayedItems.Add(this.UpScrollButton);
				this.DisplayedItems.Add(this.DownScrollButton);
				this.UpdateScrollButtonLocations();
				this.UpScrollButton.Visible = true;
				this.DownScrollButton.Visible = true;
				return;
			}
			this.UpScrollButton.Visible = false;
			this.DownScrollButton.Visible = false;
		}

		// Token: 0x0600414F RID: 16719 RVA: 0x00117228 File Offset: 0x00115428
		private void UpdateScrollButtonLocations()
		{
			if (base.GetToolStripState(32))
			{
				Size preferredSize = this.UpScrollButton.GetPreferredSize(Size.Empty);
				Point point = new Point(1, 0);
				this.UpScrollButton.SetBounds(new Rectangle(point, preferredSize));
				Size preferredSize2 = this.DownScrollButton.GetPreferredSize(Size.Empty);
				int height = base.GetDropDownBounds(base.Bounds).Height;
				Point point2 = new Point(1, height - preferredSize2.Height);
				this.DownScrollButton.SetBounds(new Rectangle(point2, preferredSize2));
				this.UpdateScrollButtonStatus();
			}
		}

		// Token: 0x06004150 RID: 16720 RVA: 0x001172BC File Offset: 0x001154BC
		private void UpdateScrollButtonStatus()
		{
			Rectangle displayRectangle = this.DisplayRectangle;
			this.indexOfFirstDisplayedItem = -1;
			int num = int.MaxValue;
			int num2 = 0;
			for (int i = 0; i < this.Items.Count; i++)
			{
				ToolStripItem toolStripItem = this.Items[i];
				if (this.UpScrollButton != toolStripItem && this.DownScrollButton != toolStripItem && toolStripItem.Available)
				{
					if (this.indexOfFirstDisplayedItem == -1 && displayRectangle.Contains(displayRectangle.X, toolStripItem.Bounds.Top))
					{
						this.indexOfFirstDisplayedItem = i;
					}
					num = Math.Min(num, toolStripItem.Bounds.Top);
					num2 = Math.Max(num2, toolStripItem.Bounds.Bottom);
				}
			}
			this.UpScrollButton.Enabled = !displayRectangle.Contains(displayRectangle.X, num);
			this.DownScrollButton.Enabled = !displayRectangle.Contains(displayRectangle.X, num2);
		}

		// Token: 0x040024E7 RID: 9447
		private static readonly Padding ImagePadding = new Padding(2);

		// Token: 0x040024E8 RID: 9448
		private static readonly Padding TextPadding = new Padding(8, 1, 9, 1);

		// Token: 0x040024E9 RID: 9449
		private static readonly Padding CheckPadding = new Padding(5, 2, 2, 2);

		// Token: 0x040024EA RID: 9450
		private static readonly Padding ArrowPadding = new Padding(0, 0, 8, 0);

		// Token: 0x040024EB RID: 9451
		private static int DefaultImageMarginWidth = 24;

		// Token: 0x040024EC RID: 9452
		private static int DefaultImageAndCheckMarginWidth = 46;

		// Token: 0x040024ED RID: 9453
		private static int ArrowSize = 10;

		// Token: 0x040024EE RID: 9454
		private Size maxItemSize = Size.Empty;

		// Token: 0x040024EF RID: 9455
		private Rectangle checkRectangle = Rectangle.Empty;

		// Token: 0x040024F0 RID: 9456
		private Rectangle imageRectangle = Rectangle.Empty;

		// Token: 0x040024F1 RID: 9457
		private Rectangle arrowRectangle = Rectangle.Empty;

		// Token: 0x040024F2 RID: 9458
		private Rectangle textRectangle = Rectangle.Empty;

		// Token: 0x040024F3 RID: 9459
		private Rectangle imageMarginBounds = Rectangle.Empty;

		// Token: 0x040024F4 RID: 9460
		private int paddingToTrim;

		// Token: 0x040024F5 RID: 9461
		private int tabWidth = -1;

		// Token: 0x040024F6 RID: 9462
		private ToolStripScrollButton upScrollButton;

		// Token: 0x040024F7 RID: 9463
		private ToolStripScrollButton downScrollButton;

		// Token: 0x040024F8 RID: 9464
		private int scrollAmount;

		// Token: 0x040024F9 RID: 9465
		private int indexOfFirstDisplayedItem = -1;

		// Token: 0x040024FA RID: 9466
		private BitVector32 state;

		// Token: 0x040024FB RID: 9467
		private static readonly int stateShowImageMargin = BitVector32.CreateMask();

		// Token: 0x040024FC RID: 9468
		private static readonly int stateShowCheckMargin = BitVector32.CreateMask(ToolStripDropDownMenu.stateShowImageMargin);

		// Token: 0x040024FD RID: 9469
		private static readonly int stateMaxItemSizeValid = BitVector32.CreateMask(ToolStripDropDownMenu.stateShowCheckMargin);

		// Token: 0x040024FE RID: 9470
		private static readonly Size DefaultImageSize = new Size(16, 16);

		// Token: 0x040024FF RID: 9471
		private Size scaledDefaultImageSize = ToolStripDropDownMenu.DefaultImageSize;

		// Token: 0x04002500 RID: 9472
		private int scaledDefaultImageMarginWidth = ToolStripDropDownMenu.DefaultImageMarginWidth + 1;

		// Token: 0x04002501 RID: 9473
		private int scaledDefaultImageAndCheckMarginWidth = ToolStripDropDownMenu.DefaultImageAndCheckMarginWidth + 1;

		// Token: 0x04002502 RID: 9474
		private Padding scaledImagePadding = ToolStripDropDownMenu.ImagePadding;

		// Token: 0x04002503 RID: 9475
		private Padding scaledTextPadding = ToolStripDropDownMenu.TextPadding;

		// Token: 0x04002504 RID: 9476
		private Padding scaledCheckPadding = ToolStripDropDownMenu.CheckPadding;

		// Token: 0x04002505 RID: 9477
		private Padding scaledArrowPadding = ToolStripDropDownMenu.ArrowPadding;

		// Token: 0x04002506 RID: 9478
		private int scaledArrowSize = ToolStripDropDownMenu.ArrowSize;

		// Token: 0x02000801 RID: 2049
		internal sealed class ToolStripDropDownLayoutEngine : FlowLayout
		{
			// Token: 0x06006EBC RID: 28348 RVA: 0x001957D0 File Offset: 0x001939D0
			internal override Size GetPreferredSize(IArrangedElement container, Size proposedConstraints)
			{
				Size preferredSize = base.GetPreferredSize(container, proposedConstraints);
				ToolStripDropDownMenu toolStripDropDownMenu = container as ToolStripDropDownMenu;
				if (toolStripDropDownMenu != null)
				{
					preferredSize.Width = toolStripDropDownMenu.MaxItemSize.Width - toolStripDropDownMenu.PaddingToTrim;
				}
				return preferredSize;
			}

			// Token: 0x040042F6 RID: 17142
			public static ToolStripDropDownMenu.ToolStripDropDownLayoutEngine LayoutInstance = new ToolStripDropDownMenu.ToolStripDropDownLayoutEngine();
		}
	}
}
