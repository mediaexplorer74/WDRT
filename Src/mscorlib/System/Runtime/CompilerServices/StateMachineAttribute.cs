using System;

namespace System.Runtime.CompilerServices
{
	/// <summary>Allows you to determine whether a method is a state machine method.</summary>
	// Token: 0x020008E8 RID: 2280
	[AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]
	[__DynamicallyInvokable]
	[Serializable]
	public class StateMachineAttribute : Attribute
	{
		/// <summary>Returns the type object for the underlying state machine type that was generated by the compiler to implement the state machine method.</summary>
		/// <returns>Gets the type object for the underlying state machine type that was generated by the compiler to implement the state machine method.</returns>
		// Token: 0x17001025 RID: 4133
		// (get) Token: 0x06005E1B RID: 24091 RVA: 0x0014BD25 File Offset: 0x00149F25
		// (set) Token: 0x06005E1C RID: 24092 RVA: 0x0014BD2D File Offset: 0x00149F2D
		[__DynamicallyInvokable]
		public Type StateMachineType
		{
			[__DynamicallyInvokable]
			get;
			private set; }

		/// <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.StateMachineAttribute" /> class.</summary>
		/// <param name="stateMachineType">The type object for the underlying state machine type that was generated by the compiler to implement the state machine method.</param>
		// Token: 0x06005E1D RID: 24093 RVA: 0x0014BD36 File Offset: 0x00149F36
		[__DynamicallyInvokable]
		public StateMachineAttribute(Type stateMachineType)
		{
			this.StateMachineType = stateMachineType;
		}
	}
}
