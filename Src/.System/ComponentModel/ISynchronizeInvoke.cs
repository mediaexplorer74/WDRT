using System;
using System.Security.Permissions;

namespace System.ComponentModel
{
	/// <summary>Provides a way to synchronously or asynchronously execute a delegate.</summary>
	// Token: 0x02000578 RID: 1400
	public interface ISynchronizeInvoke
	{
		/// <summary>Gets a value indicating whether the caller must call <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /> when calling an object that implements this interface.</summary>
		/// <returns>
		///   <see langword="true" /> if the caller must call <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />; otherwise, <see langword="false" />.</returns>
		// Token: 0x17000CAC RID: 3244
		// (get) Token: 0x060033D9 RID: 13273
		bool InvokeRequired { get; }

		/// <summary>Asynchronously executes the delegate on the thread that created this object.</summary>
		/// <param name="method">A <see cref="T:System.Delegate" /> to a method that takes parameters of the same number and type that are contained in <paramref name="args" />.</param>
		/// <param name="args">An array of type <see cref="T:System.Object" /> to pass as arguments to the given method. This can be <see langword="null" /> if no arguments are needed.</param>
		/// <returns>An <see cref="T:System.IAsyncResult" /> interface that represents the asynchronous operation started by calling this method.</returns>
		// Token: 0x060033DA RID: 13274
		[HostProtection(SecurityAction.LinkDemand, Synchronization = true, ExternalThreading = true)]
		IAsyncResult BeginInvoke(Delegate method, object[] args);

		/// <summary>Waits until the process started by calling <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /> completes, and then returns the value generated by the process.</summary>
		/// <param name="result">An <see cref="T:System.IAsyncResult" /> interface that represents the asynchronous operation started by calling <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />.</param>
		/// <returns>An <see cref="T:System.Object" /> that represents the return value generated by the asynchronous operation.</returns>
		// Token: 0x060033DB RID: 13275
		object EndInvoke(IAsyncResult result);

		/// <summary>Synchronously executes the delegate on the thread that created this object and marshals the call to the creating thread.</summary>
		/// <param name="method">A <see cref="T:System.Delegate" /> that contains a method to call, in the context of the thread for the control.</param>
		/// <param name="args">An array of type <see cref="T:System.Object" /> that represents the arguments to pass to the given method. This can be <see langword="null" /> if no arguments are needed.</param>
		/// <returns>An <see cref="T:System.Object" /> that represents the return value from the delegate being invoked, or <see langword="null" /> if the delegate has no return value.</returns>
		// Token: 0x060033DC RID: 13276
		object Invoke(Delegate method, object[] args);
	}
}
