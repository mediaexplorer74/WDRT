using System;
using System.Collections;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Globalization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.Windows.Forms.Layout;

namespace System.Windows.Forms
{
	/// <summary>Represents a control that allows the user to select a single item from a list that is displayed when the user clicks a <see cref="T:System.Windows.Forms.ToolStripDropDownButton" />. Although <see cref="T:System.Windows.Forms.ToolStripDropDownMenu" /> and <see cref="T:System.Windows.Forms.ToolStripDropDown" /> replace and add functionality to the <see cref="T:System.Windows.Forms.Menu" /> control of previous versions, <see cref="T:System.Windows.Forms.Menu" /> is retained for both backward compatibility and future use if you choose.</summary>
	// Token: 0x020003B7 RID: 951
	[Designer("System.Windows.Forms.Design.ToolStripDropDownDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	[ComVisible(true)]
	[ClassInterface(ClassInterfaceType.AutoDispatch)]
	public class ToolStripDropDown : ToolStrip
	{
		/// <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> class.</summary>
		// Token: 0x06003FF1 RID: 16369 RVA: 0x001128B0 File Offset: 0x00110AB0
		public ToolStripDropDown()
		{
			if (DpiHelper.EnableToolStripHighDpiImprovements)
			{
				this.scaledDefaultPadding = DpiHelper.LogicalToDeviceUnits(ToolStripDropDown.defaultPadding, 0);
			}
			bool isRestrictedWindow = this.IsRestrictedWindow;
			base.SuspendLayout();
			this.Initialize();
			base.ResumeLayout(false);
		}

		// Token: 0x06003FF2 RID: 16370 RVA: 0x00112934 File Offset: 0x00110B34
		internal ToolStripDropDown(ToolStripItem ownerItem)
			: this()
		{
			this.ownerItem = ownerItem;
		}

		// Token: 0x06003FF3 RID: 16371 RVA: 0x00112943 File Offset: 0x00110B43
		internal ToolStripDropDown(ToolStripItem ownerItem, bool isAutoGenerated)
			: this(ownerItem)
		{
			this.isAutoGenerated = isAutoGenerated;
		}

		/// <summary>This property is not relevant to this class.</summary>
		/// <returns>
		///   <see langword="true" /> to enable item reordering; otherwise, <see langword="false" />.</returns>
		// Token: 0x17000F9F RID: 3999
		// (get) Token: 0x06003FF4 RID: 16372 RVA: 0x00112953 File Offset: 0x00110B53
		// (set) Token: 0x06003FF5 RID: 16373 RVA: 0x0011295B File Offset: 0x00110B5B
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new bool AllowItemReorder
		{
			get
			{
				return base.AllowItemReorder;
			}
			set
			{
				base.AllowItemReorder = value;
			}
		}

		/// <summary>Gets or sets a value indicating whether the <see cref="P:System.Windows.Forms.ToolStripDropDown.Opacity" /> of the form can be adjusted.</summary>
		/// <returns>
		///   <see langword="true" /> if the <see cref="P:System.Windows.Forms.ToolStripDropDown.Opacity" /> of the form can be adjusted; otherwise, <see langword="false" />.</returns>
		// Token: 0x17000FA0 RID: 4000
		// (get) Token: 0x06003FF6 RID: 16374 RVA: 0x00112964 File Offset: 0x00110B64
		// (set) Token: 0x06003FF7 RID: 16375 RVA: 0x00112978 File Offset: 0x00110B78
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[SRDescription("ControlAllowTransparencyDescr")]
		public bool AllowTransparency
		{
			get
			{
				return this.state[ToolStripDropDown.stateAllowTransparency];
			}
			set
			{
				if (value != this.state[ToolStripDropDown.stateAllowTransparency] && OSFeature.Feature.IsPresent(OSFeature.LayeredWindows))
				{
					this.state[ToolStripDropDown.stateAllowTransparency] = value;
					this.state[ToolStripDropDown.stateLayered] = this.state[ToolStripDropDown.stateAllowTransparency];
					base.UpdateStyles();
					if (!value)
					{
						if (base.Properties.ContainsObject(ToolStripDropDown.PropOpacity))
						{
							base.Properties.SetObject(ToolStripDropDown.PropOpacity, 1f);
						}
						this.UpdateLayered();
					}
				}
			}
		}

		/// <summary>This property is not relevant to this class.</summary>
		/// <returns>One of the <see cref="T:System.Windows.Forms.AnchorStyles" /> values.</returns>
		// Token: 0x17000FA1 RID: 4001
		// (get) Token: 0x06003FF8 RID: 16376 RVA: 0x00112A15 File Offset: 0x00110C15
		// (set) Token: 0x06003FF9 RID: 16377 RVA: 0x00112A1D File Offset: 0x00110C1D
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public override AnchorStyles Anchor
		{
			get
			{
				return base.Anchor;
			}
			set
			{
				base.Anchor = value;
			}
		}

		/// <summary>Gets or sets a value indicating whether the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> automatically adjusts its size when the form is resized.</summary>
		/// <returns>
		///   <see langword="true" /> if the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> control automatically resizes; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
		// Token: 0x17000FA2 RID: 4002
		// (get) Token: 0x06003FFA RID: 16378 RVA: 0x00112A26 File Offset: 0x00110C26
		// (set) Token: 0x06003FFB RID: 16379 RVA: 0x00112A2E File Offset: 0x00110C2E
		[DefaultValue(true)]
		public override bool AutoSize
		{
			get
			{
				return this.autoSize;
			}
			set
			{
				if (this.autoSize != value)
				{
					this.autoSize = value;
					LayoutTransaction.DoLayout(this, this, PropertyNames.AutoSize);
					this.OnAutoSizeChanged(EventArgs.Empty);
				}
			}
		}

		/// <summary>Gets or sets a value indicating whether the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> control should automatically close when it has lost activation.</summary>
		/// <returns>
		///   <see langword="true" /> if the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> control automatically closes; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
		// Token: 0x17000FA3 RID: 4003
		// (get) Token: 0x06003FFC RID: 16380 RVA: 0x00112A57 File Offset: 0x00110C57
		// (set) Token: 0x06003FFD RID: 16381 RVA: 0x00112A5F File Offset: 0x00110C5F
		[DefaultValue(true)]
		[SRCategory("CatBehavior")]
		[SRDescription("ToolStripDropDownAutoCloseDescr")]
		public bool AutoClose
		{
			get
			{
				return this.autoClose;
			}
			set
			{
				if (this.autoClose != value)
				{
					this.autoClose = value;
					this.ApplyTopMost(!this.autoClose);
				}
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> property changes.</summary>
		// Token: 0x14000317 RID: 791
		// (add) Token: 0x06003FFE RID: 16382 RVA: 0x0001188D File Offset: 0x0000FA8D
		// (remove) Token: 0x06003FFF RID: 16383 RVA: 0x00011896 File Offset: 0x0000FA96
		[Browsable(false)]
		public new event EventHandler BackgroundImageChanged
		{
			add
			{
				base.BackgroundImageChanged += value;
			}
			remove
			{
				base.BackgroundImageChanged -= value;
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> property changes.</summary>
		// Token: 0x14000318 RID: 792
		// (add) Token: 0x06004000 RID: 16384 RVA: 0x000118B0 File Offset: 0x0000FAB0
		// (remove) Token: 0x06004001 RID: 16385 RVA: 0x000118B9 File Offset: 0x0000FAB9
		[Browsable(false)]
		public new event EventHandler BackgroundImageLayoutChanged
		{
			add
			{
				base.BackgroundImageLayoutChanged += value;
			}
			remove
			{
				base.BackgroundImageLayoutChanged -= value;
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.ToolStrip.BindingContext" /> property changes.</summary>
		// Token: 0x14000319 RID: 793
		// (add) Token: 0x06004002 RID: 16386 RVA: 0x00112A80 File Offset: 0x00110C80
		// (remove) Token: 0x06004003 RID: 16387 RVA: 0x00112A89 File Offset: 0x00110C89
		[Browsable(false)]
		public new event EventHandler BindingContextChanged
		{
			add
			{
				base.BindingContextChanged += value;
			}
			remove
			{
				base.BindingContextChanged -= value;
			}
		}

		/// <summary>Gets or sets a value indicating whether the items in a <see cref="T:System.Windows.Forms.ToolStripDropDown" /> can be sent to an overflow menu.</summary>
		/// <returns>
		///   <see langword="true" /> to send <see cref="T:System.Windows.Forms.ToolStripDropDown" /> items to an overflow menu; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
		// Token: 0x17000FA4 RID: 4004
		// (get) Token: 0x06004004 RID: 16388 RVA: 0x000D8D08 File Offset: 0x000D6F08
		// (set) Token: 0x06004005 RID: 16389 RVA: 0x000D8D10 File Offset: 0x000D6F10
		[DefaultValue(false)]
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new bool CanOverflow
		{
			get
			{
				return base.CanOverflow;
			}
			set
			{
				base.CanOverflow = value;
			}
		}

		/// <summary>Occurs when the focus or keyboard user interface (UI) cues change.</summary>
		// Token: 0x1400031A RID: 794
		// (add) Token: 0x06004006 RID: 16390 RVA: 0x00112A92 File Offset: 0x00110C92
		// (remove) Token: 0x06004007 RID: 16391 RVA: 0x00112A9B File Offset: 0x00110C9B
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event UICuesEventHandler ChangeUICues
		{
			add
			{
				base.ChangeUICues += value;
			}
			remove
			{
				base.ChangeUICues -= value;
			}
		}

		/// <summary>This property is not relevant to this class.</summary>
		/// <returns>The shortcut menu associated with the control.</returns>
		// Token: 0x17000FA5 RID: 4005
		// (get) Token: 0x06004008 RID: 16392 RVA: 0x00011919 File Offset: 0x0000FB19
		// (set) Token: 0x06004009 RID: 16393 RVA: 0x0001A0B1 File Offset: 0x000182B1
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new ContextMenu ContextMenu
		{
			get
			{
				return base.ContextMenu;
			}
			set
			{
				base.ContextMenu = value;
			}
		}

		/// <summary>This event is not relevant to this class.</summary>
		// Token: 0x1400031B RID: 795
		// (add) Token: 0x0600400A RID: 16394 RVA: 0x00112AA4 File Offset: 0x00110CA4
		// (remove) Token: 0x0600400B RID: 16395 RVA: 0x00112AAD File Offset: 0x00110CAD
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new event EventHandler ContextMenuChanged
		{
			add
			{
				base.ContextMenuChanged += value;
			}
			remove
			{
				base.ContextMenuChanged -= value;
			}
		}

		/// <summary>This property is not relevant to this class.</summary>
		/// <returns>The shortcut menu associated with the control.</returns>
		// Token: 0x17000FA6 RID: 4006
		// (get) Token: 0x0600400C RID: 16396 RVA: 0x00011936 File Offset: 0x0000FB36
		// (set) Token: 0x0600400D RID: 16397 RVA: 0x00112AB6 File Offset: 0x00110CB6
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new ContextMenuStrip ContextMenuStrip
		{
			get
			{
				return base.ContextMenuStrip;
			}
			set
			{
				base.ContextMenuStrip = value;
			}
		}

		/// <summary>This event is not relevant to this class.</summary>
		// Token: 0x1400031C RID: 796
		// (add) Token: 0x0600400E RID: 16398 RVA: 0x00112ABF File Offset: 0x00110CBF
		// (remove) Token: 0x0600400F RID: 16399 RVA: 0x00112AC8 File Offset: 0x00110CC8
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event EventHandler ContextMenuStripChanged
		{
			add
			{
				base.ContextMenuStripChanged += value;
			}
			remove
			{
				base.ContextMenuStripChanged -= value;
			}
		}

		/// <summary>Gets parameters of a new window.</summary>
		/// <returns>An object of type <see cref="T:System.Windows.Forms.CreateParams" /> used when creating a new window.</returns>
		// Token: 0x17000FA7 RID: 4007
		// (get) Token: 0x06004010 RID: 16400 RVA: 0x00112AD4 File Offset: 0x00110CD4
		protected override CreateParams CreateParams
		{
			[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
			get
			{
				CreateParams createParams = base.CreateParams;
				if (this.DropShadowEnabled)
				{
					createParams.ClassStyle |= 131072;
				}
				createParams.Style &= -79691777;
				createParams.ExStyle &= -262145;
				createParams.Style |= (this.TopLevel ? int.MinValue : 1073741824);
				createParams.ExStyle |= 65536;
				bool topLevel = this.TopLevel;
				if (topLevel && this.state[ToolStripDropDown.stateLayered])
				{
					createParams.ExStyle |= 524288;
				}
				else if (topLevel)
				{
					createParams.ClassStyle |= 2048;
				}
				else if (!topLevel)
				{
					createParams.Style |= 67108864;
				}
				return createParams;
			}
		}

		/// <summary>Gets the internal spacing, in pixels, of the contents of a <see cref="T:System.Windows.Forms.ToolStrip" />.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.Padding" /> value of <c>(0, 0, 1, 0)</c>.</returns>
		// Token: 0x17000FA8 RID: 4008
		// (get) Token: 0x06004011 RID: 16401 RVA: 0x00112BB6 File Offset: 0x00110DB6
		protected override Padding DefaultPadding
		{
			get
			{
				return this.scaledDefaultPadding;
			}
		}

		/// <summary>Gets a value indicating whether ToolTips are shown for the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> by default.</summary>
		/// <returns>
		///   <see langword="true" /> in all cases.</returns>
		// Token: 0x17000FA9 RID: 4009
		// (get) Token: 0x06004012 RID: 16402 RVA: 0x00012E4E File Offset: 0x0001104E
		protected override bool DefaultShowItemToolTips
		{
			get
			{
				return true;
			}
		}

		/// <summary>Gets the docking location of the <see cref="T:System.Windows.Forms.ToolStrip" />, indicating which borders are docked to the container.</summary>
		/// <returns>One of the <see cref="T:System.Windows.Forms.DockStyle" /> values. The default is Top.</returns>
		// Token: 0x17000FAA RID: 4010
		// (get) Token: 0x06004013 RID: 16403 RVA: 0x0001180C File Offset: 0x0000FA0C
		protected override DockStyle DefaultDock
		{
			get
			{
				return DockStyle.None;
			}
		}

		/// <summary>Gets or sets the direction in which the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> is displayed relative to the <see cref="T:System.Windows.Forms.ToolStrip" />.</summary>
		/// <returns>One of the <see cref="T:System.Windows.Forms.ToolStripDropDownDirection" /> values.</returns>
		// Token: 0x17000FAB RID: 4011
		// (get) Token: 0x06004014 RID: 16404 RVA: 0x00112BBE File Offset: 0x00110DBE
		// (set) Token: 0x06004015 RID: 16405 RVA: 0x00112BDC File Offset: 0x00110DDC
		public override ToolStripDropDownDirection DefaultDropDownDirection
		{
			get
			{
				if (this.childDropDownDirection != ToolStripDropDownDirection.Default)
				{
					return this.childDropDownDirection;
				}
				if (this.RightToLeft != RightToLeft.Yes)
				{
					return ToolStripDropDownDirection.Right;
				}
				return ToolStripDropDownDirection.Left;
			}
			set
			{
				this.childDropDownDirection = value;
				base.DefaultDropDownDirection = value;
			}
		}

		/// <summary>This property is not relevant to this class.</summary>
		/// <returns>One of the <see cref="T:System.Windows.Forms.DockStyle" /> values.</returns>
		// Token: 0x17000FAC RID: 4012
		// (get) Token: 0x06004016 RID: 16406 RVA: 0x001014F1 File Offset: 0x000FF6F1
		// (set) Token: 0x06004017 RID: 16407 RVA: 0x001014F9 File Offset: 0x000FF6F9
		[DefaultValue(DockStyle.None)]
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public override DockStyle Dock
		{
			get
			{
				return base.Dock;
			}
			set
			{
				base.Dock = value;
			}
		}

		/// <summary>This event is not relevant to this class.</summary>
		// Token: 0x1400031D RID: 797
		// (add) Token: 0x06004018 RID: 16408 RVA: 0x000FFD50 File Offset: 0x000FDF50
		// (remove) Token: 0x06004019 RID: 16409 RVA: 0x000FFD59 File Offset: 0x000FDF59
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event EventHandler DockChanged
		{
			add
			{
				base.DockChanged += value;
			}
			remove
			{
				base.DockChanged -= value;
			}
		}

		// Token: 0x17000FAD RID: 4013
		// (get) Token: 0x0600401A RID: 16410 RVA: 0x00112BEC File Offset: 0x00110DEC
		internal override NativeWindow DropDownOwnerWindow
		{
			get
			{
				if (this.ownerItem != null && this.ownerItem.Owner != null)
				{
					return this.ownerItem.Owner.DropDownOwnerWindow;
				}
				return base.DropDownOwnerWindow;
			}
		}

		/// <summary>Gets or sets a value indicating whether a three-dimensional shadow effect appears when the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> is displayed.</summary>
		/// <returns>
		///   <see langword="true" /> to enable the shadow effect; otherwise, <see langword="false" />.</returns>
		// Token: 0x17000FAE RID: 4014
		// (get) Token: 0x0600401B RID: 16411 RVA: 0x00112C1A File Offset: 0x00110E1A
		// (set) Token: 0x0600401C RID: 16412 RVA: 0x00112C33 File Offset: 0x00110E33
		public bool DropShadowEnabled
		{
			get
			{
				return this.dropShadowEnabled && this.TopMost && DisplayInformation.IsDropShadowEnabled;
			}
			set
			{
				if (this.dropShadowEnabled != value)
				{
					this.dropShadowEnabled = value;
					if (base.IsHandleCreated && !base.DesignMode)
					{
						base.RecreateHandle();
					}
				}
			}
		}

		/// <summary>Occurs when the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> is closed.</summary>
		// Token: 0x1400031E RID: 798
		// (add) Token: 0x0600401D RID: 16413 RVA: 0x00112C5B File Offset: 0x00110E5B
		// (remove) Token: 0x0600401E RID: 16414 RVA: 0x00112C6E File Offset: 0x00110E6E
		[SRCategory("CatAction")]
		[SRDescription("ToolStripDropDownClosedDecr")]
		public event ToolStripDropDownClosedEventHandler Closed
		{
			add
			{
				base.Events.AddHandler(ToolStripDropDown.EventClosed, value);
			}
			remove
			{
				base.Events.RemoveHandler(ToolStripDropDown.EventClosed, value);
			}
		}

		/// <summary>Occurs when the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> control is about to close.</summary>
		// Token: 0x1400031F RID: 799
		// (add) Token: 0x0600401F RID: 16415 RVA: 0x00112C81 File Offset: 0x00110E81
		// (remove) Token: 0x06004020 RID: 16416 RVA: 0x00112C94 File Offset: 0x00110E94
		[SRCategory("CatAction")]
		[SRDescription("ToolStripDropDownClosingDecr")]
		public event ToolStripDropDownClosingEventHandler Closing
		{
			add
			{
				base.Events.AddHandler(ToolStripDropDown.EventClosing, value);
			}
			remove
			{
				base.Events.RemoveHandler(ToolStripDropDown.EventClosing, value);
			}
		}

		/// <summary>Occurs when the focus enters the <see cref="T:System.Windows.Forms.ToolStripDropDown" />.</summary>
		// Token: 0x14000320 RID: 800
		// (add) Token: 0x06004021 RID: 16417 RVA: 0x000E3338 File Offset: 0x000E1538
		// (remove) Token: 0x06004022 RID: 16418 RVA: 0x000E3341 File Offset: 0x000E1541
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event EventHandler Enter
		{
			add
			{
				base.Enter += value;
			}
			remove
			{
				base.Enter -= value;
			}
		}

		/// <summary>Gets or sets the font of the text displayed on the <see cref="T:System.Windows.Forms.ToolStripDropDown" />.</summary>
		/// <returns>The <see cref="T:System.Drawing.Font" /> to apply to the text displayed by the control.</returns>
		// Token: 0x17000FAF RID: 4015
		// (get) Token: 0x06004023 RID: 16419 RVA: 0x00112CA7 File Offset: 0x00110EA7
		// (set) Token: 0x06004024 RID: 16420 RVA: 0x00112CDA File Offset: 0x00110EDA
		public override Font Font
		{
			get
			{
				if (base.IsFontSet())
				{
					return base.Font;
				}
				if (this.IsAutoGenerated && this.OwnerItem != null)
				{
					return this.OwnerItem.Font;
				}
				return base.Font;
			}
			set
			{
				base.Font = value;
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.ToolStripDropDown.Font" /> property changes.</summary>
		// Token: 0x14000321 RID: 801
		// (add) Token: 0x06004025 RID: 16421 RVA: 0x0005A900 File Offset: 0x00058B00
		// (remove) Token: 0x06004026 RID: 16422 RVA: 0x0005A909 File Offset: 0x00058B09
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event EventHandler FontChanged
		{
			add
			{
				base.FontChanged += value;
			}
			remove
			{
				base.FontChanged -= value;
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.ToolStrip.ForeColor" /> property changes.</summary>
		// Token: 0x14000322 RID: 802
		// (add) Token: 0x06004027 RID: 16423 RVA: 0x00112CE3 File Offset: 0x00110EE3
		// (remove) Token: 0x06004028 RID: 16424 RVA: 0x00112CEC File Offset: 0x00110EEC
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new event EventHandler ForeColorChanged
		{
			add
			{
				base.ForeColorChanged += value;
			}
			remove
			{
				base.ForeColorChanged -= value;
			}
		}

		/// <summary>This event is not relevant for this class.</summary>
		// Token: 0x14000323 RID: 803
		// (add) Token: 0x06004029 RID: 16425 RVA: 0x000F4D84 File Offset: 0x000F2F84
		// (remove) Token: 0x0600402A RID: 16426 RVA: 0x000F4D8D File Offset: 0x000F2F8D
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new event GiveFeedbackEventHandler GiveFeedback
		{
			add
			{
				base.GiveFeedback += value;
			}
			remove
			{
				base.GiveFeedback -= value;
			}
		}

		/// <summary>This property is not relevant to this class.</summary>
		/// <returns>One of <see cref="T:System.Windows.Forms.ToolStripGripDisplayStyle" /> the values.</returns>
		// Token: 0x17000FB0 RID: 4016
		// (get) Token: 0x0600402B RID: 16427 RVA: 0x00112CF5 File Offset: 0x00110EF5
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new ToolStripGripDisplayStyle GripDisplayStyle
		{
			get
			{
				return base.GripDisplayStyle;
			}
		}

		/// <summary>This property is not relevant to this class.</summary>
		/// <returns>The boundaries of the ToolStrip move handle.</returns>
		// Token: 0x17000FB1 RID: 4017
		// (get) Token: 0x0600402C RID: 16428 RVA: 0x00112CFD File Offset: 0x00110EFD
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new Rectangle GripRectangle
		{
			get
			{
				return base.GripRectangle;
			}
		}

		/// <summary>This property is not relevant to this class.</summary>
		/// <returns>A <see cref="T:System.Windows.Forms.Padding" /> value.</returns>
		// Token: 0x17000FB2 RID: 4018
		// (get) Token: 0x0600402D RID: 16429 RVA: 0x00112D05 File Offset: 0x00110F05
		// (set) Token: 0x0600402E RID: 16430 RVA: 0x00112D0D File Offset: 0x00110F0D
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public new Padding GripMargin
		{
			get
			{
				return base.GripMargin;
			}
			set
			{
				base.GripMargin = value;
			}
		}

		/// <summary>This property is not relevant to this class.</summary>
		/// <returns>One of the <see cref="T:System.Windows.Forms.ToolStripGripStyle" /> values.</returns>
		// Token: 0x17000FB3 RID: 4019
		// (get) Token: 0x0600402F RID: 16431 RVA: 0x000D8DD1 File Offset: 0x000D6FD1
		// (set) Token: 0x06004030 RID: 16432 RVA: 0x000D8DD9 File Offset: 0x000D6FD9
		[DefaultValue(ToolStripGripStyle.Hidden)]
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new ToolStripGripStyle GripStyle
		{
			get
			{
				return base.GripStyle;
			}
			set
			{
				base.GripStyle = value;
			}
		}

		/// <summary>Occurs when the user requests help for a control.</summary>
		// Token: 0x14000324 RID: 804
		// (add) Token: 0x06004031 RID: 16433 RVA: 0x00112D16 File Offset: 0x00110F16
		// (remove) Token: 0x06004032 RID: 16434 RVA: 0x00112D1F File Offset: 0x00110F1F
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event HelpEventHandler HelpRequested
		{
			add
			{
				base.HelpRequested += value;
			}
			remove
			{
				base.HelpRequested -= value;
			}
		}

		/// <summary>Occurs when the <see cref="E:System.Windows.Forms.ToolStripDropDown.ImeModeChanged" /> property has changed.</summary>
		// Token: 0x14000325 RID: 805
		// (add) Token: 0x06004033 RID: 16435 RVA: 0x00023F70 File Offset: 0x00022170
		// (remove) Token: 0x06004034 RID: 16436 RVA: 0x00023F79 File Offset: 0x00022179
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event EventHandler ImeModeChanged
		{
			add
			{
				base.ImeModeChanged += value;
			}
			remove
			{
				base.ImeModeChanged -= value;
			}
		}

		/// <summary>Gets a value indicating whether this <see cref="T:System.Windows.Forms.ToolStripDropDown" /> was automatically generated.</summary>
		/// <returns>
		///   <see langword="true" /> if this <see cref="T:System.Windows.Forms.ToolStripDropDown" /> is generated automatically; otherwise, <see langword="false" />.</returns>
		// Token: 0x17000FB4 RID: 4020
		// (get) Token: 0x06004035 RID: 16437 RVA: 0x00112D28 File Offset: 0x00110F28
		[Browsable(false)]
		public bool IsAutoGenerated
		{
			get
			{
				return this.isAutoGenerated;
			}
		}

		// Token: 0x17000FB5 RID: 4021
		// (get) Token: 0x06004036 RID: 16438 RVA: 0x00112D30 File Offset: 0x00110F30
		internal bool IsAssignedToDropDownItem
		{
			get
			{
				return this.IsAutoGenerated || this.countDropDownItemsAssignedTo > 0;
			}
		}

		// Token: 0x17000FB6 RID: 4022
		// (get) Token: 0x06004037 RID: 16439 RVA: 0x00112D48 File Offset: 0x00110F48
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		internal bool IsRestrictedWindow
		{
			get
			{
				if (!this.state[ToolStripDropDown.stateIsRestrictedWindowChecked])
				{
					this.state[ToolStripDropDown.stateIsRestrictedWindowChecked] = true;
					this.state[ToolStripDropDown.stateIsRestrictedWindow] = false;
					try
					{
						IntSecurity.WindowAdornmentModification.Demand();
					}
					catch
					{
						this.state[ToolStripDropDown.stateIsRestrictedWindow] = true;
					}
				}
				return this.state[ToolStripDropDown.stateIsRestrictedWindow];
			}
		}

		// Token: 0x17000FB7 RID: 4023
		// (get) Token: 0x06004038 RID: 16440 RVA: 0x00112DCC File Offset: 0x00110FCC
		// (set) Token: 0x06004039 RID: 16441 RVA: 0x00112DF0 File Offset: 0x00110FF0
		internal override Size ImageScalingSizeInternal
		{
			get
			{
				if (this.IsAutoGenerated && this.OwnerToolStrip != null)
				{
					return this.OwnerToolStrip.ImageScalingSizeInternal;
				}
				return base.ImageScalingSizeInternal;
			}
			set
			{
				base.ImageScalingSizeInternal = value;
			}
		}

		// Token: 0x17000FB8 RID: 4024
		// (get) Token: 0x0600403A RID: 16442 RVA: 0x00112DFC File Offset: 0x00110FFC
		// (set) Token: 0x0600403B RID: 16443 RVA: 0x00112E20 File Offset: 0x00111020
		internal override bool KeyboardActive
		{
			get
			{
				ToolStrip ownerToolStrip = this.OwnerToolStrip;
				if (ownerToolStrip != null)
				{
					return ownerToolStrip.KeyboardActive;
				}
				return base.KeyboardActive;
			}
			set
			{
				base.KeyboardActive = value;
				ToolStrip ownerToolStrip = this.OwnerToolStrip;
				if (ownerToolStrip != null)
				{
					ownerToolStrip.KeyboardActive = value;
				}
			}
		}

		/// <summary>Occurs when a key is pressed and held down while the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> has focus.</summary>
		// Token: 0x14000326 RID: 806
		// (add) Token: 0x0600403C RID: 16444 RVA: 0x000B9116 File Offset: 0x000B7316
		// (remove) Token: 0x0600403D RID: 16445 RVA: 0x000B911F File Offset: 0x000B731F
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event KeyEventHandler KeyDown
		{
			add
			{
				base.KeyDown += value;
			}
			remove
			{
				base.KeyDown -= value;
			}
		}

		/// <summary>Occurs when a key is pressed while the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> has focus.</summary>
		// Token: 0x14000327 RID: 807
		// (add) Token: 0x0600403E RID: 16446 RVA: 0x000B9128 File Offset: 0x000B7328
		// (remove) Token: 0x0600403F RID: 16447 RVA: 0x000B9131 File Offset: 0x000B7331
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event KeyPressEventHandler KeyPress
		{
			add
			{
				base.KeyPress += value;
			}
			remove
			{
				base.KeyPress -= value;
			}
		}

		/// <summary>Occurs when a key is released while the control has focus.</summary>
		// Token: 0x14000328 RID: 808
		// (add) Token: 0x06004040 RID: 16448 RVA: 0x000B9104 File Offset: 0x000B7304
		// (remove) Token: 0x06004041 RID: 16449 RVA: 0x000B910D File Offset: 0x000B730D
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event KeyEventHandler KeyUp
		{
			add
			{
				base.KeyUp += value;
			}
			remove
			{
				base.KeyUp -= value;
			}
		}

		/// <summary>Occurs when the input focus leaves the control.</summary>
		// Token: 0x14000329 RID: 809
		// (add) Token: 0x06004042 RID: 16450 RVA: 0x000E334A File Offset: 0x000E154A
		// (remove) Token: 0x06004043 RID: 16451 RVA: 0x000E3353 File Offset: 0x000E1553
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event EventHandler Leave
		{
			add
			{
				base.Leave += value;
			}
			remove
			{
				base.Leave -= value;
			}
		}

		/// <summary>This property is not relevant to this class.</summary>
		/// <returns>The coordinates of the upper-left corner of the control relative to the upper-left corner of its container.</returns>
		// Token: 0x17000FB9 RID: 4025
		// (get) Token: 0x06004044 RID: 16452 RVA: 0x000B15D1 File Offset: 0x000AF7D1
		// (set) Token: 0x06004045 RID: 16453 RVA: 0x000B15D9 File Offset: 0x000AF7D9
		[EditorBrowsable(EditorBrowsableState.Never)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public new Point Location
		{
			get
			{
				return base.Location;
			}
			set
			{
				base.Location = value;
			}
		}

		/// <summary>Occurs when the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> control is opening.</summary>
		// Token: 0x1400032A RID: 810
		// (add) Token: 0x06004046 RID: 16454 RVA: 0x00112E45 File Offset: 0x00111045
		// (remove) Token: 0x06004047 RID: 16455 RVA: 0x00112E58 File Offset: 0x00111058
		[SRCategory("CatAction")]
		[SRDescription("ToolStripDropDownOpeningDescr")]
		public event CancelEventHandler Opening
		{
			add
			{
				base.Events.AddHandler(ToolStripDropDown.EventOpening, value);
			}
			remove
			{
				base.Events.RemoveHandler(ToolStripDropDown.EventOpening, value);
			}
		}

		/// <summary>Occurs when the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> is opened.</summary>
		// Token: 0x1400032B RID: 811
		// (add) Token: 0x06004048 RID: 16456 RVA: 0x00112E6B File Offset: 0x0011106B
		// (remove) Token: 0x06004049 RID: 16457 RVA: 0x00112E7E File Offset: 0x0011107E
		[SRCategory("CatAction")]
		[SRDescription("ToolStripDropDownOpenedDescr")]
		public event EventHandler Opened
		{
			add
			{
				base.Events.AddHandler(ToolStripDropDown.EventOpened, value);
			}
			remove
			{
				base.Events.RemoveHandler(ToolStripDropDown.EventOpened, value);
			}
		}

		/// <summary>Gets the maximum height and width, in pixels, of the <see cref="T:System.Windows.Forms.ToolStripDropDown" />.</summary>
		/// <returns>A <see cref="T:System.Drawing.Size" /> representing the height and width of the <see cref="T:System.Windows.Forms.ToolStripDropDown" />, in pixels.</returns>
		// Token: 0x17000FBA RID: 4026
		// (get) Token: 0x0600404A RID: 16458 RVA: 0x00112E94 File Offset: 0x00111094
		protected internal override Size MaxItemSize
		{
			get
			{
				return Screen.GetWorkingArea(base.Bounds).Size - base.Padding.Size;
			}
		}

		/// <summary>Determines the opacity of the form.</summary>
		/// <returns>The level of opacity for the form. The default is 1.00.</returns>
		// Token: 0x17000FBB RID: 4027
		// (get) Token: 0x0600404B RID: 16459 RVA: 0x00112EC8 File Offset: 0x001110C8
		// (set) Token: 0x0600404C RID: 16460 RVA: 0x00112F00 File Offset: 0x00111100
		[SRCategory("CatWindowStyle")]
		[TypeConverter(typeof(OpacityConverter))]
		[SRDescription("FormOpacityDescr")]
		[DefaultValue(1.0)]
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public double Opacity
		{
			get
			{
				object @object = base.Properties.GetObject(ToolStripDropDown.PropOpacity);
				if (@object != null)
				{
					return Convert.ToDouble(@object, CultureInfo.InvariantCulture);
				}
				return 1.0;
			}
			set
			{
				if (this.IsRestrictedWindow)
				{
					value = Math.Max(value, 0.5);
				}
				if (value > 1.0)
				{
					value = 1.0;
				}
				else if (value < 0.0)
				{
					value = 0.0;
				}
				base.Properties.SetObject(ToolStripDropDown.PropOpacity, value);
				bool flag = this.state[ToolStripDropDown.stateLayered];
				if (this.OpacityAsByte < 255 && OSFeature.Feature.IsPresent(OSFeature.LayeredWindows))
				{
					this.AllowTransparency = true;
					this.state[ToolStripDropDown.stateLayered] = true;
				}
				else
				{
					this.state[ToolStripDropDown.stateLayered] = false;
				}
				if (flag != this.state[ToolStripDropDown.stateLayered])
				{
					base.UpdateStyles();
				}
				this.UpdateLayered();
			}
		}

		// Token: 0x17000FBC RID: 4028
		// (get) Token: 0x0600404D RID: 16461 RVA: 0x00112FE5 File Offset: 0x001111E5
		private byte OpacityAsByte
		{
			get
			{
				return (byte)(this.Opacity * 255.0);
			}
		}

		/// <summary>This property is not relevant to this class.</summary>
		/// <returns>The ToolStripItem that is the overflow button for a ToolStrip with overflow enabled.</returns>
		// Token: 0x17000FBD RID: 4029
		// (get) Token: 0x0600404E RID: 16462 RVA: 0x00112FF8 File Offset: 0x001111F8
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new ToolStripOverflowButton OverflowButton
		{
			get
			{
				return base.OverflowButton;
			}
		}

		/// <summary>Gets or sets the <see cref="T:System.Windows.Forms.ToolStripItem" /> that is the owner of this <see cref="T:System.Windows.Forms.ToolStripDropDown" />.</summary>
		/// <returns>The <see cref="T:System.Windows.Forms.ToolStripItem" /> that is the owner of this <see cref="T:System.Windows.Forms.ToolStripDropDown" />. The default value is <see langword="null" />.</returns>
		// Token: 0x17000FBE RID: 4030
		// (get) Token: 0x0600404F RID: 16463 RVA: 0x00113000 File Offset: 0x00111200
		// (set) Token: 0x06004050 RID: 16464 RVA: 0x00113008 File Offset: 0x00111208
		[DefaultValue(null)]
		[Browsable(false)]
		public ToolStripItem OwnerItem
		{
			get
			{
				return this.ownerItem;
			}
			set
			{
				if (this.ownerItem != value)
				{
					Font font = this.Font;
					RightToLeft rightToLeft = this.RightToLeft;
					this.ownerItem = value;
					if (!font.Equals(this.Font))
					{
						this.OnOwnerItemFontChanged(EventArgs.Empty);
					}
					if (this.ownerItem != null && this.RightToLeftInherited && rightToLeft != this.RightToLeft)
					{
						using (new LayoutTransaction(this, this, PropertyNames.RightToLeft))
						{
							this.OnRightToLeftChanged(EventArgs.Empty);
						}
					}
				}
			}
		}

		// Token: 0x17000FBF RID: 4031
		// (get) Token: 0x06004051 RID: 16465 RVA: 0x0011309C File Offset: 0x0011129C
		internal ToolStripDropDownItem OwnerDropDownItem
		{
			get
			{
				return this.OwnerItem as ToolStripDropDownItem;
			}
		}

		// Token: 0x17000FC0 RID: 4032
		// (get) Token: 0x06004052 RID: 16466 RVA: 0x001130AC File Offset: 0x001112AC
		internal ToolStrip OwnerToolStrip
		{
			get
			{
				if (this.ownerItem != null)
				{
					ToolStrip parentInternal = this.ownerItem.ParentInternal;
					if (parentInternal != null)
					{
						return parentInternal;
					}
					if (this.ownerItem.Placement == ToolStripItemPlacement.Overflow && this.ownerItem.Owner != null)
					{
						return this.ownerItem.Owner.OverflowButton.DropDown;
					}
					if (parentInternal == null)
					{
						return this.ownerItem.Owner;
					}
				}
				return null;
			}
		}

		/// <summary>Gets or sets the window region associated with the <see cref="T:System.Windows.Forms.ToolStripDropDown" />.</summary>
		/// <returns>The window <see cref="T:System.Drawing.Region" /> associated with the control.</returns>
		// Token: 0x17000FC1 RID: 4033
		// (get) Token: 0x06004053 RID: 16467 RVA: 0x00113113 File Offset: 0x00111313
		// (set) Token: 0x06004054 RID: 16468 RVA: 0x0011311B File Offset: 0x0011131B
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new Region Region
		{
			get
			{
				return base.Region;
			}
			set
			{
				base.Region = value;
			}
		}

		/// <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.ToolStripDropDown.Region" /> property changes.</summary>
		// Token: 0x1400032C RID: 812
		// (add) Token: 0x06004055 RID: 16469 RVA: 0x00113124 File Offset: 0x00111324
		// (remove) Token: 0x06004056 RID: 16470 RVA: 0x0011312D File Offset: 0x0011132D
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event EventHandler RegionChanged
		{
			add
			{
				base.RegionChanged += value;
			}
			remove
			{
				base.RegionChanged -= value;
			}
		}

		// Token: 0x17000FC2 RID: 4034
		// (get) Token: 0x06004057 RID: 16471 RVA: 0x0001180C File Offset: 0x0000FA0C
		// (set) Token: 0x06004058 RID: 16472 RVA: 0x000070A6 File Offset: 0x000052A6
		internal virtual bool RequiresScrollButtons
		{
			get
			{
				return false;
			}
			set
			{
			}
		}

		/// <summary>Gets or sets a value indicating whether control's elements are aligned to support locales using right-to-left fonts.</summary>
		/// <returns>One of the <see cref="T:System.Windows.Forms.RightToLeft" /> values. The default is <see cref="F:System.Windows.Forms.RightToLeft.Inherit" />.</returns>
		// Token: 0x17000FC3 RID: 4035
		// (get) Token: 0x06004059 RID: 16473 RVA: 0x00113136 File Offset: 0x00111336
		// (set) Token: 0x0600405A RID: 16474 RVA: 0x000C5F21 File Offset: 0x000C4121
		[SRCategory("CatAppearance")]
		[Localizable(true)]
		[AmbientValue(RightToLeft.Inherit)]
		[SRDescription("ControlRightToLeftDescr")]
		public override RightToLeft RightToLeft
		{
			get
			{
				if (this.RightToLeftInherited)
				{
					if (this.SourceControlInternal != null)
					{
						return this.SourceControlInternal.RightToLeft;
					}
					if (this.OwnerItem != null)
					{
						return this.OwnerItem.RightToLeft;
					}
				}
				return base.RightToLeft;
			}
			set
			{
				base.RightToLeft = value;
			}
		}

		// Token: 0x17000FC4 RID: 4036
		// (get) Token: 0x0600405B RID: 16475 RVA: 0x0011316E File Offset: 0x0011136E
		private bool RightToLeftInherited
		{
			get
			{
				return !this.ShouldSerializeRightToLeft();
			}
		}

		/// <summary>This event is not relevant for this class.</summary>
		// Token: 0x1400032D RID: 813
		// (add) Token: 0x0600405C RID: 16476 RVA: 0x00113179 File Offset: 0x00111379
		// (remove) Token: 0x0600405D RID: 16477 RVA: 0x00113182 File Offset: 0x00111382
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new event ScrollEventHandler Scroll
		{
			add
			{
				base.Scroll += value;
			}
			remove
			{
				base.Scroll -= value;
			}
		}

		/// <summary>This property is not relevant to this class.</summary>
		/// <returns>
		///   <see langword="true" /> to enable stretching; otherwise, <see langword="false" />.</returns>
		// Token: 0x17000FC5 RID: 4037
		// (get) Token: 0x0600405E RID: 16478 RVA: 0x000D8E3F File Offset: 0x000D703F
		// (set) Token: 0x0600405F RID: 16479 RVA: 0x000D8E47 File Offset: 0x000D7047
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new bool Stretch
		{
			get
			{
				return base.Stretch;
			}
			set
			{
				base.Stretch = value;
			}
		}

		/// <summary>Occurs when the <see cref="T:System.Windows.Forms.ToolStripLayoutStyle" /> style changes.</summary>
		// Token: 0x1400032E RID: 814
		// (add) Token: 0x06004060 RID: 16480 RVA: 0x0005D4EB File Offset: 0x0005B6EB
		// (remove) Token: 0x06004061 RID: 16481 RVA: 0x0005D4F4 File Offset: 0x0005B6F4
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event EventHandler StyleChanged
		{
			add
			{
				base.StyleChanged += value;
			}
			remove
			{
				base.StyleChanged -= value;
			}
		}

		// Token: 0x17000FC6 RID: 4038
		// (get) Token: 0x06004062 RID: 16482 RVA: 0x0011318B File Offset: 0x0011138B
		// (set) Token: 0x06004063 RID: 16483 RVA: 0x001131A2 File Offset: 0x001113A2
		internal Control SourceControlInternal
		{
			get
			{
				return base.Properties.GetObject(ToolStripDropDown.PropSourceControl) as Control;
			}
			set
			{
				base.Properties.SetObject(ToolStripDropDown.PropSourceControl, value);
			}
		}

		// Token: 0x17000FC7 RID: 4039
		// (get) Token: 0x06004064 RID: 16484 RVA: 0x001131B5 File Offset: 0x001113B5
		internal override int ShowParams
		{
			get
			{
				return 4;
			}
		}

		/// <summary>This event is not relevant for this class.</summary>
		// Token: 0x1400032F RID: 815
		// (add) Token: 0x06004065 RID: 16485 RVA: 0x000B23A6 File Offset: 0x000B05A6
		// (remove) Token: 0x06004066 RID: 16486 RVA: 0x000B23AF File Offset: 0x000B05AF
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new event EventHandler TabStopChanged
		{
			add
			{
				base.TabStopChanged += value;
			}
			remove
			{
				base.TabStopChanged -= value;
			}
		}

		/// <summary>This event is not relevant for this class.</summary>
		// Token: 0x14000330 RID: 816
		// (add) Token: 0x06004067 RID: 16487 RVA: 0x00046591 File Offset: 0x00044791
		// (remove) Token: 0x06004068 RID: 16488 RVA: 0x0004659A File Offset: 0x0004479A
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new event EventHandler TextChanged
		{
			add
			{
				base.TextChanged += value;
			}
			remove
			{
				base.TextChanged -= value;
			}
		}

		/// <summary>Specifies the direction in which to draw the text on the item.</summary>
		/// <returns>One of the <see cref="T:System.Windows.Forms.ToolStripTextDirection" /> values. The default is <see cref="F:System.Windows.Forms.ToolStripTextDirection.Horizontal" />.</returns>
		// Token: 0x17000FC8 RID: 4040
		// (get) Token: 0x06004069 RID: 16489 RVA: 0x001131B8 File Offset: 0x001113B8
		// (set) Token: 0x0600406A RID: 16490 RVA: 0x001131C0 File Offset: 0x001113C0
		[Browsable(false)]
		[DefaultValue(ToolStripTextDirection.Horizontal)]
		[SRDescription("ToolStripTextDirectionDescr")]
		[SRCategory("CatAppearance")]
		public override ToolStripTextDirection TextDirection
		{
			get
			{
				return base.TextDirection;
			}
			set
			{
				base.TextDirection = value;
			}
		}

		/// <summary>Gets or sets a value indicating whether the form should be displayed as a topmost form.</summary>
		/// <returns>
		///   <see langword="true" /> in all cases.</returns>
		// Token: 0x17000FC9 RID: 4041
		// (get) Token: 0x0600406B RID: 16491 RVA: 0x00012E4E File Offset: 0x0001104E
		protected virtual bool TopMost
		{
			get
			{
				return true;
			}
		}

		/// <summary>Gets or sets a value indicating whether the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> is a top-level control.</summary>
		/// <returns>
		///   <see langword="true" /> if the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> is a top-level control; otherwise, <see langword="false" />.</returns>
		// Token: 0x17000FCA RID: 4042
		// (get) Token: 0x0600406C RID: 16492 RVA: 0x000B2422 File Offset: 0x000B0622
		// (set) Token: 0x0600406D RID: 16493 RVA: 0x001131C9 File Offset: 0x001113C9
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public bool TopLevel
		{
			get
			{
				return base.GetTopLevel();
			}
			set
			{
				if (value != base.GetTopLevel())
				{
					base.SetTopLevelInternal(value);
					this.SetTopLevelStyle(value);
				}
			}
		}

		/// <summary>This property is not relevant to this class.</summary>
		/// <returns>The tab order of the control within its container.</returns>
		// Token: 0x17000FCB RID: 4043
		// (get) Token: 0x0600406E RID: 16494 RVA: 0x000B2372 File Offset: 0x000B0572
		// (set) Token: 0x0600406F RID: 16495 RVA: 0x000B237A File Offset: 0x000B057A
		[EditorBrowsable(EditorBrowsableState.Never)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public new int TabIndex
		{
			get
			{
				return base.TabIndex;
			}
			set
			{
				base.TabIndex = value;
			}
		}

		/// <summary>This event is not relevant to this class.</summary>
		// Token: 0x14000331 RID: 817
		// (add) Token: 0x06004070 RID: 16496 RVA: 0x000B2383 File Offset: 0x000B0583
		// (remove) Token: 0x06004071 RID: 16497 RVA: 0x000B238C File Offset: 0x000B058C
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		[SRCategory("CatPropertyChanged")]
		[SRDescription("ControlOnTabIndexChangedDescr")]
		public new event EventHandler TabIndexChanged
		{
			add
			{
				base.TabIndexChanged += value;
			}
			remove
			{
				base.TabIndexChanged -= value;
			}
		}

		/// <summary>This event is not relevant for this class.</summary>
		// Token: 0x14000332 RID: 818
		// (add) Token: 0x06004072 RID: 16498 RVA: 0x001131E2 File Offset: 0x001113E2
		// (remove) Token: 0x06004073 RID: 16499 RVA: 0x001131EB File Offset: 0x001113EB
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new event EventHandler Validated
		{
			add
			{
				base.Validated += value;
			}
			remove
			{
				base.Validated -= value;
			}
		}

		/// <summary>This event is not relevant for this class.</summary>
		// Token: 0x14000333 RID: 819
		// (add) Token: 0x06004074 RID: 16500 RVA: 0x001131F4 File Offset: 0x001113F4
		// (remove) Token: 0x06004075 RID: 16501 RVA: 0x001131FD File Offset: 0x001113FD
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new event CancelEventHandler Validating
		{
			add
			{
				base.Validating += value;
			}
			remove
			{
				base.Validating -= value;
			}
		}

		/// <summary>Gets or sets a value indicating whether the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> is visible or hidden.</summary>
		/// <returns>
		///   <see langword="true" /> if the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> is visible; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
		// Token: 0x17000FCC RID: 4044
		// (get) Token: 0x06004076 RID: 16502 RVA: 0x000FFCF9 File Offset: 0x000FDEF9
		// (set) Token: 0x06004077 RID: 16503 RVA: 0x000FFD01 File Offset: 0x000FDF01
		[SRCategory("CatBehavior")]
		[Localizable(true)]
		[SRDescription("ControlVisibleDescr")]
		[DefaultValue(false)]
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public new bool Visible
		{
			get
			{
				return base.Visible;
			}
			set
			{
				base.Visible = value;
			}
		}

		// Token: 0x17000FCD RID: 4045
		// (get) Token: 0x06004078 RID: 16504 RVA: 0x00113206 File Offset: 0x00111406
		// (set) Token: 0x06004079 RID: 16505 RVA: 0x00113224 File Offset: 0x00111424
		internal bool WorkingAreaConstrained
		{
			get
			{
				return !this.state[ToolStripDropDown.stateNotWorkingAreaConstrained] || this.IsRestrictedWindow;
			}
			set
			{
				bool flag = !value;
				this.state[ToolStripDropDown.stateNotWorkingAreaConstrained] = flag;
			}
		}

		// Token: 0x0600407A RID: 16506 RVA: 0x00113247 File Offset: 0x00111447
		internal void AssignToDropDownItem()
		{
			this.countDropDownItemsAssignedTo++;
		}

		// Token: 0x0600407B RID: 16507 RVA: 0x00113258 File Offset: 0x00111458
		internal void AdjustSize()
		{
			Size suggestedSize = this.GetSuggestedSize();
			if (suggestedSize != base.Size)
			{
				base.Size = suggestedSize;
			}
		}

		// Token: 0x0600407C RID: 16508 RVA: 0x00113284 File Offset: 0x00111484
		private void ApplyTopMost(bool topMost)
		{
			if (this.TopMost)
			{
				HandleRef handleRef = (topMost ? NativeMethods.HWND_TOPMOST : NativeMethods.HWND_NOTOPMOST);
				SafeNativeMethods.SetWindowPos(new HandleRef(this, base.Handle), handleRef, 0, 0, 0, 0, 19);
			}
		}

		/// <summary>Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> and optionally releases the managed resources.</summary>
		/// <param name="disposing">
		///   <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
		// Token: 0x0600407D RID: 16509 RVA: 0x001132C2 File Offset: 0x001114C2
		protected override void Dispose(bool disposing)
		{
			if (disposing)
			{
				this.SourceControlInternal = null;
			}
			base.Dispose(disposing);
		}

		// Token: 0x0600407E RID: 16510 RVA: 0x001132D8 File Offset: 0x001114D8
		private void CancelAutoExpand()
		{
			ToolStrip toplevelOwnerToolStrip = this.GetToplevelOwnerToolStrip();
			if (toplevelOwnerToolStrip != null)
			{
				toplevelOwnerToolStrip.MenuAutoExpand = false;
			}
		}

		// Token: 0x0600407F RID: 16511 RVA: 0x001132F6 File Offset: 0x001114F6
		internal override bool CanProcessMnemonic()
		{
			return (!this.IsRestrictedWindow || Application.MessageLoop) && base.CanProcessMnemonic();
		}

		/// <summary>Creates a new accessibility object for the <see cref="T:System.Windows.Forms.ToolStripDropDown" />.</summary>
		/// <returns>A new <see cref="T:System.Windows.Forms.AccessibleObject" /> for the control.</returns>
		// Token: 0x06004080 RID: 16512 RVA: 0x0011330F File Offset: 0x0011150F
		protected override AccessibleObject CreateAccessibilityInstance()
		{
			return new ToolStripDropDown.ToolStripDropDownAccessibleObject(this);
		}

		/// <summary>Applies various layout options to the <see cref="T:System.Windows.Forms.ToolStripDropDown" />.</summary>
		/// <param name="style">One of the <see cref="T:System.Windows.Forms.ToolStripLayoutStyle" /> values. The possibilities are <see cref="F:System.Windows.Forms.ToolStripLayoutStyle.Flow" />, <see cref="F:System.Windows.Forms.ToolStripLayoutStyle.HorizontalStackWithOverflow" />, <see cref="F:System.Windows.Forms.ToolStripLayoutStyle.StackWithOverflow" />, <see cref="F:System.Windows.Forms.ToolStripLayoutStyle.Table" />, and <see cref="F:System.Windows.Forms.ToolStripLayoutStyle.VerticalStackWithOverflow" />.</param>
		/// <returns>The <see cref="T:System.Windows.Forms.LayoutSettings" /> for this <see cref="T:System.Windows.Forms.ToolStripDropDown" />.</returns>
		// Token: 0x06004081 RID: 16513 RVA: 0x00113318 File Offset: 0x00111518
		protected override LayoutSettings CreateLayoutSettings(ToolStripLayoutStyle style)
		{
			LayoutSettings layoutSettings = base.CreateLayoutSettings(style);
			if (style == ToolStripLayoutStyle.Flow)
			{
				FlowLayoutSettings flowLayoutSettings = layoutSettings as FlowLayoutSettings;
				flowLayoutSettings.FlowDirection = FlowDirection.TopDown;
				flowLayoutSettings.WrapContents = false;
				return flowLayoutSettings;
			}
			return layoutSettings;
		}

		/// <summary>Creates a handle for the control.</summary>
		// Token: 0x06004082 RID: 16514 RVA: 0x0011334C File Offset: 0x0011154C
		protected override void CreateHandle()
		{
			base.CreateHandle();
			if (this.TopLevel)
			{
				this.ReparentToDropDownOwnerWindow();
				if (!this.AutoClose || !this.WorkingAreaConstrained)
				{
					this.ApplyTopMost(true);
				}
			}
			if (base.DesignMode)
			{
				base.SetStyle(ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, false);
			}
		}

		/// <summary>Closes the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> control.</summary>
		// Token: 0x06004083 RID: 16515 RVA: 0x00113398 File Offset: 0x00111598
		public void Close()
		{
			this.SetCloseReason(ToolStripDropDownCloseReason.CloseCalled);
			this.Visible = false;
			if (ToolStripManager.ModalMenuFilter.GetActiveToolStrip() == null)
			{
				ToolStripManager.ModalMenuFilter.ExitMenuMode();
			}
		}

		// Token: 0x06004084 RID: 16516 RVA: 0x001133B4 File Offset: 0x001115B4
		private void ResetCloseReason()
		{
			this.closeReason = ToolStripDropDownCloseReason.AppFocusChange;
		}

		// Token: 0x06004085 RID: 16517 RVA: 0x001133BD File Offset: 0x001115BD
		internal void SetCloseReason(ToolStripDropDownCloseReason reason)
		{
			this.closeReason = reason;
		}

		/// <summary>Closes the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> control for the specified reason.</summary>
		/// <param name="reason">One of the <see cref="T:System.Windows.Forms.ToolStripDropDownCloseReason" /> values.</param>
		// Token: 0x06004086 RID: 16518 RVA: 0x001133C6 File Offset: 0x001115C6
		public void Close(ToolStripDropDownCloseReason reason)
		{
			this.SetCloseReason(reason);
			this.Visible = false;
		}

		// Token: 0x06004087 RID: 16519 RVA: 0x001133D8 File Offset: 0x001115D8
		internal override Rectangle ApplyBoundsConstraints(int suggestedX, int suggestedY, int proposedWidth, int proposedHeight)
		{
			Rectangle rectangle = base.ApplyBoundsConstraints(suggestedX, suggestedY, proposedWidth, proposedHeight);
			if (this.IsRestrictedWindow && this.TopMost)
			{
				rectangle = WindowsFormsUtils.ConstrainToScreenWorkingAreaBounds(rectangle);
			}
			return rectangle;
		}

		// Token: 0x06004088 RID: 16520 RVA: 0x0011340C File Offset: 0x0011160C
		internal Rectangle GetDropDownBounds(Rectangle suggestedBounds)
		{
			Rectangle rectangle2;
			if (this.TopLevel)
			{
				Point point = Point.Empty;
				if (this.ownerItem != null && this.ownerItem is ToolStripDropDownItem)
				{
					point = ((ToolStripDropDownItem)this.ownerItem).DropDownLocation;
				}
				else
				{
					point = suggestedBounds.Location;
				}
				Rectangle rectangle = new Rectangle(point, suggestedBounds.Size);
				if (this.WorkingAreaConstrained)
				{
					rectangle2 = WindowsFormsUtils.ConstrainToScreenWorkingAreaBounds(rectangle);
				}
				else
				{
					rectangle2 = WindowsFormsUtils.ConstrainToScreenBounds(rectangle);
				}
			}
			else
			{
				Point point2 = Point.Empty;
				if (this.ownerItem != null && this.ownerItem is ToolStripDropDownItem && this.ParentInternal != null)
				{
					point2 = this.ParentInternal.PointToClient(((ToolStripDropDownItem)this.ownerItem).DropDownLocation);
				}
				else
				{
					point2 = suggestedBounds.Location;
				}
				rectangle2 = new Rectangle(point2, suggestedBounds.Size);
			}
			return rectangle2;
		}

		// Token: 0x06004089 RID: 16521 RVA: 0x001134DC File Offset: 0x001116DC
		internal Rectangle CalculateDropDownLocation(Point start, ToolStripDropDownDirection dropDownDirection)
		{
			Point empty = Point.Empty;
			if (!base.IsHandleCreated)
			{
				LayoutTransaction.DoLayout(this, this, PropertyNames.PreferredSize);
			}
			Rectangle rectangle = new Rectangle(Point.Empty, this.GetSuggestedSize());
			switch (dropDownDirection)
			{
			case ToolStripDropDownDirection.AboveLeft:
				empty.X = -rectangle.Width;
				empty.Y = -rectangle.Height;
				break;
			case ToolStripDropDownDirection.AboveRight:
				empty.Y = -rectangle.Height;
				break;
			case ToolStripDropDownDirection.BelowLeft:
			case ToolStripDropDownDirection.Left:
				empty.X = -rectangle.Width;
				break;
			}
			rectangle.Location = new Point(start.X + empty.X, start.Y + empty.Y);
			if (this.WorkingAreaConstrained)
			{
				rectangle = WindowsFormsUtils.ConstrainToScreenWorkingAreaBounds(rectangle);
			}
			return rectangle;
		}

		// Token: 0x0600408A RID: 16522 RVA: 0x001135AF File Offset: 0x001117AF
		internal Size GetSuggestedSize()
		{
			if (this.AutoSize)
			{
				return this.GetPreferredSize(Size.Empty);
			}
			return base.Size;
		}

		// Token: 0x0600408B RID: 16523 RVA: 0x001135CC File Offset: 0x001117CC
		internal override ToolStrip GetToplevelOwnerToolStrip()
		{
			ToolStripDropDown firstDropDown = this.GetFirstDropDown();
			if (firstDropDown.OwnerItem != null)
			{
				return firstDropDown.OwnerToolStrip;
			}
			return null;
		}

		// Token: 0x0600408C RID: 16524 RVA: 0x001135F0 File Offset: 0x001117F0
		internal ToolStripItem GetToplevelOwnerItem()
		{
			ToolStripDropDown firstDropDown = this.GetFirstDropDown();
			return firstDropDown.OwnerItem;
		}

		// Token: 0x0600408D RID: 16525 RVA: 0x0011360A File Offset: 0x0011180A
		internal override void HandleItemClicked(ToolStripItem dismissingItem)
		{
			if (!LocalAppContextSwitches.UseLegacyContextMenuStripSourceControlValue && base.ActiveDropDowns.Count == 0)
			{
				this.SourceControlInternal = null;
			}
			base.HandleItemClicked(dismissingItem);
		}

		// Token: 0x0600408E RID: 16526 RVA: 0x00113630 File Offset: 0x00111830
		internal virtual void Initialize()
		{
			base.SetState(2, false);
			base.SetTopLevelInternal(true);
			base.SetState(32, true);
			base.SetStyle(ControlStyles.ResizeRedraw, true);
			base.UpdateStyles();
			this.GripStyle = ToolStripGripStyle.Hidden;
			this.CanOverflow = false;
			base.LayoutStyle = ToolStripLayoutStyle.Flow;
			base.MenuAutoExpand = true;
			this.AutoSize = true;
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.ToolStripDropDown.Closed" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.ToolStripDropDownClosedEventArgs" /> that contains the event data.</param>
		// Token: 0x0600408F RID: 16527 RVA: 0x00113688 File Offset: 0x00111888
		protected virtual void OnClosed(ToolStripDropDownClosedEventArgs e)
		{
			if (base.IsHandleCreated && (this.ownerItem == null || !this.ownerItem.IsInDesignMode))
			{
				base.AccessibilityNotifyClients(AccessibleEvents.SystemMenuPopupEnd, -1);
			}
			ToolStripDropDownClosedEventHandler toolStripDropDownClosedEventHandler = (ToolStripDropDownClosedEventHandler)base.Events[ToolStripDropDown.EventClosed];
			if (toolStripDropDownClosedEventHandler != null)
			{
				toolStripDropDownClosedEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.ToolStripDropDown.Closing" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.ToolStripDropDownClosingEventArgs" /> that contains the event data.</param>
		// Token: 0x06004090 RID: 16528 RVA: 0x001136DC File Offset: 0x001118DC
		protected virtual void OnClosing(ToolStripDropDownClosingEventArgs e)
		{
			ToolStripDropDownClosingEventHandler toolStripDropDownClosingEventHandler = (ToolStripDropDownClosingEventHandler)base.Events[ToolStripDropDown.EventClosing];
			if (toolStripDropDownClosingEventHandler != null)
			{
				toolStripDropDownClosingEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.HandleCreated" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06004091 RID: 16529 RVA: 0x0011370A File Offset: 0x0011190A
		protected override void OnHandleCreated(EventArgs e)
		{
			base.UpdateStyles();
			base.OnHandleCreated(e);
			this.UpdateLayered();
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.ToolStrip.ItemClicked" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.ToolStripItemClickedEventArgs" /> that contains the event data.</param>
		// Token: 0x06004092 RID: 16530 RVA: 0x00113720 File Offset: 0x00111920
		protected override void OnItemClicked(ToolStripItemClickedEventArgs e)
		{
			try
			{
				base.OnItemClicked(e);
			}
			finally
			{
				ToolStripDropDownItem toolStripDropDownItem = e.ClickedItem as ToolStripDropDownItem;
				if (this.AutoClose && (toolStripDropDownItem == null || (toolStripDropDownItem is ToolStripSplitButton && !toolStripDropDownItem.DropDown.Visible) || !toolStripDropDownItem.HasDropDownItems))
				{
					this.Close(ToolStripDropDownCloseReason.ItemClicked);
				}
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.Layout" /> event.</summary>
		/// <param name="e">A <see cref="T:System.Windows.Forms.LayoutEventArgs" /> that contains the event data.</param>
		// Token: 0x06004093 RID: 16531 RVA: 0x00113784 File Offset: 0x00111984
		protected override void OnLayout(LayoutEventArgs e)
		{
			this.AdjustSize();
			base.OnLayout(e);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.ToolStripDropDown.Opening" /> event.</summary>
		/// <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs" /> that contains the event data.</param>
		// Token: 0x06004094 RID: 16532 RVA: 0x00113794 File Offset: 0x00111994
		protected virtual void OnOpening(CancelEventArgs e)
		{
			CancelEventHandler cancelEventHandler = (CancelEventHandler)base.Events[ToolStripDropDown.EventOpening];
			if (cancelEventHandler != null)
			{
				cancelEventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.ToolStripDropDown.Opened" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06004095 RID: 16533 RVA: 0x001137C4 File Offset: 0x001119C4
		protected virtual void OnOpened(EventArgs e)
		{
			if (base.IsHandleCreated && (this.ownerItem == null || !this.ownerItem.IsInDesignMode))
			{
				base.AccessibilityNotifyClients(AccessibleEvents.SystemMenuPopupStart, -1);
			}
			EventHandler eventHandler = (EventHandler)base.Events[ToolStripDropDown.EventOpened];
			if (eventHandler != null)
			{
				eventHandler(this, e);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.ToolStripItem.VisibleChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06004096 RID: 16534 RVA: 0x00113818 File Offset: 0x00111A18
		protected override void OnVisibleChanged(EventArgs e)
		{
			if (this.Location != this.displayLocation)
			{
				this.Location = this.displayLocation;
				this.displayLocation = this.Location;
			}
			if (this.AutoScroll || base.LayoutRequired)
			{
				base.OnVisibleChanged(e);
				return;
			}
			base.SuspendLayout();
			try
			{
				base.OnVisibleChanged(e);
			}
			finally
			{
				base.ResumeLayout(false);
			}
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.Control.ParentChanged" /> event.</summary>
		/// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
		// Token: 0x06004097 RID: 16535 RVA: 0x00113890 File Offset: 0x00111A90
		protected override void OnParentChanged(EventArgs e)
		{
			base.OnParentChanged(e);
			Rectangle bounds = base.Bounds;
			this.SetBoundsCore(bounds.X, bounds.Y, bounds.Width, bounds.Height, BoundsSpecified.Location);
		}

		/// <summary>Raises the <see cref="E:System.Windows.Forms.ToolStripItem.MouseUp" /> event.</summary>
		/// <param name="mea">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
		// Token: 0x06004098 RID: 16536 RVA: 0x001138D0 File Offset: 0x00111AD0
		protected override void OnMouseUp(MouseEventArgs mea)
		{
			base.OnMouseUp(mea);
			if (!base.ClientRectangle.Contains(mea.Location))
			{
				bool flag = true;
				if (this.OwnerToolStrip != null && this.OwnerItem != null && this.OwnerItem.Bounds.Contains(WindowsFormsUtils.TranslatePoint(mea.Location, this, this.OwnerToolStrip)))
				{
					flag = false;
				}
				if (flag)
				{
					this.DismissAll();
					this.CancelAutoExpand();
				}
			}
		}

		// Token: 0x06004099 RID: 16537 RVA: 0x00113944 File Offset: 0x00111B44
		internal void OnOwnerItemFontChanged(EventArgs e)
		{
			if (this.IsAutoGenerated)
			{
				using (new LayoutTransaction(this, this.OwnerItem, PropertyNames.Font))
				{
					this.OnFontChanged(e);
				}
			}
		}

		// Token: 0x0600409A RID: 16538 RVA: 0x00113990 File Offset: 0x00111B90
		internal void SelectPreviousToolStrip()
		{
			ToolStripItem toolStripItem = this.OwnerItem;
			base.Hide();
			if (toolStripItem != null)
			{
				toolStripItem.Select();
				if (!AccessibilityImprovements.UseLegacyToolTipDisplay)
				{
					KeyboardToolTipStateMachine.Instance.NotifyAboutGotFocus(toolStripItem);
				}
				if (this.OwnerToolStrip != null && !this.OwnerToolStrip.IsDropDown)
				{
					if (ToolStripManager.ModalMenuFilter.GetActiveToolStrip() != this.OwnerToolStrip)
					{
						ToolStripManager.ModalMenuFilter.SetActiveToolStrip(this.OwnerToolStrip);
					}
					this.OwnerToolStrip.MenuAutoExpand = false;
					if (this.OwnerToolStrip.CanSelect)
					{
						ToolStripManager.ModalMenuFilter.ExitMenuMode();
						return;
					}
				}
			}
			else
			{
				ToolStripManager.ModalMenuFilter.ExitMenuMode();
			}
		}

		// Token: 0x0600409B RID: 16539 RVA: 0x00113A18 File Offset: 0x00111C18
		internal override bool ProcessArrowKey(Keys keyCode)
		{
			ToolStripMenuItem.MenuTimer.Cancel();
			if (keyCode == Keys.Left || keyCode == Keys.Right)
			{
				bool rightAlignedMenus = SystemInformation.RightAlignedMenus;
				bool flag = (keyCode == Keys.Left && rightAlignedMenus) || (keyCode == Keys.Right && !rightAlignedMenus);
				if (!this.IsFirstDropDown && !flag)
				{
					this.Visible = false;
					return true;
				}
				bool flag2 = false;
				if (base.LayoutStyle == ToolStripLayoutStyle.Flow)
				{
					flag2 = FlowLayout.GetFlowDirection(this) == FlowDirection.TopDown && !FlowLayout.GetWrapContents(this);
				}
				if (flag2)
				{
					ToolStrip toplevelOwnerToolStrip = this.GetToplevelOwnerToolStrip();
					ToolStripItem toplevelOwnerItem = this.GetToplevelOwnerItem();
					bool flag3 = this.OwnerItem != null && this.OwnerItem.IsOnOverflow;
					if (flag || !flag3)
					{
						this.SetCloseReason(ToolStripDropDownCloseReason.Keyboard);
						this.DismissAll();
					}
					else if (flag3)
					{
						this.Visible = false;
					}
					if (toplevelOwnerToolStrip != null && toplevelOwnerItem != null)
					{
						if (ToolStripManager.ModalMenuFilter.GetActiveToolStrip() != toplevelOwnerToolStrip)
						{
							ToolStripManager.ModalMenuFilter.SetActiveToolStrip(toplevelOwnerToolStrip);
						}
						toplevelOwnerToolStrip.SelectNextToolStripItem(toplevelOwnerItem, flag);
					}
					return true;
				}
			}
			return base.ProcessArrowKey(keyCode);
		}

		/// <summary>Processes a dialog box key.</summary>
		/// <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys" /> values that represents the key to process.</param>
		/// <returns>
		///   <see langword="true" /> if the key was processed by the control; otherwise, <see langword="false" />.</returns>
		// Token: 0x0600409C RID: 16540 RVA: 0x00113B04 File Offset: 0x00111D04
		[UIPermission(SecurityAction.LinkDemand, Window = UIPermissionWindow.AllWindows)]
		protected override bool ProcessDialogKey(Keys keyData)
		{
			if (this.OwnerItem != null && this.OwnerItem.IsInDesignMode)
			{
				return false;
			}
			if (this.AutoClose && this.Visible)
			{
				if (ToolStripManager.IsMenuKey(keyData))
				{
					this.SetCloseReason(ToolStripDropDownCloseReason.Keyboard);
					this.DismissAll();
					ToolStrip toplevelOwnerToolStrip = this.GetToplevelOwnerToolStrip();
					if (toplevelOwnerToolStrip != null)
					{
						toplevelOwnerToolStrip.RestoreFocusInternal();
						ToolStripManager.ModalMenuFilter.MenuKeyToggle = true;
					}
					ToolStripManager.ModalMenuFilter.ExitMenuMode();
					return true;
				}
				if ((keyData & Keys.KeyCode) == Keys.Escape)
				{
					this.SetCloseReason(ToolStripDropDownCloseReason.Keyboard);
					this.SelectPreviousToolStrip();
					return true;
				}
			}
			return base.ProcessDialogKey(keyData);
		}

		/// <summary>Processes a dialog box character.</summary>
		/// <param name="charCode">The character to process.</param>
		/// <returns>
		///   <see langword="true" /> if the character was processed by the control; otherwise, <see langword="false" />.</returns>
		// Token: 0x0600409D RID: 16541 RVA: 0x00113B8B File Offset: 0x00111D8B
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[UIPermission(SecurityAction.LinkDemand, Window = UIPermissionWindow.AllWindows)]
		protected override bool ProcessDialogChar(char charCode)
		{
			return ((this.OwnerItem == null || this.OwnerItem.Pressed) && charCode != ' ' && this.ProcessMnemonic(charCode)) || base.ProcessDialogChar(charCode);
		}

		/// <summary>Processes a mnemonic character.</summary>
		/// <param name="charCode">The character to process.</param>
		/// <returns>
		///   <see langword="true" /> if the character was processed as a mnemonic by the control; otherwise, <see langword="false" />.</returns>
		// Token: 0x0600409E RID: 16542 RVA: 0x00113BB9 File Offset: 0x00111DB9
		[UIPermission(SecurityAction.LinkDemand, Window = UIPermissionWindow.AllWindows)]
		protected internal override bool ProcessMnemonic(char charCode)
		{
			return this.CanProcessMnemonic() && base.ProcessMnemonic(charCode);
		}

		// Token: 0x0600409F RID: 16543 RVA: 0x00113BCC File Offset: 0x00111DCC
		internal override void ProcessDuplicateMnemonic(ToolStripItem item, char charCode)
		{
			if (!this.CanProcessMnemonic())
			{
				return;
			}
			if (item != null)
			{
				if (this.IsRestrictedWindow)
				{
					item.ProcessMnemonic(charCode);
					return;
				}
				base.ProcessDuplicateMnemonic(item, charCode);
			}
		}

		// Token: 0x060040A0 RID: 16544 RVA: 0x00113BF3 File Offset: 0x00111DF3
		internal override void RecreateHandleCore()
		{
			if (this.Visible)
			{
				this.ReparentToDropDownOwnerWindow();
			}
			base.RecreateHandleCore();
			if (this.Visible)
			{
				this.ReparentToActiveToolStripWindow();
			}
		}

		// Token: 0x060040A1 RID: 16545 RVA: 0x00113C17 File Offset: 0x00111E17
		private void ResetDropShadowEnabled()
		{
			this.DropShadowEnabled = true;
		}

		// Token: 0x060040A2 RID: 16546 RVA: 0x00113C20 File Offset: 0x00111E20
		private void ReparentToActiveToolStripWindow()
		{
			ToolStripManager.ModalMenuFilter.SetActiveToolStrip(this);
			UnsafeNativeMethods.SetWindowLong(new HandleRef(this, base.Handle), -8, ToolStripManager.ModalMenuFilter.ActiveHwnd);
		}

		// Token: 0x060040A3 RID: 16547 RVA: 0x00113C44 File Offset: 0x00111E44
		private void ReparentToDropDownOwnerWindow()
		{
			NativeWindow dropDownOwnerWindow = this.DropDownOwnerWindow;
			HandleRef handleRef = new HandleRef(dropDownOwnerWindow, dropDownOwnerWindow.Handle);
			UnsafeNativeMethods.SetWindowLong(new HandleRef(this, base.Handle), -8, handleRef);
		}

		// Token: 0x060040A4 RID: 16548 RVA: 0x00113C7B File Offset: 0x00111E7B
		internal override void ResetScaling(int newDpi)
		{
			base.ResetScaling(newDpi);
			CommonProperties.xClearPreferredSizeCache(this);
			this.scaledDefaultPadding = DpiHelper.LogicalToDeviceUnits(ToolStripDropDown.defaultPadding, newDpi);
		}

		/// <summary>This method is not relevant to this class.</summary>
		/// <param name="dx">The horizontal scaling factor.</param>
		/// <param name="dy">The vertical scaling factor.</param>
		// Token: 0x060040A5 RID: 16549 RVA: 0x00113C9C File Offset: 0x00111E9C
		[EditorBrowsable(EditorBrowsableState.Never)]
		protected override void ScaleCore(float dx, float dy)
		{
			base.SuspendLayout();
			try
			{
				Size clientSize = base.ClientSize;
				Size minimumSize = this.MinimumSize;
				Size maximumSize = this.MaximumSize;
				base.ClientSize = base.ScaleSize(clientSize, dx, dy);
				if (!this.MinimumSize.IsEmpty)
				{
					this.MinimumSize = base.ScaleSize(minimumSize, dx, dy);
				}
				if (!this.MaximumSize.IsEmpty)
				{
					this.MaximumSize = base.ScaleSize(maximumSize, dx, dy);
				}
				base.ScaleDockPadding(dx, dy);
				foreach (object obj in base.Controls)
				{
					Control control = (Control)obj;
					if (control != null)
					{
						control.Scale(dx, dy);
					}
				}
			}
			finally
			{
				base.ResumeLayout();
			}
		}

		/// <summary>Scales a control's location, size, padding and margin.</summary>
		/// <param name="factor">The factor by which the height and width of the control will be scaled.</param>
		/// <param name="specified">A value that specifies the bounds of the control to use when defining its size and position.</param>
		// Token: 0x060040A6 RID: 16550 RVA: 0x00113D88 File Offset: 0x00111F88
		protected override void ScaleControl(SizeF factor, BoundsSpecified specified)
		{
			base.ScaleControl(factor, specified);
			Size minimumSize = this.MinimumSize;
			Size maximumSize = this.MaximumSize;
			if (!this.MinimumSize.IsEmpty)
			{
				this.MinimumSize = base.ScaleSize(minimumSize, factor.Width, factor.Height);
			}
			if (!this.MaximumSize.IsEmpty)
			{
				this.MaximumSize = base.ScaleSize(maximumSize, factor.Width, factor.Height);
			}
		}

		// Token: 0x060040A7 RID: 16551 RVA: 0x00113E01 File Offset: 0x00112001
		internal void SetAutoGeneratedInternal(bool autoGenerated)
		{
			this.isAutoGenerated = autoGenerated;
		}

		/// <summary>Performs the work of setting the specified bounds of this control.</summary>
		/// <param name="x">The new <see cref="P:System.Windows.Forms.Control.Left" /> property value of the control.</param>
		/// <param name="y">The new <see cref="P:System.Windows.Forms.Control.Top" /> property value of the control.</param>
		/// <param name="width">The new <see cref="P:System.Windows.Forms.Control.Width" /> property value of the control.</param>
		/// <param name="height">The new <see cref="P:System.Windows.Forms.Control.Height" /> property value of the control.</param>
		/// <param name="specified">A bitwise combination of the <see cref="T:System.Windows.Forms.BoundsSpecified" /> values.</param>
		// Token: 0x060040A8 RID: 16552 RVA: 0x00113E0C File Offset: 0x0011200C
		protected override void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified)
		{
			Rectangle dropDownBounds = new Rectangle(x, y, width, height);
			dropDownBounds = this.GetDropDownBounds(dropDownBounds);
			base.SetBoundsCore(dropDownBounds.X, dropDownBounds.Y, dropDownBounds.Width, dropDownBounds.Height, specified);
		}

		// Token: 0x060040A9 RID: 16553 RVA: 0x00113E54 File Offset: 0x00112054
		private void SetTopLevelStyle(bool value)
		{
			if (base.IsHandleCreated)
			{
				int num = base.WindowStyle;
				if (value)
				{
					num &= -1073741825;
					num |= int.MinValue;
				}
				else
				{
					num &= int.MaxValue;
					num |= 1073741824;
				}
				base.WindowStyle = num;
			}
		}

		/// <summary>Adjusts the size of the owner <see cref="T:System.Windows.Forms.ToolStrip" /> to accommodate the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> if the owner <see cref="T:System.Windows.Forms.ToolStrip" /> is currently displayed, or clears and resets active <see cref="T:System.Windows.Forms.ToolStripDropDown" /> child controls of the <see cref="T:System.Windows.Forms.ToolStrip" /> if the <see cref="T:System.Windows.Forms.ToolStrip" /> is not currently displayed.</summary>
		/// <param name="visible">
		///   <see langword="true" /> if the owner <see cref="T:System.Windows.Forms.ToolStrip" /> is currently displayed; otherwise, <see langword="false" />.</param>
		// Token: 0x060040AA RID: 16554 RVA: 0x00113E9C File Offset: 0x0011209C
		protected override void SetVisibleCore(bool visible)
		{
			if (this.state[ToolStripDropDown.stateInSetVisibleCore])
			{
				return;
			}
			this.state[ToolStripDropDown.stateInSetVisibleCore] = true;
			try
			{
				if (visible)
				{
					if (base.LayoutRequired)
					{
						LayoutTransaction.DoLayout(this, this, PropertyNames.Visible);
					}
					bool flag = true;
					try
					{
						IntPtr foregroundWindow = UnsafeNativeMethods.GetForegroundWindow();
						CancelEventArgs cancelEventArgs = new CancelEventArgs(this.DisplayedItems.Count == 0);
						this.OnOpening(cancelEventArgs);
						flag = cancelEventArgs.Cancel;
						if (!flag)
						{
							if (this.TopLevel)
							{
								this.ReparentToActiveToolStripWindow();
							}
							if (this.OwnerToolStrip != null)
							{
								this.OwnerToolStrip.ActiveDropDowns.Add(this);
								this.OwnerToolStrip.SnapMouseLocation();
								if (this.OwnerToolStrip.CaptureInternal)
								{
									base.CaptureInternal = true;
								}
							}
							base.SetVisibleCore(visible);
							if (this.TopLevel)
							{
								this.ApplyTopMost(true);
							}
							else if (base.IsHandleCreated && SafeNativeMethods.IsWindowEnabled(new HandleRef(this, base.Handle)))
							{
								SafeNativeMethods.SetWindowPos(new HandleRef(this, base.Handle), NativeMethods.HWND_TOP, 0, 0, 0, 0, 19);
							}
						}
						return;
					}
					finally
					{
						if (!flag)
						{
							this.OnOpened(new EventArgs());
						}
					}
				}
				if (this.GetVisibleCore())
				{
					ToolStripDropDownCloseReason toolStripDropDownCloseReason = this.closeReason;
					this.ResetCloseReason();
					ToolStripDropDownClosingEventArgs toolStripDropDownClosingEventArgs = new ToolStripDropDownClosingEventArgs(toolStripDropDownCloseReason);
					if (toolStripDropDownClosingEventArgs.CloseReason != ToolStripDropDownCloseReason.CloseCalled)
					{
						toolStripDropDownClosingEventArgs.Cancel = !this.AutoClose;
					}
					else
					{
						toolStripDropDownClosingEventArgs.Cancel = false;
					}
					try
					{
						this.OnClosing(toolStripDropDownClosingEventArgs);
						return;
					}
					finally
					{
						if (!toolStripDropDownClosingEventArgs.Cancel || this.IsRestrictedWindow)
						{
							this.DismissActiveDropDowns();
							ToolStrip toplevelOwnerToolStrip = this.GetToplevelOwnerToolStrip();
							ToolStrip toolStrip = null;
							if (this.OwnerItem != null)
							{
								toolStrip = this.OwnerItem.ParentInternal;
							}
							if (toolStripDropDownCloseReason == ToolStripDropDownCloseReason.AppClicked || toolStripDropDownCloseReason == ToolStripDropDownCloseReason.ItemClicked || (toolStripDropDownCloseReason == ToolStripDropDownCloseReason.CloseCalled && toplevelOwnerToolStrip == toolStrip) || (toolStripDropDownCloseReason == ToolStripDropDownCloseReason.AppFocusChange && toplevelOwnerToolStrip == toolStrip))
							{
								this.CancelAutoExpand();
							}
							if (toolStripDropDownCloseReason == ToolStripDropDownCloseReason.ItemClicked)
							{
								this.saveSourceControl = true;
								this.DismissAll();
								ToolStripItem toplevelOwnerItem = this.GetToplevelOwnerItem();
								if (toplevelOwnerItem != null)
								{
									toplevelOwnerItem.Unselect();
								}
								ToolStripManager.ModalMenuFilter.RemoveActiveToolStrip(this);
								ToolStripManager.ModalMenuFilter.ExitMenuMode();
							}
							else
							{
								ToolStripManager.ModalMenuFilter.RemoveActiveToolStrip(this);
							}
							Rectangle bounds = base.Bounds;
							try
							{
								base.SetVisibleCore(visible);
							}
							finally
							{
								if (this.OwnerToolStrip != null)
								{
									this.OwnerToolStrip.ActiveDropDowns.Remove(this);
								}
								base.ActiveDropDowns.Clear();
								if (base.CaptureInternal)
								{
									base.CaptureInternal = false;
								}
							}
							ToolStripDropDownClosedEventArgs toolStripDropDownClosedEventArgs = new ToolStripDropDownClosedEventArgs(toolStripDropDownCloseReason);
							this.OnClosed(toolStripDropDownClosedEventArgs);
							if (this.TopLevel && (!base.IsDisposed || !base.Disposing))
							{
								this.ReparentToDropDownOwnerWindow();
							}
							if (!this.saveSourceControl)
							{
								this.SourceControlInternal = null;
							}
							if (!base.DesignMode && this.IsFirstDropDown && this.OwnerItem != null && this.TopLevel)
							{
								ToolStrip toplevelOwnerToolStrip2 = this.GetToplevelOwnerToolStrip();
								if (toplevelOwnerToolStrip2 != null && !toplevelOwnerToolStrip2.IsDisposed && !toplevelOwnerToolStrip2.Disposing)
								{
									bounds.Location = toplevelOwnerToolStrip2.PointToClient(bounds.Location);
									bounds.Intersect(toplevelOwnerToolStrip2.ClientRectangle);
									if (bounds.Width > 0 && bounds.Height > 0)
									{
										toplevelOwnerToolStrip2.Invalidate(bounds);
										toplevelOwnerToolStrip2.Update();
									}
								}
							}
						}
					}
				}
				ToolStripManager.ModalMenuFilter.RemoveActiveToolStrip(this);
			}
			finally
			{
				this.state[ToolStripDropDown.stateInSetVisibleCore] = false;
				this.saveSourceControl = false;
			}
		}

		// Token: 0x060040AB RID: 16555 RVA: 0x00114238 File Offset: 0x00112438
		private bool ShouldSerializeDefaultDropDownDirection()
		{
			return this.childDropDownDirection != ToolStripDropDownDirection.Default;
		}

		// Token: 0x060040AC RID: 16556 RVA: 0x00114248 File Offset: 0x00112448
		private void UpdateLayered()
		{
			if (this.state[ToolStripDropDown.stateLayered] && base.IsHandleCreated && this.TopLevel && OSFeature.Feature.IsPresent(OSFeature.LayeredWindows) && !UnsafeNativeMethods.SetLayeredWindowAttributes(new HandleRef(this, base.Handle), 0, this.OpacityAsByte, 2))
			{
				throw new Win32Exception();
			}
		}

		/// <summary>Displays the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> control in its default position.</summary>
		// Token: 0x060040AD RID: 16557 RVA: 0x001142AB File Offset: 0x001124AB
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new void Show()
		{
			base.Show();
		}

		/// <summary>Positions the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> relative to the specified control location.</summary>
		/// <param name="control">The control (typically, a <see cref="T:System.Windows.Forms.ToolStripDropDownButton" />) that is the reference point for the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> position.</param>
		/// <param name="position">The horizontal and vertical location of the reference control's upper-left corner, in pixels.</param>
		/// <exception cref="T:System.ArgumentNullException">The control specified by the <paramref name="control" /> parameter is <see langword="null" />.</exception>
		// Token: 0x060040AE RID: 16558 RVA: 0x001142B4 File Offset: 0x001124B4
		public void Show(Control control, Point position)
		{
			if (control == null)
			{
				throw new ArgumentNullException("control");
			}
			this.SourceControlInternal = control;
			if (this.OwnerItem == null && control.RightToLeft == RightToLeft.Yes)
			{
				this.AdjustSize();
				position.Offset(control.IsMirrored ? base.Width : (-base.Width), 0);
			}
			this.displayLocation = control.PointToScreen(position);
			this.Location = this.displayLocation;
			this.ShowCore();
		}

		/// <summary>Positions the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> relative to the specified control at the specified location and with the specified direction relative to the parent control.</summary>
		/// <param name="control">The control (typically, a <see cref="T:System.Windows.Forms.ToolStripDropDownButton" />) that is the reference point for the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> position.</param>
		/// <param name="position">The horizontal and vertical location of the reference control's upper-left corner, in pixels.</param>
		/// <param name="direction">One of the <see cref="T:System.Windows.Forms.ToolStripDropDownDirection" /> values.</param>
		/// <exception cref="T:System.ArgumentNullException">The control specified by the <paramref name="control" /> parameter is <see langword="null" />.</exception>
		// Token: 0x060040AF RID: 16559 RVA: 0x0011432C File Offset: 0x0011252C
		public void Show(Control control, Point position, ToolStripDropDownDirection direction)
		{
			if (control == null)
			{
				throw new ArgumentNullException("control");
			}
			this.SourceControlInternal = control;
			this.displayLocation = this.CalculateDropDownLocation(control.PointToScreen(position), direction).Location;
			this.Location = this.displayLocation;
			this.ShowCore();
		}

		/// <summary>Positions the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> relative to the specified control's horizontal and vertical screen coordinates.</summary>
		/// <param name="control">The control (typically, a <see cref="T:System.Windows.Forms.ToolStripDropDownButton" />) that is the reference point for the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> position.</param>
		/// <param name="x">The horizontal screen coordinate of the control, in pixels.</param>
		/// <param name="y">The vertical screen coordinate of the control, in pixels.</param>
		/// <exception cref="T:System.ArgumentNullException">The control specified by the <paramref name="control" /> parameter is <see langword="null" />.</exception>
		// Token: 0x060040B0 RID: 16560 RVA: 0x0011437C File Offset: 0x0011257C
		public void Show(Control control, int x, int y)
		{
			if (control == null)
			{
				throw new ArgumentNullException("control");
			}
			this.SourceControlInternal = control;
			this.Show(control, new Point(x, y));
		}

		/// <summary>Positions the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> relative to the specified screen location.</summary>
		/// <param name="screenLocation">The horizontal and vertical location of the screen's upper-left corner, in pixels.</param>
		// Token: 0x060040B1 RID: 16561 RVA: 0x001143A1 File Offset: 0x001125A1
		public void Show(Point screenLocation)
		{
			this.displayLocation = screenLocation;
			this.Location = this.displayLocation;
			this.ShowCore();
		}

		/// <summary>Positions the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> relative to the specified control location and with the specified direction relative to the parent control.</summary>
		/// <param name="position">The horizontal and vertical location of the reference control's upper-left corner, in pixels.</param>
		/// <param name="direction">One of the <see cref="T:System.Windows.Forms.ToolStripDropDownDirection" /> values.</param>
		// Token: 0x060040B2 RID: 16562 RVA: 0x001143BC File Offset: 0x001125BC
		public void Show(Point position, ToolStripDropDownDirection direction)
		{
			this.displayLocation = this.CalculateDropDownLocation(position, direction).Location;
			this.Location = this.displayLocation;
			this.ShowCore();
		}

		/// <summary>Positions the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> relative to the specified screen coordinates.</summary>
		/// <param name="x">The horizontal screen coordinate, in pixels.</param>
		/// <param name="y">The vertical screen coordinate, in pixels.</param>
		// Token: 0x060040B3 RID: 16563 RVA: 0x001143F1 File Offset: 0x001125F1
		public void Show(int x, int y)
		{
			this.displayLocation = new Point(x, y);
			this.Location = this.displayLocation;
			this.ShowCore();
		}

		// Token: 0x060040B4 RID: 16564 RVA: 0x00114412 File Offset: 0x00112612
		private void ShowCore()
		{
			this.Show();
		}

		// Token: 0x060040B5 RID: 16565 RVA: 0x0011441A File Offset: 0x0011261A
		private bool ShouldSerializeDropShadowEnabled()
		{
			return !this.dropShadowEnabled;
		}

		// Token: 0x060040B6 RID: 16566 RVA: 0x00114425 File Offset: 0x00112625
		internal override bool ShouldSerializeLayoutStyle()
		{
			return base.LayoutStyle != ToolStripLayoutStyle.VerticalStackWithOverflow;
		}

		// Token: 0x060040B7 RID: 16567 RVA: 0x00114434 File Offset: 0x00112634
		internal void UnassignDropDownItem()
		{
			int num = this.countDropDownItemsAssignedTo - 1;
			this.countDropDownItemsAssignedTo = num;
			this.countDropDownItemsAssignedTo = Math.Max(num, 0);
		}

		/// <summary>Processes Windows messages.</summary>
		/// <param name="m">The Windows <see cref="T:System.Windows.Forms.Message" /> to process.</param>
		// Token: 0x060040B8 RID: 16568 RVA: 0x00114460 File Offset: 0x00112660
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected override void WndProc(ref Message m)
		{
			if (m.Msg >= 256 && m.Msg <= 264 && this.IsRestrictedWindow)
			{
				this.DefWndProc(ref m);
				return;
			}
			int msg = m.Msg;
			if (msg == 6)
			{
				if ((int)m.WParam == 1 && this.Visible && ToolStripManager.ModalMenuFilter.GetActiveToolStrip() != this)
				{
					ToolStripManager.ModalMenuFilter.SetActiveToolStrip(this);
				}
				base.WndProc(ref m);
				return;
			}
			if (msg == 134)
			{
				this.WmNCActivate(ref m);
				return;
			}
			base.WndProc(ref m);
		}

		// Token: 0x060040B9 RID: 16569 RVA: 0x001144E8 File Offset: 0x001126E8
		internal void DismissAll()
		{
			ToolStripDropDown firstDropDown = this.GetFirstDropDown();
			firstDropDown.closeReason = this.closeReason;
			firstDropDown.DismissActiveDropDowns();
			if (!LocalAppContextSwitches.UseLegacyContextMenuStripSourceControlValue)
			{
				firstDropDown.saveSourceControl = this.saveSourceControl;
			}
			firstDropDown.Visible = false;
		}

		// Token: 0x060040BA RID: 16570 RVA: 0x00114528 File Offset: 0x00112728
		private void DismissActiveDropDowns()
		{
			int count = base.ActiveDropDowns.Count;
			if (count == 1)
			{
				ToolStripDropDown toolStripDropDown = base.ActiveDropDowns[0] as ToolStripDropDown;
				if (toolStripDropDown != null)
				{
					toolStripDropDown.Visible = false;
					return;
				}
			}
			else
			{
				ArrayList arrayList = base.ActiveDropDowns.Clone() as ArrayList;
				for (int i = 0; i < arrayList.Count; i++)
				{
					ToolStripDropDown toolStripDropDown2 = arrayList[i] as ToolStripDropDown;
					if (toolStripDropDown2 != null)
					{
						toolStripDropDown2.Visible = false;
					}
				}
			}
		}

		// Token: 0x060040BB RID: 16571 RVA: 0x001145A0 File Offset: 0x001127A0
		private void WmNCActivate(ref Message m)
		{
			if (m.WParam != IntPtr.Zero)
			{
				if (!this.sendingActivateMessage)
				{
					this.sendingActivateMessage = true;
					try
					{
						HandleRef activeHwnd = ToolStripManager.ModalMenuFilter.ActiveHwnd;
						UnsafeNativeMethods.SendMessage(activeHwnd, 134, (IntPtr)1, NativeMethods.InvalidIntPtr);
						SafeNativeMethods.RedrawWindow(activeHwnd, null, NativeMethods.NullHandleRef, 1025);
						m.WParam = (IntPtr)1;
					}
					finally
					{
						this.sendingActivateMessage = false;
					}
				}
				this.DefWndProc(ref m);
				return;
			}
			base.WndProc(ref m);
		}

		// Token: 0x17000FCE RID: 4046
		// (get) Token: 0x060040BC RID: 16572 RVA: 0x00114634 File Offset: 0x00112834
		internal bool IsFirstDropDown
		{
			get
			{
				return !(this.OwnerToolStrip is ToolStripDropDown);
			}
		}

		// Token: 0x060040BD RID: 16573 RVA: 0x00114644 File Offset: 0x00112844
		internal ToolStripDropDown GetFirstDropDown()
		{
			ToolStripDropDown toolStripDropDown = this;
			for (ToolStripDropDown toolStripDropDown2 = toolStripDropDown.OwnerToolStrip as ToolStripDropDown; toolStripDropDown2 != null; toolStripDropDown2 = toolStripDropDown.OwnerToolStrip as ToolStripDropDown)
			{
				toolStripDropDown = toolStripDropDown2;
			}
			return toolStripDropDown;
		}

		// Token: 0x060040BE RID: 16574 RVA: 0x00114674 File Offset: 0x00112874
		internal static ToolStripDropDown GetFirstDropDown(ToolStrip start)
		{
			if (start == null || !start.IsDropDown)
			{
				return null;
			}
			ToolStripDropDown toolStripDropDown = start as ToolStripDropDown;
			return toolStripDropDown.GetFirstDropDown();
		}

		// Token: 0x040024AE RID: 9390
		private ToolStripItem ownerItem;

		// Token: 0x040024AF RID: 9391
		private bool isAutoGenerated;

		// Token: 0x040024B0 RID: 9392
		private Point dropDownLocation = Point.Empty;

		// Token: 0x040024B1 RID: 9393
		private bool dropShadowEnabled = true;

		// Token: 0x040024B2 RID: 9394
		private bool autoClose = true;

		// Token: 0x040024B3 RID: 9395
		private bool autoSize = true;

		// Token: 0x040024B4 RID: 9396
		private int countDropDownItemsAssignedTo;

		// Token: 0x040024B5 RID: 9397
		private BitVector32 state;

		// Token: 0x040024B6 RID: 9398
		private Point displayLocation = new Point(0, 0);

		// Token: 0x040024B7 RID: 9399
		private bool saveSourceControl;

		// Token: 0x040024B8 RID: 9400
		private ToolStripDropDownDirection childDropDownDirection = ToolStripDropDownDirection.Default;

		// Token: 0x040024B9 RID: 9401
		private ToolStripDropDownCloseReason closeReason;

		// Token: 0x040024BA RID: 9402
		private static readonly int PropOpacity = PropertyStore.CreateKey();

		// Token: 0x040024BB RID: 9403
		private static readonly int PropDDRightToLeft = PropertyStore.CreateKey();

		// Token: 0x040024BC RID: 9404
		private static readonly int PropSourceControl = PropertyStore.CreateKey();

		// Token: 0x040024BD RID: 9405
		private static readonly object EventOpening = new object();

		// Token: 0x040024BE RID: 9406
		private static readonly object EventOpened = new object();

		// Token: 0x040024BF RID: 9407
		private static readonly object EventClosed = new object();

		// Token: 0x040024C0 RID: 9408
		private static readonly object EventClosing = new object();

		// Token: 0x040024C1 RID: 9409
		private static readonly object ToolStripParkingWindowKey = new object();

		// Token: 0x040024C2 RID: 9410
		private static readonly Padding defaultPadding = new Padding(1, 2, 1, 2);

		// Token: 0x040024C3 RID: 9411
		private Padding scaledDefaultPadding = ToolStripDropDown.defaultPadding;

		// Token: 0x040024C4 RID: 9412
		internal static TraceSwitch DropDownActivateDebug;

		// Token: 0x040024C5 RID: 9413
		internal static TraceSwitch DropDownDebugBounds;

		// Token: 0x040024C6 RID: 9414
		private static readonly int stateLayered = BitVector32.CreateMask();

		// Token: 0x040024C7 RID: 9415
		private static readonly int stateAllowTransparency = BitVector32.CreateMask(ToolStripDropDown.stateLayered);

		// Token: 0x040024C8 RID: 9416
		private static readonly int stateIsRestrictedWindow = BitVector32.CreateMask(ToolStripDropDown.stateAllowTransparency);

		// Token: 0x040024C9 RID: 9417
		private static readonly int stateIsRestrictedWindowChecked = BitVector32.CreateMask(ToolStripDropDown.stateIsRestrictedWindow);

		// Token: 0x040024CA RID: 9418
		private static readonly int stateNotWorkingAreaConstrained = BitVector32.CreateMask(ToolStripDropDown.stateIsRestrictedWindowChecked);

		// Token: 0x040024CB RID: 9419
		private static readonly int stateInSetVisibleCore = BitVector32.CreateMask(ToolStripDropDown.stateNotWorkingAreaConstrained);

		// Token: 0x040024CC RID: 9420
		private bool sendingActivateMessage;

		/// <summary>Provides information about the <see cref="T:System.Windows.Forms.ToolStripDropDown" /> control to accessibility client applications.</summary>
		// Token: 0x020007FE RID: 2046
		[ComVisible(true)]
		public class ToolStripDropDownAccessibleObject : ToolStrip.ToolStripAccessibleObject
		{
			/// <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.ToolStripDropDown.ToolStripDropDownAccessibleObject" /> class.</summary>
			/// <param name="owner">The <see cref="T:System.Windows.Forms.ToolStripDropDown" /> that owns the <see cref="T:System.Windows.Forms.ToolStripDropDown.ToolStripDropDownAccessibleObject" />.</param>
			// Token: 0x06006EB1 RID: 28337 RVA: 0x00195462 File Offset: 0x00193662
			public ToolStripDropDownAccessibleObject(ToolStripDropDown owner)
				: base(owner)
			{
				this.owner = owner;
			}

			/// <summary>Gets or sets the name of the <see cref="T:System.Windows.Forms.ToolStripDropDown.ToolStripDropDownAccessibleObject" />.</summary>
			/// <returns>The string representing the name.</returns>
			// Token: 0x17001834 RID: 6196
			// (get) Token: 0x06006EB2 RID: 28338 RVA: 0x00195474 File Offset: 0x00193674
			// (set) Token: 0x06006EB3 RID: 28339 RVA: 0x001954D9 File Offset: 0x001936D9
			public override string Name
			{
				get
				{
					string text = this.owner.AccessibleName;
					if (text != null)
					{
						return text;
					}
					text = "DropDown";
					if (this.owner.OwnerItem != null && this.owner.OwnerItem.AccessibilityObject.Name != null)
					{
						text = this.owner.OwnerItem.AccessibilityObject.Name + text;
					}
					return text;
				}
				set
				{
					this.owner.AccessibleName = value;
				}
			}

			/// <summary>Gets the role of the <see cref="T:System.Windows.Forms.ToolStripDropDown.ToolStripDropDownAccessibleObject" />.</summary>
			/// <returns>The <see cref="F:System.Windows.Forms.AccessibleRole.Table" /> value.</returns>
			// Token: 0x17001835 RID: 6197
			// (get) Token: 0x06006EB4 RID: 28340 RVA: 0x001954E8 File Offset: 0x001936E8
			public override AccessibleRole Role
			{
				get
				{
					AccessibleRole accessibleRole = base.Owner.AccessibleRole;
					if (accessibleRole != AccessibleRole.Default)
					{
						return accessibleRole;
					}
					return AccessibleRole.MenuPopup;
				}
			}

			// Token: 0x040042ED RID: 17133
			private ToolStripDropDown owner;
		}
	}
}
