using System;
using System.ComponentModel;

namespace System.Text.RegularExpressions
{
	/// <summary>The <see cref="T:System.Text.RegularExpressions.RegexRunner" /> class is the base class for compiled regular expressions.</summary>
	// Token: 0x020006A4 RID: 1700
	[EditorBrowsable(EditorBrowsableState.Never)]
	public abstract class RegexRunner
	{
		/// <summary>Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.RegexRunner" /> class.</summary>
		// Token: 0x06003F8C RID: 16268 RVA: 0x0010AE00 File Offset: 0x00109000
		protected internal RegexRunner()
		{
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		/// <param name="regex">An instance of the regular expression engine.</param>
		/// <param name="text">The text to scan for a pattern match.</param>
		/// <param name="textbeg">The zero-based starting position in <paramref name="text" /> at which the regular expression engine scans for a match.</param>
		/// <param name="textend">The zero-based ending position in <paramref name="text" /> at which the regular expression engine scans for a match.</param>
		/// <param name="textstart">The zero-based starting position to scan for this match.</param>
		/// <param name="prevlen">The number of characters in the previous match.</param>
		/// <param name="quick">
		///   <see langword="true" /> to search for a match in quick mode; otherwise, <see langword="false" />.</param>
		/// <returns>A match.</returns>
		// Token: 0x06003F8D RID: 16269 RVA: 0x0010AE08 File Offset: 0x00109008
		protected internal Match Scan(Regex regex, string text, int textbeg, int textend, int textstart, int prevlen, bool quick)
		{
			return this.Scan(regex, text, textbeg, textend, textstart, prevlen, quick, regex.MatchTimeout);
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		/// <param name="regex">An instance of the regular expression engine.</param>
		/// <param name="text">The text to scan for a pattern match.</param>
		/// <param name="textbeg">The zero-based starting position in <paramref name="text" /> at which the regular expression engine scans for a match.</param>
		/// <param name="textend">The zero-based ending position in <paramref name="text" /> at which the regular expression engine scans for a match.</param>
		/// <param name="textstart">The zero-based starting position to scan for this match.</param>
		/// <param name="prevlen">The number of characters in the previous match.</param>
		/// <param name="quick">
		///   <see langword="true" /> to search for a match in quick mode; otherwise, <see langword="false" />.</param>
		/// <param name="timeout">The timeout interval.</param>
		/// <returns>A match.</returns>
		// Token: 0x06003F8E RID: 16270 RVA: 0x0010AE2C File Offset: 0x0010902C
		protected internal Match Scan(Regex regex, string text, int textbeg, int textend, int textstart, int prevlen, bool quick, TimeSpan timeout)
		{
			bool flag = false;
			Regex.ValidateMatchTimeout(timeout);
			this.ignoreTimeout = Regex.InfiniteMatchTimeout == timeout;
			this.timeout = (this.ignoreTimeout ? ((int)Regex.InfiniteMatchTimeout.TotalMilliseconds) : ((int)(timeout.TotalMilliseconds + 0.5)));
			this.runregex = regex;
			this.runtext = text;
			this.runtextbeg = textbeg;
			this.runtextend = textend;
			this.runtextstart = textstart;
			int num = (this.runregex.RightToLeft ? (-1) : 1);
			int num2 = (this.runregex.RightToLeft ? this.runtextbeg : this.runtextend);
			this.runtextpos = textstart;
			if (prevlen == 0)
			{
				if (this.runtextpos == num2)
				{
					return Match.Empty;
				}
				this.runtextpos += num;
			}
			this.StartTimeoutWatch();
			for (;;)
			{
				if (this.FindFirstChar())
				{
					this.CheckTimeout();
					if (!flag)
					{
						this.InitMatch();
						flag = true;
					}
					this.Go();
					if (this.runmatch._matchcount[0] > 0)
					{
						break;
					}
					this.runtrackpos = this.runtrack.Length;
					this.runstackpos = this.runstack.Length;
					this.runcrawlpos = this.runcrawl.Length;
				}
				if (this.runtextpos == num2)
				{
					goto Block_9;
				}
				this.runtextpos += num;
			}
			return this.TidyMatch(quick);
			Block_9:
			this.TidyMatch(true);
			return Match.Empty;
		}

		// Token: 0x06003F8F RID: 16271 RVA: 0x0010AF91 File Offset: 0x00109191
		private void StartTimeoutWatch()
		{
			if (this.ignoreTimeout)
			{
				return;
			}
			this.timeoutChecksToSkip = 1000;
			this.timeoutOccursAt = Environment.TickCount + this.timeout;
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		// Token: 0x06003F90 RID: 16272 RVA: 0x0010AFBC File Offset: 0x001091BC
		protected void CheckTimeout()
		{
			if (this.ignoreTimeout)
			{
				return;
			}
			int num = this.timeoutChecksToSkip - 1;
			this.timeoutChecksToSkip = num;
			if (num != 0)
			{
				return;
			}
			this.timeoutChecksToSkip = 1000;
			this.DoCheckTimeout();
		}

		// Token: 0x06003F91 RID: 16273 RVA: 0x0010AFF8 File Offset: 0x001091F8
		private void DoCheckTimeout()
		{
			int tickCount = Environment.TickCount;
			if (tickCount < this.timeoutOccursAt)
			{
				return;
			}
			if (0 > this.timeoutOccursAt && 0 < tickCount)
			{
				return;
			}
			throw new RegexMatchTimeoutException(this.runtext, this.runregex.pattern, TimeSpan.FromMilliseconds((double)this.timeout));
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		// Token: 0x06003F92 RID: 16274
		protected abstract void Go();

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		/// <returns>Returns <see cref="T:System.Boolean" />.</returns>
		// Token: 0x06003F93 RID: 16275
		protected abstract bool FindFirstChar();

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		// Token: 0x06003F94 RID: 16276
		protected abstract void InitTrackCount();

		// Token: 0x06003F95 RID: 16277 RVA: 0x0010B048 File Offset: 0x00109248
		private void InitMatch()
		{
			if (this.runmatch == null)
			{
				if (this.runregex.caps != null)
				{
					this.runmatch = new MatchSparse(this.runregex, this.runregex.caps, this.runregex.capsize, this.runtext, this.runtextbeg, this.runtextend - this.runtextbeg, this.runtextstart);
				}
				else
				{
					this.runmatch = new Match(this.runregex, this.runregex.capsize, this.runtext, this.runtextbeg, this.runtextend - this.runtextbeg, this.runtextstart);
				}
			}
			else
			{
				this.runmatch.Reset(this.runregex, this.runtext, this.runtextbeg, this.runtextend, this.runtextstart);
			}
			if (this.runcrawl != null)
			{
				this.runtrackpos = this.runtrack.Length;
				this.runstackpos = this.runstack.Length;
				this.runcrawlpos = this.runcrawl.Length;
				return;
			}
			this.InitTrackCount();
			int num = this.runtrackcount * 8;
			int num2 = this.runtrackcount * 8;
			if (num < 32)
			{
				num = 32;
			}
			if (num2 < 16)
			{
				num2 = 16;
			}
			this.runtrack = new int[num];
			this.runtrackpos = num;
			this.runstack = new int[num2];
			this.runstackpos = num2;
			this.runcrawl = new int[32];
			this.runcrawlpos = 32;
		}

		// Token: 0x06003F96 RID: 16278 RVA: 0x0010B1B4 File Offset: 0x001093B4
		private Match TidyMatch(bool quick)
		{
			if (!quick)
			{
				Match match = this.runmatch;
				this.runmatch = null;
				match.Tidy(this.runtextpos);
				return match;
			}
			return null;
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		// Token: 0x06003F97 RID: 16279 RVA: 0x0010B1E1 File Offset: 0x001093E1
		protected void EnsureStorage()
		{
			if (this.runstackpos < this.runtrackcount * 4)
			{
				this.DoubleStack();
			}
			if (this.runtrackpos < this.runtrackcount * 4)
			{
				this.DoubleTrack();
			}
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		/// <param name="index">The possible boundary position.</param>
		/// <param name="startpos">The starting position.</param>
		/// <param name="endpos">The ending position.</param>
		/// <returns>Returns <see cref="T:System.Boolean" />.</returns>
		// Token: 0x06003F98 RID: 16280 RVA: 0x0010B20F File Offset: 0x0010940F
		protected bool IsBoundary(int index, int startpos, int endpos)
		{
			return (index > startpos && RegexCharClass.IsWordChar(this.runtext[index - 1])) != (index < endpos && RegexCharClass.IsWordChar(this.runtext[index]));
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		/// <param name="index">The possible ECMA boundary position.</param>
		/// <param name="startpos">The starting position.</param>
		/// <param name="endpos">The ending position.</param>
		/// <returns>Returns <see cref="T:System.Boolean" />.</returns>
		// Token: 0x06003F99 RID: 16281 RVA: 0x0010B248 File Offset: 0x00109448
		protected bool IsECMABoundary(int index, int startpos, int endpos)
		{
			return (index > startpos && RegexCharClass.IsECMAWordChar(this.runtext[index - 1])) != (index < endpos && RegexCharClass.IsECMAWordChar(this.runtext[index]));
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		/// <param name="ch">A character.</param>
		/// <param name="set">The character set.</param>
		/// <param name="category">The character category.</param>
		/// <returns>Returns <see cref="T:System.Boolean" />.</returns>
		// Token: 0x06003F9A RID: 16282 RVA: 0x0010B284 File Offset: 0x00109484
		protected static bool CharInSet(char ch, string set, string category)
		{
			string text = RegexCharClass.ConvertOldStringsToClass(set, category);
			return RegexCharClass.CharInClass(ch, text);
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. Determines whether a character is in a character class.</summary>
		/// <param name="ch">A character to test.</param>
		/// <param name="charClass">The internal name of a character class.</param>
		/// <returns>
		///   <see langword="true" /> if the <paramref name="ch" /> parameter is in the character class specified by the <paramref name="charClass" /> parameter.</returns>
		// Token: 0x06003F9B RID: 16283 RVA: 0x0010B2A0 File Offset: 0x001094A0
		protected static bool CharInClass(char ch, string charClass)
		{
			return RegexCharClass.CharInClass(ch, charClass);
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		// Token: 0x06003F9C RID: 16284 RVA: 0x0010B2AC File Offset: 0x001094AC
		protected void DoubleTrack()
		{
			int[] array = new int[this.runtrack.Length * 2];
			Array.Copy(this.runtrack, 0, array, this.runtrack.Length, this.runtrack.Length);
			this.runtrackpos += this.runtrack.Length;
			this.runtrack = array;
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		// Token: 0x06003F9D RID: 16285 RVA: 0x0010B304 File Offset: 0x00109504
		protected void DoubleStack()
		{
			int[] array = new int[this.runstack.Length * 2];
			Array.Copy(this.runstack, 0, array, this.runstack.Length, this.runstack.Length);
			this.runstackpos += this.runstack.Length;
			this.runstack = array;
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		// Token: 0x06003F9E RID: 16286 RVA: 0x0010B35C File Offset: 0x0010955C
		protected void DoubleCrawl()
		{
			int[] array = new int[this.runcrawl.Length * 2];
			Array.Copy(this.runcrawl, 0, array, this.runcrawl.Length, this.runcrawl.Length);
			this.runcrawlpos += this.runcrawl.Length;
			this.runcrawl = array;
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		/// <param name="i">A number to save.</param>
		// Token: 0x06003F9F RID: 16287 RVA: 0x0010B3B4 File Offset: 0x001095B4
		protected void Crawl(int i)
		{
			if (this.runcrawlpos == 0)
			{
				this.DoubleCrawl();
			}
			int[] array = this.runcrawl;
			int num = this.runcrawlpos - 1;
			this.runcrawlpos = num;
			array[num] = i;
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		/// <returns>Returns <see cref="T:System.Int32" />.</returns>
		// Token: 0x06003FA0 RID: 16288 RVA: 0x0010B3E8 File Offset: 0x001095E8
		protected int Popcrawl()
		{
			int[] array = this.runcrawl;
			int num = this.runcrawlpos;
			this.runcrawlpos = num + 1;
			return array[num];
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		/// <returns>Returns <see cref="T:System.Int32" />.</returns>
		// Token: 0x06003FA1 RID: 16289 RVA: 0x0010B40D File Offset: 0x0010960D
		protected int Crawlpos()
		{
			return this.runcrawl.Length - this.runcrawlpos;
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		/// <param name="capnum">A capture number.</param>
		/// <param name="start">The starting position of the capture.</param>
		/// <param name="end">The ending position of the capture.</param>
		// Token: 0x06003FA2 RID: 16290 RVA: 0x0010B420 File Offset: 0x00109620
		protected void Capture(int capnum, int start, int end)
		{
			if (end < start)
			{
				int num = end;
				end = start;
				start = num;
			}
			this.Crawl(capnum);
			this.runmatch.AddMatch(capnum, start, end - start);
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		/// <param name="capnum">A capture number.</param>
		/// <param name="uncapnum">A saved capture number.</param>
		/// <param name="start">The starting position.</param>
		/// <param name="end">The ending position.</param>
		// Token: 0x06003FA3 RID: 16291 RVA: 0x0010B450 File Offset: 0x00109650
		protected void TransferCapture(int capnum, int uncapnum, int start, int end)
		{
			if (end < start)
			{
				int num = end;
				end = start;
				start = num;
			}
			int num2 = this.MatchIndex(uncapnum);
			int num3 = num2 + this.MatchLength(uncapnum);
			if (start >= num3)
			{
				end = start;
				start = num3;
			}
			else if (end <= num2)
			{
				start = num2;
			}
			else
			{
				if (end > num3)
				{
					end = num3;
				}
				if (num2 > start)
				{
					start = num2;
				}
			}
			this.Crawl(uncapnum);
			this.runmatch.BalanceMatch(uncapnum);
			if (capnum != -1)
			{
				this.Crawl(capnum);
				this.runmatch.AddMatch(capnum, start, end - start);
			}
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		// Token: 0x06003FA4 RID: 16292 RVA: 0x0010B4D4 File Offset: 0x001096D4
		protected void Uncapture()
		{
			int num = this.Popcrawl();
			this.runmatch.RemoveMatch(num);
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		/// <param name="cap">The capture number.</param>
		/// <returns>Returns <see cref="T:System.Boolean" />.</returns>
		// Token: 0x06003FA5 RID: 16293 RVA: 0x0010B4F4 File Offset: 0x001096F4
		protected bool IsMatched(int cap)
		{
			return this.runmatch.IsMatched(cap);
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		/// <param name="cap">The capture number.</param>
		/// <returns>Returns <see cref="T:System.Int32" />.</returns>
		// Token: 0x06003FA6 RID: 16294 RVA: 0x0010B502 File Offset: 0x00109702
		protected int MatchIndex(int cap)
		{
			return this.runmatch.MatchIndex(cap);
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		/// <param name="cap">The capture number.</param>
		/// <returns>Returns <see cref="T:System.Int32" />.</returns>
		// Token: 0x06003FA7 RID: 16295 RVA: 0x0010B510 File Offset: 0x00109710
		protected int MatchLength(int cap)
		{
			return this.runmatch.MatchLength(cap);
		}

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		// Token: 0x04002E4A RID: 11850
		protected internal int runtextbeg;

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		// Token: 0x04002E4B RID: 11851
		protected internal int runtextend;

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		// Token: 0x04002E4C RID: 11852
		protected internal int runtextstart;

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		// Token: 0x04002E4D RID: 11853
		protected internal string runtext;

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		// Token: 0x04002E4E RID: 11854
		protected internal int runtextpos;

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		// Token: 0x04002E4F RID: 11855
		protected internal int[] runtrack;

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		// Token: 0x04002E50 RID: 11856
		protected internal int runtrackpos;

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		// Token: 0x04002E51 RID: 11857
		protected internal int[] runstack;

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		// Token: 0x04002E52 RID: 11858
		protected internal int runstackpos;

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		// Token: 0x04002E53 RID: 11859
		protected internal int[] runcrawl;

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		// Token: 0x04002E54 RID: 11860
		protected internal int runcrawlpos;

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		// Token: 0x04002E55 RID: 11861
		protected internal int runtrackcount;

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		// Token: 0x04002E56 RID: 11862
		protected internal Match runmatch;

		/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
		// Token: 0x04002E57 RID: 11863
		protected internal Regex runregex;

		// Token: 0x04002E58 RID: 11864
		private int timeout;

		// Token: 0x04002E59 RID: 11865
		private bool ignoreTimeout;

		// Token: 0x04002E5A RID: 11866
		private int timeoutOccursAt;

		// Token: 0x04002E5B RID: 11867
		private const int TimeoutCheckFrequency = 1000;

		// Token: 0x04002E5C RID: 11868
		private int timeoutChecksToSkip;
	}
}
